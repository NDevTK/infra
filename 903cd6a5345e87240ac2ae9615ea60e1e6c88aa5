{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e08d93ff_4379ccf1",
        "filename": "go/src/infra/tools/pkgbuild/pkg/spec/resolve_git.py",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2022-09-12T00:35:31Z",
      "side": 1,
      "message": "I think we should research this some more. As best I can find, https://peps.python.org/pep-0440/ still allows for the alpha/beta/rc suffixes, and I couldn\u0027t find something that supersedes this.",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b926596_625fb472",
        "filename": "go/src/infra/tools/pkgbuild/pkg/spec/resolve_git.py",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2022-09-12T02:59:27Z",
      "side": 1,
      "message": "But we don\u0027t need to use these releases, no? If we treat them as invalid they can be filtered out from the versions.",
      "parentUuid": "e08d93ff_4379ccf1",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "622bcf9c_a390733e",
        "filename": "go/src/infra/tools/pkgbuild/pkg/spec/resolve_git.py",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2022-09-12T05:07:02Z",
      "side": 1,
      "message": "We might, we have had requests for example to make preleases of git available.\n\nI guess what I\u0027m saying is that I don\u0027t quite understand the \u0027packaging\u0027 module\u0027s stance that these versions are invalid (i.e. legacy), if they comply with the relevant PEP. Is there a document somewhere describing the situation?",
      "parentUuid": "5b926596_625fb472",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dde432c_fbbc75a1",
        "filename": "go/src/infra/tools/pkgbuild/pkg/spec/resolve_git.py",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2022-09-12T05:42:04Z",
      "side": 1,
      "message": "I misread the comments in the code. The difference is LegacyVersion support versions before PEP440. Although they do exist in the cpython code base, we don\u0027t use them anyway and any furture versions will comply with PEP440. From https://github.com/pypa/pip/blob/main/src/pip/_vendor/packaging/version.py a0 a1 suffixes are supported by the new packaging.version.Version (and I have verified that). Revert this change.",
      "parentUuid": "622bcf9c_a390733e",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbbc3f23_c7408f4f",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2022-09-12T00:35:31Z",
      "side": 1,
      "message": "I\u0027d suggest clearer logging, maybe \"copied source from cache\"",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b06069a2_66e1911e",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2022-09-12T02:59:27Z",
      "side": 1,
      "message": "Updated. It can also be prebuilt packages.",
      "parentUuid": "cbbc3f23_c7408f4f",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92a0f9cb_79879af6",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2022-09-12T05:07:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b06069a2_66e1911e",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd206cd_89b56d69",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2022-09-12T00:35:31Z",
      "side": 1,
      "message": "I think we will need to support having some kind of override for the top-level package location. See the package_prefix and source_cache_prefix properties in the current recipe. (in addition, we\u0027ll likely want to preserve the current notion of experimental mode)",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d5d67f9_17dee1bc",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2022-09-12T02:59:27Z",
      "side": 1,
      "message": "Added an optional config for SpecLoader for these prefixes. Also my thought is that we can switch to experimental mode by changing the top level config, WDYT?",
      "parentUuid": "cbd206cd_89b56d69",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53c30ceb_b4815dec",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2022-09-12T05:07:02Z",
      "side": 1,
      "message": "Looks good re: SpecLoader config.\n\nI guess maybe we will need to wait and see whether we need to add a separate notion of experimental mode. As it is in the current recipe, the recipe engine sets experimental mode where appropriate and this auto-prepends the experimental package prefix, which is nice.",
      "parentUuid": "5d5d67f9_17dee1bc",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc2bd691_29022572",
        "filename": "go/src/infra/tools/pkgbuild/pkg/storage/cipd.go",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1378662
      },
      "writtenOn": "2022-09-12T05:42:04Z",
      "side": 1,
      "message": "It will be implemented by changing the SpecLoader config. I\u0027m working on another CL which cleanup the main implementation to provide some usable options (including experimental mode).",
      "parentUuid": "53c30ceb_b4815dec",
      "revId": "903cd6a5345e87240ac2ae9615ea60e1e6c88aa5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}