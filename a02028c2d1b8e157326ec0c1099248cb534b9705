{
  "comments": [
    {
      "key": {
        "uuid": "a5d84a6b_57c90dac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-02-02T19:58:30Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 12
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ec903c_2ec691d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5d84a6b_57c90dac",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41120e67_b1980f1f",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-02-02T19:57:59Z",
      "side": 1,
      "message": "should this be scoped to a project? Otherwise builds in one project can \"inject\" themselves into build sets in another project.",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 182,
        "endChar": 43
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd6e4be0_7a42f0f3",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-02-02T20:01:54Z",
      "side": 1,
      "message": "buildset is effectively codereview URL, so in practice I don\u0027t think this will ever be the case.\n\nThat said, how is scoping to project going to help during search operation? AFAIU ATM search for buildset is a special op which disregards projects and filters results at the end based on what user has READER acls for. Am I confusing things?",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d56380d_ca19abc0",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-02-02T20:07:22Z",
      "side": 1,
      "message": "I\u0027m thinking of buildbucket as a multitenant service, and global BuildSet index breaks isolation. But if it\u0027s already the case with other search queries, then it\u0027s fine (assuming READER ACL post-filtering still applies everywhere).",
      "parentUuid": "bd6e4be0_7a42f0f3",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90ab4533_2c257b04",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "today search by buildset returns builds from different projects, as intended to, as long as the requester has permissions. \nExample: googlers can see builds from an internal project on public chromium CLs, the same CLs that have builds from the chromium project.\n\nStill, to make ACL checks faster, I can store (bucket, build_id) tuples instead of build_ids, so that I don\u0027t fetch builds that the requester won\u0027t see anyway. Did that, PTAL",
      "parentUuid": "4d56380d_ca19abc0",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffb49cb1_a7003962",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-02-02T19:58:30Z",
      "side": 1,
      "message": "pedantic myself wanted to point out that this is totally correct use of superset. Awesome!",
      "range": {
        "startLine": 186,
        "startChar": 20,
        "endLine": 186,
        "endChar": 28
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45576bad_0ae9a056",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": ":)",
      "parentUuid": "ffb49cb1_a7003962",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71008283_7f4ec6d2",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-02-02T19:57:59Z",
      "side": 1,
      "message": "FWIW, it is more efficient (both in time and space) to do packing yourself in this case, and store the field as Bytes.\n\nBut it makes sense only if number of items there is \u003e100.\n\nSomewhat related data structure: https://chrome-internal.googlesource.com/infra/infra_internal/+/master/appengine/chromecompute/cache.py#150",
      "range": {
        "startLine": 192,
        "startChar": 34,
        "endLine": 192,
        "endChar": 62
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f743805_890e27e9",
        "filename": "appengine/cr-buildbucket/model.py",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "typical use case is \u003c100\nwe can \"version\" field to BuildSet if we want to change index format\n\nNow I store not only build ids",
      "parentUuid": "71008283_7f4ec6d2",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "762e5c4f_107286f0",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-02-02T19:57:59Z",
      "side": 1,
      "message": "is this used?",
      "range": {
        "startLine": 5,
        "startChar": 7,
        "endLine": 5,
        "endChar": 13
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d39f58b_65b3af4f",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-02-02T19:58:30Z",
      "side": 1,
      "message": "were you bisecting tags? :) i think it\u0027s unused now.",
      "range": {
        "startLine": 5,
        "startChar": 7,
        "endLine": 5,
        "endChar": 13
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "322dd830_f7c21646",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "I was going to using bisect to do a sorted insert of a new build, but then realized that most of the time it will pushed to the beginning",
      "parentUuid": "8d39f58b_65b3af4f",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b46cb25a_04601d69",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-02-02T19:58:30Z",
      "side": 1,
      "message": "unused?",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 19
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d7368f7_b14fa3f0",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "oops, thanks. Using it now in validate_tags",
      "parentUuid": "b46cb25a_04601d69",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "270235e3_328c0433",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 202,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-02-02T19:57:59Z",
      "side": 1,
      "message": "nit: it may be future-friendly to include \u0027buildset:\u0027 prefix in the key too. That way we later can add some other kind of consistent index.",
      "range": {
        "startLine": 202,
        "startChar": 21,
        "endLine": 202,
        "endChar": 41
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1804e2f3_5ee6c5ec",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 202,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "ugh, I just recalled that that\u0027s what discussed with dnj@ 2mo ago. I\u0027ve generalized the index model.",
      "parentUuid": "270235e3_328c0433",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3542731d_0ffefa88",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 919,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-02-02T19:57:59Z",
      "side": 1,
      "message": "this will do unnecessary datastore op (inserting empty entity)",
      "range": {
        "startLine": 919,
        "startChar": 26,
        "endLine": 919,
        "endChar": 39
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0645cf49_be21c942",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 919,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "indeed, thanks",
      "parentUuid": "3542731d_0ffefa88",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d94ce6c_b95eca11",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 922,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-02-02T19:58:30Z",
      "side": 1,
      "message": "$0.01: since the sorted property is maintained by you, sort in reverse order (DESC) s.t., you\u0027d be adding at the end.\nOf course, it\u0027s still O(n) in eitter case, and given that unused constant of 1024 above, how about just this:\n\nentity.build_ids \u003d sorted([build_id] + entity.build_ids) \n\n# or sorted(entity.build_ids + [build_id]) if you sort in reverse.",
      "range": {
        "startLine": 920,
        "startChar": 1,
        "endLine": 922,
        "endChar": 38
      },
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30aa6566_f6bb2653",
        "filename": "appengine/cr-buildbucket/service.py",
        "patchSetId": 3
      },
      "lineNbr": 922,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2017-02-05T18:29:26Z",
      "side": 1,
      "message": "I\u0027ve considered sorting by desc, but then I realized that search results must be in ascending order and this penny-optimization does not matter here because we gonna make an O(N) operation when saving entries anyway.\n\nBut now that I think of this, the search results order does not matter because I load this entity entirely anyway, so I\u0027ve sorted by descending",
      "parentUuid": "3d94ce6c_b95eca11",
      "revId": "a02028c2d1b8e157326ec0c1099248cb534b9705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}