{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47a98337_a77d2ef2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1516607
      },
      "writtenOn": "2024-03-08T00:29:13Z",
      "side": 1,
      "message": "lgtm but i\u0027m not as familiar with debug symbols. is there another debug symbols SME who could also review?",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ce83bec_1d5b673b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1267126
      },
      "writtenOn": "2024-03-08T00:34:55Z",
      "side": 1,
      "message": "Sure, let\u0027s add @iby@chromium.org",
      "parentUuid": "47a98337_a77d2ef2",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f6014de_22495111",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300299
      },
      "writtenOn": "2024-03-08T04:20:30Z",
      "side": 1,
      "message": "Honestly, I\u0027m a bit concerned about this. We don\u0027t want builds going out with bad symbols. We\u0027ve been generally adding more errors to the symbol creation \u0026 upload process, not less. We recently (late 2022) had an OMG because symbol creation started failing and we didn\u0027t notice.\n\nWhat I\u0027m saying is, we\u0027d rather fail the build than ship a build that didn\u0027t upload symbols.\n\nWhy is this only happening occasionally? That sounds like a problem with the builder being flaky rather than an expected error.\n\nIf there\u0027s a specific list of files that never create debug files, can we just allowlist those?",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "415ae0ea_10a8ce14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1267126
      },
      "writtenOn": "2024-03-08T04:45:43Z",
      "side": 1,
      "message": "This happens because files like libEGL_mesa.so don\u0027t have a build ID (known issue per b/319294855). We already ignore uploading those splitdebug files because we can\u0027t figure out what the debugID should be. When that happens we print out a warning and skip extracting the file from the debug.tgz file. By the time we get to `generateSplitdebugConfigs()` we only have the breakpad file, and not the splitdebug file. \n\nIt is correct to skip in this case as well, because we only have the breakpad file to upload something.",
      "parentUuid": "3f6014de_22495111",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed6f13e_e835526b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1267126
      },
      "writtenOn": "2024-03-08T05:35:55Z",
      "side": 1,
      "message": "I recognize your concern. The problem is that we\u0027re joining two different tarballs based on the build ID and the file name. It would be better to go to the source, and when we generate the debug_breakpad.tar.xz file we generate another tarball that has both the breakpad symbols (the .sym files) and the splitdebug files (the .debug files) right next to each other. A significant chunk of this code could be deleted (the elf parsing logic for example!) because we could know that the .debug file was run through `dump_syms` to generate the .sym file. If we had that we can simply iterate through every directory (e.g. `zip/28BCCBD0FFEA923100000000000000000/`) and upload the `zip.sym` file and the `zip.debug` file with the appropriate upload_type.\n\nThis CL is needed to avoid errors while uploading symbols if the splitdebug file is missing because the joining logic is faulty, because the build ID was missing _and_ the file name was different, or it was a duplicate name so we couldn\u0027t be sure. I\u0027d like to take up generating the other tarball, but I think that\u0027s in chromite code?",
      "parentUuid": "415ae0ea_10a8ce14",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a7f757_0c532b8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300299
      },
      "writtenOn": "2024-03-08T19:12:56Z",
      "side": 1,
      "message": "I understand that libEGL_mesa.so doesn\u0027t have a build ID and that\u0027s a known issue. That\u0027s fine and we should make sure builds keep working in the meantime while b/319294855 is being fixed. I\u0027m just wondering if we\u0027re opening ourselves up to more errors creeping in over time.\n\nThat is, should the code be something more like \n```\n  allowlist :\u003d []string{\"libEGL_mesa.so\"}\n...\n\n  if _, err :\u003d os.Stat(debugFile); errors.Is(err, os.ErrNotExist) {\n    if !slices.Contains(allowlist, debugFile) {\n      return nil, errors.Format(\"Could not find expected debug file %s\", debugFile)\n    }\n    // explanation\n    continue\n  }\n```\n\n?\n\nThat way new errors can\u0027t creep in unexpectedly. We won\u0027t, say, find out that .debug generation failed completely and we didn\u0027t upload any .debug files.  \n\n\u003e It would be better to go to the source, and when we generate the debug_breakpad.tar.xz file we generate another tarball that has both the breakpad symbols (the .sym files) and the splitdebug files (the .debug files) right next to each other. \n\nI have no objections, but I agree we need to get the builds running again in the meantime.",
      "parentUuid": "4ed6f13e_e835526b",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab13b84d_08250aad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1267126
      },
      "writtenOn": "2024-03-08T20:07:38Z",
      "side": 1,
      "message": "\u003e We won\u0027t, say, find out that .debug generation failed completely and we didn\u0027t upload any .debug files.\n\nThis would imply that breakpad files weren\u0027t generated either because breakpad files are generated from the .debug files. If we want to catch that problem we should have the breakpad generation code error out if it can\u0027t generate any breakpad files from a build.\n\n----\n\u003e I\u0027m just wondering if we\u0027re opening ourselves up to more errors creeping in over time.\n\nIt\u0027s not a problem to be missing the build ID in the binary, i.e. breakpad symbols can still be generated and crash/ will still be able to find the splitdebug symbols because the debug ID is generated by `dump_syms` in all cases. The error that can creep in is binaries not having a build ID and having a different file name than what `dump_syms` generated. In that case, we don\u0027t upload the splitdebug file, but we still upload the breakpad file. \n\nWorst case scenario is all binaries have duplicate names and missing build IDs. In that case we won\u0027t upload any splitdebug symbols. This isn\u0027t the case though, the large majority of binaries have a build ID and so we can match them to the breakpad symbols that way. If we suddenly lost the build ID linker commandline, we would still have largely unique binary names so we could match that way.\n\nIt\u0027s really a self-inflicted problem in this code because of how we\u0027re joining the two tarballs. Binaries can have the same name because the path is different (e.g. lib vs. lib64). That can\u0027t be changed, and having some allowlist with just the basename of a binary could let those binaries be missing when we only care about one specific path (the allowlist needs to have full paths). If we want to find missing build IDs, I\u0027d rather we add some allowlist of binaries that can be missing a build ID when we generate breakpad symbols and then fail if the binary isn\u0027t in the list so that we can catch problems upon introduction.\n\nOr we can decide that build IDs don\u0027t need to be in all binaries and not have the allowlist. It certainly seems like `dump_syms` doesn\u0027t care about build IDs because it generates a debug ID if the build ID is missing. I think on Linux we\u0027d prefer there be build IDs though because that\u0027s how things like gdb lookup symbols from symbol servers.\n\nTL;DR: Let\u0027s fix the problem at the source instead of trying to catch these sorts of problems when we\u0027re uploading the symbols. Generate one tarball with both breakpad and splitdebug files and upload them all together. The quality of the symbols can be checked in one place, when we generate breakpad symbols.\n\n---\n\u003e I have no objections, but I agree we need to get the builds running again in the meantime.\n\nOk, marking resolved.",
      "parentUuid": "43a7f757_0c532b8e",
      "revId": "6466115050906bac9b6529fbf800ac7c06305501",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}