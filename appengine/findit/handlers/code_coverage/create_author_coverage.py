# Copyright 2022 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Creates author wise code coverage reports. Includes data only for
# lines of code which are modified in last N weeks, where N is controlled
# by recipe code. It works by joining latest code coverage data with
# blamelist data generated by recipe code.

import datetime

from google.appengine.api import taskqueue

from common import constants
from gae_libs.handlers.base_handler import BaseHandler, Permission
from services.code_coverage import author_coverage


class CreateAuthorCoverageMetricsCron(BaseHandler):
  PERMISSION_LEVEL = Permission.APP_SELF

  def _GetSourceBuilders(self):
    """Returns CI builders for which coverage metrics are to be generated."""
    return ['android-code-coverage', 'android-code-coverage_unit']

  def HandleGet(self):
    for builder in self._GetSourceBuilders():
      url = '/coverage/task/author-coverage?builder=%s' % builder
      taskqueue.add(
          method='GET',
          name='%s-%s' %
          (builder, datetime.datetime.now().strftime('%d%m%Y-%H%M%S')),
          queue_name=constants.EXPERIMENTAL_COVERAGE_QUEUE,
          target=constants.CODE_COVERAGE_EXPERIMENTAL_COVERAGE_WORKER,
          url=url)
    return {'return_code': 200}


class CreateAuthorCoverageMetrics(BaseHandler):
  PERMISSION_LEVEL = Permission.APP_SELF

  def HandleGet(self):
    builder = self.request.get('builder')
    author_coverage.CreateAuthorCoverage(builder)
    return {'return_code': 200}
