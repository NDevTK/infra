// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// This file defines protobufs for projects and their resources.

syntax = "proto3";

package monorail.v1;

import "google/protobuf/timestamp.proto";
import "google_proto/google/api/field_behavior.proto";
import "google_proto/google/api/resource.proto";
import "api/v1/api_proto/issue_objects.proto";

// The top level organization of issues in Monorail.
//
// See monorail/doc/userguide/concepts.md#Projects-and-roles.
// and monorail/doc/userguide/project-owners.md#why-does-monorail-have-projects
// Next available tag: 2
message Project {
  option (google.api.resource) = {
    type: "api.crbug.com/Project"
    pattern: "projects/{project}"
  };

  // Resource name of the project.
  string name = 1;
}

// Potential steps along the development process that an issue can be in.
//
// See monorail/doc/userguide/project-owners.md#How-to-configure-statuses
// (-- aip.dev/not-precedent: "Status" should be reserved for HTTP/gRPC codes
//     per aip.dev/216. Monorail's Status  preceded the AIP standards, and is
//     used extensively throughout the system.)
// Next available tag: 7
message StatusDef {
  option (google.api.resource) = {
    type: "api.crbug.com/StatusDef"
    pattern: "projects/{project}/statusDefs/{statusDef}"
  };

  // Type of this status.
  // Next available tag: 3
  enum StatusDefType {
    // Default enum value. This value is unused.
    STATUS_DEF_TYPE_UNSPECIFIED = 0;
    // This status means issue is open.
    OPEN = 1;
    // This status means issue is closed.
    CLOSED = 2;
  }

  // State of this status.
  // Next available tag: 3
  enum StatusDefState {
    // Default value. This value is unused.
    STATUS_DEF_STATE_UNSPECIFIED = 0;
    // This status is deprecated
    DEPRECATED = 1;
    // This status is not deprecated
    ACTIVE = 2;
  }

  // Resource name of the status.
  string name = 1;
  // String value of the status.
  string value = 2;
  // Type of this status.
  StatusDefType type = 3;
  // Sorting rank of this status. If we sort issues by status
  // this rank determines the sort order rather than status value.
  uint32 rank = 4;
  // Brief explanation of this status.
  string docstring = 5;
  // State of this status.
  StatusDefState state = 6;
}

// Well-known labels that can be applied to issues within the project.
//
// See monorail/doc/userguide/concepts.md#issue-fields-and-labels.
// Next available tag: 5
// Labels defined in this project.
message LabelDef {

  option (google.api.resource) = {
    type: "api.crbug.com/LabelDef"
    pattern: "projects/{project}/labelDefs/{labelDef}"
  };

  // State of this label.
  // Next available tag: 3
  enum LabelDefState {
    // Default enum value. This value is unused.
    LABEL_DEF_STATE_UNSPECIFIED = 0;
    // This label is deprecated
    DEPRECATED = 1;
    // This label is not deprecated
    ACTIVE = 2;
  }

  // Resource name of the label.
  string name = 1;
  // String value of the label.
  string value = 2;
  // Brief explanation of this label.
  string docstring = 3;
  // State of this label.
  LabelDefState state = 4;
}

// Custom fields defined for the project.
//
// See monorail/doc/userguide/concepts.md#issue-fields-and-labels.
// Next available tag: 2
message FieldDef {
  option (google.api.resource) = {
    type: "api.crbug.com/FieldDef"
    pattern: "projects/{project}/fieldDefs/{fieldDef}"
  };

  // Resource name of the field.
  string name = 1;
}

// A high level definition of the part of the software affected by an issue.
//
// See monorail/doc/userguide/project-owners.md#how-to-configure-components.
// Next available tag: 12
message ComponentDef {
  option (google.api.resource) = {
    type: "api.crbug.com/ComponentDef"
    pattern: "projects/{project}/componentDefs/{componentDef}"
  };

  // The current state of the component definition.
  // Next available tag: 3
  enum ComponentDefState {
    // Default enum value. This value is unused.
    COMPONENT_DEF_STATE_UNSPECIFIED = 0;
    // This component is deprecated
    DEPRECATED = 1;
    // This component is not deprecated
    ACTIVE = 2;
  }

  // Resource name of the component, aka identifier.
  string name = 1;
  // String value of the component, ie 'Tools>Stability' or 'Blink'.
  string value = 2;
  // Brief explanation of this component.
  string docstring = 3;
  // Administrators of this component.
  repeated string admins = 4 [
      (google.api.resource_reference) = { type: "api.crbug.com/User" }
  ];
  // Auto cc'ed users of this component.
  repeated string ccs = 5 [
      (google.api.resource_reference) = { type: "api.crbug.com/User" }
  ];
  // State of this component.
  ComponentDefState state = 6;
  // The user that created this component.
  string creator = 7 [
      (google.api.resource_reference) = { type: "api.crbug.com/User" },
      (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // The user that last modified this component.
  string modifier = 8 [
      (google.api.resource_reference) = { type: "api.crbug.com/User" },
      (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // The time this component was created.
  google.protobuf.Timestamp create_time = 9 [
      (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // The time this component was last modified.
  google.protobuf.Timestamp modify_time = 10 [
      (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // Labels that auto-apply to issues in this component.
  repeated string labels = 11;
}

// Defines approvals that issues within the project may need.
//
// TODO(monorail:7193): Add documentation for approvals.
// Next available tag: 2
message ApprovalDef {
  option (google.api.resource) = {
    type: "api.crbug.com/ApprovalDef"
    pattern: "projects/{project}/approvalDefs/{approvalDef}"
  };

  // Resource name of the approval.
  string name = 1;
}


// Defines saved queries that belong to a project
//
// Next available tag: 4
message ProjectSavedQuery {
  option (google.api.resource) = {
    type: "api.crbug.com/ProjectSavedQuery"
    pattern: "projects/{project}/savedQueries/{savedQuery}"
  };

  // Resource name of this saved query.
  string name = 1;
  // Display name of this saved query, ie 'open issues'.
  string display_name = 2;
  // Search term of this saved query.
  string query = 3;
}


// Defines a template for filling issues.
// Next available tag: 8
message IssueTemplate {
  option (google.api.resource) = {
    type: "api.crbug.com/Template"
    pattern: "projects/{project}/templates/{template_name}"
  };
  // Resource name of the template.
  string name = 1;
  // Canonical Issue for this template
  Issue issue = 2;
  // Boolean indicating subsequent issue creation must have delta in summary
  bool summary_must_be_edited = 3;
  // Visibility permission of template
  // Next available tag: 3
  enum TemplatePrivacy {
    // This value is unused.
    TEMPLATE_PRIVACY_UNSPECIFIED = 0;
    // Owner project members may view this template.
    MEMBERS_ONLY = 1;
    // Anyone on the web can view this template.
    PUBLIC = 2;
  }
  TemplatePrivacy template_privacy = 4;
  // Indicator of who if anyone should be the default owner of the issue
  // created with this template.
  // Next available tag: 2
  enum DefaultOwner {
    // There is no default owner.
    // This value is used if the default owner is omitted.
    DEFAULT_OWNER_UNSPECIFIED = 0;
    // The owner should default to the Issue reporter if the reporter is a
    // member of the project.
    PROJECT_MEMBER_REPORTER = 1;
  }
  DefaultOwner default_owner= 5;
  // Boolean indicating whether issue must have a component.
  bool component_required = 6;
  // Names of Users who can administer this template.
  repeated string admins = 7 [
      (google.api.resource_reference) = { type: "api.crbug.com/User" }];
}