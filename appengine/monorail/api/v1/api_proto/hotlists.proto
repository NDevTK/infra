// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

syntax = "proto3";

package monorail.v1;

import "api/v1/api_proto/feature_objects.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google_proto/google/api/field_behavior.proto";
import "google_proto/google/api/resource.proto";
import "google_proto/google/api/annotations.proto";


// Hotlists service includes all methods needed for managing Hotlists.
service Hotlists {
  // Returns the requested Hotlist.
  //
  // Raises:
  //   NOT_FOUND if the requested hotlist is not found.
  //   PERMISSION_DENIED if the requester is now allowed to view the hotlist.
  //   INVALID_ARGUMENT if the given resource name is not valid.
  rpc GetHotlist (GetHotlistRequest) returns (Hotlist) {
    option (google.api.http) = {
      post: "/prpc/monorail.v1.Hotlists/GetHotlist"
      body: "*"
    };
  }
  // Updates a hotlist.
  //
  // TODO(crbug/monorail/6988): Document possible errors when implemented.
  rpc UpdateHotlist (UpdateHotlistRequest) returns (Hotlist) {
    option (google.api.http) = {
      post: "/prpc/monorail.v1.Hotlists/UpdateHotlist"
      body: "*"
    };
  }
  // Returns a list of all HotlistItems in the hotlist.
  //
  // Raises:
  //   NOT_FOUND if the parent hotlist is not found.
  //   PERMISSION_DENIED if the requester is not allowed to view the hotlist.
  //   INVALID_ARGUMENT if the page_token or given hotlist resource name is not
  //   valid.
  rpc ListHotlistItems (ListHotlistItemsRequest) returns (ListHotlistItemsResponse) {
    option (google.api.http) = {
      post: "/prpc/monorail.v1.Hotlists/ListHotlistItems"
      body: "*"
    };
  }
  // Reranks a hotlist's items.
  //
  // Raises:
  //   NOT_FOUND if the hotlist to rerank is not found.
  //   PERMISSION_DENIED if the requester is not allowed to rerank the hotlist.
  //   INVALID_ARGUMENT if the `target_position` is invalid or `hotlist_items`
  //   is empty or contains items not in the Hotlist.
  rpc RerankHotlistItems (RerankHotlistItemsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/prpc/monorail.v1.Hotlists/RerankHotlistItems"
      body: "*"
    };
  }
}


// Request message for GetHotlist method.
// Next available tag: 2
message GetHotlistRequest {
  // The name of the hotlist to retrieve.
  string name = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {type: "api.crbug.com/Hotlist"}];
}


// Request message for UpdateHotlist method.
// Next available tag: 2
message UpdateHotlistRequest {
  // The hotlist's `name` field is used to identify the hotlist to be updated.
  Hotlist hotlist = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {type: "api.crbug.com/Hotlist"} ];
  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [ (google.api.field_behavior) = REQUIRED ];
}


// Request message for ListHotlistItems method.
// Next available tag: 5
message ListHotlistItemsRequest {
  // The parent hotlist, which owns this collection of items.
  string parent = 1 [
      (google.api.field_behavior) = REQUIRED,
      (google.api.resource_reference) = {child_type: "api.crbug.com/HotlistItem"} ];
  // The maximum number of items to return. The service may return fewer than
  // this value.
  // If unspecified, at most 1000 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;
  // The string of comma separated field names used to order the items.
  // Adding '-' before a field, reverses the sort order.
  // E.g. 'stars,-status' sorts the items by number of stars low to high, then
  // status high to low.
  // If unspecified, items will be ordered by their rank in the parent.
  string order_by = 3;
  // A page token, received from a previous `ListHotlistItems` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListHotlistItems` must
  // match the call that provided the page token.
  string page_token = 4;
}


// Response to ListHotlistItems call.
// Next available tag: 3
message ListHotlistItemsResponse {
  // The items from the specified hotlist.
  repeated HotlistItem items = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}


// The request used to rerank a Hotlist.
// Next available tag: 4
message RerankHotlistItemsRequest {
  // Resource name of the Hotlist to rerank.
  string name = 1 [
      (google.api.resource_reference) = {type: "api.crbug.com/Hotlist"},
      (google.api.field_behavior) = REQUIRED ];
  // HotlistItems to be moved. The order of `hotlist_items` will
  // determine the order of these items after they have been moved.
  // E.g. With items [a, b, c, d, e], moving [d, c] to `target_position` 3, will
  // result in items [a, b, e, d, c].
  repeated string hotlist_items = 2 [
      (google.api.resource_reference) = {type: "api.crbug.com/HotlistItem"},
      (google.api.field_behavior) = REQUIRED ];
  // Target starting position of the moved items.
  // `target_position` must be between 0 and (# hotlist items - # items being moved).
  uint32 target_position = 3 [ (google.api.field_behavior) = REQUIRED ];
}