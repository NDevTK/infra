[define title][issue.local_id][end]
[define category_css]css/ph_detail.css[end]
[include "../framework/master-header.ezt" "hidetabs"]

[define any_visible_deleted]false[end]
[for comments]
 [if-any comments.can_delete_bool]
  [if-any comments.is_deleted_bool]
   [define any_visible_deleted]true[end]
  [end]
 [end]
[end]

[if-any page_perms.EditIssue page_perms.EditIssueSummary page_perms.EditIssueStatus page_perms.EditIssueOwner page_perms.EditIssueCc]
  [define offer_make_changes]yes[end]
[else]
  [define offer_make_changes][end]
[end]

<div id="color_control" class="[if-any issue.is_open][else]closed_colors[end] [if-any code_font]codefont[end]">

<table width="100%" cellpadding="0" cellspacing="0" border="0" class="issuepage" id="meta-container">

<tbody class="collapse"> [# collapse/expand controls undelete-able comments]
 <tr>
  <td class="vt" style="width:12em; padding:0" rowspan="2" id="issuemeta">
   <div id="meta-float">

   <div class="issuemetaheader" style="text-align: center">
     [define user_can_star]false[end]
     [if-any page_perms.SetStar]
      [if-any read_only][else]
       [define user_can_star]true[end]
       <a class="star" id="star"
        style="color:[if-any starred]cornflowerblue[else]gray[end]"
        title="[if-any starred]Un-s[else]S[end]tar this issue">
       [if-any starred]&#9733;[else]&#9734;[end]
       </a>
      [end]
     [end]
    Starred by [issue.star_count]
    [is issue.star_count "1"] user [else] users [end]
   </div> [# end issuemetaheader]

   [if-any noisy]
    <br>
    Comments by non-members will not trigger notification emails to users who starred this issue.
   [end]
   <div id="issue_meta_details">
   [include "issue-meta-part.ezt" "show make changes below"]

     <div id="toggle-show-deleted-comments"
          class="[is any_visible_deleted "true"][else]hidden[end]">
      <br><br>
      <div style="text-align:right; margin-right:.3em; font-size:90%">
       <a class="ifCollapse toggleCollapse" href="#"
          style="white-space:nowrap">Show deleted comments</a>
       <a class="ifExpand toggleCollapse" href="#"
          style="white-space:nowrap">Hide deleted comments</a>
      </div>
     </div>

   </div>
  </div> [# end meta-float]

  </td>
  <td width="90%" class="vt" id="summary-float">
   <div class="issueheader">
    [if-any issue.flagged_spam_bool]
     <div id="spam_banner">You have reported this issue as spam. To undo this, click the flag again.</div>
    [else][if-any issue.is_spam_bool]
      <div id="spam_banner">
        This issue has been classified as spam.
        Please <a
        href="/p/monorail/issues/entry?template=spam+classification&owner=jeffcarp@chromium.org&labels=proj-[projectname],spam-fp&comment=Please check [currentPageURLEncoded]"
        >report incorrect spam classification</a>.
      </div>
    [end][end]

   <div id="flipper-box">
    <div>
     <mr-flipper />
    </div>
   </div>

   <div>
    <mr-code-font-toggle
      id="code-font-toggle"
      title="code font"
      style="float:right; margin: 3px;"
      [if-any code_font]initial-value="true"[end]
      [if-any logged_in_user]user-display-name="[logged_in_user.email]"[end]
    ></mr-code-font-toggle>
    <a href="[issue.crbug_url]" class="material-icons" title="crbug link">link</a>
    <h1 class="not_styled_as_heading"><span class="h3" style="padding:4px">
      Issue [issue.local_id]:
      [issue.summary]
    </span></h1>
    <div style="padding:2px 4px">
      Reported by
      [include "../framework/user-link.ezt" first_description.creator],
      <span class="date" title="[first_description.date_tooltip] UTC">
        [first_description.date_string]
        [if-any first_description.date_relative]([first_description.date_relative])[end]
      </span>
      [if-any first_description.creator_role]<span class="role_label">Project Member</span>[end]
      [# Note: initial issue description cannot have come via email]
      [if-any page_perms.EditIssue]
      <div style="float:right; margin-right:.3em; text-align:right" class="ichcommands">
        <a href="#" id="edit-desc-btn">Edit description</a>
      </div>
      [end][# page_perms.EditIssue]
    </div>
   </div>
  </td>
 </tr>


 <tr>
  <td class="vt" width="100%" height="100%" id="cursorarea" colspan="2">
    <h3 class="visually_hidden">Issue description</h3>
    [include "issue-comments-part.ezt" "show-delete-comment-link"]
  </td>
 </tr>

[if-any read_only][else]
 [if-any logged_in_user][else]
  <tr>
   <td></td>
   <td class="vt" style="padding:1em">
     <span class="indicator">&#9658;</span>
     <h2 class="not_styled_as_heading"><a href="[login_url]" >Sign in</a> to add a comment</h2>
   </td>
  </tr>
 [end]
[end]
</tbody>
</table>
<br>

[include "../framework/footer-script.ezt"]

[define user_can_comment]false[end]
[if-any read_only][else]
 [if-any page_perms.AddIssueComment]
  [include "issue-update-form.ezt"]
  [define user_can_comment]true[end]
 [end]
[end]


</div> [# end color_control]

<div id="helparea"></div>

<script type="text/javascript" nonce="[nonce]">
runOnLoad(function() {
  _fetchOptions('[projectname]', CS_env.token,
    [project.cached_content_timestamp]);
  _fetchUserProjects(false);

  _onload();

  // TODO(ehmaldonado): Remove once we use polymer to display comments and issue
  // description.
  $('code-font-toggle').addEventListener('font-toggle', function(e) {
    const checked = e.detail.checked;
    const ancestor = $('color_control');
    if (ancestor) {
      if (checked) {
        ancestor.classList.add('codefont');
      } else {
        ancestor.classList.remove('codefont');
      }
    }
  });

  function showDescription(n, changeSelect) {
    for (var i = 1; i <= descCt; i++)
      $('d' + i).style.display = 'none';
    if (changeSelect)
      $('description-select').selectedIndex = n - 1;
    if (n) {
      $('d' + n).style.display = '';
      getParams.desc = n;
      if (window.history && history.replaceState)
        history.replaceState(
            '', '', makeQueryString(getParams) + window.location.hash);
    }
  }

  [if-any multiple_descriptions]
  var descCt = parseInt($('description-select').getAttribute('data-ct'));

  var getParams = function() {
    var params = {};
    var query = window.location.search,
        re = /[?&]?([^=]+)=([^&]*)/g,
        tokens;
    while (tokens = re.exec(query))
      params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
    return params;
  }();

  for (var i = 1; i <= descCt; i++) {
    if ($('desc-link' + i)) {
      $('desc-link' + i).addEventListener('click', function(event) {
        var linkClicked = this.getAttribute('data-num');
        showDescription(linkClicked, true);
      });
    }
  }

  if (getParams.hasOwnProperty('desc')) {
    showDescription(getParams.desc, true);
  } else {
    showDescription(descCt, true);
  }

  function makeQueryString (params) {
    return '?' + Object.keys(params).map(function (key) {
      return encodeURIComponent(key) + '=' + encodeURIComponent(params[[]key]);
    }).join('&');
  }

  $('description-select').addEventListener('change', function(event) {
    showDescription(this.value);
  });
  [else]
  var descCt = 1;
  [end][# multiple_descriptions]

  [if-any page_perms.EditIssue]
  $('edit-desc-btn').addEventListener('click', function (event) {
    showDescription(0); // hide all descriptions
    $('edit-desc-btn').style.display = 'none';
    if ($('description-select'))
      $('description-select').style.display = 'none';
    $('desc_update_form').style.display = '';
  });
  [end][# page_perms.EditIssue]

  if ($("star"))
    $("star").addEventListener("click", function (event) {
       _TKR_toggleStar($("star"), "[projectname]", [issue.local_id], null, null);
       _TKR_syncStarIcons($("star"), "star2");
    });

  function markComment(sequenceNum, markedSpam, markedDeleted) {
    const commentElId = 'hc' + sequenceNum;

    const comment = $(commentElId);
    const controls = $(commentElId + '-controls');
    const deletedComment = $(commentElId + '-deleted');
    const deletedControls = $(commentElId + '-deleted-controls');
    const spamControls = $(commentElId + '-spam-controls');

    if (markedSpam || markedDeleted) {
      comment.classList.add('ifExpand');
      comment.classList.add('delcom');
      controls.classList.add('hidden');

      deletedComment.classList.remove('hidden');
      deletedComment.classList.add('ifCollapse');

      if (markedDeleted) {
        deletedControls.classList.remove('hidden');
      } else if (spamControls) {
        spamControls.classList.remove('hidden');
      }
    } else {
      comment.classList.remove('ifExpand');
      comment.classList.remove('delcom');
      controls.classList.remove('hidden');

      deletedComment.classList.add('hidden');
      deletedComment.classList.remove('ifCollapse');
      deletedControls.classList.add('hidden');
      if (spamControls) {
        spamControls.classList.add('hidden');
      }
    }

    if (document.getElementsByClassName('delcom').length) {
      $('toggle-show-deleted-comments').classList.remove('hidden');
    } else {
      $('toggle-show-deleted-comments').classList.add('hidden');
    }
  }

  const flagCommentElements = document.getElementsByClassName('flagComment');
  Array.from(flagCommentElements).forEach(el => {
    el.addEventListener('click', function(event) {
      const sequenceNum = event.target.dataset.sequenceNum;
      const markSpam = (event.target.dataset.markSpam === 'true');

      window.prpcClient.call('monorail.Issues', 'FlagComment', {
        issueRef: {
          projectName: window.CS_env.projectName,
          localId: event.target.dataset.localId,
        },
        sequenceNum: sequenceNum,
        flag: markSpam,
      });

      markComment(sequenceNum, markSpam, false);
    });
  });

  const delCommentElements = document.getElementsByClassName('delComment');
  Array.from(delCommentElements).forEach(el => {
    el.addEventListener('click', function(event) {
      const sequenceNum = event.target.dataset.sequenceNum;
      const markDeleted = (event.target.dataset.markDeleted === 'true');

      window.prpcClient.call('monorail.Issues', 'DeleteIssueComment', {
        issueRef: {
          projectName: window.CS_env.projectName,
          localId: event.target.dataset.localId,
        },
        sequenceNum: sequenceNum,
        delete: markDeleted,
      });

      markComment(sequenceNum, false, markDeleted);
      event.preventDefault();
    });
  });

  const delAttachmentElements =
      document.getElementsByClassName('delAttachment');
  Array.from(delAttachmentElements).forEach(el => {
    el.addEventListener('click', async function(event) {
      const localId = event.target.dataset.localId;
      const sequenceNum = event.target.dataset.sequenceNum;
      const attachmentId = event.target.dataset.attachmentId;
      const markDeleted = event.target.dataset.markDeleted === 'true';

      await window.prpcClient.call('monorail.Issues', 'DeleteAttachment', {
        issueRef: {
          projectName: window.CS_env.projectName,
          localId: localId,
        },
        sequenceNum: sequenceNum,
        attachmentId: attachmentId,
        delete: markDeleted,
      });

      const deletedAttachment = $(`attachment-${attachmentId}-deleted`);
      const undeletedAttachment = $(`attachment-${attachmentId}`);
      if (markDeleted) {
        deletedAttachment.classList.remove('hidden');
        undeletedAttachment.classList.add('hidden');
      } else {
        deletedAttachment.classList.add('hidden');
        undeletedAttachment.classList.remove('hidden');
        // If the attachment was deleted when we first loaded the page, we
        // didn't load the image/video preview, since it didn't exist.
        // Load it once the attachment has been undeleted.
        const attachmentImg = $(`attachment-${attachmentId}-img`);
        const attachmentVideo = $(`attachment-${attachmentId}-video`);
        if (attachmentImg && !attachmentImg.src) {
          attachmentImg.src = attachmentImg.dataset.src;
        }
        if (attachmentVideo && !attachmentVideo.src) {
          attachmentVideo.src = attachmentVideo.dataset.src;
        }
      }
    });
  });

  const updateForm = document.querySelector('form[id="issue_update_form"]');
  if (updateForm) {
    updateForm.addEventListener('submit', function () {
      if (typeof(ClientLogger) === "function") {
        let l = new ClientLogger("issues");
        l.logStart("issue-update", "computer-time");
      }
      TKR_initialFormValues = TKR_currentFormValues();
    });
  }

  window.onbeforeunload = function() {
    if (TKR_isDirty()) {
      // This message is ignored in recent versions of Chrome and Firefox.
      return "You have unsaved changes. Leave this page and discard them?";
    }
  };

});
</script>

<script type="text/javascript" defer src="/static/third_party/js/kibbles-1.3.3.comp.js" nonce="[nonce]"></script>
<script type="text/javascript" nonce="[nonce]">
runOnLoad(function() {
  // TODO(jeffcarp): Update prev/next URLs once flipper index has loaded.
  _setupKibblesOnDetailPage(
   `[project_home_url]/issues/detail/list${location.search}`,
   '[project_home_url]/issues/entry',
   `[project_home_url]/issues/detail/previous${location.search}`,
   `[project_home_url]/issues/detail/next${location.search}`,
   '[projectname]', [issue.local_id],
   [user_can_comment], [user_can_star]);
});
</script>

[include "../framework/master-footer.ezt"]

<script type="text/javascript" nonce="[nonce]">
runOnLoad(function() {
  // For issue create & update below, throw out values above 120 seconds.
  // Since the GAE timeout is 60 seconds and this encompasses 2 requests,
  // the maximum possible value is 120 seconds. This guards against stale
  // stored timing information from being picked up and skewing the
  // distribution.
  if (typeof(ClientLogger) === "function") {
    let cl = new ClientLogger("issues");
    if (cl.started("new-issue")) {
      cl.logEnd("new-issue", null, 120 * 1000);
    }
    if (cl.started("issue-search")) {
      cl.logEnd("issue-search");
    }
    if (cl.started("issue-update")) {
      cl.logEnd("issue-update", "computer-time", 120 * 1000);
    }
  }
});
</script>
