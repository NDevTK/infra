{
  "comments": [
    {
      "key": {
        "uuid": "2689f483_e41dc89f",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab.go",
        "patchSetId": 6
      },
      "lineNbr": 308,
      "author": {
        "id": 1002377
      },
      "writtenOn": "2019-09-20T23:52:08Z",
      "side": 1,
      "message": "A bit weirdly, this means FAILED gets promoted to NO_VERDICT if subsequent attempt was NO_VERDICT, which is a bit different from its behavior if test passed on retry.",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "845e4c25_a187b668",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab.go",
        "patchSetId": 6
      },
      "lineNbr": 308,
      "author": {
        "id": 1002639
      },
      "writtenOn": "2019-09-23T17:00:57Z",
      "side": 1,
      "message": "VERDICT_NO_VERDICT means *only* that the requested test was not applicable for the targeted DUT, so the task did nothing. Thus, the only way a test\u0027s attempts can go from FAILED -\u003e VERDICT_NO_VERDICT is that there was an infra failure in the first attempt (the test could not reasonably fail on the first attempt, then declare N/A on the next attempt).\n\nThus, it is OK to bubble up VERDICT_NO_VERDICT here (rather than adding another VERDICT_NO_VERDICT_ON_RETRY). Promoting it to PASSED_ON_RETRY would be simply wrong.",
      "parentUuid": "2689f483_e41dc89f",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa7677eb_8949c0b1",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab.go",
        "patchSetId": 6
      },
      "lineNbr": 763,
      "author": {
        "id": 1002377
      },
      "writtenOn": "2019-09-20T23:52:08Z",
      "side": 1,
      "message": "Followup to comment on test. I think this case should be folded into the above case. An individual task being PASSED_ON_RETRY doesn\u0027t mean the build as a whole is PASSED_ON_RETRY, it\u0027s simply PASSED.\n\nClients that care to surface PASSED_ON_RETRY tasks differently can findthem in the the response proto anyway.",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b816741f_3554c3ec",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab.go",
        "patchSetId": 6
      },
      "lineNbr": 763,
      "author": {
        "id": 1002639
      },
      "writtenOn": "2019-09-23T17:00:57Z",
      "side": 1,
      "message": "There is, at the moment, no concept of a TaskState per test in the execution response: https://chromium.googlesource.com/chromiumos/infra/proto/+/master/src/test_platform/steps/execution.proto\n\nThere are individual tasks, which is a flattened list of all attempts and the overall build taskstate.\nSo, I must summarize to overall build\u0027s taskstate.verdict being PASSED_ON_RETRY.\n\nThe other option is to just promote the passed attempt\u0027s taskstate to be PASSED_ON_RETRY, but that is misleading - my assumption on seeing an attempt with PASSED_ON_RETRY is that there was internal retry in the attempt.",
      "parentUuid": "fa7677eb_8949c0b1",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99c44f54_f9278795",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab.go",
        "patchSetId": 6
      },
      "lineNbr": 763,
      "author": {
        "id": 1002377
      },
      "writtenOn": "2019-09-24T02:09:32Z",
      "side": 1,
      "message": "The individual values in task_results in Execute response are not a flattened list of all attempts of a test, they are the individual attempts (as far as I remember). The failed task attempt should be promoted to PASSED_ON_RETRY if it passed on retry. The passed task should remain as PASS. The existence of a PASSED_ON_RETRY task within the execution should not affect the overall execution response verdict, which should simply be Passed.",
      "parentUuid": "b816741f_3554c3ec",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1302016_27c7b8c1",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab_test.go",
        "patchSetId": 6
      },
      "lineNbr": 861,
      "author": {
        "id": 1002377
      },
      "writtenOn": "2019-09-20T23:52:08Z",
      "side": 1,
      "message": "I expect VERDICT_PASSED_ON_RETRY for the individual test, but on line 910 you also seem to be asserting that we get VERDICT_PASSED_ON_RETRY for the cros_test_platform build. Shouldn\u0027t that just be PASSED?",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "876f6a44_2cc46e2d",
        "filename": "go/src/infra/cmd/cros_test_platform/internal/execution/internal/skylab/skylab_test.go",
        "patchSetId": 6
      },
      "lineNbr": 861,
      "author": {
        "id": 1002639
      },
      "writtenOn": "2019-09-23T17:00:57Z",
      "side": 1,
      "message": "Let\u0027s discuss this in your comment in skylab.go.\n\ntl;dr - there is no way to tag a test as PASSED_ON_RETRY in the execution response, so we must tag the overall build instead.",
      "parentUuid": "a1302016_27c7b8c1",
      "revId": "ed20a0b3b3e6e8943175b7af2cf398a9b7780508",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}