{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15836b12_7b5d5445",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-04-29T06:34:49Z",
      "side": 1,
      "message": "Tested with run_locally.sh.",
      "revId": "f71b170e081a39f73035e7cdb5c34a0f50dfb5d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a2eb11_72483a7b",
        "filename": "3pp/cpython38/patches/0006-Use-nested-ifs-to-work-around-__has_attribute-errors.patch",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1275796
      },
      "writtenOn": "2021-04-29T06:44:32Z",
      "side": 1,
      "message": "Is the problem caused by __has_attribute not being available, and the compiler choking regardless of the short-circuiting of \u0026\u0026?\n\nIf so, would it make more sense to split it up like:\n\n  #if defined(__APPLE__) \u0026\u0026 defined(__has_attribute)\n    #if __has_attribute(availability)\n      ...\n    #endif\n  #endif\n\n?",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 22,
        "endChar": 64
      },
      "revId": "f71b170e081a39f73035e7cdb5c34a0f50dfb5d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60da9521_0ca083b8",
        "filename": "3pp/cpython38/patches/0006-Use-nested-ifs-to-work-around-__has_attribute-errors.patch",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-04-29T06:49:11Z",
      "side": 1,
      "message": "Yeah, that seems like what\u0027s happening.\n\nI don\u0027t have a strong preference on the nesting. I had figured the whole construct was only needed when __APPLE__ is defined, so that seemed like the more conservative approach to not mess with evaluating __has_attribute elsewhere.",
      "parentUuid": "c0a2eb11_72483a7b",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 22,
        "endChar": 64
      },
      "revId": "f71b170e081a39f73035e7cdb5c34a0f50dfb5d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7b963a6_9e686c9e",
        "filename": "3pp/cpython38/patches/0006-Use-nested-ifs-to-work-around-__has_attribute-errors.patch",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1275796
      },
      "writtenOn": "2021-04-29T07:03:27Z",
      "side": 1,
      "message": "`defined` doesn\u0027t evaluate its argument, and is safe to call regardless of the symbol you pass to it.",
      "parentUuid": "60da9521_0ca083b8",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 22,
        "endChar": 64
      },
      "revId": "f71b170e081a39f73035e7cdb5c34a0f50dfb5d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de8d1c98_c10a6b3f",
        "filename": "3pp/cpython38/patches/0006-Use-nested-ifs-to-work-around-__has_attribute-errors.patch",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-04-29T07:42:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7b963a6_9e686c9e",
      "range": {
        "startLine": 21,
        "startChar": 1,
        "endLine": 22,
        "endChar": 64
      },
      "revId": "f71b170e081a39f73035e7cdb5c34a0f50dfb5d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}