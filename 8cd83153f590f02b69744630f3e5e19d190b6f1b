{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d2063119_3493be12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2022-11-10T19:25:57Z",
      "side": 1,
      "message": "Why is this important? There are plenty of other binaries we run on OSX and don\u0027t sign.",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af16b151_1a31fba2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1309389
      },
      "writtenOn": "2022-11-10T19:31:20Z",
      "side": 1,
      "message": "In our MacPro7,1 machines resides a 4TB PCIe RAID card where the swarming directory lives. This is considered a \"RemovableVolume\" by macOS PPPC permissions. So cloudtail is unable to access logs in the swarming directory. Codesigning this binary will allow us to grant permissions to this binary via an MDM configuration profile.\n\n```\n2022-11-10 11:28:30.350310-0800 0x2b66     Error       0x0                  0      0    kernel: (Sandbox) System Policy: cloudtail(143) deny(1) file-read-data /Volumes/Work/s/logs/swarming_bot.log\n2022-11-10 11:28:30.350350-0800 0x1a71     Error       0x0                  0      0    kernel: (Sandbox) 1 duplicate report for System Policy: cloudtail(143) deny(1) file-read-data /Volumes/Work/s/logs/swarming_bot.log\n2022-11-10 11:28:30.350357-0800 0x1a71     Error       0x0                  0      0    kernel: (Sandbox) System Policy: cloudtail(95) deny(1) file-read-data /Volumes/Work/s/logs/bot_config.log\n2022-11-10 11:28:30.350360-0800 0x2b4e     Error       0x0                  0      0    kernel: (Sandbox) System Policy: cloudtail(139) deny(1) file-read-data /Volumes/Work/s/logs/run_isolated.log\n```",
      "parentUuid": "d2063119_3493be12",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d1f77ee_ad1a65f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2022-11-10T19:36:15Z",
      "side": 1,
      "message": "What makes cloudtail special here? E.g. why the bot process can run tasks that fetch other unsigned Go binaries and runs them with no problem, all under /Volumes/Work/s/... Is it because cloudtail is on a different partition? Owned by a different user?",
      "parentUuid": "af16b151_1a31fba2",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9054c6eb_8890f575",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1309389
      },
      "writtenOn": "2022-11-10T19:36:26Z",
      "side": 1,
      "message": "Also, we should, in general be in the habit of codesigning infra tools that will run on a Mac. A number of little things are popping up that need it.",
      "parentUuid": "af16b151_1a31fba2",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2088e575_9991a9fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1309389
      },
      "writtenOn": "2022-11-10T19:37:46Z",
      "side": 1,
      "message": "cloudtail is not run under swarming. So it is not run under vpython. So it does not inherit vpython\u0027s permissions. It is its own binary that is run from its own separate (multiple) launch daemons.",
      "parentUuid": "9054c6eb_8890f575",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ac4bf95_d56d81a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1309389
      },
      "writtenOn": "2022-11-10T19:40:09Z",
      "side": 1,
      "message": "We have also written a special puppet_launcher to run puppet for us for the same reasons. Puppet is denied permissions to certain areas of the system even though it runs as root.",
      "parentUuid": "2088e575_9991a9fa",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f02dbb50_f3c72a30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2022-11-10T21:12:20Z",
      "side": 1,
      "message": "First, this CL will likely produce a package that will break consumers, since they won\u0027t be able to find `cloudtail` executable (it will be in cloudtail.app/Contents/MacOS/cloudtail instead). The vpython package has a symlink to fix this https://source.chromium.org/chromium/infra/infra/+/main:build/packages/vpython-mac.yaml;l\u003d41?q\u003d%22codesign%22%20lang:yaml\u0026ss\u003dchromium\n\nSecond, I really want to enable code signing by default for all OSX Go binaries, but I\u0027m concerned that we would be replacing single-file packages with app bundles. This will potentially break various places which install these packages (and at this point there are many such places).\n\nDo you happen to know, is it possible to embed the plist and its signature directly into the Mach-O binary avoiding bundles?",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33558218_ff4182d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1309389
      },
      "writtenOn": "2022-11-10T21:24:11Z",
      "side": 1,
      "message": "You can absolutely codesign binaries and avoid bundles. However, when creating the configuration profiles to grant permissions, you have to choose how to identify the binary. In addition to the codesign designated requirements, your options are bundleID or file path. But macOS will find the real path when doing evaluations. Symlinks are not good enough. And most cipd packages work off of symlinking into the .cipd directory and the full real path contains an identifier that changes based on revision of the package.\n\nSo...\n\nIf we could guarantee that, /opt/infra-tools/cloudtail was in fact the codesigned binary file, I can work with that. The reality is that this might be a symlink to /opt/infra-tools/.cipd/pkgs/2/Cwm9jNAUDfXH7uxu4_9ccwZvS4DK9OujO4ED_atE2XkC/cloudtail instead. And that path will change with a new revision. MacOS will evaluate the real full path and reject it.\n\nFor this reason app bundles are easier when dealing with the way most cipd packages lay down on disk. The path to an app bundle can be dynamic since you identify it by bundle ID. You cannot identify standalone binaries by bundle ID in the configuration profile.",
      "parentUuid": "f02dbb50_f3c72a30",
      "revId": "8cd83153f590f02b69744630f3e5e19d190b6f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}