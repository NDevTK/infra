// Copyright 2020 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: infra/unifiedfleet/app/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next Tag: 27
// Config is the configuration data served by luci-config for this app.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuciConfigService      string           `protobuf:"bytes,1,opt,name=luci_config_service,json=luciConfigService,proto3" json:"luci_config_service,omitempty"`
	CrosNetworkConfig      *OSNetworkConfig `protobuf:"bytes,2,opt,name=cros_network_config,json=crosNetworkConfig,proto3" json:"cros_network_config,omitempty"`
	BucketName             string           `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	MachineDbConfigService string           `protobuf:"bytes,4,opt,name=machine_db_config_service,json=machineDbConfigService,proto3" json:"machine_db_config_service,omitempty"`
	MachineDbHost          string           `protobuf:"bytes,7,opt,name=machine_db_host,json=machineDbHost,proto3" json:"machine_db_host,omitempty"`
	CrosInventoryHost      string           `protobuf:"bytes,5,opt,name=cros_inventory_host,json=crosInventoryHost,proto3" json:"cros_inventory_host,omitempty"`
	SelfStorageBucket      string           `protobuf:"bytes,6,opt,name=self_storage_bucket,json=selfStorageBucket,proto3" json:"self_storage_bucket,omitempty"`
	Hart                   *PubSub          `protobuf:"bytes,8,opt,name=hart,proto3" json:"hart,omitempty"`
	SheetServiceAccount    string           `protobuf:"bytes,9,opt,name=sheet_service_account,json=sheetServiceAccount,proto3" json:"sheet_service_account,omitempty"`
	// The hostname of drone-queen service to push inventory to.
	QueenService string `protobuf:"bytes,10,opt,name=queen_service,json=queenService,proto3" json:"queen_service,omitempty"`
	// cron job for dronequeen push.
	// As UFS migration is over, this is no longer used.
	//
	// Deprecated: Do not use.
	EnableDronequeenPush bool `protobuf:"varint,11,opt,name=enable_dronequeen_push,json=enableDronequeenPush,proto3" json:"enable_dronequeen_push,omitempty"`
	// cron job for Inv2 to UFS sync(MachineLSE/Asset).
	DisableInv2Sync bool `protobuf:"varint,12,opt,name=disable_inv2_sync,json=disableInv2Sync,proto3" json:"disable_inv2_sync,omitempty"`
	// cron job for UFS to IV2(lab and stateconfig) BQ push.
	EnableLabStateconfigPush bool `protobuf:"varint,13,opt,name=enable_lab_stateconfig_push,json=enableLabStateconfigPush,proto3" json:"enable_lab_stateconfig_push,omitempty"`
	// DEPRECATED. Disable use of cached ManufacturingConfig in datastore. If
	// true, GetChromeOSDeviceData will return None for ManufacturingConfig.
	//
	// Deprecated: Do not use.
	DisableCachedManufacturingConfig bool `protobuf:"varint,14,opt,name=disable_cached_manufacturing_config,json=disableCachedManufacturingConfig,proto3" json:"disable_cached_manufacturing_config,omitempty"`
	// DEPRECATED. Disable use of old cached manufacturing configs from the
	// datastore and use configs cached from HWID server instead. If true,
	// GetChromeOSDeviceData will return None for ManufacturingConfig.
	//
	// Deprecated: Do not use.
	UseCachedHwidManufacturingConfig bool `protobuf:"varint,15,opt,name=use_cached_hwid_manufacturing_config,json=useCachedHwidManufacturingConfig,proto3" json:"use_cached_hwid_manufacturing_config,omitempty"`
	// Enable generation of schedulable labels using Boxster configs.
	EnableBoxsterLabels bool `protobuf:"varint,16,opt,name=enable_boxster_labels,json=enableBoxsterLabels,proto3" json:"enable_boxster_labels,omitempty"`
	// Service account for accessing HWID server
	HwidServiceAccount string `protobuf:"bytes,17,opt,name=hwid_service_account,json=hwidServiceAccount,proto3" json:"hwid_service_account,omitempty"`
	// Limit for throttling traffic to HWID server
	HwidServiceTrafficRatio float32 `protobuf:"fixed32,18,opt,name=hwid_service_traffic_ratio,json=hwidServiceTrafficRatio,proto3" json:"hwid_service_traffic_ratio,omitempty"`
	// Allowed clients for UFS
	Clients []*UserAgent `protobuf:"bytes,19,rep,name=clients,proto3" json:"clients,omitempty"`
	// Allow unrecognized clients
	AllowUnrecognizedClients bool `protobuf:"varint,20,opt,name=allow_unrecognized_clients,json=allowUnrecognizedClients,proto3" json:"allow_unrecognized_clients,omitempty"`
	// Ownership config files
	OwnershipConfig *OwnershipConfig `protobuf:"bytes,21,opt,name=ownership_config,json=ownershipConfig,proto3" json:"ownership_config,omitempty"`
	// RPC acls
	Acls []*ACL `protobuf:"bytes,22,rep,name=acls,proto3" json:"acls,omitempty"`
	// Float to limit pubsub calls to a specific amount of traffic.
	SendMessagesToPubsubRatio float32 `protobuf:"fixed32,23,opt,name=send_messages_to_pubsub_ratio,json=sendMessagesToPubsubRatio,proto3" json:"send_messages_to_pubsub_ratio,omitempty"`
	// DeviceConfigs push configs
	DeviceConfigsPushConfigs *DeviceConfigPushConfigs `protobuf:"bytes,24,opt,name=device_configs_push_configs,json=deviceConfigsPushConfigs,proto3" json:"device_configs_push_configs,omitempty"`
	// DNS resolved hostname to reach the ufs service
	Hostname string `protobuf:"bytes,25,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// ExperimentalAPI is for determining the experimental percentage for new API
	ExperimentalAPI *ExperimentalAPI `protobuf:"bytes,26,opt,name=experimentalAPI,proto3" json:"experimentalAPI,omitempty"`
	// Groups which indicate the caller is a partner
	PartnerACLGroups []string `protobuf:"bytes,27,rep,name=partnerACLGroups,proto3" json:"partnerACLGroups,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetLuciConfigService() string {
	if x != nil {
		return x.LuciConfigService
	}
	return ""
}

func (x *Config) GetCrosNetworkConfig() *OSNetworkConfig {
	if x != nil {
		return x.CrosNetworkConfig
	}
	return nil
}

func (x *Config) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *Config) GetMachineDbConfigService() string {
	if x != nil {
		return x.MachineDbConfigService
	}
	return ""
}

func (x *Config) GetMachineDbHost() string {
	if x != nil {
		return x.MachineDbHost
	}
	return ""
}

func (x *Config) GetCrosInventoryHost() string {
	if x != nil {
		return x.CrosInventoryHost
	}
	return ""
}

func (x *Config) GetSelfStorageBucket() string {
	if x != nil {
		return x.SelfStorageBucket
	}
	return ""
}

func (x *Config) GetHart() *PubSub {
	if x != nil {
		return x.Hart
	}
	return nil
}

func (x *Config) GetSheetServiceAccount() string {
	if x != nil {
		return x.SheetServiceAccount
	}
	return ""
}

func (x *Config) GetQueenService() string {
	if x != nil {
		return x.QueenService
	}
	return ""
}

// Deprecated: Do not use.
func (x *Config) GetEnableDronequeenPush() bool {
	if x != nil {
		return x.EnableDronequeenPush
	}
	return false
}

func (x *Config) GetDisableInv2Sync() bool {
	if x != nil {
		return x.DisableInv2Sync
	}
	return false
}

func (x *Config) GetEnableLabStateconfigPush() bool {
	if x != nil {
		return x.EnableLabStateconfigPush
	}
	return false
}

// Deprecated: Do not use.
func (x *Config) GetDisableCachedManufacturingConfig() bool {
	if x != nil {
		return x.DisableCachedManufacturingConfig
	}
	return false
}

// Deprecated: Do not use.
func (x *Config) GetUseCachedHwidManufacturingConfig() bool {
	if x != nil {
		return x.UseCachedHwidManufacturingConfig
	}
	return false
}

func (x *Config) GetEnableBoxsterLabels() bool {
	if x != nil {
		return x.EnableBoxsterLabels
	}
	return false
}

func (x *Config) GetHwidServiceAccount() string {
	if x != nil {
		return x.HwidServiceAccount
	}
	return ""
}

func (x *Config) GetHwidServiceTrafficRatio() float32 {
	if x != nil {
		return x.HwidServiceTrafficRatio
	}
	return 0
}

func (x *Config) GetClients() []*UserAgent {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *Config) GetAllowUnrecognizedClients() bool {
	if x != nil {
		return x.AllowUnrecognizedClients
	}
	return false
}

func (x *Config) GetOwnershipConfig() *OwnershipConfig {
	if x != nil {
		return x.OwnershipConfig
	}
	return nil
}

func (x *Config) GetAcls() []*ACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *Config) GetSendMessagesToPubsubRatio() float32 {
	if x != nil {
		return x.SendMessagesToPubsubRatio
	}
	return 0
}

func (x *Config) GetDeviceConfigsPushConfigs() *DeviceConfigPushConfigs {
	if x != nil {
		return x.DeviceConfigsPushConfigs
	}
	return nil
}

func (x *Config) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Config) GetExperimentalAPI() *ExperimentalAPI {
	if x != nil {
		return x.ExperimentalAPI
	}
	return nil
}

func (x *Config) GetPartnerACLGroups() []string {
	if x != nil {
		return x.PartnerACLGroups
	}
	return nil
}

type OSNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitilesHost         string                               `protobuf:"bytes,1,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	Project             string                               `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Branch              string                               `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CrosNetworkTopology []*OSNetworkConfig_OSNetworkTopology `protobuf:"bytes,4,rep,name=cros_network_topology,json=crosNetworkTopology,proto3" json:"cros_network_topology,omitempty"`
}

func (x *OSNetworkConfig) Reset() {
	*x = OSNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSNetworkConfig) ProtoMessage() {}

func (x *OSNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSNetworkConfig.ProtoReflect.Descriptor instead.
func (*OSNetworkConfig) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *OSNetworkConfig) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *OSNetworkConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *OSNetworkConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *OSNetworkConfig) GetCrosNetworkTopology() []*OSNetworkConfig_OSNetworkTopology {
	if x != nil {
		return x.CrosNetworkTopology
	}
	return nil
}

type OwnershipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Git host where the config files should be read from. Ex: chrome-internal.googlesource.com.
	GitilesHost string `protobuf:"bytes,1,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// Project for the config files. Ex: infradata/config.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Git branch from which the files should be fetched. Ex: master, main etc
	Branch string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	// LUCI bot config file for ENC
	EncConfig []*OwnershipConfig_ConfigFile `protobuf:"bytes,4,rep,name=enc_config,json=encConfig,proto3" json:"enc_config,omitempty"`
	// LUCI UFS security config file
	SecurityConfig []*OwnershipConfig_ConfigFile `protobuf:"bytes,5,rep,name=security_config,json=securityConfig,proto3" json:"security_config,omitempty"`
}

func (x *OwnershipConfig) Reset() {
	*x = OwnershipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnershipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnershipConfig) ProtoMessage() {}

func (x *OwnershipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnershipConfig.ProtoReflect.Descriptor instead.
func (*OwnershipConfig) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *OwnershipConfig) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *OwnershipConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *OwnershipConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *OwnershipConfig) GetEncConfig() []*OwnershipConfig_ConfigFile {
	if x != nil {
		return x.EncConfig
	}
	return nil
}

func (x *OwnershipConfig) GetSecurityConfig() []*OwnershipConfig_ConfigFile {
	if x != nil {
		return x.SecurityConfig
	}
	return nil
}

type PubSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// Batch size for batching publish requests for asset_info update. HaRT
	// services have been known to fail for batch_size > 100. Changing this
	// value might disable HaRT updates.
	BatchSize uint32 `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *PubSub) Reset() {
	*x = PubSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSub) ProtoMessage() {}

func (x *PubSub) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSub.ProtoReflect.Descriptor instead.
func (*PubSub) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *PubSub) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PubSub) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PubSub) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Next Tag: 3
// UserAgent is used to configure what agents can talk to UFS
type UserAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the user agent, Ex: shivas, pRPC
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Minimum version supported by UFS
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UserAgent) Reset() {
	*x = UserAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAgent) ProtoMessage() {}

func (x *UserAgent) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAgent.ProtoReflect.Descriptor instead.
func (*UserAgent) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *UserAgent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserAgent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// match is a regular expression to match for this ACL
	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// groups is a list of groups that are allowed for this ACL
	Groups []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *ACL) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *ACL) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type DeviceConfigPushConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if disabled, job will be a no-op
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// hostname of target gitiles (ex. `chrome-internal.googlesource.com`)
	GitilesHost string `protobuf:"bytes,2,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// project/repo name to fetch from (ex. `chromeos/infra/config)
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Commit hash or branch to check out (ex. `refs/head/main`)
	Committish string `protobuf:"bytes,4,opt,name=committish,proto3" json:"committish,omitempty"`
	// Path containing the configs file (ex. `path/configs.cfg`)
	ConfigsPath string `protobuf:"bytes,5,opt,name=configs_path,json=configsPath,proto3" json:"configs_path,omitempty"`
}

func (x *DeviceConfigPushConfigs) Reset() {
	*x = DeviceConfigPushConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigPushConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigPushConfigs) ProtoMessage() {}

func (x *DeviceConfigPushConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigPushConfigs.ProtoReflect.Descriptor instead.
func (*DeviceConfigPushConfigs) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceConfigPushConfigs) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DeviceConfigPushConfigs) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *DeviceConfigPushConfigs) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeviceConfigPushConfigs) GetCommittish() string {
	if x != nil {
		return x.Committish
	}
	return ""
}

func (x *DeviceConfigPushConfigs) GetConfigsPath() string {
	if x != nil {
		return x.ConfigsPath
	}
	return ""
}

// ExperimentalAPI is to be used to set the experimental percentages for the API
// Each entry should be of uint32 type. Please deprecate the field once your API
// is fully released.
type ExperimentalAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ListAssetsACL determines the experimental percentage for the experiment
	ListAssetsACL uint32 `protobuf:"varint,1,opt,name=ListAssetsACL,proto3" json:"ListAssetsACL,omitempty"`
	// ListMachinesACL determines the experimental percentage for the experiment
	ListMachinesACL uint32 `protobuf:"varint,2,opt,name=ListMachinesACL,proto3" json:"ListMachinesACL,omitempty"`
	// GetMachineACL determines the experimental percentage for the experiment
	GetMachineACL uint32 `protobuf:"varint,3,opt,name=GetMachineACL,proto3" json:"GetMachineACL,omitempty"`
	// ListMachineLSEsACL determines the experimental percentage for the API
	ListMachineLSEsACL uint32 `protobuf:"varint,4,opt,name=ListMachineLSEsACL,proto3" json:"ListMachineLSEsACL,omitempty"`
	// GetAssetACL determines the experimental percentage for the API
	GetAssetACL uint32 `protobuf:"varint,5,opt,name=GetAssetACL,proto3" json:"GetAssetACL,omitempty"`
	// GetMachineLSEACL determines the experimental percentage for the API
	GetMachineLSEACL uint32 `protobuf:"varint,6,opt,name=GetMachineLSEACL,proto3" json:"GetMachineLSEACL,omitempty"`
}

func (x *ExperimentalAPI) Reset() {
	*x = ExperimentalAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentalAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentalAPI) ProtoMessage() {}

func (x *ExperimentalAPI) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentalAPI.ProtoReflect.Descriptor instead.
func (*ExperimentalAPI) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *ExperimentalAPI) GetListAssetsACL() uint32 {
	if x != nil {
		return x.ListAssetsACL
	}
	return 0
}

func (x *ExperimentalAPI) GetListMachinesACL() uint32 {
	if x != nil {
		return x.ListMachinesACL
	}
	return 0
}

func (x *ExperimentalAPI) GetGetMachineACL() uint32 {
	if x != nil {
		return x.GetMachineACL
	}
	return 0
}

func (x *ExperimentalAPI) GetListMachineLSEsACL() uint32 {
	if x != nil {
		return x.ListMachineLSEsACL
	}
	return 0
}

func (x *ExperimentalAPI) GetGetAssetACL() uint32 {
	if x != nil {
		return x.GetAssetACL
	}
	return 0
}

func (x *ExperimentalAPI) GetGetMachineLSEACL() uint32 {
	if x != nil {
		return x.GetMachineLSEACL
	}
	return 0
}

type OSNetworkConfig_OSNetworkTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RemotePath string `protobuf:"bytes,2,opt,name=remote_path,json=remotePath,proto3" json:"remote_path,omitempty"`
	SheetId    string `protobuf:"bytes,3,opt,name=sheet_id,json=sheetId,proto3" json:"sheet_id,omitempty"`
}

func (x *OSNetworkConfig_OSNetworkTopology) Reset() {
	*x = OSNetworkConfig_OSNetworkTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSNetworkConfig_OSNetworkTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSNetworkConfig_OSNetworkTopology) ProtoMessage() {}

func (x *OSNetworkConfig_OSNetworkTopology) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSNetworkConfig_OSNetworkTopology.ProtoReflect.Descriptor instead.
func (*OSNetworkConfig_OSNetworkTopology) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *OSNetworkConfig_OSNetworkTopology) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OSNetworkConfig_OSNetworkTopology) GetRemotePath() string {
	if x != nil {
		return x.RemotePath
	}
	return ""
}

func (x *OSNetworkConfig_OSNetworkTopology) GetSheetId() string {
	if x != nil {
		return x.SheetId
	}
	return ""
}

type OwnershipConfig_ConfigFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the config file
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Config file location in the given project
	RemotePath string `protobuf:"bytes,2,opt,name=remote_path,json=remotePath,proto3" json:"remote_path,omitempty"`
}

func (x *OwnershipConfig_ConfigFile) Reset() {
	*x = OwnershipConfig_ConfigFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnershipConfig_ConfigFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnershipConfig_ConfigFile) ProtoMessage() {}

func (x *OwnershipConfig_ConfigFile) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_app_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnershipConfig_ConfigFile.ProtoReflect.Descriptor instead.
func (*OwnershipConfig_ConfigFile) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *OwnershipConfig_ConfigFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OwnershipConfig_ConfigFile) GetRemotePath() string {
	if x != nil {
		return x.RemotePath
	}
	return ""
}

var File_infra_unifiedfleet_app_config_config_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_app_config_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x75, 0x66,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xea, 0x0b, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6c, 0x75, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x63,
	0x72, 0x6f, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x72, 0x6f, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x68, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x04, 0x68, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x32, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x32, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x23, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a,
	0x24, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x68, 0x77, 0x69, 0x64,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x20, 0x75, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x77, 0x69, 0x64, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x73, 0x74, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x77, 0x69, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x77, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x68, 0x77, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x68, 0x77, 0x69,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x61,
	0x63, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x66, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73,
	0x12, 0x40, 0x0a, 0x1d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x62, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x18, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x75, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x41, 0x50, 0x49, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x66,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x50, 0x49, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x50, 0x49, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x41, 0x43, 0x4c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x43, 0x4c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x4f, 0x53, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x61,
	0x0a, 0x15, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x13, 0x63, 0x72,
	0x6f, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x1a, 0x63, 0x0a, 0x11, 0x4f, 0x53, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x45, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x75, 0x66, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x41, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x52, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x57, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x85,
	0x02, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x41,
	0x50, 0x49, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x41, 0x43, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x41, 0x43, 0x4c, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x43, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x41,
	0x43, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x41, 0x43, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x41, 0x43, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x73, 0x41, 0x43, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x41, 0x43, 0x4c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x41, 0x43, 0x4c, 0x42, 0x1f, 0x5a, 0x1d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_app_config_config_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_app_config_config_proto_rawDescData = file_infra_unifiedfleet_app_config_config_proto_rawDesc
)

func file_infra_unifiedfleet_app_config_config_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_app_config_config_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_app_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_app_config_config_proto_rawDescData)
	})
	return file_infra_unifiedfleet_app_config_config_proto_rawDescData
}

var file_infra_unifiedfleet_app_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_infra_unifiedfleet_app_config_config_proto_goTypes = []interface{}{
	(*Config)(nil),                            // 0: ufs.config.Config
	(*OSNetworkConfig)(nil),                   // 1: ufs.config.OSNetworkConfig
	(*OwnershipConfig)(nil),                   // 2: ufs.config.OwnershipConfig
	(*PubSub)(nil),                            // 3: ufs.config.PubSub
	(*UserAgent)(nil),                         // 4: ufs.config.UserAgent
	(*ACL)(nil),                               // 5: ufs.config.ACL
	(*DeviceConfigPushConfigs)(nil),           // 6: ufs.config.DeviceConfigPushConfigs
	(*ExperimentalAPI)(nil),                   // 7: ufs.config.ExperimentalAPI
	(*OSNetworkConfig_OSNetworkTopology)(nil), // 8: ufs.config.OSNetworkConfig.OSNetworkTopology
	(*OwnershipConfig_ConfigFile)(nil),        // 9: ufs.config.OwnershipConfig.ConfigFile
}
var file_infra_unifiedfleet_app_config_config_proto_depIdxs = []int32{
	1,  // 0: ufs.config.Config.cros_network_config:type_name -> ufs.config.OSNetworkConfig
	3,  // 1: ufs.config.Config.hart:type_name -> ufs.config.PubSub
	4,  // 2: ufs.config.Config.clients:type_name -> ufs.config.UserAgent
	2,  // 3: ufs.config.Config.ownership_config:type_name -> ufs.config.OwnershipConfig
	5,  // 4: ufs.config.Config.acls:type_name -> ufs.config.ACL
	6,  // 5: ufs.config.Config.device_configs_push_configs:type_name -> ufs.config.DeviceConfigPushConfigs
	7,  // 6: ufs.config.Config.experimentalAPI:type_name -> ufs.config.ExperimentalAPI
	8,  // 7: ufs.config.OSNetworkConfig.cros_network_topology:type_name -> ufs.config.OSNetworkConfig.OSNetworkTopology
	9,  // 8: ufs.config.OwnershipConfig.enc_config:type_name -> ufs.config.OwnershipConfig.ConfigFile
	9,  // 9: ufs.config.OwnershipConfig.security_config:type_name -> ufs.config.OwnershipConfig.ConfigFile
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_app_config_config_proto_init() }
func file_infra_unifiedfleet_app_config_config_proto_init() {
	if File_infra_unifiedfleet_app_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnershipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigPushConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentalAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSNetworkConfig_OSNetworkTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_app_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnershipConfig_ConfigFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_app_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_unifiedfleet_app_config_config_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_app_config_config_proto_depIdxs,
		MessageInfos:      file_infra_unifiedfleet_app_config_config_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_app_config_config_proto = out.File
	file_infra_unifiedfleet_app_config_config_proto_rawDesc = nil
	file_infra_unifiedfleet_app_config_config_proto_goTypes = nil
	file_infra_unifiedfleet_app_config_config_proto_depIdxs = nil
}
