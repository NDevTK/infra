// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: infra/unifiedfleet/api/v1/models/nlyte_assets.proto

package ufspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssetAndHosts represent the list of AssetAndHostInfo returned from a OData
// query to Nlyte REST APIs.
type AssetAndHosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of retrieved information
	Context string `protobuf:"bytes,1,opt,name=context,json=@odata.context,proto3" json:"context,omitempty"`
	// Number of entries retrieved from current query
	Count int32 `protobuf:"varint,2,opt,name=count,json=@odata.count,proto3" json:"count,omitempty"`
	// A list of record entries
	Records []*AssetAndHostInfo `protobuf:"bytes,3,rep,name=records,json=value,proto3" json:"records,omitempty"`
	// Link for the next page of data. The number of RecordEntry shown in each
	// page is determine by page-size in the query
	NextLink string `protobuf:"bytes,4,opt,name=next_link,json=@odata.nextLink,proto3" json:"next_link,omitempty"`
}

func (x *AssetAndHosts) Reset() {
	*x = AssetAndHosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAndHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAndHosts) ProtoMessage() {}

func (x *AssetAndHosts) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAndHosts.ProtoReflect.Descriptor instead.
func (*AssetAndHosts) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescGZIP(), []int{0}
}

func (x *AssetAndHosts) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AssetAndHosts) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AssetAndHosts) GetRecords() []*AssetAndHostInfo {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *AssetAndHosts) GetNextLink() string {
	if x != nil {
		return x.NextLink
	}
	return ""
}

// AssetAndHostInfo represents the information of an asset and its host that we
// care about.
type AssetAndHostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier generated and used by Nlyte for assets
	AssetId int32 `protobuf:"varint,1,opt,name=asset_id,json=AssetID,proto3" json:"asset_id,omitempty"`
	// Unique identifier used by internal Google asset tracking systems.
	// Equivalent to tag or asset_tag.
	AssetName string `protobuf:"bytes,2,opt,name=asset_name,json=AssetName,proto3" json:"asset_name,omitempty"`
	// Native asset type that Nlyte keeps track of. e.g. Cabinet, Server, e.t.c.
	MaterialType string `protobuf:"bytes,3,opt,name=material_type,json=MaterialType,proto3" json:"material_type,omitempty"`
	// Information regarding the Lab/Room, Floor, Building, City this asset is in.
	LocationGroup *LocationGroup `protobuf:"bytes,4,opt,name=location_group,json=LocationGroup,proto3" json:"location_group,omitempty"`
	// If this asset is a mountable asset (e.g. Server, DUT, e.t.c.),
	// cabinet_asset_id is the rack/cabinet, or shelf this asset is mounted on.
	CabinetAssetId int32 `protobuf:"varint,5,opt,name=cabinet_asset_id,json=CabinetAssetID,proto3" json:"cabinet_asset_id,omitempty"`
	// If this asset is a mountable asset (e.g. Server, DUT, e.t.c.),
	// cabinet_u_number is the position of the asset on which the rack/cabinet, or
	// shelf it is mounted.
	CabinetUNumber int32 `protobuf:"varint,6,opt,name=cabinet_u_number,json=CabinetUNumber,proto3" json:"cabinet_u_number,omitempty"`
	// The lab floor plan in Nlyte is a grid. physical_row represents the row this
	// asset is located on in the floor plan grid.
	PhysicalRow string `protobuf:"bytes,7,opt,name=physical_row,json=GridReferenceRow,proto3" json:"physical_row,omitempty"`
	// The lab floor plan in Nlyte is a grid. physical_column represents the
	// column this asset is located on in the floor plan grid.
	PhysicalColumn string          `protobuf:"bytes,8,opt,name=physical_column,json=GridReferenceColumn,proto3" json:"physical_column,omitempty"`
	AssetInfo      *NlyteAssetInfo `protobuf:"bytes,9,opt,name=asset_info,json=Asset,proto3" json:"asset_info,omitempty"`
}

func (x *AssetAndHostInfo) Reset() {
	*x = AssetAndHostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAndHostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAndHostInfo) ProtoMessage() {}

func (x *AssetAndHostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAndHostInfo.ProtoReflect.Descriptor instead.
func (*AssetAndHostInfo) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescGZIP(), []int{1}
}

func (x *AssetAndHostInfo) GetAssetId() int32 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *AssetAndHostInfo) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *AssetAndHostInfo) GetMaterialType() string {
	if x != nil {
		return x.MaterialType
	}
	return ""
}

func (x *AssetAndHostInfo) GetLocationGroup() *LocationGroup {
	if x != nil {
		return x.LocationGroup
	}
	return nil
}

func (x *AssetAndHostInfo) GetCabinetAssetId() int32 {
	if x != nil {
		return x.CabinetAssetId
	}
	return 0
}

func (x *AssetAndHostInfo) GetCabinetUNumber() int32 {
	if x != nil {
		return x.CabinetUNumber
	}
	return 0
}

func (x *AssetAndHostInfo) GetPhysicalRow() string {
	if x != nil {
		return x.PhysicalRow
	}
	return ""
}

func (x *AssetAndHostInfo) GetPhysicalColumn() string {
	if x != nil {
		return x.PhysicalColumn
	}
	return ""
}

func (x *AssetAndHostInfo) GetAssetInfo() *NlyteAssetInfo {
	if x != nil {
		return x.AssetInfo
	}
	return nil
}

// LocationGroup Hierarchy:
// Area,Room,Floor,Building,City,County,Country,Region,World.
// Usually, the base location group of an asset is Room.
type LocationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the location group the asset is currently placed at. Usually Room.
	LocationGroupId int32 `protobuf:"varint,1,opt,name=location_group_id,json=LocationGroupID,proto3" json:"location_group_id,omitempty"`
	// Will show four levels of location group name starting from the current
	// location group the asset is in. Format of full_location_name for asset in a
	// lab/room: "Room_Name (City,Building,Floor)"
	FullLocationName string `protobuf:"bytes,2,opt,name=full_location_name,json=DuplicateLocationGroupName,proto3" json:"full_location_name,omitempty"`
}

func (x *LocationGroup) Reset() {
	*x = LocationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationGroup) ProtoMessage() {}

func (x *LocationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationGroup.ProtoReflect.Descriptor instead.
func (*LocationGroup) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescGZIP(), []int{2}
}

func (x *LocationGroup) GetLocationGroupId() int32 {
	if x != nil {
		return x.LocationGroupId
	}
	return 0
}

func (x *LocationGroup) GetFullLocationName() string {
	if x != nil {
		return x.FullLocationName
	}
	return ""
}

// NlyteAssetInfo represents the information of an asset that is not directly
// available through the AssetAndHost Entity, but through the Asset Entity in
// Nlyte.
type NlyteAssetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Native asset type that Nlyte keeps track of. e.g. Cabinet, Server, e.t.c.
	NlyteMaterialType string                 `protobuf:"bytes,1,opt,name=nlyte_material_type,json=@odata.type,proto3" json:"nlyte_material_type,omitempty"`
	CreationDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=CreationDate,proto3" json:"creation_date,omitempty"`
	DecommissionDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=decommission_date,json=DecommissionDate,proto3" json:"decommission_date,omitempty"`
	CustomFields      []*CustomField         `protobuf:"bytes,4,rep,name=custom_fields,json=CustomFields,proto3" json:"custom_fields,omitempty"`
}

func (x *NlyteAssetInfo) Reset() {
	*x = NlyteAssetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NlyteAssetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NlyteAssetInfo) ProtoMessage() {}

func (x *NlyteAssetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NlyteAssetInfo.ProtoReflect.Descriptor instead.
func (*NlyteAssetInfo) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescGZIP(), []int{3}
}

func (x *NlyteAssetInfo) GetNlyteMaterialType() string {
	if x != nil {
		return x.NlyteMaterialType
	}
	return ""
}

func (x *NlyteAssetInfo) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *NlyteAssetInfo) GetDecommissionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DecommissionDate
	}
	return nil
}

func (x *NlyteAssetInfo) GetCustomFields() []*CustomField {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

type CustomField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=DataLabel,proto3" json:"field_name,omitempty"`
	// DataValue can have a lot of different types, for example: string, data,
	// e.t.c. Any type can be retrieved as string type. The reason string type is
	// specified here is because if, for example, we want to add the DataValueDate
	// field to this proto, we want to differentiate the date and string type and
	// name the DataValueDate field as field_date_value.
	// See more in this screenshot:
	// https://screenshot.googleplex.com/B7r5oz4NdpHzbCs.png
	FieldStringValue string `protobuf:"bytes,2,opt,name=field_string_value,json=DataValueString,proto3" json:"field_string_value,omitempty"`
}

func (x *CustomField) Reset() {
	*x = CustomField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomField) ProtoMessage() {}

func (x *CustomField) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomField.ProtoReflect.Descriptor instead.
func (*CustomField) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescGZIP(), []int{4}
}

func (x *CustomField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *CustomField) GetFieldStringValue() string {
	if x != nil {
		return x.FieldStringValue
	}
	return ""
}

var File_infra_unifiedfleet_api_v1_models_nlyte_assets_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDesc = []byte{
	0x0a, 0x33, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6e, 0x6c, 0x79, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x40, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x40, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x40, 0x6f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xb4, 0x03, 0x0a,
	0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x50, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x55,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72,
	0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x2c,
	0x0a, 0x0f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x45, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e, 0x6c,
	0x79, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x22, 0x73, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x4e, 0x6c, 0x79,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x13, 0x6e,
	0x6c, 0x79, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x40, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x59, 0x0a,
	0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x12, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x28, 0x5a, 0x26, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3b, 0x75, 0x66, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescData = file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_goTypes = []interface{}{
	(*AssetAndHosts)(nil),         // 0: unifiedfleet.api.v1.models.AssetAndHosts
	(*AssetAndHostInfo)(nil),      // 1: unifiedfleet.api.v1.models.AssetAndHostInfo
	(*LocationGroup)(nil),         // 2: unifiedfleet.api.v1.models.LocationGroup
	(*NlyteAssetInfo)(nil),        // 3: unifiedfleet.api.v1.models.NlyteAssetInfo
	(*CustomField)(nil),           // 4: unifiedfleet.api.v1.models.CustomField
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_depIdxs = []int32{
	1, // 0: unifiedfleet.api.v1.models.AssetAndHosts.records:type_name -> unifiedfleet.api.v1.models.AssetAndHostInfo
	2, // 1: unifiedfleet.api.v1.models.AssetAndHostInfo.location_group:type_name -> unifiedfleet.api.v1.models.LocationGroup
	3, // 2: unifiedfleet.api.v1.models.AssetAndHostInfo.asset_info:type_name -> unifiedfleet.api.v1.models.NlyteAssetInfo
	5, // 3: unifiedfleet.api.v1.models.NlyteAssetInfo.creation_date:type_name -> google.protobuf.Timestamp
	5, // 4: unifiedfleet.api.v1.models.NlyteAssetInfo.decommission_date:type_name -> google.protobuf.Timestamp
	4, // 5: unifiedfleet.api.v1.models.NlyteAssetInfo.custom_fields:type_name -> unifiedfleet.api.v1.models.CustomField
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_init() }
func file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_init() {
	if File_infra_unifiedfleet_api_v1_models_nlyte_assets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAndHosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAndHostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NlyteAssetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_depIdxs,
		MessageInfos:      file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_models_nlyte_assets_proto = out.File
	file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_models_nlyte_assets_proto_depIdxs = nil
}
