// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: infra/unifiedfleet/api/v1/models/chromeos/lab/pasit_topology.proto

package ufspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The technology that the switch is used to control.
type PasitTopology_PerhipheralTechnology int32

const (
	PasitTopology_PERHIPHERAL_TECHNOLOGY_UNKNOWN      PasitTopology_PerhipheralTechnology = 0
	PasitTopology_PERHIPHERAL_TECHNOLOGY_USBA2        PasitTopology_PerhipheralTechnology = 1
	PasitTopology_PERHIPHERAL_TECHNOLOGY_USBA3        PasitTopology_PerhipheralTechnology = 2
	PasitTopology_PERHIPHERAL_TECHNOLOGY_USBC         PasitTopology_PerhipheralTechnology = 3
	PasitTopology_PERHIPHERAL_TECHNOLOGY_HDMI         PasitTopology_PerhipheralTechnology = 4
	PasitTopology_PERHIPHERAL_TECHNOLOGY_DISPLAY_PORT PasitTopology_PerhipheralTechnology = 5
	PasitTopology_PERHIPHERAL_TECHNOLOGY_ETHERNET     PasitTopology_PerhipheralTechnology = 6
)

// Enum value maps for PasitTopology_PerhipheralTechnology.
var (
	PasitTopology_PerhipheralTechnology_name = map[int32]string{
		0: "PERHIPHERAL_TECHNOLOGY_UNKNOWN",
		1: "PERHIPHERAL_TECHNOLOGY_USBA2",
		2: "PERHIPHERAL_TECHNOLOGY_USBA3",
		3: "PERHIPHERAL_TECHNOLOGY_USBC",
		4: "PERHIPHERAL_TECHNOLOGY_HDMI",
		5: "PERHIPHERAL_TECHNOLOGY_DISPLAY_PORT",
		6: "PERHIPHERAL_TECHNOLOGY_ETHERNET",
	}
	PasitTopology_PerhipheralTechnology_value = map[string]int32{
		"PERHIPHERAL_TECHNOLOGY_UNKNOWN":      0,
		"PERHIPHERAL_TECHNOLOGY_USBA2":        1,
		"PERHIPHERAL_TECHNOLOGY_USBA3":        2,
		"PERHIPHERAL_TECHNOLOGY_USBC":         3,
		"PERHIPHERAL_TECHNOLOGY_HDMI":         4,
		"PERHIPHERAL_TECHNOLOGY_DISPLAY_PORT": 5,
		"PERHIPHERAL_TECHNOLOGY_ETHERNET":     6,
	}
)

func (x PasitTopology_PerhipheralTechnology) Enum() *PasitTopology_PerhipheralTechnology {
	p := new(PasitTopology_PerhipheralTechnology)
	*p = x
	return p
}

func (x PasitTopology_PerhipheralTechnology) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasitTopology_PerhipheralTechnology) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_enumTypes[0].Descriptor()
}

func (PasitTopology_PerhipheralTechnology) Type() protoreflect.EnumType {
	return &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_enumTypes[0]
}

func (x PasitTopology_PerhipheralTechnology) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasitTopology_PerhipheralTechnology.Descriptor instead.
func (PasitTopology_PerhipheralTechnology) EnumDescriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 0}
}

type PasitTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DUTs in the topology (i.e. potentially more than one).
	Hosts []*PasitTopology_Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// The switches in the topology.
	Switches []*PasitTopology_Switch `protobuf:"bytes,2,rep,name=switches,proto3" json:"switches,omitempty"`
	// The docks in the topology.
	Docks []*PasitTopology_Dock `protobuf:"bytes,3,rep,name=docks,proto3" json:"docks,omitempty"`
	// The monitors in the topology.
	Monitors []*PasitTopology_Monitor `protobuf:"bytes,4,rep,name=monitors,proto3" json:"monitors,omitempty"`
	// The cameras in the topology.
	Cameras []*PasitTopology_Camera `protobuf:"bytes,5,rep,name=cameras,proto3" json:"cameras,omitempty"`
	// The networks in the topology.
	Networks []*PasitTopology_Network `protobuf:"bytes,6,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *PasitTopology) Reset() {
	*x = PasitTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology) ProtoMessage() {}

func (x *PasitTopology) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology.ProtoReflect.Descriptor instead.
func (*PasitTopology) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0}
}

func (x *PasitTopology) GetHosts() []*PasitTopology_Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *PasitTopology) GetSwitches() []*PasitTopology_Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

func (x *PasitTopology) GetDocks() []*PasitTopology_Dock {
	if x != nil {
		return x.Docks
	}
	return nil
}

func (x *PasitTopology) GetMonitors() []*PasitTopology_Monitor {
	if x != nil {
		return x.Monitors
	}
	return nil
}

func (x *PasitTopology) GetCameras() []*PasitTopology_Camera {
	if x != nil {
		return x.Cameras
	}
	return nil
}

func (x *PasitTopology) GetNetworks() []*PasitTopology_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// Port is a single port/connection in the topology.
type PasitTopology_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The port type/technology.
	Technology PasitTopology_PerhipheralTechnology `protobuf:"varint,1,opt,name=technology,proto3,enum=unifiedfleet.api.v1.models.chromeos.lab.PasitTopology_PerhipheralTechnology" json:"technology,omitempty"`
	// The ID of the component connected to this port.
	ConnectedComponent string `protobuf:"bytes,2,opt,name=connected_component,json=connectedComponent,proto3" json:"connected_component,omitempty"`
	// the speed of the port, the units depend on the type of port.
	Speed string `protobuf:"bytes,3,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *PasitTopology_Port) Reset() {
	*x = PasitTopology_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Port) ProtoMessage() {}

func (x *PasitTopology_Port) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Port.ProtoReflect.Descriptor instead.
func (*PasitTopology_Port) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PasitTopology_Port) GetTechnology() PasitTopology_PerhipheralTechnology {
	if x != nil {
		return x.Technology
	}
	return PasitTopology_PERHIPHERAL_TECHNOLOGY_UNKNOWN
}

func (x *PasitTopology_Port) GetConnectedComponent() string {
	if x != nil {
		return x.ConnectedComponent
	}
	return ""
}

func (x *PasitTopology_Port) GetSpeed() string {
	if x != nil {
		return x.Speed
	}
	return ""
}

type PasitTopology_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the host (i.e hostname).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ports in the device with connected components.
	Ports []*PasitTopology_Port `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *PasitTopology_Host) Reset() {
	*x = PasitTopology_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Host) ProtoMessage() {}

func (x *PasitTopology_Host) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Host.ProtoReflect.Descriptor instead.
func (*PasitTopology_Host) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PasitTopology_Host) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasitTopology_Host) GetPorts() []*PasitTopology_Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

// A physical switch in the testbed responsible for changing the active component.
type PasitTopology_Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID of the switch, this can be used to find the specific switch at runtime.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The perhipheral technology that the switch controls.
	Technology PasitTopology_PerhipheralTechnology `protobuf:"varint,2,opt,name=technology,proto3,enum=unifiedfleet.api.v1.models.chromeos.lab.PasitTopology_PerhipheralTechnology" json:"technology,omitempty"`
	// The ports in the device with connected components.
	Ports []*PasitTopology_Port `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *PasitTopology_Switch) Reset() {
	*x = PasitTopology_Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Switch) ProtoMessage() {}

func (x *PasitTopology_Switch) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Switch.ProtoReflect.Descriptor instead.
func (*PasitTopology_Switch) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PasitTopology_Switch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasitTopology_Switch) GetTechnology() PasitTopology_PerhipheralTechnology {
	if x != nil {
		return x.Technology
	}
	return PasitTopology_PERHIPHERAL_TECHNOLOGY_UNKNOWN
}

func (x *PasitTopology_Switch) GetPorts() []*PasitTopology_Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

// A physical dock in the testbed.
type PasitTopology_Dock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID of the dock.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A string defining the make/model of the monitor.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// The ports in the device with connected components.
	Ports       []*PasitTopology_Port           `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	PowerSupply *PasitTopology_Dock_PowerSupply `protobuf:"bytes,4,opt,name=power_supply,json=powerSupply,proto3" json:"power_supply,omitempty"`
}

func (x *PasitTopology_Dock) Reset() {
	*x = PasitTopology_Dock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Dock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Dock) ProtoMessage() {}

func (x *PasitTopology_Dock) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Dock.ProtoReflect.Descriptor instead.
func (*PasitTopology_Dock) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PasitTopology_Dock) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasitTopology_Dock) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *PasitTopology_Dock) GetPorts() []*PasitTopology_Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *PasitTopology_Dock) GetPowerSupply() *PasitTopology_Dock_PowerSupply {
	if x != nil {
		return x.PowerSupply
	}
	return nil
}

// A monitor in the testbed.
type PasitTopology_Monitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID of the monitor.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A string defining the make/model of the monitor.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *PasitTopology_Monitor) Reset() {
	*x = PasitTopology_Monitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Monitor) ProtoMessage() {}

func (x *PasitTopology_Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Monitor.ProtoReflect.Descriptor instead.
func (*PasitTopology_Monitor) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PasitTopology_Monitor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasitTopology_Monitor) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// A camera in the testbed.
type PasitTopology_Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID of the camera.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A string defining the make/model of the camera.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *PasitTopology_Camera) Reset() {
	*x = PasitTopology_Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Camera) ProtoMessage() {}

func (x *PasitTopology_Camera) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Camera.ProtoReflect.Descriptor instead.
func (*PasitTopology_Camera) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PasitTopology_Camera) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasitTopology_Camera) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// A network in the testbed.
type PasitTopology_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID of the network.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PasitTopology_Network) Reset() {
	*x = PasitTopology_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Network) ProtoMessage() {}

func (x *PasitTopology_Network) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Network.ProtoReflect.Descriptor instead.
func (*PasitTopology_Network) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PasitTopology_Network) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Optional power supply information for verification.
type PasitTopology_Dock_PowerSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current string `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Voltage string `protobuf:"bytes,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Power   string `protobuf:"bytes,3,opt,name=power,proto3" json:"power,omitempty"`
}

func (x *PasitTopology_Dock_PowerSupply) Reset() {
	*x = PasitTopology_Dock_PowerSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasitTopology_Dock_PowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasitTopology_Dock_PowerSupply) ProtoMessage() {}

func (x *PasitTopology_Dock_PowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasitTopology_Dock_PowerSupply.ProtoReflect.Descriptor instead.
func (*PasitTopology_Dock_PowerSupply) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *PasitTopology_Dock_PowerSupply) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *PasitTopology_Dock_PowerSupply) GetVoltage() string {
	if x != nil {
		return x.Voltage
	}
	return ""
}

func (x *PasitTopology_Dock_PowerSupply) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

var File_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDesc = []byte{
	0x0a, 0x42, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x2f,
	0x70, 0x61, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x22, 0xfb, 0x0d,
	0x0a, 0x0d, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12,
	0x51, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x59, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50,
	0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x51, 0x0a,
	0x05, 0x64, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73,
	0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x07,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x07, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x73, 0x12, 0x5a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61,
	0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x6c, 0x0a, 0x0a, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x65, 0x72, 0x68, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0a, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x1a,
	0x69, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62,
	0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xd9, 0x01, 0x0a, 0x06, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6c, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e,
	0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x50, 0x65, 0x72, 0x68, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73,
	0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xc4, 0x02, 0x0a, 0x04, 0x44, 0x6f, 0x63, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50,
	0x61, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x50, 0x61, 0x73, 0x69, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x1a, 0x57, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0x2f, 0x0a,
	0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x2e,
	0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x19,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x15, 0x50, 0x65,
	0x72, 0x68, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x48, 0x49, 0x50, 0x48, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x48, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x5f, 0x55, 0x53, 0x42, 0x41, 0x32, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52,
	0x48, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c,
	0x4f, 0x47, 0x59, 0x5f, 0x55, 0x53, 0x42, 0x41, 0x33, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x45, 0x52, 0x48, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e,
	0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x55, 0x53, 0x42, 0x43, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x45, 0x52, 0x48, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43, 0x48,
	0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x48, 0x44, 0x4d, 0x49, 0x10, 0x04, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x45, 0x52, 0x48, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43,
	0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x45, 0x52, 0x48, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
	0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x06, 0x42, 0x35, 0x5a, 0x33, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x3b, 0x75, 0x66, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescData = file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_goTypes = []interface{}{
	(PasitTopology_PerhipheralTechnology)(0), // 0: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.PerhipheralTechnology
	(*PasitTopology)(nil),                    // 1: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology
	(*PasitTopology_Port)(nil),               // 2: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Port
	(*PasitTopology_Host)(nil),               // 3: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Host
	(*PasitTopology_Switch)(nil),             // 4: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Switch
	(*PasitTopology_Dock)(nil),               // 5: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Dock
	(*PasitTopology_Monitor)(nil),            // 6: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Monitor
	(*PasitTopology_Camera)(nil),             // 7: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Camera
	(*PasitTopology_Network)(nil),            // 8: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Network
	(*PasitTopology_Dock_PowerSupply)(nil),   // 9: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Dock.PowerSupply
}
var file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_depIdxs = []int32{
	3,  // 0: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.hosts:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Host
	4,  // 1: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.switches:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Switch
	5,  // 2: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.docks:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Dock
	6,  // 3: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.monitors:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Monitor
	7,  // 4: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.cameras:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Camera
	8,  // 5: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.networks:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Network
	0,  // 6: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Port.technology:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.PerhipheralTechnology
	2,  // 7: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Host.ports:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Port
	0,  // 8: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Switch.technology:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.PerhipheralTechnology
	2,  // 9: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Switch.ports:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Port
	2,  // 10: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Dock.ports:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Port
	9,  // 11: unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Dock.power_supply:type_name -> unifiedfleet.api.v1.models.chromeos.lab.PasitTopology.Dock.PowerSupply
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_init() }
func file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_init() {
	if File_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Dock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Monitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasitTopology_Dock_PowerSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_depIdxs,
		EnumInfos:         file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_enumTypes,
		MessageInfos:      file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto = out.File
	file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_models_chromeos_lab_pasit_topology_proto_depIdxs = nil
}
