// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/unifiedfleet/api/v1/models/peripherals.proto

package ufspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KVM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique serial_number or asset tag
	// The format will be kvms/{kvm}
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Should match one of the predefined Chrome Platforms.
	// Refers to ChromePlatform name
	ChromePlatform string `protobuf:"bytes,3,opt,name=chrome_platform,json=chromePlatform,proto3" json:"chrome_platform,omitempty"`
	CapacityPort   int32  `protobuf:"varint,4,opt,name=capacity_port,json=capacityPort,proto3" json:"capacity_port,omitempty"`
	// Record the last update timestamp of this KVM (In UTC timezone)
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Refers to Rack name
	Rack string `protobuf:"bytes,7,opt,name=rack,proto3" json:"rack,omitempty"`
	// tags user can attach for easy querying/searching
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Refers to Zone
	Zone string `protobuf:"bytes,10,opt,name=zone,proto3" json:"zone,omitempty"`
	// A description of this kvm.
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// State of the kvm
	ResourceState State `protobuf:"varint,12,opt,name=resource_state,json=resourceState,proto3,enum=unifiedfleet.api.v1.models.State" json:"resource_state,omitempty"`
}

func (x *KVM) Reset() {
	*x = KVM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVM) ProtoMessage() {}

func (x *KVM) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVM.ProtoReflect.Descriptor instead.
func (*KVM) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{0}
}

func (x *KVM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KVM) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *KVM) GetChromePlatform() string {
	if x != nil {
		return x.ChromePlatform
	}
	return ""
}

func (x *KVM) GetCapacityPort() int32 {
	if x != nil {
		return x.CapacityPort
	}
	return 0
}

func (x *KVM) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *KVM) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *KVM) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KVM) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *KVM) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KVM) GetResourceState() State {
	if x != nil {
		return x.ResourceState
	}
	return State_STATE_UNSPECIFIED
}

// Refer to one port of a given KVM
type KVMInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Refers to KVM name
	Kvm      string `protobuf:"bytes,1,opt,name=kvm,proto3" json:"kvm,omitempty"`
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *KVMInterface) Reset() {
	*x = KVMInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVMInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVMInterface) ProtoMessage() {}

func (x *KVMInterface) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVMInterface.ProtoReflect.Descriptor instead.
func (*KVMInterface) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{1}
}

func (x *KVMInterface) GetKvm() string {
	if x != nil {
		return x.Kvm
	}
	return ""
}

func (x *KVMInterface) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

type RPM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique serial_number or asset tag
	// The format will be rpms/{rpm}
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MacAddress   string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	CapacityPort int32  `protobuf:"varint,3,opt,name=capacity_port,json=capacityPort,proto3" json:"capacity_port,omitempty"`
	// Just for record here, can be added later if needed
	// To be recorded: model, manufacturer, amperage, voltage
	// Record the last update timestamp of this RPM (In UTC timezone)
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Refers to Rack name
	Rack string `protobuf:"bytes,6,opt,name=rack,proto3" json:"rack,omitempty"`
	// tags user can attach for easy querying/searching
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// Refers to Zone
	Zone string `protobuf:"bytes,10,opt,name=zone,proto3" json:"zone,omitempty"`
	// State of the rpm
	ResourceState State `protobuf:"varint,11,opt,name=resource_state,json=resourceState,proto3,enum=unifiedfleet.api.v1.models.State" json:"resource_state,omitempty"`
	// A description of this rpm.
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RPM) Reset() {
	*x = RPM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPM) ProtoMessage() {}

func (x *RPM) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPM.ProtoReflect.Descriptor instead.
func (*RPM) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{2}
}

func (x *RPM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RPM) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *RPM) GetCapacityPort() int32 {
	if x != nil {
		return x.CapacityPort
	}
	return 0
}

func (x *RPM) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RPM) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *RPM) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RPM) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *RPM) GetResourceState() State {
	if x != nil {
		return x.ResourceState
	}
	return State_STATE_UNSPECIFIED
}

func (x *RPM) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Refer to one port of a given RPM
type RPMInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Refers to RPM name
	Rpm      string `protobuf:"bytes,1,opt,name=rpm,proto3" json:"rpm,omitempty"`
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *RPMInterface) Reset() {
	*x = RPMInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPMInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPMInterface) ProtoMessage() {}

func (x *RPMInterface) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPMInterface.ProtoReflect.Descriptor instead.
func (*RPMInterface) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{3}
}

func (x *RPMInterface) GetRpm() string {
	if x != nil {
		return x.Rpm
	}
	return ""
}

func (x *RPMInterface) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

type Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique serial_number or asset tag
	// The format will be switches/{switch}
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CapacityPort int32  `protobuf:"varint,2,opt,name=capacity_port,json=capacityPort,proto3" json:"capacity_port,omitempty"`
	// Record the last update timestamp of this Switch (In UTC timezone)
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Usually describe the model of the switch
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Refers to Rack name
	Rack string `protobuf:"bytes,6,opt,name=rack,proto3" json:"rack,omitempty"`
	// tags user can attach for easy querying/searching
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// Refers to Zone
	Zone string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone,omitempty"`
	// State of the switch
	ResourceState State `protobuf:"varint,10,opt,name=resource_state,json=resourceState,proto3,enum=unifiedfleet.api.v1.models.State" json:"resource_state,omitempty"`
}

func (x *Switch) Reset() {
	*x = Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switch) ProtoMessage() {}

func (x *Switch) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switch.ProtoReflect.Descriptor instead.
func (*Switch) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{4}
}

func (x *Switch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Switch) GetCapacityPort() int32 {
	if x != nil {
		return x.CapacityPort
	}
	return 0
}

func (x *Switch) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Switch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Switch) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *Switch) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Switch) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Switch) GetResourceState() State {
	if x != nil {
		return x.ResourceState
	}
	return State_STATE_UNSPECIFIED
}

// Refer to one port of a given switch
type SwitchInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Refers to Switch name
	Switch   string `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *SwitchInterface) Reset() {
	*x = SwitchInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInterface) ProtoMessage() {}

func (x *SwitchInterface) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInterface.ProtoReflect.Descriptor instead.
func (*SwitchInterface) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{5}
}

func (x *SwitchInterface) GetSwitch() string {
	if x != nil {
		return x.Switch
	}
	return ""
}

func (x *SwitchInterface) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

type Drac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique serial_number or asset tag
	// The format will be dracs/{drac}
	Name            string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName     string           `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	MacAddress      string           `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	SwitchInterface *SwitchInterface `protobuf:"bytes,4,opt,name=switch_interface,json=switchInterface,proto3" json:"switch_interface,omitempty"`
	Password        string           `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// Record the last update timestamp of this Drac (In UTC timezone)
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Refers to Machine name
	Machine string `protobuf:"bytes,7,opt,name=machine,proto3" json:"machine,omitempty"`
	// Refers to Rack name
	Rack string `protobuf:"bytes,9,opt,name=rack,proto3" json:"rack,omitempty"`
	// tags user can attach for easy querying/searching
	Tags []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// Refers to Zone
	Zone string `protobuf:"bytes,12,opt,name=zone,proto3" json:"zone,omitempty"`
	// State of the drac
	ResourceState State `protobuf:"varint,13,opt,name=resource_state,json=resourceState,proto3,enum=unifiedfleet.api.v1.models.State" json:"resource_state,omitempty"`
}

func (x *Drac) Reset() {
	*x = Drac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Drac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drac) ProtoMessage() {}

func (x *Drac) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Drac.ProtoReflect.Descriptor instead.
func (*Drac) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP(), []int{6}
}

func (x *Drac) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Drac) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Drac) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Drac) GetSwitchInterface() *SwitchInterface {
	if x != nil {
		return x.SwitchInterface
	}
	return nil
}

func (x *Drac) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Drac) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Drac) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

func (x *Drac) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *Drac) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Drac) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Drac) GetResourceState() State {
	if x != nil {
		return x.ResourceState
	}
	return State_STATE_UNSPECIFIED
}

var File_infra_unifiedfleet_api_v1_models_peripherals_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDesc = []byte{
	0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x04, 0x0a, 0x03,
	0x4b, 0x56, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x0f, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x41,
	0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x35, 0xea, 0x41, 0x32, 0x0a, 0x24, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b,
	0x56, 0x4d, 0x12, 0x0a, 0x6b, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x6b, 0x76, 0x6d, 0x7d, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x03, 0x6c, 0x61, 0x62, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x0c, 0x4b, 0x56, 0x4d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x6b, 0x76, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x56, 0x4d, 0x52, 0x03,
	0x6b, 0x76, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc9, 0x03, 0x0a,
	0x03, 0x52, 0x50, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x48, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x35, 0xea, 0x41, 0x32, 0x0a, 0x24,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x50, 0x4d, 0x12, 0x0a, 0x72, 0x70, 0x6d, 0x73, 0x2f, 0x7b, 0x72, 0x70, 0x6d, 0x7d,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x03, 0x6c, 0x61,
	0x62, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x0c, 0x52, 0x50, 0x4d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x72, 0x70, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x50, 0x4d,
	0x52, 0x03, 0x72, 0x70, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb5,
	0x03, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b,
	0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x3f, 0xea,
	0x41, 0x3c, 0x0a, 0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x11, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x7d, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x62, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x41, 0x29, 0x0a,
	0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xfc, 0x04, 0x0a, 0x04, 0x44, 0x72,
	0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52,
	0x61, 0x63, 0x6b, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x4b, 0xea, 0x41, 0x48, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x61, 0x63, 0x12,
	0x1f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x7d, 0x2f, 0x64, 0x72, 0x61, 0x63, 0x73, 0x2f, 0x7b, 0x64, 0x72, 0x61, 0x63, 0x7d,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x52, 0x03, 0x6c, 0x61,
	0x62, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3b, 0x75, 0x66, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescData = file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_infra_unifiedfleet_api_v1_models_peripherals_proto_goTypes = []interface{}{
	(*KVM)(nil),                   // 0: unifiedfleet.api.v1.models.KVM
	(*KVMInterface)(nil),          // 1: unifiedfleet.api.v1.models.KVMInterface
	(*RPM)(nil),                   // 2: unifiedfleet.api.v1.models.RPM
	(*RPMInterface)(nil),          // 3: unifiedfleet.api.v1.models.RPMInterface
	(*Switch)(nil),                // 4: unifiedfleet.api.v1.models.Switch
	(*SwitchInterface)(nil),       // 5: unifiedfleet.api.v1.models.SwitchInterface
	(*Drac)(nil),                  // 6: unifiedfleet.api.v1.models.Drac
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(State)(0),                    // 8: unifiedfleet.api.v1.models.State
}
var file_infra_unifiedfleet_api_v1_models_peripherals_proto_depIdxs = []int32{
	7, // 0: unifiedfleet.api.v1.models.KVM.update_time:type_name -> google.protobuf.Timestamp
	8, // 1: unifiedfleet.api.v1.models.KVM.resource_state:type_name -> unifiedfleet.api.v1.models.State
	7, // 2: unifiedfleet.api.v1.models.RPM.update_time:type_name -> google.protobuf.Timestamp
	8, // 3: unifiedfleet.api.v1.models.RPM.resource_state:type_name -> unifiedfleet.api.v1.models.State
	7, // 4: unifiedfleet.api.v1.models.Switch.update_time:type_name -> google.protobuf.Timestamp
	8, // 5: unifiedfleet.api.v1.models.Switch.resource_state:type_name -> unifiedfleet.api.v1.models.State
	5, // 6: unifiedfleet.api.v1.models.Drac.switch_interface:type_name -> unifiedfleet.api.v1.models.SwitchInterface
	7, // 7: unifiedfleet.api.v1.models.Drac.update_time:type_name -> google.protobuf.Timestamp
	8, // 8: unifiedfleet.api.v1.models.Drac.resource_state:type_name -> unifiedfleet.api.v1.models.State
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_models_peripherals_proto_init() }
func file_infra_unifiedfleet_api_v1_models_peripherals_proto_init() {
	if File_infra_unifiedfleet_api_v1_models_peripherals_proto != nil {
		return
	}
	file_infra_unifiedfleet_api_v1_models_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVMInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPMInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Drac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_models_peripherals_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_models_peripherals_proto_depIdxs,
		MessageInfos:      file_infra_unifiedfleet_api_v1_models_peripherals_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_models_peripherals_proto = out.File
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_depIdxs = nil
}
