// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This proto definition describes the lab setup environment (LSE) for machine
// in UFS.
// See go/ufs-design for details of LSE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/unifiedfleet/api/v1/proto/machine_lse.proto

package ufspb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	lab "infra/unifiedfleet/api/v1/proto/chromeos/lab"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// MachineLSE is the Machine Lab Setup Environment.
// It refers to the entity in the lab which has Machine(s) associated
// with it. It also has other components associated with it.
//
// Next tag: 9
type MachineLSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the unique hostname of the MachineLSE
	// The format will be machineLSEs/XXX
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The prototype that this machine LSE should follow. System will use this
	// prototype to detect if the LSE is completed or valid.
	MachineLsePrototype string `protobuf:"bytes,2,opt,name=machine_lse_prototype,json=machineLsePrototype,proto3" json:"machine_lse_prototype,omitempty"`
	// The hostname is also recorded in DHCP configs
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Types that are assignable to Lse:
	//	*MachineLSE_ChromeBrowserMachineLse
	//	*MachineLSE_ChromeosMachineLse
	Lse isMachineLSE_Lse `protobuf_oneof:"lse"`
	// The machines that this LSE is linked to. No machine is linked if it's empty.
	// A machine cannot be linked to multiple LSEs (no use case for now).
	Machines []string `protobuf:"bytes,6,rep,name=machines,proto3" json:"machines,omitempty"`
	// Record the last update timestamp of this MachineLSE (In UTC timezone)
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The nic used to associate with the hostname, as one machine/host may contain multiple nics.
	Nic string `protobuf:"bytes,8,opt,name=nic,proto3" json:"nic,omitempty"`
	// Refers to Lab
	//
	// Deprecated: Do not use.
	Lab string `protobuf:"bytes,9,opt,name=lab,proto3" json:"lab,omitempty"`
	// Refers to Rack name
	Rack string `protobuf:"bytes,10,opt,name=rack,proto3" json:"rack,omitempty"`
	// Refer to the manufacturer name of the attached machine for the host
	Manufacturer string `protobuf:"bytes,11,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// tags user can attach for easy querying/searching
	Tags  []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	State string   `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	// Refers to Zone
	Zone string `protobuf:"bytes,14,opt,name=zone,proto3" json:"zone,omitempty"`
	// The deployment ticket associated with this host.
	DeploymentTicket string `protobuf:"bytes,15,opt,name=deployment_ticket,json=deploymentTicket,proto3" json:"deployment_ticket,omitempty"`
	// A description of this host.
	Description string `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MachineLSE) Reset() {
	*x = MachineLSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineLSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLSE) ProtoMessage() {}

func (x *MachineLSE) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLSE.ProtoReflect.Descriptor instead.
func (*MachineLSE) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{0}
}

func (x *MachineLSE) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineLSE) GetMachineLsePrototype() string {
	if x != nil {
		return x.MachineLsePrototype
	}
	return ""
}

func (x *MachineLSE) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (m *MachineLSE) GetLse() isMachineLSE_Lse {
	if m != nil {
		return m.Lse
	}
	return nil
}

func (x *MachineLSE) GetChromeBrowserMachineLse() *ChromeBrowserMachineLSE {
	if x, ok := x.GetLse().(*MachineLSE_ChromeBrowserMachineLse); ok {
		return x.ChromeBrowserMachineLse
	}
	return nil
}

func (x *MachineLSE) GetChromeosMachineLse() *ChromeOSMachineLSE {
	if x, ok := x.GetLse().(*MachineLSE_ChromeosMachineLse); ok {
		return x.ChromeosMachineLse
	}
	return nil
}

func (x *MachineLSE) GetMachines() []string {
	if x != nil {
		return x.Machines
	}
	return nil
}

func (x *MachineLSE) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *MachineLSE) GetNic() string {
	if x != nil {
		return x.Nic
	}
	return ""
}

// Deprecated: Do not use.
func (x *MachineLSE) GetLab() string {
	if x != nil {
		return x.Lab
	}
	return ""
}

func (x *MachineLSE) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *MachineLSE) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MachineLSE) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MachineLSE) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MachineLSE) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *MachineLSE) GetDeploymentTicket() string {
	if x != nil {
		return x.DeploymentTicket
	}
	return ""
}

func (x *MachineLSE) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isMachineLSE_Lse interface {
	isMachineLSE_Lse()
}

type MachineLSE_ChromeBrowserMachineLse struct {
	ChromeBrowserMachineLse *ChromeBrowserMachineLSE `protobuf:"bytes,4,opt,name=chrome_browser_machine_lse,json=chromeBrowserMachineLse,proto3,oneof"`
}

type MachineLSE_ChromeosMachineLse struct {
	ChromeosMachineLse *ChromeOSMachineLSE `protobuf:"bytes,5,opt,name=chromeos_machine_lse,json=chromeosMachineLse,proto3,oneof"`
}

func (*MachineLSE_ChromeBrowserMachineLse) isMachineLSE_Lse() {}

func (*MachineLSE_ChromeosMachineLse) isMachineLSE_Lse() {}

// ChromeBrowserMachineLSE refers to the entity
// which hosts the vms in Chrome Browser lab
type ChromeBrowserMachineLSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate if VM is needed to set up
	// number of vms on the host
	Vms []*VM `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	// The allowed vm slots for this browser machine, usually it's manually set based on sysadmin's judgement.
	VmCapacity int32 `protobuf:"varint,2,opt,name=vm_capacity,json=vmCapacity,proto3" json:"vm_capacity,omitempty"`
	// Indicate the os version of the machine itself.
	OsVersion *OSVersion `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// The virtual datacenter VMs deployed on this host belong to.
	VirtualDatacenter string `protobuf:"bytes,4,opt,name=virtual_datacenter,json=virtualDatacenter,proto3" json:"virtual_datacenter,omitempty"`
}

func (x *ChromeBrowserMachineLSE) Reset() {
	*x = ChromeBrowserMachineLSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeBrowserMachineLSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeBrowserMachineLSE) ProtoMessage() {}

func (x *ChromeBrowserMachineLSE) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeBrowserMachineLSE.ProtoReflect.Descriptor instead.
func (*ChromeBrowserMachineLSE) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{1}
}

func (x *ChromeBrowserMachineLSE) GetVms() []*VM {
	if x != nil {
		return x.Vms
	}
	return nil
}

func (x *ChromeBrowserMachineLSE) GetVmCapacity() int32 {
	if x != nil {
		return x.VmCapacity
	}
	return 0
}

func (x *ChromeBrowserMachineLSE) GetOsVersion() *OSVersion {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *ChromeBrowserMachineLSE) GetVirtualDatacenter() string {
	if x != nil {
		return x.VirtualDatacenter
	}
	return ""
}

type VM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique vm name
	Name       string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OsVersion  *OSVersion `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	MacAddress string     `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Hostname   string     `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Vlan       string     `protobuf:"bytes,5,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Deprecated: Do not use.
	Lab          string `protobuf:"bytes,6,opt,name=lab,proto3" json:"lab,omitempty"`
	MachineLseId string `protobuf:"bytes,7,opt,name=machine_lse_id,json=machineLseId,proto3" json:"machine_lse_id,omitempty"`
	State        string `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Record the last update timestamp of this VM (In UTC timezone)
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// tags user can attach for easy querying/searching
	Tags []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// Refers to Zone
	Zone string `protobuf:"bytes,11,opt,name=zone,proto3" json:"zone,omitempty"`
	// A description of this vm.
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *VM) Reset() {
	*x = VM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM) ProtoMessage() {}

func (x *VM) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM.ProtoReflect.Descriptor instead.
func (*VM) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{2}
}

func (x *VM) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VM) GetOsVersion() *OSVersion {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *VM) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *VM) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *VM) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

// Deprecated: Do not use.
func (x *VM) GetLab() string {
	if x != nil {
		return x.Lab
	}
	return ""
}

func (x *VM) GetMachineLseId() string {
	if x != nil {
		return x.MachineLseId
	}
	return ""
}

func (x *VM) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *VM) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *VM) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VM) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *VM) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// OSVersion refers to the version of Operating System
// for machines running in Chrome Browser lab
type OSVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Image       string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *OSVersion) Reset() {
	*x = OSVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSVersion) ProtoMessage() {}

func (x *OSVersion) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSVersion.ProtoReflect.Descriptor instead.
func (*OSVersion) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{3}
}

func (x *OSVersion) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OSVersion) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OSVersion) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ChromeOSMachineLSE refers to the entity in Chrome OS lab
// which can be a Device(DUT, test Bed or Labstation) or a server
type ChromeOSMachineLSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ChromeosLse:
	//	*ChromeOSMachineLSE_Dut
	//	*ChromeOSMachineLSE_Server
	//	*ChromeOSMachineLSE_DeviceLse
	//	*ChromeOSMachineLSE_ServerLse
	ChromeosLse isChromeOSMachineLSE_ChromeosLse `protobuf_oneof:"chromeos_lse"`
}

func (x *ChromeOSMachineLSE) Reset() {
	*x = ChromeOSMachineLSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeOSMachineLSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeOSMachineLSE) ProtoMessage() {}

func (x *ChromeOSMachineLSE) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeOSMachineLSE.ProtoReflect.Descriptor instead.
func (*ChromeOSMachineLSE) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{4}
}

func (m *ChromeOSMachineLSE) GetChromeosLse() isChromeOSMachineLSE_ChromeosLse {
	if m != nil {
		return m.ChromeosLse
	}
	return nil
}

// Deprecated: Do not use.
func (x *ChromeOSMachineLSE) GetDut() *ChromeOSDeviceLSE {
	if x, ok := x.GetChromeosLse().(*ChromeOSMachineLSE_Dut); ok {
		return x.Dut
	}
	return nil
}

// Deprecated: Do not use.
func (x *ChromeOSMachineLSE) GetServer() *ChromeOSServerLSE {
	if x, ok := x.GetChromeosLse().(*ChromeOSMachineLSE_Server); ok {
		return x.Server
	}
	return nil
}

func (x *ChromeOSMachineLSE) GetDeviceLse() *ChromeOSDeviceLSE {
	if x, ok := x.GetChromeosLse().(*ChromeOSMachineLSE_DeviceLse); ok {
		return x.DeviceLse
	}
	return nil
}

func (x *ChromeOSMachineLSE) GetServerLse() *ChromeOSServerLSE {
	if x, ok := x.GetChromeosLse().(*ChromeOSMachineLSE_ServerLse); ok {
		return x.ServerLse
	}
	return nil
}

type isChromeOSMachineLSE_ChromeosLse interface {
	isChromeOSMachineLSE_ChromeosLse()
}

type ChromeOSMachineLSE_Dut struct {
	// Deprecated: Do not use.
	Dut *ChromeOSDeviceLSE `protobuf:"bytes,1,opt,name=dut,proto3,oneof"`
}

type ChromeOSMachineLSE_Server struct {
	// Deprecated: Do not use.
	Server *ChromeOSServerLSE `protobuf:"bytes,2,opt,name=server,proto3,oneof"`
}

type ChromeOSMachineLSE_DeviceLse struct {
	DeviceLse *ChromeOSDeviceLSE `protobuf:"bytes,3,opt,name=device_lse,json=deviceLse,proto3,oneof"`
}

type ChromeOSMachineLSE_ServerLse struct {
	ServerLse *ChromeOSServerLSE `protobuf:"bytes,4,opt,name=server_lse,json=serverLse,proto3,oneof"`
}

func (*ChromeOSMachineLSE_Dut) isChromeOSMachineLSE_ChromeosLse() {}

func (*ChromeOSMachineLSE_Server) isChromeOSMachineLSE_ChromeosLse() {}

func (*ChromeOSMachineLSE_DeviceLse) isChromeOSMachineLSE_ChromeosLse() {}

func (*ChromeOSMachineLSE_ServerLse) isChromeOSMachineLSE_ChromeosLse() {}

// ChromeOSDeviceLSE refers to the entity in Chrome OS lab
// which is a DUT, test Bed or a Labstation
type ChromeOSDeviceLSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Config                 *lab.DeviceUnderTest `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	RpmInterface           *RPMInterface        `protobuf:"bytes,2,opt,name=rpm_interface,json=rpmInterface,proto3" json:"rpm_interface,omitempty"`
	NetworkDeviceInterface *SwitchInterface     `protobuf:"bytes,3,opt,name=network_device_interface,json=networkDeviceInterface,proto3" json:"network_device_interface,omitempty"`
	// Types that are assignable to Device:
	//	*ChromeOSDeviceLSE_Dut
	//	*ChromeOSDeviceLSE_Labstation
	Device isChromeOSDeviceLSE_Device `protobuf_oneof:"device"`
}

func (x *ChromeOSDeviceLSE) Reset() {
	*x = ChromeOSDeviceLSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeOSDeviceLSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeOSDeviceLSE) ProtoMessage() {}

func (x *ChromeOSDeviceLSE) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeOSDeviceLSE.ProtoReflect.Descriptor instead.
func (*ChromeOSDeviceLSE) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Do not use.
func (x *ChromeOSDeviceLSE) GetConfig() *lab.DeviceUnderTest {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ChromeOSDeviceLSE) GetRpmInterface() *RPMInterface {
	if x != nil {
		return x.RpmInterface
	}
	return nil
}

func (x *ChromeOSDeviceLSE) GetNetworkDeviceInterface() *SwitchInterface {
	if x != nil {
		return x.NetworkDeviceInterface
	}
	return nil
}

func (m *ChromeOSDeviceLSE) GetDevice() isChromeOSDeviceLSE_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (x *ChromeOSDeviceLSE) GetDut() *lab.DeviceUnderTest {
	if x, ok := x.GetDevice().(*ChromeOSDeviceLSE_Dut); ok {
		return x.Dut
	}
	return nil
}

func (x *ChromeOSDeviceLSE) GetLabstation() *lab.Labstation {
	if x, ok := x.GetDevice().(*ChromeOSDeviceLSE_Labstation); ok {
		return x.Labstation
	}
	return nil
}

type isChromeOSDeviceLSE_Device interface {
	isChromeOSDeviceLSE_Device()
}

type ChromeOSDeviceLSE_Dut struct {
	Dut *lab.DeviceUnderTest `protobuf:"bytes,4,opt,name=dut,proto3,oneof"`
}

type ChromeOSDeviceLSE_Labstation struct {
	Labstation *lab.Labstation `protobuf:"bytes,5,opt,name=labstation,proto3,oneof"`
}

func (*ChromeOSDeviceLSE_Dut) isChromeOSDeviceLSE_Device() {}

func (*ChromeOSDeviceLSE_Labstation) isChromeOSDeviceLSE_Device() {}

// ChromeOSServerLSE refers to the entity in Chrome OS lab
// which is a server. Servers serve as different roles, e.g. devservers,
// for caching chromeos images, and drones, for running GKE pods to
// maintain the swarming bots that maps to the real chromeos devices.
type ChromeOSServerLSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan that this server is going to serve
	SupportedRestrictedVlan string `protobuf:"bytes,1,opt,name=supported_restricted_vlan,json=supportedRestrictedVlan,proto3" json:"supported_restricted_vlan,omitempty"`
	ServicePort             int32  `protobuf:"varint,2,opt,name=service_port,json=servicePort,proto3" json:"service_port,omitempty"`
}

func (x *ChromeOSServerLSE) Reset() {
	*x = ChromeOSServerLSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeOSServerLSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeOSServerLSE) ProtoMessage() {}

func (x *ChromeOSServerLSE) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeOSServerLSE.ProtoReflect.Descriptor instead.
func (*ChromeOSServerLSE) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP(), []int{6}
}

func (x *ChromeOSServerLSE) GetSupportedRestrictedVlan() string {
	if x != nil {
		return x.SupportedRestrictedVlan
	}
	return ""
}

func (x *ChromeOSServerLSE) GetServicePort() int32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

var File_infra_unifiedfleet_api_v1_proto_machine_lse_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDesc = []byte{
	0x0a, 0x31, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x65, 0x72,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x07, 0x0a, 0x0a, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x15,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xfa, 0x41, 0x36,
	0x0a, 0x34, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x71, 0x0a, 0x1a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x48,
	0x00, 0x52, 0x12, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x03,
	0x6c, 0x61, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x18, 0x01, 0xe0, 0x41, 0x03,
	0x52, 0x03, 0x6c, 0x61, 0x62, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0xe0,
	0x41, 0x03, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4a, 0xea, 0x41, 0x47, 0x0a, 0x2b, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x18, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x7d, 0x42, 0x05, 0x0a, 0x03, 0x6c, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x17,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x2f, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x4d, 0x52, 0x03, 0x76, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6d, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76,
	0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xfd, 0x03,
	0x0a, 0x02, 0x56, 0x4d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x56, 0x6c, 0x61, 0x6e, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a,
	0x03, 0x6c, 0x61, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x18, 0x01, 0xe0, 0x41,
	0x03, 0x52, 0x03, 0x6c, 0x61, 0x62, 0x12, 0x59, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x6c, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a,
	0x09, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12,
	0x44, 0x0a, 0x03, 0x64, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f,
	0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x53, 0x45, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x03, 0x64, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x53, 0x45, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x53, 0x45, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x53, 0x45, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x73, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x6c, 0x73, 0x65, 0x22,
	0xc9, 0x03, 0x0a, 0x11, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x53, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x70,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x50,
	0x4d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x70, 0x6d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x03, 0x64, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x64, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x6c,
	0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x11,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x53,
	0x45, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x6c, 0x61, 0x6e,
	0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x27, 0x5a, 0x25,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x75, 0x66, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescData = file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_goTypes = []interface{}{
	(*MachineLSE)(nil),              // 0: unifiedfleet.api.v1.proto.MachineLSE
	(*ChromeBrowserMachineLSE)(nil), // 1: unifiedfleet.api.v1.proto.ChromeBrowserMachineLSE
	(*VM)(nil),                      // 2: unifiedfleet.api.v1.proto.VM
	(*OSVersion)(nil),               // 3: unifiedfleet.api.v1.proto.OSVersion
	(*ChromeOSMachineLSE)(nil),      // 4: unifiedfleet.api.v1.proto.ChromeOSMachineLSE
	(*ChromeOSDeviceLSE)(nil),       // 5: unifiedfleet.api.v1.proto.ChromeOSDeviceLSE
	(*ChromeOSServerLSE)(nil),       // 6: unifiedfleet.api.v1.proto.ChromeOSServerLSE
	(*timestamp.Timestamp)(nil),     // 7: google.protobuf.Timestamp
	(*lab.DeviceUnderTest)(nil),     // 8: unifiedfleet.api.v1.proto.chromeos.lab.DeviceUnderTest
	(*RPMInterface)(nil),            // 9: unifiedfleet.api.v1.proto.RPMInterface
	(*SwitchInterface)(nil),         // 10: unifiedfleet.api.v1.proto.SwitchInterface
	(*lab.Labstation)(nil),          // 11: unifiedfleet.api.v1.proto.chromeos.lab.Labstation
}
var file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_depIdxs = []int32{
	1,  // 0: unifiedfleet.api.v1.proto.MachineLSE.chrome_browser_machine_lse:type_name -> unifiedfleet.api.v1.proto.ChromeBrowserMachineLSE
	4,  // 1: unifiedfleet.api.v1.proto.MachineLSE.chromeos_machine_lse:type_name -> unifiedfleet.api.v1.proto.ChromeOSMachineLSE
	7,  // 2: unifiedfleet.api.v1.proto.MachineLSE.update_time:type_name -> google.protobuf.Timestamp
	2,  // 3: unifiedfleet.api.v1.proto.ChromeBrowserMachineLSE.vms:type_name -> unifiedfleet.api.v1.proto.VM
	3,  // 4: unifiedfleet.api.v1.proto.ChromeBrowserMachineLSE.os_version:type_name -> unifiedfleet.api.v1.proto.OSVersion
	3,  // 5: unifiedfleet.api.v1.proto.VM.os_version:type_name -> unifiedfleet.api.v1.proto.OSVersion
	7,  // 6: unifiedfleet.api.v1.proto.VM.update_time:type_name -> google.protobuf.Timestamp
	5,  // 7: unifiedfleet.api.v1.proto.ChromeOSMachineLSE.dut:type_name -> unifiedfleet.api.v1.proto.ChromeOSDeviceLSE
	6,  // 8: unifiedfleet.api.v1.proto.ChromeOSMachineLSE.server:type_name -> unifiedfleet.api.v1.proto.ChromeOSServerLSE
	5,  // 9: unifiedfleet.api.v1.proto.ChromeOSMachineLSE.device_lse:type_name -> unifiedfleet.api.v1.proto.ChromeOSDeviceLSE
	6,  // 10: unifiedfleet.api.v1.proto.ChromeOSMachineLSE.server_lse:type_name -> unifiedfleet.api.v1.proto.ChromeOSServerLSE
	8,  // 11: unifiedfleet.api.v1.proto.ChromeOSDeviceLSE.config:type_name -> unifiedfleet.api.v1.proto.chromeos.lab.DeviceUnderTest
	9,  // 12: unifiedfleet.api.v1.proto.ChromeOSDeviceLSE.rpm_interface:type_name -> unifiedfleet.api.v1.proto.RPMInterface
	10, // 13: unifiedfleet.api.v1.proto.ChromeOSDeviceLSE.network_device_interface:type_name -> unifiedfleet.api.v1.proto.SwitchInterface
	8,  // 14: unifiedfleet.api.v1.proto.ChromeOSDeviceLSE.dut:type_name -> unifiedfleet.api.v1.proto.chromeos.lab.DeviceUnderTest
	11, // 15: unifiedfleet.api.v1.proto.ChromeOSDeviceLSE.labstation:type_name -> unifiedfleet.api.v1.proto.chromeos.lab.Labstation
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_init() }
func file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_init() {
	if File_infra_unifiedfleet_api_v1_proto_machine_lse_proto != nil {
		return
	}
	file_infra_unifiedfleet_api_v1_proto_peripherals_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineLSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeBrowserMachineLSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeOSMachineLSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeOSDeviceLSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeOSServerLSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MachineLSE_ChromeBrowserMachineLse)(nil),
		(*MachineLSE_ChromeosMachineLse)(nil),
	}
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ChromeOSMachineLSE_Dut)(nil),
		(*ChromeOSMachineLSE_Server)(nil),
		(*ChromeOSMachineLSE_DeviceLse)(nil),
		(*ChromeOSMachineLSE_ServerLse)(nil),
	}
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ChromeOSDeviceLSE_Dut)(nil),
		(*ChromeOSDeviceLSE_Labstation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_depIdxs,
		MessageInfos:      file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_proto_machine_lse_proto = out.File
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_proto_machine_lse_proto_depIdxs = nil
}
