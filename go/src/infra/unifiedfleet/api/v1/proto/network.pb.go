// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/proto/network.proto

package ufspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Nic struct {
	// Unique serial_number or asset tag
	// The format will be nics/XXX
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Record the last update timestamp of this machine (In UTC timezone)
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Refers to machine name
	Machine              string   `protobuf:"bytes,4,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nic) Reset()         { *m = Nic{} }
func (m *Nic) String() string { return proto.CompactTextString(m) }
func (*Nic) ProtoMessage()    {}
func (*Nic) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c66b9144f80972, []int{0}
}

func (m *Nic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nic.Unmarshal(m, b)
}
func (m *Nic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nic.Marshal(b, m, deterministic)
}
func (m *Nic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nic.Merge(m, src)
}
func (m *Nic) XXX_Size() int {
	return xxx_messageInfo_Nic.Size(m)
}
func (m *Nic) XXX_DiscardUnknown() {
	xxx_messageInfo_Nic.DiscardUnknown(m)
}

var xxx_messageInfo_Nic proto.InternalMessageInfo

func (m *Nic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Nic) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Nic) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Nic) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type Vlan struct {
	// Unique name for the Vlan
	// The format will be vlans/XXX
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The format will be subnet/CIDR.
	VlanAddress string `protobuf:"bytes,2,opt,name=vlan_address,json=vlanAddress,proto3" json:"vlan_address,omitempty"`
	// The number of IPs that in this vlan
	CapacityIp int32 `protobuf:"varint,3,opt,name=capacity_ip,json=capacityIp,proto3" json:"capacity_ip,omitempty"`
	// Record the last update timestamp of this Vlan (In UTC timezone)
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Vlan) Reset()         { *m = Vlan{} }
func (m *Vlan) String() string { return proto.CompactTextString(m) }
func (*Vlan) ProtoMessage()    {}
func (*Vlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c66b9144f80972, []int{1}
}

func (m *Vlan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlan.Unmarshal(m, b)
}
func (m *Vlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlan.Marshal(b, m, deterministic)
}
func (m *Vlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlan.Merge(m, src)
}
func (m *Vlan) XXX_Size() int {
	return xxx_messageInfo_Vlan.Size(m)
}
func (m *Vlan) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlan.DiscardUnknown(m)
}

var xxx_messageInfo_Vlan proto.InternalMessageInfo

func (m *Vlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vlan) GetVlanAddress() string {
	if m != nil {
		return m.VlanAddress
	}
	return ""
}

func (m *Vlan) GetCapacityIp() int32 {
	if m != nil {
		return m.CapacityIp
	}
	return 0
}

func (m *Vlan) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type DHCPConfig struct {
	MacAddress           string   `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPConfig) Reset()         { *m = DHCPConfig{} }
func (m *DHCPConfig) String() string { return proto.CompactTextString(m) }
func (*DHCPConfig) ProtoMessage()    {}
func (*DHCPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c66b9144f80972, []int{2}
}

func (m *DHCPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPConfig.Unmarshal(m, b)
}
func (m *DHCPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPConfig.Marshal(b, m, deterministic)
}
func (m *DHCPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPConfig.Merge(m, src)
}
func (m *DHCPConfig) XXX_Size() int {
	return xxx_messageInfo_DHCPConfig.Size(m)
}
func (m *DHCPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPConfig proto.InternalMessageInfo

func (m *DHCPConfig) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *DHCPConfig) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DHCPConfig) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// Message contains all dhcp configs.
type AllDHCPConfigs struct {
	Configs              []*DHCPConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AllDHCPConfigs) Reset()         { *m = AllDHCPConfigs{} }
func (m *AllDHCPConfigs) String() string { return proto.CompactTextString(m) }
func (*AllDHCPConfigs) ProtoMessage()    {}
func (*AllDHCPConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c66b9144f80972, []int{3}
}

func (m *AllDHCPConfigs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllDHCPConfigs.Unmarshal(m, b)
}
func (m *AllDHCPConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllDHCPConfigs.Marshal(b, m, deterministic)
}
func (m *AllDHCPConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllDHCPConfigs.Merge(m, src)
}
func (m *AllDHCPConfigs) XXX_Size() int {
	return xxx_messageInfo_AllDHCPConfigs.Size(m)
}
func (m *AllDHCPConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_AllDHCPConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_AllDHCPConfigs proto.InternalMessageInfo

func (m *AllDHCPConfigs) GetConfigs() []*DHCPConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func init() {
	proto.RegisterType((*Nic)(nil), "unifiedfleet.api.v1.proto.Nic")
	proto.RegisterType((*Vlan)(nil), "unifiedfleet.api.v1.proto.Vlan")
	proto.RegisterType((*DHCPConfig)(nil), "unifiedfleet.api.v1.proto.DHCPConfig")
	proto.RegisterType((*AllDHCPConfigs)(nil), "unifiedfleet.api.v1.proto.AllDHCPConfigs")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/proto/network.proto", fileDescriptor_05c66b9144f80972)
}

var fileDescriptor_05c66b9144f80972 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x49, 0x53, 0x5d, 0xf7, 0x8d, 0xec, 0x21, 0xa7, 0xd8, 0x4b, 0x6b, 0xb1, 0x58, 0x84,
	0xce, 0xb0, 0x95, 0x05, 0x5d, 0x0f, 0x6b, 0xba, 0x82, 0x7a, 0x50, 0x34, 0x88, 0xa0, 0x97, 0x32,
	0x9d, 0x4c, 0xd2, 0xc1, 0xcc, 0x1f, 0x66, 0x26, 0x95, 0x65, 0xd9, 0x2f, 0xea, 0xc9, 0xf3, 0x7e,
	0x04, 0xf1, 0x20, 0xf9, 0xe7, 0x4a, 0x55, 0x4a, 0x4f, 0x99, 0xf7, 0x9d, 0x79, 0x9e, 0x37, 0xbf,
	0x67, 0x18, 0x98, 0x71, 0x99, 0x19, 0x82, 0x4b, 0xc9, 0x33, 0xce, 0xd2, 0xac, 0x60, 0xcc, 0x61,
	0xa2, 0x39, 0xde, 0x1c, 0x63, 0x6d, 0x94, 0x53, 0x58, 0x32, 0xf7, 0x55, 0x99, 0x2f, 0xa8, 0xae,
	0xc2, 0x7b, 0x7f, 0x1e, 0x44, 0x44, 0x73, 0xb4, 0x39, 0x6e, 0xb6, 0x06, 0xc3, 0x5c, 0xa9, 0xbc,
	0x60, 0x8d, 0x6c, 0x55, 0x66, 0xd8, 0x71, 0xc1, 0xac, 0x23, 0x42, 0xb7, 0x07, 0xce, 0x72, 0x85,
	0xe8, 0xda, 0x28, 0xc1, 0x4b, 0x81, 0x94, 0xc9, 0x71, 0x51, 0x52, 0x8e, 0x73, 0xa3, 0x69, 0x3b,
	0xaa, 0x35, 0xa8, 0xc6, 0x67, 0x9c, 0x15, 0xe9, 0x72, 0xc5, 0xd6, 0x64, 0xc3, 0x95, 0x69, 0x0d,
	0x9e, 0xee, 0x61, 0x60, 0x98, 0x55, 0xa5, 0xa1, 0xac, 0x91, 0x8e, 0x7f, 0x7a, 0xe0, 0xbf, 0xe5,
	0x34, 0x0c, 0xa1, 0x2f, 0x89, 0x60, 0x91, 0x37, 0xf2, 0xa6, 0x87, 0x49, 0xbd, 0x0e, 0x87, 0x10,
	0x08, 0x42, 0x97, 0x24, 0x4d, 0x0d, 0xb3, 0x36, 0xea, 0xd5, 0x5b, 0x20, 0x08, 0x8d, 0x9b, 0x4e,
	0xf8, 0x1c, 0x82, 0x52, 0xa7, 0xc4, 0xb1, 0x65, 0x85, 0x14, 0xf9, 0x23, 0x6f, 0x1a, 0xcc, 0x07,
	0xa8, 0x99, 0x86, 0x3a, 0x5e, 0xf4, 0xa1, 0xe3, 0x5d, 0xf8, 0xdf, 0x63, 0x3f, 0x81, 0x46, 0x53,
	0x75, 0xc3, 0x97, 0x70, 0x20, 0x08, 0x5d, 0x73, 0xc9, 0xa2, 0x7e, 0x65, 0xbf, 0x98, 0xfd, 0x88,
	0x1f, 0xc1, 0xb4, 0x0d, 0x73, 0x56, 0xa7, 0x39, 0xb3, 0x17, 0xd6, 0x31, 0x81, 0x88, 0xd6, 0x56,
	0x2b, 0x87, 0xa8, 0x12, 0xf8, 0x4d, 0x23, 0x4a, 0x3a, 0xf5, 0xe9, 0xc9, 0x75, 0x3c, 0x87, 0x07,
	0x3b, 0x75, 0x15, 0x2a, 0x48, 0x4e, 0x2d, 0xbe, 0x94, 0x9c, 0x5e, 0x8d, 0xbf, 0x79, 0xd0, 0xff,
	0x58, 0x10, 0xf9, 0x4f, 0xfe, 0xfb, 0x70, 0x77, 0x53, 0x10, 0xb9, 0x15, 0x40, 0x50, 0xf5, 0xba,
	0x04, 0x86, 0x10, 0x50, 0xa2, 0x09, 0xe5, 0xee, 0x62, 0xc9, 0x75, 0x9d, 0xc0, 0xad, 0x04, 0xba,
	0xd6, 0x6b, 0xbd, 0x1d, 0x51, 0x7f, 0xef, 0x88, 0x4e, 0x9f, 0x5c, 0xc7, 0x27, 0x30, 0xd9, 0x49,
	0x56, 0x53, 0xd4, 0xff, 0x6b, 0xf1, 0x65, 0xf5, 0xb9, 0x1a, 0x7f, 0x02, 0x78, 0xf1, 0xea, 0xfc,
	0xdd, 0xb9, 0x92, 0x19, 0xcf, 0xb7, 0x6f, 0xd3, 0xfb, 0xeb, 0x36, 0x07, 0x70, 0x67, 0xad, 0xac,
	0xab, 0x63, 0x68, 0x50, 0x7f, 0xd7, 0xe1, 0x11, 0xf4, 0x5a, 0xbc, 0xc3, 0xa4, 0xc7, 0xf5, 0xf8,
	0x3d, 0x1c, 0xc5, 0x45, 0x71, 0xe3, 0x6e, 0xc3, 0x33, 0x38, 0xa0, 0xcd, 0x32, 0xf2, 0x46, 0xfe,
	0x34, 0x98, 0x4f, 0xd0, 0x7f, 0x9f, 0x04, 0xba, 0x11, 0x26, 0x9d, 0x6a, 0xf1, 0xf0, 0xf3, 0x64,
	0xc7, 0x93, 0x7b, 0x56, 0x66, 0x56, 0xaf, 0x56, 0xb7, 0xeb, 0xe2, 0xf1, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x31, 0x22, 0xf9, 0x4e, 0xa2, 0x03, 0x00, 0x00,
}
