// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/proto/rack_lse.proto

package ufspb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// RackLSE is the Rack Lab Setup Environment.
// It refers to the entity in the lab which has Rack(s) associated with it.
// It also has other components associated with it like switches, kvms, rpms.
type RackLSE struct {
	// A unique random generated string
	// The format will be rackLSEs/XXX
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The prototype that this rack LSE should follow. System will use this
	// prototype to detect if the LSE is completed or valid.
	RackLsePrototype string `protobuf:"bytes,2,opt,name=rack_lse_prototype,json=rackLsePrototype,proto3" json:"rack_lse_prototype,omitempty"`
	// Types that are valid to be assigned to Lse:
	//	*RackLSE_ChromeBrowserRackLse
	//	*RackLSE_ChromeosRackLse
	Lse isRackLSE_Lse `protobuf_oneof:"lse"`
	// The racks that this LSE is linked to. No rack is linked if it's NULL.
	Racks []string `protobuf:"bytes,5,rep,name=racks,proto3" json:"racks,omitempty"`
	// Record the last update timestamp of this RackLSE (In UTC timezone)
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RackLSE) Reset()         { *m = RackLSE{} }
func (m *RackLSE) String() string { return proto.CompactTextString(m) }
func (*RackLSE) ProtoMessage()    {}
func (*RackLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d263c22e3c8f6969, []int{0}
}

func (m *RackLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RackLSE.Unmarshal(m, b)
}
func (m *RackLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RackLSE.Marshal(b, m, deterministic)
}
func (m *RackLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RackLSE.Merge(m, src)
}
func (m *RackLSE) XXX_Size() int {
	return xxx_messageInfo_RackLSE.Size(m)
}
func (m *RackLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_RackLSE.DiscardUnknown(m)
}

var xxx_messageInfo_RackLSE proto.InternalMessageInfo

func (m *RackLSE) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RackLSE) GetRackLsePrototype() string {
	if m != nil {
		return m.RackLsePrototype
	}
	return ""
}

type isRackLSE_Lse interface {
	isRackLSE_Lse()
}

type RackLSE_ChromeBrowserRackLse struct {
	ChromeBrowserRackLse *ChromeBrowserRackLSE `protobuf:"bytes,3,opt,name=chrome_browser_rack_lse,json=chromeBrowserRackLse,proto3,oneof"`
}

type RackLSE_ChromeosRackLse struct {
	ChromeosRackLse *ChromeOSRackLSE `protobuf:"bytes,4,opt,name=chromeos_rack_lse,json=chromeosRackLse,proto3,oneof"`
}

func (*RackLSE_ChromeBrowserRackLse) isRackLSE_Lse() {}

func (*RackLSE_ChromeosRackLse) isRackLSE_Lse() {}

func (m *RackLSE) GetLse() isRackLSE_Lse {
	if m != nil {
		return m.Lse
	}
	return nil
}

func (m *RackLSE) GetChromeBrowserRackLse() *ChromeBrowserRackLSE {
	if x, ok := m.GetLse().(*RackLSE_ChromeBrowserRackLse); ok {
		return x.ChromeBrowserRackLse
	}
	return nil
}

func (m *RackLSE) GetChromeosRackLse() *ChromeOSRackLSE {
	if x, ok := m.GetLse().(*RackLSE_ChromeosRackLse); ok {
		return x.ChromeosRackLse
	}
	return nil
}

func (m *RackLSE) GetRacks() []string {
	if m != nil {
		return m.Racks
	}
	return nil
}

func (m *RackLSE) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RackLSE) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RackLSE_ChromeBrowserRackLse)(nil),
		(*RackLSE_ChromeosRackLse)(nil),
	}
}

// ChromeBrowserRackLSE refers to the entity which has
// kvms and rpms connected to it in Chrome Browser lab
type ChromeBrowserRackLSE struct {
	RpmHostnames         []*PeripheralHost `protobuf:"bytes,1,rep,name=rpm_hostnames,json=rpmHostnames,proto3" json:"rpm_hostnames,omitempty"`
	KvmHostnames         []*PeripheralHost `protobuf:"bytes,2,rep,name=kvm_hostnames,json=kvmHostnames,proto3" json:"kvm_hostnames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChromeBrowserRackLSE) Reset()         { *m = ChromeBrowserRackLSE{} }
func (m *ChromeBrowserRackLSE) String() string { return proto.CompactTextString(m) }
func (*ChromeBrowserRackLSE) ProtoMessage()    {}
func (*ChromeBrowserRackLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d263c22e3c8f6969, []int{1}
}

func (m *ChromeBrowserRackLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeBrowserRackLSE.Unmarshal(m, b)
}
func (m *ChromeBrowserRackLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeBrowserRackLSE.Marshal(b, m, deterministic)
}
func (m *ChromeBrowserRackLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeBrowserRackLSE.Merge(m, src)
}
func (m *ChromeBrowserRackLSE) XXX_Size() int {
	return xxx_messageInfo_ChromeBrowserRackLSE.Size(m)
}
func (m *ChromeBrowserRackLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeBrowserRackLSE.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeBrowserRackLSE proto.InternalMessageInfo

func (m *ChromeBrowserRackLSE) GetRpmHostnames() []*PeripheralHost {
	if m != nil {
		return m.RpmHostnames
	}
	return nil
}

func (m *ChromeBrowserRackLSE) GetKvmHostnames() []*PeripheralHost {
	if m != nil {
		return m.KvmHostnames
	}
	return nil
}

// ChromeOSRackLSE refers to the entity which has
// switches and rpms connected to it in Chrome OS lab
type ChromeOSRackLSE struct {
	// RPMs in the rack
	Rpms []string `protobuf:"bytes,1,rep,name=rpms,proto3" json:"rpms,omitempty"`
	// KVMs in the rack
	Kvms                 []string          `protobuf:"bytes,2,rep,name=kvms,proto3" json:"kvms,omitempty"`
	RpmHostnames         []*PeripheralHost `protobuf:"bytes,3,rep,name=rpm_hostnames,json=rpmHostnames,proto3" json:"rpm_hostnames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChromeOSRackLSE) Reset()         { *m = ChromeOSRackLSE{} }
func (m *ChromeOSRackLSE) String() string { return proto.CompactTextString(m) }
func (*ChromeOSRackLSE) ProtoMessage()    {}
func (*ChromeOSRackLSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_d263c22e3c8f6969, []int{2}
}

func (m *ChromeOSRackLSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromeOSRackLSE.Unmarshal(m, b)
}
func (m *ChromeOSRackLSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromeOSRackLSE.Marshal(b, m, deterministic)
}
func (m *ChromeOSRackLSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromeOSRackLSE.Merge(m, src)
}
func (m *ChromeOSRackLSE) XXX_Size() int {
	return xxx_messageInfo_ChromeOSRackLSE.Size(m)
}
func (m *ChromeOSRackLSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromeOSRackLSE.DiscardUnknown(m)
}

var xxx_messageInfo_ChromeOSRackLSE proto.InternalMessageInfo

func (m *ChromeOSRackLSE) GetRpms() []string {
	if m != nil {
		return m.Rpms
	}
	return nil
}

func (m *ChromeOSRackLSE) GetKvms() []string {
	if m != nil {
		return m.Kvms
	}
	return nil
}

func (m *ChromeOSRackLSE) GetRpmHostnames() []*PeripheralHost {
	if m != nil {
		return m.RpmHostnames
	}
	return nil
}

func init() {
	proto.RegisterType((*RackLSE)(nil), "unifiedfleet.api.v1.proto.RackLSE")
	proto.RegisterType((*ChromeBrowserRackLSE)(nil), "unifiedfleet.api.v1.proto.ChromeBrowserRackLSE")
	proto.RegisterType((*ChromeOSRackLSE)(nil), "unifiedfleet.api.v1.proto.ChromeOSRackLSE")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/proto/rack_lse.proto", fileDescriptor_d263c22e3c8f6969)
}

var fileDescriptor_d263c22e3c8f6969 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xd1, 0x6e, 0xd3, 0x3e,
	0x14, 0xc6, 0xff, 0x59, 0xda, 0xfd, 0x55, 0x17, 0x34, 0x88, 0x26, 0x11, 0x7a, 0x43, 0x55, 0x31,
	0xd6, 0x4d, 0x9a, 0xad, 0x6e, 0x57, 0x03, 0x01, 0x4b, 0xd0, 0xa4, 0x4a, 0x74, 0x50, 0xa5, 0x13,
	0x42, 0xdc, 0x44, 0x6e, 0xea, 0xa4, 0x56, 0xe3, 0xda, 0xb2, 0x93, 0xa0, 0x0a, 0xf1, 0x1e, 0x3c,
	0x09, 0xaf, 0xc3, 0xae, 0x79, 0x84, 0x5e, 0xa1, 0x38, 0x09, 0x9d, 0x18, 0xd0, 0x4e, 0xdc, 0xd9,
	0x8e, 0xbf, 0xdf, 0x77, 0xfc, 0x9d, 0x13, 0x00, 0xe9, 0x3c, 0x94, 0x18, 0xa5, 0x73, 0x1a, 0x52,
	0x32, 0x09, 0x63, 0x42, 0x12, 0x84, 0x05, 0x45, 0x59, 0x0f, 0x09, 0xc9, 0x13, 0x8e, 0x24, 0x0e,
	0x66, 0x7e, 0xac, 0x08, 0xd4, 0x5b, 0xeb, 0xe1, 0xf5, 0x9b, 0x10, 0x0b, 0x0a, 0xb3, 0x5e, 0xf1,
	0xa9, 0xf5, 0x28, 0xe2, 0x3c, 0x8a, 0x49, 0xa1, 0x1b, 0xa7, 0x21, 0x4a, 0x28, 0x23, 0x2a, 0xc1,
	0x4c, 0x94, 0x17, 0x4e, 0x23, 0x0e, 0x83, 0xa9, 0xe4, 0x8c, 0xa6, 0x0c, 0x72, 0x19, 0xa1, 0x38,
	0x0d, 0x28, 0x8a, 0xa4, 0x08, 0x4a, 0xaf, 0x12, 0x90, 0xfb, 0x4b, 0xa2, 0x78, 0x2a, 0x83, 0xd2,
	0xb6, 0xf5, 0xf2, 0x16, 0xd2, 0x90, 0x92, 0x78, 0xe2, 0x8f, 0xc9, 0x14, 0x67, 0x94, 0xcb, 0x12,
	0xd0, 0x5b, 0xf7, 0x4e, 0x41, 0x24, 0x15, 0x53, 0x22, 0x71, 0xac, 0x0a, 0x49, 0xe7, 0x4b, 0x0d,
	0xfc, 0xef, 0xe1, 0x60, 0x36, 0x18, 0x9d, 0x5b, 0x16, 0xa8, 0xcd, 0x31, 0x23, 0xb6, 0xd1, 0x36,
	0xba, 0x0d, 0x4f, 0xaf, 0xad, 0x08, 0x58, 0x55, 0x38, 0xbe, 0x56, 0x24, 0x0b, 0x41, 0xec, 0xad,
	0xfc, 0x86, 0x7b, 0x7a, 0xe5, 0x6c, 0x2d, 0x9d, 0x13, 0xd0, 0x2b, 0x0d, 0x8f, 0xb4, 0xe3, 0x91,
	0x5a, 0xa8, 0x84, 0x30, 0x88, 0x85, 0x50, 0x82, 0x27, 0x30, 0xe0, 0x0c, 0x95, 0x0e, 0xc3, 0x1c,
	0x70, 0xb9, 0x10, 0xc4, 0xbb, 0x97, 0x43, 0x07, 0x8a, 0x0c, 0x2b, 0xa4, 0x35, 0x05, 0x0f, 0xf4,
	0xdb, 0x89, 0x3f, 0x96, 0xfc, 0xa3, 0x22, 0xd2, 0xaf, 0x7c, 0x6d, 0xb3, 0x6d, 0x74, 0x9b, 0xc7,
	0x08, 0xfe, 0xb1, 0x2b, 0xf0, 0x95, 0x56, 0xba, 0x85, 0xb0, 0x34, 0xeb, 0xff, 0xe7, 0xed, 0x06,
	0x37, 0xce, 0x15, 0xb1, 0xde, 0x83, 0xfb, 0xc5, 0x39, 0x57, 0x2b, 0x8f, 0x9a, 0xf6, 0x38, 0x5c,
	0xeb, 0xf1, 0x76, 0xb4, 0xc2, 0xef, 0x54, 0x98, 0x8a, 0x7c, 0x06, 0xea, 0x39, 0x50, 0xd9, 0xf5,
	0xb6, 0xd9, 0x6d, 0xb8, 0x87, 0x4b, 0x67, 0x1f, 0xec, 0x6d, 0x14, 0x8e, 0x57, 0x08, 0xad, 0x33,
	0xd0, 0x4c, 0xc5, 0x04, 0x27, 0xc4, 0xcf, 0xe7, 0xca, 0xde, 0xd6, 0x55, 0xb5, 0x60, 0xd1, 0x78,
	0x58, 0x0d, 0x1d, 0xbc, 0xac, 0x86, 0xce, 0x35, 0xaf, 0x1c, 0xd3, 0x03, 0x85, 0x26, 0x3f, 0x7d,
	0xea, 0x7c, 0x77, 0x5e, 0x80, 0xee, 0xa6, 0x1d, 0xb1, 0x74, 0x77, 0x07, 0xa3, 0x73, 0x85, 0x3e,
	0x95, 0xab, 0xcf, 0x6e, 0x1d, 0x98, 0xb1, 0x22, 0x9d, 0xaf, 0x06, 0xd8, 0xfd, 0x5d, 0xb0, 0xd6,
	0x1b, 0x70, 0x57, 0x0a, 0xe6, 0x4f, 0xb9, 0x4a, 0xf2, 0x19, 0x51, 0xb6, 0xd1, 0x36, 0xbb, 0xcd,
	0xe3, 0x83, 0xbf, 0x84, 0x37, 0xfc, 0x39, 0x78, 0x7d, 0xae, 0x12, 0xef, 0x8e, 0x14, 0xac, 0x5f,
	0xc9, 0x73, 0xde, 0x2c, 0xbb, 0xce, 0xdb, 0xba, 0x35, 0x6f, 0x96, 0xad, 0x78, 0x9d, 0x6f, 0x06,
	0xd8, 0xf9, 0xa5, 0x5b, 0xd6, 0x73, 0x50, 0x93, 0x82, 0x15, 0xa5, 0x36, 0xdc, 0x83, 0xa5, 0xf3,
	0x04, 0x3c, 0x5e, 0x1f, 0xd2, 0xf0, 0xc2, 0xd3, 0xb2, 0x5c, 0x3e, 0xcb, 0x58, 0x51, 0xd9, 0xc6,
	0xf2, 0xd7, 0xef, 0x2e, 0x3c, 0x2d, 0xbb, 0x99, 0x98, 0xf9, 0x4f, 0x89, 0xb9, 0xfb, 0x1f, 0xf6,
	0xd6, 0xfc, 0xea, 0xcf, 0xd2, 0x50, 0x89, 0xf1, 0x78, 0x5b, 0x6f, 0x4e, 0x7e, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x1d, 0xac, 0xb1, 0x68, 0x02, 0x05, 0x00, 0x00,
}
