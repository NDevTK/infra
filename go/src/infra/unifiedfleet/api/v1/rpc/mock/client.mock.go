// // Copyright 2024 The Chromium Authors
// // Use of this source code is governed by a BSD-style license that can be
// // found in the LICENSE file.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: fleet.pb.go

// Package mockufs is a generated GoMock package.
package mockufs

import (
	context "context"
	ufspb "infra/unifiedfleet/api/v1/models"
	ufspb0 "infra/unifiedfleet/api/v1/models/chromeos/lab"
	ufspb1 "infra/unifiedfleet/api/v1/rpc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockisImportChromePlatformsRequest_Source is a mock of isImportChromePlatformsRequest_Source interface.
type MockisImportChromePlatformsRequest_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisImportChromePlatformsRequest_SourceMockRecorder
}

// MockisImportChromePlatformsRequest_SourceMockRecorder is the mock recorder for MockisImportChromePlatformsRequest_Source.
type MockisImportChromePlatformsRequest_SourceMockRecorder struct {
	mock *MockisImportChromePlatformsRequest_Source
}

// NewMockisImportChromePlatformsRequest_Source creates a new mock instance.
func NewMockisImportChromePlatformsRequest_Source(ctrl *gomock.Controller) *MockisImportChromePlatformsRequest_Source {
	mock := &MockisImportChromePlatformsRequest_Source{ctrl: ctrl}
	mock.recorder = &MockisImportChromePlatformsRequest_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisImportChromePlatformsRequest_Source) EXPECT() *MockisImportChromePlatformsRequest_SourceMockRecorder {
	return m.recorder
}

// isImportChromePlatformsRequest_Source mocks base method.
func (m *MockisImportChromePlatformsRequest_Source) isImportChromePlatformsRequest_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isImportChromePlatformsRequest_Source")
}

// isImportChromePlatformsRequest_Source indicates an expected call of isImportChromePlatformsRequest_Source.
func (mr *MockisImportChromePlatformsRequest_SourceMockRecorder) isImportChromePlatformsRequest_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isImportChromePlatformsRequest_Source", reflect.TypeOf((*MockisImportChromePlatformsRequest_Source)(nil).isImportChromePlatformsRequest_Source))
}

// MockisImportOSVersionsRequest_Source is a mock of isImportOSVersionsRequest_Source interface.
type MockisImportOSVersionsRequest_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisImportOSVersionsRequest_SourceMockRecorder
}

// MockisImportOSVersionsRequest_SourceMockRecorder is the mock recorder for MockisImportOSVersionsRequest_Source.
type MockisImportOSVersionsRequest_SourceMockRecorder struct {
	mock *MockisImportOSVersionsRequest_Source
}

// NewMockisImportOSVersionsRequest_Source creates a new mock instance.
func NewMockisImportOSVersionsRequest_Source(ctrl *gomock.Controller) *MockisImportOSVersionsRequest_Source {
	mock := &MockisImportOSVersionsRequest_Source{ctrl: ctrl}
	mock.recorder = &MockisImportOSVersionsRequest_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisImportOSVersionsRequest_Source) EXPECT() *MockisImportOSVersionsRequest_SourceMockRecorder {
	return m.recorder
}

// isImportOSVersionsRequest_Source mocks base method.
func (m *MockisImportOSVersionsRequest_Source) isImportOSVersionsRequest_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isImportOSVersionsRequest_Source")
}

// isImportOSVersionsRequest_Source indicates an expected call of isImportOSVersionsRequest_Source.
func (mr *MockisImportOSVersionsRequest_SourceMockRecorder) isImportOSVersionsRequest_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isImportOSVersionsRequest_Source", reflect.TypeOf((*MockisImportOSVersionsRequest_Source)(nil).isImportOSVersionsRequest_Source))
}

// MockisImportMachineLSEsRequest_Source is a mock of isImportMachineLSEsRequest_Source interface.
type MockisImportMachineLSEsRequest_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisImportMachineLSEsRequest_SourceMockRecorder
}

// MockisImportMachineLSEsRequest_SourceMockRecorder is the mock recorder for MockisImportMachineLSEsRequest_Source.
type MockisImportMachineLSEsRequest_SourceMockRecorder struct {
	mock *MockisImportMachineLSEsRequest_Source
}

// NewMockisImportMachineLSEsRequest_Source creates a new mock instance.
func NewMockisImportMachineLSEsRequest_Source(ctrl *gomock.Controller) *MockisImportMachineLSEsRequest_Source {
	mock := &MockisImportMachineLSEsRequest_Source{ctrl: ctrl}
	mock.recorder = &MockisImportMachineLSEsRequest_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisImportMachineLSEsRequest_Source) EXPECT() *MockisImportMachineLSEsRequest_SourceMockRecorder {
	return m.recorder
}

// isImportMachineLSEsRequest_Source mocks base method.
func (m *MockisImportMachineLSEsRequest_Source) isImportMachineLSEsRequest_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isImportMachineLSEsRequest_Source")
}

// isImportMachineLSEsRequest_Source indicates an expected call of isImportMachineLSEsRequest_Source.
func (mr *MockisImportMachineLSEsRequest_SourceMockRecorder) isImportMachineLSEsRequest_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isImportMachineLSEsRequest_Source", reflect.TypeOf((*MockisImportMachineLSEsRequest_Source)(nil).isImportMachineLSEsRequest_Source))
}

// MockisImportOSMachineLSEsRequest_Source is a mock of isImportOSMachineLSEsRequest_Source interface.
type MockisImportOSMachineLSEsRequest_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisImportOSMachineLSEsRequest_SourceMockRecorder
}

// MockisImportOSMachineLSEsRequest_SourceMockRecorder is the mock recorder for MockisImportOSMachineLSEsRequest_Source.
type MockisImportOSMachineLSEsRequest_SourceMockRecorder struct {
	mock *MockisImportOSMachineLSEsRequest_Source
}

// NewMockisImportOSMachineLSEsRequest_Source creates a new mock instance.
func NewMockisImportOSMachineLSEsRequest_Source(ctrl *gomock.Controller) *MockisImportOSMachineLSEsRequest_Source {
	mock := &MockisImportOSMachineLSEsRequest_Source{ctrl: ctrl}
	mock.recorder = &MockisImportOSMachineLSEsRequest_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisImportOSMachineLSEsRequest_Source) EXPECT() *MockisImportOSMachineLSEsRequest_SourceMockRecorder {
	return m.recorder
}

// isImportOSMachineLSEsRequest_Source mocks base method.
func (m *MockisImportOSMachineLSEsRequest_Source) isImportOSMachineLSEsRequest_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isImportOSMachineLSEsRequest_Source")
}

// isImportOSMachineLSEsRequest_Source indicates an expected call of isImportOSMachineLSEsRequest_Source.
func (mr *MockisImportOSMachineLSEsRequest_SourceMockRecorder) isImportOSMachineLSEsRequest_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isImportOSMachineLSEsRequest_Source", reflect.TypeOf((*MockisImportOSMachineLSEsRequest_Source)(nil).isImportOSMachineLSEsRequest_Source))
}

// MockisImportNicsRequest_Source is a mock of isImportNicsRequest_Source interface.
type MockisImportNicsRequest_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisImportNicsRequest_SourceMockRecorder
}

// MockisImportNicsRequest_SourceMockRecorder is the mock recorder for MockisImportNicsRequest_Source.
type MockisImportNicsRequest_SourceMockRecorder struct {
	mock *MockisImportNicsRequest_Source
}

// NewMockisImportNicsRequest_Source creates a new mock instance.
func NewMockisImportNicsRequest_Source(ctrl *gomock.Controller) *MockisImportNicsRequest_Source {
	mock := &MockisImportNicsRequest_Source{ctrl: ctrl}
	mock.recorder = &MockisImportNicsRequest_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisImportNicsRequest_Source) EXPECT() *MockisImportNicsRequest_SourceMockRecorder {
	return m.recorder
}

// isImportNicsRequest_Source mocks base method.
func (m *MockisImportNicsRequest_Source) isImportNicsRequest_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isImportNicsRequest_Source")
}

// isImportNicsRequest_Source indicates an expected call of isImportNicsRequest_Source.
func (mr *MockisImportNicsRequest_SourceMockRecorder) isImportNicsRequest_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isImportNicsRequest_Source", reflect.TypeOf((*MockisImportNicsRequest_Source)(nil).isImportNicsRequest_Source))
}

// MockisImportOSVlansRequest_Source is a mock of isImportOSVlansRequest_Source interface.
type MockisImportOSVlansRequest_Source struct {
	ctrl     *gomock.Controller
	recorder *MockisImportOSVlansRequest_SourceMockRecorder
}

// MockisImportOSVlansRequest_SourceMockRecorder is the mock recorder for MockisImportOSVlansRequest_Source.
type MockisImportOSVlansRequest_SourceMockRecorder struct {
	mock *MockisImportOSVlansRequest_Source
}

// NewMockisImportOSVlansRequest_Source creates a new mock instance.
func NewMockisImportOSVlansRequest_Source(ctrl *gomock.Controller) *MockisImportOSVlansRequest_Source {
	mock := &MockisImportOSVlansRequest_Source{ctrl: ctrl}
	mock.recorder = &MockisImportOSVlansRequest_SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisImportOSVlansRequest_Source) EXPECT() *MockisImportOSVlansRequest_SourceMockRecorder {
	return m.recorder
}

// isImportOSVlansRequest_Source mocks base method.
func (m *MockisImportOSVlansRequest_Source) isImportOSVlansRequest_Source() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isImportOSVlansRequest_Source")
}

// isImportOSVlansRequest_Source indicates an expected call of isImportOSVlansRequest_Source.
func (mr *MockisImportOSVlansRequest_SourceMockRecorder) isImportOSVlansRequest_Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isImportOSVlansRequest_Source", reflect.TypeOf((*MockisImportOSVlansRequest_Source)(nil).isImportOSVlansRequest_Source))
}

// MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData is a mock of isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData interface.
type MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData struct {
	ctrl     *gomock.Controller
	recorder *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryDataMockRecorder
}

// MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryDataMockRecorder is the mock recorder for MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData.
type MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryDataMockRecorder struct {
	mock *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData
}

// NewMockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData creates a new mock instance.
func NewMockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData(ctrl *gomock.Controller) *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData {
	mock := &MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData{ctrl: ctrl}
	mock.recorder = &MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData) EXPECT() *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryDataMockRecorder {
	return m.recorder
}

// isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData mocks base method.
func (m *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData) isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData")
}

// isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData indicates an expected call of isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData.
func (mr *MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryDataMockRecorder) isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData", reflect.TypeOf((*MockisUpdateDeviceRecoveryDataRequest_DeviceRecoveryData)(nil).isUpdateDeviceRecoveryDataRequest_DeviceRecoveryData))
}

// MockisUpdateTestDataRequest_DeviceData is a mock of isUpdateTestDataRequest_DeviceData interface.
type MockisUpdateTestDataRequest_DeviceData struct {
	ctrl     *gomock.Controller
	recorder *MockisUpdateTestDataRequest_DeviceDataMockRecorder
}

// MockisUpdateTestDataRequest_DeviceDataMockRecorder is the mock recorder for MockisUpdateTestDataRequest_DeviceData.
type MockisUpdateTestDataRequest_DeviceDataMockRecorder struct {
	mock *MockisUpdateTestDataRequest_DeviceData
}

// NewMockisUpdateTestDataRequest_DeviceData creates a new mock instance.
func NewMockisUpdateTestDataRequest_DeviceData(ctrl *gomock.Controller) *MockisUpdateTestDataRequest_DeviceData {
	mock := &MockisUpdateTestDataRequest_DeviceData{ctrl: ctrl}
	mock.recorder = &MockisUpdateTestDataRequest_DeviceDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisUpdateTestDataRequest_DeviceData) EXPECT() *MockisUpdateTestDataRequest_DeviceDataMockRecorder {
	return m.recorder
}

// isUpdateTestDataRequest_DeviceData mocks base method.
func (m *MockisUpdateTestDataRequest_DeviceData) isUpdateTestDataRequest_DeviceData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isUpdateTestDataRequest_DeviceData")
}

// isUpdateTestDataRequest_DeviceData indicates an expected call of isUpdateTestDataRequest_DeviceData.
func (mr *MockisUpdateTestDataRequest_DeviceDataMockRecorder) isUpdateTestDataRequest_DeviceData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUpdateTestDataRequest_DeviceData", reflect.TypeOf((*MockisUpdateTestDataRequest_DeviceData)(nil).isUpdateTestDataRequest_DeviceData))
}

// MockisGetDeviceDataResponse_Resource is a mock of isGetDeviceDataResponse_Resource interface.
type MockisGetDeviceDataResponse_Resource struct {
	ctrl     *gomock.Controller
	recorder *MockisGetDeviceDataResponse_ResourceMockRecorder
}

// MockisGetDeviceDataResponse_ResourceMockRecorder is the mock recorder for MockisGetDeviceDataResponse_Resource.
type MockisGetDeviceDataResponse_ResourceMockRecorder struct {
	mock *MockisGetDeviceDataResponse_Resource
}

// NewMockisGetDeviceDataResponse_Resource creates a new mock instance.
func NewMockisGetDeviceDataResponse_Resource(ctrl *gomock.Controller) *MockisGetDeviceDataResponse_Resource {
	mock := &MockisGetDeviceDataResponse_Resource{ctrl: ctrl}
	mock.recorder = &MockisGetDeviceDataResponse_ResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisGetDeviceDataResponse_Resource) EXPECT() *MockisGetDeviceDataResponse_ResourceMockRecorder {
	return m.recorder
}

// isGetDeviceDataResponse_Resource mocks base method.
func (m *MockisGetDeviceDataResponse_Resource) isGetDeviceDataResponse_Resource() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isGetDeviceDataResponse_Resource")
}

// isGetDeviceDataResponse_Resource indicates an expected call of isGetDeviceDataResponse_Resource.
func (mr *MockisGetDeviceDataResponse_ResourceMockRecorder) isGetDeviceDataResponse_Resource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGetDeviceDataResponse_Resource", reflect.TypeOf((*MockisGetDeviceDataResponse_Resource)(nil).isGetDeviceDataResponse_Resource))
}

// MockFleetClient is a mock of FleetClient interface.
type MockFleetClient struct {
	ctrl     *gomock.Controller
	recorder *MockFleetClientMockRecorder
}

// MockFleetClientMockRecorder is the mock recorder for MockFleetClient.
type MockFleetClientMockRecorder struct {
	mock *MockFleetClient
}

// NewMockFleetClient creates a new mock instance.
func NewMockFleetClient(ctrl *gomock.Controller) *MockFleetClient {
	mock := &MockFleetClient{ctrl: ctrl}
	mock.recorder = &MockFleetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetClient) EXPECT() *MockFleetClientMockRecorder {
	return m.recorder
}

// BatchGetChromePlatforms mocks base method.
func (m *MockFleetClient) BatchGetChromePlatforms(ctx context.Context, in *ufspb1.BatchGetChromePlatformsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetChromePlatformsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetChromePlatforms", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetChromePlatformsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetChromePlatforms indicates an expected call of BatchGetChromePlatforms.
func (mr *MockFleetClientMockRecorder) BatchGetChromePlatforms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetChromePlatforms", reflect.TypeOf((*MockFleetClient)(nil).BatchGetChromePlatforms), varargs...)
}

// BatchGetDHCPConfigs mocks base method.
func (m *MockFleetClient) BatchGetDHCPConfigs(ctx context.Context, in *ufspb1.BatchGetDHCPConfigsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetDHCPConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDHCPConfigs", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetDHCPConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDHCPConfigs indicates an expected call of BatchGetDHCPConfigs.
func (mr *MockFleetClientMockRecorder) BatchGetDHCPConfigs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDHCPConfigs", reflect.TypeOf((*MockFleetClient)(nil).BatchGetDHCPConfigs), varargs...)
}

// BatchGetDracs mocks base method.
func (m *MockFleetClient) BatchGetDracs(ctx context.Context, in *ufspb1.BatchGetDracsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetDracsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDracs", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetDracsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDracs indicates an expected call of BatchGetDracs.
func (mr *MockFleetClientMockRecorder) BatchGetDracs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDracs", reflect.TypeOf((*MockFleetClient)(nil).BatchGetDracs), varargs...)
}

// BatchGetKVMs mocks base method.
func (m *MockFleetClient) BatchGetKVMs(ctx context.Context, in *ufspb1.BatchGetKVMsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetKVMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetKVMs", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetKVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetKVMs indicates an expected call of BatchGetKVMs.
func (mr *MockFleetClientMockRecorder) BatchGetKVMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetKVMs", reflect.TypeOf((*MockFleetClient)(nil).BatchGetKVMs), varargs...)
}

// BatchGetMachineLSEDeployments mocks base method.
func (m *MockFleetClient) BatchGetMachineLSEDeployments(ctx context.Context, in *ufspb1.BatchGetMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetMachineLSEDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetMachineLSEDeployments", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachineLSEDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachineLSEDeployments indicates an expected call of BatchGetMachineLSEDeployments.
func (mr *MockFleetClientMockRecorder) BatchGetMachineLSEDeployments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachineLSEDeployments", reflect.TypeOf((*MockFleetClient)(nil).BatchGetMachineLSEDeployments), varargs...)
}

// BatchGetMachineLSEPrototypes mocks base method.
func (m *MockFleetClient) BatchGetMachineLSEPrototypes(ctx context.Context, in *ufspb1.BatchGetMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetMachineLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetMachineLSEPrototypes", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachineLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachineLSEPrototypes indicates an expected call of BatchGetMachineLSEPrototypes.
func (mr *MockFleetClientMockRecorder) BatchGetMachineLSEPrototypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachineLSEPrototypes", reflect.TypeOf((*MockFleetClient)(nil).BatchGetMachineLSEPrototypes), varargs...)
}

// BatchGetMachineLSEs mocks base method.
func (m *MockFleetClient) BatchGetMachineLSEs(ctx context.Context, in *ufspb1.BatchGetMachineLSEsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetMachineLSEsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetMachineLSEs", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachineLSEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachineLSEs indicates an expected call of BatchGetMachineLSEs.
func (mr *MockFleetClientMockRecorder) BatchGetMachineLSEs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachineLSEs", reflect.TypeOf((*MockFleetClient)(nil).BatchGetMachineLSEs), varargs...)
}

// BatchGetMachines mocks base method.
func (m *MockFleetClient) BatchGetMachines(ctx context.Context, in *ufspb1.BatchGetMachinesRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetMachinesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetMachines", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachines indicates an expected call of BatchGetMachines.
func (mr *MockFleetClientMockRecorder) BatchGetMachines(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachines", reflect.TypeOf((*MockFleetClient)(nil).BatchGetMachines), varargs...)
}

// BatchGetNics mocks base method.
func (m *MockFleetClient) BatchGetNics(ctx context.Context, in *ufspb1.BatchGetNicsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetNicsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetNics", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetNicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetNics indicates an expected call of BatchGetNics.
func (mr *MockFleetClientMockRecorder) BatchGetNics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetNics", reflect.TypeOf((*MockFleetClient)(nil).BatchGetNics), varargs...)
}

// BatchGetRPMs mocks base method.
func (m *MockFleetClient) BatchGetRPMs(ctx context.Context, in *ufspb1.BatchGetRPMsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetRPMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetRPMs", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetRPMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRPMs indicates an expected call of BatchGetRPMs.
func (mr *MockFleetClientMockRecorder) BatchGetRPMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRPMs", reflect.TypeOf((*MockFleetClient)(nil).BatchGetRPMs), varargs...)
}

// BatchGetRackLSEPrototypes mocks base method.
func (m *MockFleetClient) BatchGetRackLSEPrototypes(ctx context.Context, in *ufspb1.BatchGetRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetRackLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetRackLSEPrototypes", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetRackLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRackLSEPrototypes indicates an expected call of BatchGetRackLSEPrototypes.
func (mr *MockFleetClientMockRecorder) BatchGetRackLSEPrototypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRackLSEPrototypes", reflect.TypeOf((*MockFleetClient)(nil).BatchGetRackLSEPrototypes), varargs...)
}

// BatchGetRacks mocks base method.
func (m *MockFleetClient) BatchGetRacks(ctx context.Context, in *ufspb1.BatchGetRacksRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetRacksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetRacks", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetRacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRacks indicates an expected call of BatchGetRacks.
func (mr *MockFleetClientMockRecorder) BatchGetRacks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRacks", reflect.TypeOf((*MockFleetClient)(nil).BatchGetRacks), varargs...)
}

// BatchGetSwitches mocks base method.
func (m *MockFleetClient) BatchGetSwitches(ctx context.Context, in *ufspb1.BatchGetSwitchesRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetSwitchesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetSwitches", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetSwitchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSwitches indicates an expected call of BatchGetSwitches.
func (mr *MockFleetClientMockRecorder) BatchGetSwitches(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSwitches", reflect.TypeOf((*MockFleetClient)(nil).BatchGetSwitches), varargs...)
}

// BatchGetVMs mocks base method.
func (m *MockFleetClient) BatchGetVMs(ctx context.Context, in *ufspb1.BatchGetVMsRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetVMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetVMs", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVMs indicates an expected call of BatchGetVMs.
func (mr *MockFleetClientMockRecorder) BatchGetVMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVMs", reflect.TypeOf((*MockFleetClient)(nil).BatchGetVMs), varargs...)
}

// BatchGetVlans mocks base method.
func (m *MockFleetClient) BatchGetVlans(ctx context.Context, in *ufspb1.BatchGetVlansRequest, opts ...grpc.CallOption) (*ufspb1.BatchGetVlansResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetVlans", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchGetVlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVlans indicates an expected call of BatchGetVlans.
func (mr *MockFleetClientMockRecorder) BatchGetVlans(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVlans", reflect.TypeOf((*MockFleetClient)(nil).BatchGetVlans), varargs...)
}

// BatchUpdateMachineLSEDeployment mocks base method.
func (m *MockFleetClient) BatchUpdateMachineLSEDeployment(ctx context.Context, in *ufspb1.BatchUpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*ufspb1.BatchUpdateMachineLSEDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdateMachineLSEDeployment", varargs...)
	ret0, _ := ret[0].(*ufspb1.BatchUpdateMachineLSEDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateMachineLSEDeployment indicates an expected call of BatchUpdateMachineLSEDeployment.
func (mr *MockFleetClientMockRecorder) BatchUpdateMachineLSEDeployment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMachineLSEDeployment", reflect.TypeOf((*MockFleetClient)(nil).BatchUpdateMachineLSEDeployment), varargs...)
}

// CheckFleetTestsPolicy mocks base method.
func (m *MockFleetClient) CheckFleetTestsPolicy(ctx context.Context, in *ufspb1.CheckFleetTestsPolicyRequest, opts ...grpc.CallOption) (*ufspb1.CheckFleetTestsPolicyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckFleetTestsPolicy", varargs...)
	ret0, _ := ret[0].(*ufspb1.CheckFleetTestsPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFleetTestsPolicy indicates an expected call of CheckFleetTestsPolicy.
func (mr *MockFleetClientMockRecorder) CheckFleetTestsPolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFleetTestsPolicy", reflect.TypeOf((*MockFleetClient)(nil).CheckFleetTestsPolicy), varargs...)
}

// CreateAsset mocks base method.
func (m *MockFleetClient) CreateAsset(ctx context.Context, in *ufspb1.CreateAssetRequest, opts ...grpc.CallOption) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAsset", varargs...)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockFleetClientMockRecorder) CreateAsset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockFleetClient)(nil).CreateAsset), varargs...)
}

// CreateCachingService mocks base method.
func (m *MockFleetClient) CreateCachingService(ctx context.Context, in *ufspb1.CreateCachingServiceRequest, opts ...grpc.CallOption) (*ufspb.CachingService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCachingService", varargs...)
	ret0, _ := ret[0].(*ufspb.CachingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCachingService indicates an expected call of CreateCachingService.
func (mr *MockFleetClientMockRecorder) CreateCachingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCachingService", reflect.TypeOf((*MockFleetClient)(nil).CreateCachingService), varargs...)
}

// CreateChromePlatform mocks base method.
func (m *MockFleetClient) CreateChromePlatform(ctx context.Context, in *ufspb1.CreateChromePlatformRequest, opts ...grpc.CallOption) (*ufspb.ChromePlatform, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChromePlatform", varargs...)
	ret0, _ := ret[0].(*ufspb.ChromePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChromePlatform indicates an expected call of CreateChromePlatform.
func (mr *MockFleetClientMockRecorder) CreateChromePlatform(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChromePlatform", reflect.TypeOf((*MockFleetClient)(nil).CreateChromePlatform), varargs...)
}

// CreateDefaultWifi mocks base method.
func (m *MockFleetClient) CreateDefaultWifi(ctx context.Context, in *ufspb1.CreateDefaultWifiRequest, opts ...grpc.CallOption) (*ufspb.DefaultWifi, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDefaultWifi", varargs...)
	ret0, _ := ret[0].(*ufspb.DefaultWifi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefaultWifi indicates an expected call of CreateDefaultWifi.
func (mr *MockFleetClientMockRecorder) CreateDefaultWifi(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultWifi", reflect.TypeOf((*MockFleetClient)(nil).CreateDefaultWifi), varargs...)
}

// CreateDrac mocks base method.
func (m *MockFleetClient) CreateDrac(ctx context.Context, in *ufspb1.CreateDracRequest, opts ...grpc.CallOption) (*ufspb.Drac, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDrac", varargs...)
	ret0, _ := ret[0].(*ufspb.Drac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDrac indicates an expected call of CreateDrac.
func (mr *MockFleetClientMockRecorder) CreateDrac(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDrac", reflect.TypeOf((*MockFleetClient)(nil).CreateDrac), varargs...)
}

// CreateKVM mocks base method.
func (m *MockFleetClient) CreateKVM(ctx context.Context, in *ufspb1.CreateKVMRequest, opts ...grpc.CallOption) (*ufspb.KVM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKVM", varargs...)
	ret0, _ := ret[0].(*ufspb.KVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKVM indicates an expected call of CreateKVM.
func (mr *MockFleetClientMockRecorder) CreateKVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKVM", reflect.TypeOf((*MockFleetClient)(nil).CreateKVM), varargs...)
}

// CreateMachineLSE mocks base method.
func (m *MockFleetClient) CreateMachineLSE(ctx context.Context, in *ufspb1.CreateMachineLSERequest, opts ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMachineLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachineLSE indicates an expected call of CreateMachineLSE.
func (mr *MockFleetClientMockRecorder) CreateMachineLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineLSE", reflect.TypeOf((*MockFleetClient)(nil).CreateMachineLSE), varargs...)
}

// CreateMachineLSEPrototype mocks base method.
func (m *MockFleetClient) CreateMachineLSEPrototype(ctx context.Context, in *ufspb1.CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*ufspb.MachineLSEPrototype, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMachineLSEPrototype", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachineLSEPrototype indicates an expected call of CreateMachineLSEPrototype.
func (mr *MockFleetClientMockRecorder) CreateMachineLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).CreateMachineLSEPrototype), varargs...)
}

// CreateNic mocks base method.
func (m *MockFleetClient) CreateNic(ctx context.Context, in *ufspb1.CreateNicRequest, opts ...grpc.CallOption) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNic", varargs...)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNic indicates an expected call of CreateNic.
func (mr *MockFleetClientMockRecorder) CreateNic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNic", reflect.TypeOf((*MockFleetClient)(nil).CreateNic), varargs...)
}

// CreateRPM mocks base method.
func (m *MockFleetClient) CreateRPM(ctx context.Context, in *ufspb1.CreateRPMRequest, opts ...grpc.CallOption) (*ufspb.RPM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRPM", varargs...)
	ret0, _ := ret[0].(*ufspb.RPM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRPM indicates an expected call of CreateRPM.
func (mr *MockFleetClientMockRecorder) CreateRPM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRPM", reflect.TypeOf((*MockFleetClient)(nil).CreateRPM), varargs...)
}

// CreateRackLSE mocks base method.
func (m *MockFleetClient) CreateRackLSE(ctx context.Context, in *ufspb1.CreateRackLSERequest, opts ...grpc.CallOption) (*ufspb.RackLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRackLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.RackLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRackLSE indicates an expected call of CreateRackLSE.
func (mr *MockFleetClientMockRecorder) CreateRackLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRackLSE", reflect.TypeOf((*MockFleetClient)(nil).CreateRackLSE), varargs...)
}

// CreateRackLSEPrototype mocks base method.
func (m *MockFleetClient) CreateRackLSEPrototype(ctx context.Context, in *ufspb1.CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*ufspb.RackLSEPrototype, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRackLSEPrototype", varargs...)
	ret0, _ := ret[0].(*ufspb.RackLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRackLSEPrototype indicates an expected call of CreateRackLSEPrototype.
func (mr *MockFleetClientMockRecorder) CreateRackLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRackLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).CreateRackLSEPrototype), varargs...)
}

// CreateSchedulingUnit mocks base method.
func (m *MockFleetClient) CreateSchedulingUnit(ctx context.Context, in *ufspb1.CreateSchedulingUnitRequest, opts ...grpc.CallOption) (*ufspb.SchedulingUnit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchedulingUnit", varargs...)
	ret0, _ := ret[0].(*ufspb.SchedulingUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedulingUnit indicates an expected call of CreateSchedulingUnit.
func (mr *MockFleetClientMockRecorder) CreateSchedulingUnit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedulingUnit", reflect.TypeOf((*MockFleetClient)(nil).CreateSchedulingUnit), varargs...)
}

// CreateSwitch mocks base method.
func (m *MockFleetClient) CreateSwitch(ctx context.Context, in *ufspb1.CreateSwitchRequest, opts ...grpc.CallOption) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSwitch", varargs...)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSwitch indicates an expected call of CreateSwitch.
func (mr *MockFleetClientMockRecorder) CreateSwitch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwitch", reflect.TypeOf((*MockFleetClient)(nil).CreateSwitch), varargs...)
}

// CreateVM mocks base method.
func (m *MockFleetClient) CreateVM(ctx context.Context, in *ufspb1.CreateVMRequest, opts ...grpc.CallOption) (*ufspb.VM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVM", varargs...)
	ret0, _ := ret[0].(*ufspb.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockFleetClientMockRecorder) CreateVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockFleetClient)(nil).CreateVM), varargs...)
}

// CreateVlan mocks base method.
func (m *MockFleetClient) CreateVlan(ctx context.Context, in *ufspb1.CreateVlanRequest, opts ...grpc.CallOption) (*ufspb.Vlan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVlan", varargs...)
	ret0, _ := ret[0].(*ufspb.Vlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVlan indicates an expected call of CreateVlan.
func (mr *MockFleetClientMockRecorder) CreateVlan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVlan", reflect.TypeOf((*MockFleetClient)(nil).CreateVlan), varargs...)
}

// DeleteAsset mocks base method.
func (m *MockFleetClient) DeleteAsset(ctx context.Context, in *ufspb1.DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAsset", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockFleetClientMockRecorder) DeleteAsset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockFleetClient)(nil).DeleteAsset), varargs...)
}

// DeleteCachingService mocks base method.
func (m *MockFleetClient) DeleteCachingService(ctx context.Context, in *ufspb1.DeleteCachingServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCachingService", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCachingService indicates an expected call of DeleteCachingService.
func (mr *MockFleetClientMockRecorder) DeleteCachingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachingService", reflect.TypeOf((*MockFleetClient)(nil).DeleteCachingService), varargs...)
}

// DeleteChromePlatform mocks base method.
func (m *MockFleetClient) DeleteChromePlatform(ctx context.Context, in *ufspb1.DeleteChromePlatformRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChromePlatform", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChromePlatform indicates an expected call of DeleteChromePlatform.
func (mr *MockFleetClientMockRecorder) DeleteChromePlatform(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChromePlatform", reflect.TypeOf((*MockFleetClient)(nil).DeleteChromePlatform), varargs...)
}

// DeleteDefaultWifi mocks base method.
func (m *MockFleetClient) DeleteDefaultWifi(ctx context.Context, in *ufspb1.DeleteDefaultWifiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDefaultWifi", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultWifi indicates an expected call of DeleteDefaultWifi.
func (mr *MockFleetClientMockRecorder) DeleteDefaultWifi(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultWifi", reflect.TypeOf((*MockFleetClient)(nil).DeleteDefaultWifi), varargs...)
}

// DeleteDrac mocks base method.
func (m *MockFleetClient) DeleteDrac(ctx context.Context, in *ufspb1.DeleteDracRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDrac", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDrac indicates an expected call of DeleteDrac.
func (mr *MockFleetClientMockRecorder) DeleteDrac(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrac", reflect.TypeOf((*MockFleetClient)(nil).DeleteDrac), varargs...)
}

// DeleteKVM mocks base method.
func (m *MockFleetClient) DeleteKVM(ctx context.Context, in *ufspb1.DeleteKVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKVM", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKVM indicates an expected call of DeleteKVM.
func (mr *MockFleetClientMockRecorder) DeleteKVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKVM", reflect.TypeOf((*MockFleetClient)(nil).DeleteKVM), varargs...)
}

// DeleteMachine mocks base method.
func (m *MockFleetClient) DeleteMachine(ctx context.Context, in *ufspb1.DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMachine", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachine indicates an expected call of DeleteMachine.
func (mr *MockFleetClientMockRecorder) DeleteMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockFleetClient)(nil).DeleteMachine), varargs...)
}

// DeleteMachineLSE mocks base method.
func (m *MockFleetClient) DeleteMachineLSE(ctx context.Context, in *ufspb1.DeleteMachineLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMachineLSE", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachineLSE indicates an expected call of DeleteMachineLSE.
func (mr *MockFleetClientMockRecorder) DeleteMachineLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineLSE", reflect.TypeOf((*MockFleetClient)(nil).DeleteMachineLSE), varargs...)
}

// DeleteMachineLSEPrototype mocks base method.
func (m *MockFleetClient) DeleteMachineLSEPrototype(ctx context.Context, in *ufspb1.DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMachineLSEPrototype", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachineLSEPrototype indicates an expected call of DeleteMachineLSEPrototype.
func (mr *MockFleetClientMockRecorder) DeleteMachineLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).DeleteMachineLSEPrototype), varargs...)
}

// DeleteNic mocks base method.
func (m *MockFleetClient) DeleteNic(ctx context.Context, in *ufspb1.DeleteNicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNic", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNic indicates an expected call of DeleteNic.
func (mr *MockFleetClientMockRecorder) DeleteNic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNic", reflect.TypeOf((*MockFleetClient)(nil).DeleteNic), varargs...)
}

// DeleteRPM mocks base method.
func (m *MockFleetClient) DeleteRPM(ctx context.Context, in *ufspb1.DeleteRPMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRPM", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRPM indicates an expected call of DeleteRPM.
func (mr *MockFleetClientMockRecorder) DeleteRPM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRPM", reflect.TypeOf((*MockFleetClient)(nil).DeleteRPM), varargs...)
}

// DeleteRack mocks base method.
func (m *MockFleetClient) DeleteRack(ctx context.Context, in *ufspb1.DeleteRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRack", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRack indicates an expected call of DeleteRack.
func (mr *MockFleetClientMockRecorder) DeleteRack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRack", reflect.TypeOf((*MockFleetClient)(nil).DeleteRack), varargs...)
}

// DeleteRackLSE mocks base method.
func (m *MockFleetClient) DeleteRackLSE(ctx context.Context, in *ufspb1.DeleteRackLSERequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRackLSE", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRackLSE indicates an expected call of DeleteRackLSE.
func (mr *MockFleetClientMockRecorder) DeleteRackLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRackLSE", reflect.TypeOf((*MockFleetClient)(nil).DeleteRackLSE), varargs...)
}

// DeleteRackLSEPrototype mocks base method.
func (m *MockFleetClient) DeleteRackLSEPrototype(ctx context.Context, in *ufspb1.DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRackLSEPrototype", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRackLSEPrototype indicates an expected call of DeleteRackLSEPrototype.
func (mr *MockFleetClientMockRecorder) DeleteRackLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRackLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).DeleteRackLSEPrototype), varargs...)
}

// DeleteSchedulingUnit mocks base method.
func (m *MockFleetClient) DeleteSchedulingUnit(ctx context.Context, in *ufspb1.DeleteSchedulingUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchedulingUnit", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchedulingUnit indicates an expected call of DeleteSchedulingUnit.
func (mr *MockFleetClientMockRecorder) DeleteSchedulingUnit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedulingUnit", reflect.TypeOf((*MockFleetClient)(nil).DeleteSchedulingUnit), varargs...)
}

// DeleteSwitch mocks base method.
func (m *MockFleetClient) DeleteSwitch(ctx context.Context, in *ufspb1.DeleteSwitchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSwitch", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSwitch indicates an expected call of DeleteSwitch.
func (mr *MockFleetClientMockRecorder) DeleteSwitch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwitch", reflect.TypeOf((*MockFleetClient)(nil).DeleteSwitch), varargs...)
}

// DeleteVM mocks base method.
func (m *MockFleetClient) DeleteVM(ctx context.Context, in *ufspb1.DeleteVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVM", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockFleetClientMockRecorder) DeleteVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockFleetClient)(nil).DeleteVM), varargs...)
}

// DeleteVlan mocks base method.
func (m *MockFleetClient) DeleteVlan(ctx context.Context, in *ufspb1.DeleteVlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVlan", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVlan indicates an expected call of DeleteVlan.
func (mr *MockFleetClientMockRecorder) DeleteVlan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVlan", reflect.TypeOf((*MockFleetClient)(nil).DeleteVlan), varargs...)
}

// GetAsset mocks base method.
func (m *MockFleetClient) GetAsset(ctx context.Context, in *ufspb1.GetAssetRequest, opts ...grpc.CallOption) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAsset", varargs...)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockFleetClientMockRecorder) GetAsset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockFleetClient)(nil).GetAsset), varargs...)
}

// GetCachingService mocks base method.
func (m *MockFleetClient) GetCachingService(ctx context.Context, in *ufspb1.GetCachingServiceRequest, opts ...grpc.CallOption) (*ufspb.CachingService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCachingService", varargs...)
	ret0, _ := ret[0].(*ufspb.CachingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachingService indicates an expected call of GetCachingService.
func (mr *MockFleetClientMockRecorder) GetCachingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachingService", reflect.TypeOf((*MockFleetClient)(nil).GetCachingService), varargs...)
}

// GetChromeOSDeviceData mocks base method.
func (m *MockFleetClient) GetChromeOSDeviceData(ctx context.Context, in *ufspb1.GetChromeOSDeviceDataRequest, opts ...grpc.CallOption) (*ufspb.ChromeOSDeviceData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChromeOSDeviceData", varargs...)
	ret0, _ := ret[0].(*ufspb.ChromeOSDeviceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChromeOSDeviceData indicates an expected call of GetChromeOSDeviceData.
func (mr *MockFleetClientMockRecorder) GetChromeOSDeviceData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChromeOSDeviceData", reflect.TypeOf((*MockFleetClient)(nil).GetChromeOSDeviceData), varargs...)
}

// GetChromePlatform mocks base method.
func (m *MockFleetClient) GetChromePlatform(ctx context.Context, in *ufspb1.GetChromePlatformRequest, opts ...grpc.CallOption) (*ufspb.ChromePlatform, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChromePlatform", varargs...)
	ret0, _ := ret[0].(*ufspb.ChromePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChromePlatform indicates an expected call of GetChromePlatform.
func (mr *MockFleetClientMockRecorder) GetChromePlatform(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChromePlatform", reflect.TypeOf((*MockFleetClient)(nil).GetChromePlatform), varargs...)
}

// GetDHCPConfig mocks base method.
func (m *MockFleetClient) GetDHCPConfig(ctx context.Context, in *ufspb1.GetDHCPConfigRequest, opts ...grpc.CallOption) (*ufspb.DHCPConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDHCPConfig", varargs...)
	ret0, _ := ret[0].(*ufspb.DHCPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPConfig indicates an expected call of GetDHCPConfig.
func (mr *MockFleetClientMockRecorder) GetDHCPConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPConfig", reflect.TypeOf((*MockFleetClient)(nil).GetDHCPConfig), varargs...)
}

// GetDUTsForLabstation mocks base method.
func (m *MockFleetClient) GetDUTsForLabstation(ctx context.Context, in *ufspb1.GetDUTsForLabstationRequest, opts ...grpc.CallOption) (*ufspb1.GetDUTsForLabstationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDUTsForLabstation", varargs...)
	ret0, _ := ret[0].(*ufspb1.GetDUTsForLabstationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDUTsForLabstation indicates an expected call of GetDUTsForLabstation.
func (mr *MockFleetClientMockRecorder) GetDUTsForLabstation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDUTsForLabstation", reflect.TypeOf((*MockFleetClient)(nil).GetDUTsForLabstation), varargs...)
}

// GetDefaultWifi mocks base method.
func (m *MockFleetClient) GetDefaultWifi(ctx context.Context, in *ufspb1.GetDefaultWifiRequest, opts ...grpc.CallOption) (*ufspb.DefaultWifi, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultWifi", varargs...)
	ret0, _ := ret[0].(*ufspb.DefaultWifi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultWifi indicates an expected call of GetDefaultWifi.
func (mr *MockFleetClientMockRecorder) GetDefaultWifi(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultWifi", reflect.TypeOf((*MockFleetClient)(nil).GetDefaultWifi), varargs...)
}

// GetDeviceData mocks base method.
func (m *MockFleetClient) GetDeviceData(ctx context.Context, in *ufspb1.GetDeviceDataRequest, opts ...grpc.CallOption) (*ufspb1.GetDeviceDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceData", varargs...)
	ret0, _ := ret[0].(*ufspb1.GetDeviceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceData indicates an expected call of GetDeviceData.
func (mr *MockFleetClientMockRecorder) GetDeviceData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceData", reflect.TypeOf((*MockFleetClient)(nil).GetDeviceData), varargs...)
}

// GetDrac mocks base method.
func (m *MockFleetClient) GetDrac(ctx context.Context, in *ufspb1.GetDracRequest, opts ...grpc.CallOption) (*ufspb.Drac, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDrac", varargs...)
	ret0, _ := ret[0].(*ufspb.Drac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrac indicates an expected call of GetDrac.
func (mr *MockFleetClientMockRecorder) GetDrac(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrac", reflect.TypeOf((*MockFleetClient)(nil).GetDrac), varargs...)
}

// GetDutState mocks base method.
func (m *MockFleetClient) GetDutState(ctx context.Context, in *ufspb1.GetDutStateRequest, opts ...grpc.CallOption) (*ufspb0.DutState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDutState", varargs...)
	ret0, _ := ret[0].(*ufspb0.DutState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDutState indicates an expected call of GetDutState.
func (mr *MockFleetClientMockRecorder) GetDutState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDutState", reflect.TypeOf((*MockFleetClient)(nil).GetDutState), varargs...)
}

// GetKVM mocks base method.
func (m *MockFleetClient) GetKVM(ctx context.Context, in *ufspb1.GetKVMRequest, opts ...grpc.CallOption) (*ufspb.KVM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKVM", varargs...)
	ret0, _ := ret[0].(*ufspb.KVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKVM indicates an expected call of GetKVM.
func (mr *MockFleetClientMockRecorder) GetKVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKVM", reflect.TypeOf((*MockFleetClient)(nil).GetKVM), varargs...)
}

// GetMachine mocks base method.
func (m *MockFleetClient) GetMachine(ctx context.Context, in *ufspb1.GetMachineRequest, opts ...grpc.CallOption) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachine", varargs...)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachine indicates an expected call of GetMachine.
func (mr *MockFleetClientMockRecorder) GetMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachine", reflect.TypeOf((*MockFleetClient)(nil).GetMachine), varargs...)
}

// GetMachineLSE mocks base method.
func (m *MockFleetClient) GetMachineLSE(ctx context.Context, in *ufspb1.GetMachineLSERequest, opts ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSE indicates an expected call of GetMachineLSE.
func (mr *MockFleetClientMockRecorder) GetMachineLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSE", reflect.TypeOf((*MockFleetClient)(nil).GetMachineLSE), varargs...)
}

// GetMachineLSEBySerial mocks base method.
func (m *MockFleetClient) GetMachineLSEBySerial(ctx context.Context, in *ufspb1.GetMachineLSEBySerialRequest, opts ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineLSEBySerial", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSEBySerial indicates an expected call of GetMachineLSEBySerial.
func (mr *MockFleetClientMockRecorder) GetMachineLSEBySerial(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSEBySerial", reflect.TypeOf((*MockFleetClient)(nil).GetMachineLSEBySerial), varargs...)
}

// GetMachineLSEDeployment mocks base method.
func (m *MockFleetClient) GetMachineLSEDeployment(ctx context.Context, in *ufspb1.GetMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*ufspb.MachineLSEDeployment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineLSEDeployment", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSEDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSEDeployment indicates an expected call of GetMachineLSEDeployment.
func (mr *MockFleetClientMockRecorder) GetMachineLSEDeployment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSEDeployment", reflect.TypeOf((*MockFleetClient)(nil).GetMachineLSEDeployment), varargs...)
}

// GetMachineLSEPrototype mocks base method.
func (m *MockFleetClient) GetMachineLSEPrototype(ctx context.Context, in *ufspb1.GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*ufspb.MachineLSEPrototype, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineLSEPrototype", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSEPrototype indicates an expected call of GetMachineLSEPrototype.
func (mr *MockFleetClientMockRecorder) GetMachineLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).GetMachineLSEPrototype), varargs...)
}

// GetNic mocks base method.
func (m *MockFleetClient) GetNic(ctx context.Context, in *ufspb1.GetNicRequest, opts ...grpc.CallOption) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNic", varargs...)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNic indicates an expected call of GetNic.
func (mr *MockFleetClientMockRecorder) GetNic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNic", reflect.TypeOf((*MockFleetClient)(nil).GetNic), varargs...)
}

// GetOwnershipData mocks base method.
func (m *MockFleetClient) GetOwnershipData(ctx context.Context, in *ufspb1.GetOwnershipDataRequest, opts ...grpc.CallOption) (*ufspb.OwnershipData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOwnershipData", varargs...)
	ret0, _ := ret[0].(*ufspb.OwnershipData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipData indicates an expected call of GetOwnershipData.
func (mr *MockFleetClientMockRecorder) GetOwnershipData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipData", reflect.TypeOf((*MockFleetClient)(nil).GetOwnershipData), varargs...)
}

// GetRPM mocks base method.
func (m *MockFleetClient) GetRPM(ctx context.Context, in *ufspb1.GetRPMRequest, opts ...grpc.CallOption) (*ufspb.RPM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRPM", varargs...)
	ret0, _ := ret[0].(*ufspb.RPM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRPM indicates an expected call of GetRPM.
func (mr *MockFleetClientMockRecorder) GetRPM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPM", reflect.TypeOf((*MockFleetClient)(nil).GetRPM), varargs...)
}

// GetRack mocks base method.
func (m *MockFleetClient) GetRack(ctx context.Context, in *ufspb1.GetRackRequest, opts ...grpc.CallOption) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRack", varargs...)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRack indicates an expected call of GetRack.
func (mr *MockFleetClientMockRecorder) GetRack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRack", reflect.TypeOf((*MockFleetClient)(nil).GetRack), varargs...)
}

// GetRackLSE mocks base method.
func (m *MockFleetClient) GetRackLSE(ctx context.Context, in *ufspb1.GetRackLSERequest, opts ...grpc.CallOption) (*ufspb.RackLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRackLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.RackLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRackLSE indicates an expected call of GetRackLSE.
func (mr *MockFleetClientMockRecorder) GetRackLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRackLSE", reflect.TypeOf((*MockFleetClient)(nil).GetRackLSE), varargs...)
}

// GetRackLSEPrototype mocks base method.
func (m *MockFleetClient) GetRackLSEPrototype(ctx context.Context, in *ufspb1.GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*ufspb.RackLSEPrototype, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRackLSEPrototype", varargs...)
	ret0, _ := ret[0].(*ufspb.RackLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRackLSEPrototype indicates an expected call of GetRackLSEPrototype.
func (mr *MockFleetClientMockRecorder) GetRackLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRackLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).GetRackLSEPrototype), varargs...)
}

// GetSchedulingUnit mocks base method.
func (m *MockFleetClient) GetSchedulingUnit(ctx context.Context, in *ufspb1.GetSchedulingUnitRequest, opts ...grpc.CallOption) (*ufspb.SchedulingUnit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchedulingUnit", varargs...)
	ret0, _ := ret[0].(*ufspb.SchedulingUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulingUnit indicates an expected call of GetSchedulingUnit.
func (mr *MockFleetClientMockRecorder) GetSchedulingUnit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulingUnit", reflect.TypeOf((*MockFleetClient)(nil).GetSchedulingUnit), varargs...)
}

// GetState mocks base method.
func (m *MockFleetClient) GetState(ctx context.Context, in *ufspb1.GetStateRequest, opts ...grpc.CallOption) (*ufspb.StateRecord, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetState", varargs...)
	ret0, _ := ret[0].(*ufspb.StateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockFleetClientMockRecorder) GetState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockFleetClient)(nil).GetState), varargs...)
}

// GetSwitch mocks base method.
func (m *MockFleetClient) GetSwitch(ctx context.Context, in *ufspb1.GetSwitchRequest, opts ...grpc.CallOption) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSwitch", varargs...)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitch indicates an expected call of GetSwitch.
func (mr *MockFleetClientMockRecorder) GetSwitch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitch", reflect.TypeOf((*MockFleetClient)(nil).GetSwitch), varargs...)
}

// GetVM mocks base method.
func (m *MockFleetClient) GetVM(ctx context.Context, in *ufspb1.GetVMRequest, opts ...grpc.CallOption) (*ufspb.VM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVM", varargs...)
	ret0, _ := ret[0].(*ufspb.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVM indicates an expected call of GetVM.
func (mr *MockFleetClientMockRecorder) GetVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVM", reflect.TypeOf((*MockFleetClient)(nil).GetVM), varargs...)
}

// GetVlan mocks base method.
func (m *MockFleetClient) GetVlan(ctx context.Context, in *ufspb1.GetVlanRequest, opts ...grpc.CallOption) (*ufspb.Vlan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVlan", varargs...)
	ret0, _ := ret[0].(*ufspb.Vlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVlan indicates an expected call of GetVlan.
func (mr *MockFleetClientMockRecorder) GetVlan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVlan", reflect.TypeOf((*MockFleetClient)(nil).GetVlan), varargs...)
}

// ImportOSMachineLSEs mocks base method.
func (m *MockFleetClient) ImportOSMachineLSEs(ctx context.Context, in *ufspb1.ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportOSMachineLSEs", varargs...)
	ret0, _ := ret[0].(*status.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportOSMachineLSEs indicates an expected call of ImportOSMachineLSEs.
func (mr *MockFleetClientMockRecorder) ImportOSMachineLSEs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOSMachineLSEs", reflect.TypeOf((*MockFleetClient)(nil).ImportOSMachineLSEs), varargs...)
}

// ImportOSVlans mocks base method.
func (m *MockFleetClient) ImportOSVlans(ctx context.Context, in *ufspb1.ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportOSVlans", varargs...)
	ret0, _ := ret[0].(*status.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportOSVlans indicates an expected call of ImportOSVlans.
func (mr *MockFleetClientMockRecorder) ImportOSVlans(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOSVlans", reflect.TypeOf((*MockFleetClient)(nil).ImportOSVlans), varargs...)
}

// ListAssets mocks base method.
func (m *MockFleetClient) ListAssets(ctx context.Context, in *ufspb1.ListAssetsRequest, opts ...grpc.CallOption) (*ufspb1.ListAssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssets", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssets indicates an expected call of ListAssets.
func (mr *MockFleetClientMockRecorder) ListAssets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssets", reflect.TypeOf((*MockFleetClient)(nil).ListAssets), varargs...)
}

// ListCachingServices mocks base method.
func (m *MockFleetClient) ListCachingServices(ctx context.Context, in *ufspb1.ListCachingServicesRequest, opts ...grpc.CallOption) (*ufspb1.ListCachingServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCachingServices", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListCachingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCachingServices indicates an expected call of ListCachingServices.
func (mr *MockFleetClientMockRecorder) ListCachingServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCachingServices", reflect.TypeOf((*MockFleetClient)(nil).ListCachingServices), varargs...)
}

// ListChromePlatforms mocks base method.
func (m *MockFleetClient) ListChromePlatforms(ctx context.Context, in *ufspb1.ListChromePlatformsRequest, opts ...grpc.CallOption) (*ufspb1.ListChromePlatformsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListChromePlatforms", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListChromePlatformsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChromePlatforms indicates an expected call of ListChromePlatforms.
func (mr *MockFleetClientMockRecorder) ListChromePlatforms(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChromePlatforms", reflect.TypeOf((*MockFleetClient)(nil).ListChromePlatforms), varargs...)
}

// ListDefaultWifis mocks base method.
func (m *MockFleetClient) ListDefaultWifis(ctx context.Context, in *ufspb1.ListDefaultWifisRequest, opts ...grpc.CallOption) (*ufspb1.ListDefaultWifisResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDefaultWifis", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListDefaultWifisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDefaultWifis indicates an expected call of ListDefaultWifis.
func (mr *MockFleetClientMockRecorder) ListDefaultWifis(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDefaultWifis", reflect.TypeOf((*MockFleetClient)(nil).ListDefaultWifis), varargs...)
}

// ListDracs mocks base method.
func (m *MockFleetClient) ListDracs(ctx context.Context, in *ufspb1.ListDracsRequest, opts ...grpc.CallOption) (*ufspb1.ListDracsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDracs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListDracsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDracs indicates an expected call of ListDracs.
func (mr *MockFleetClientMockRecorder) ListDracs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDracs", reflect.TypeOf((*MockFleetClient)(nil).ListDracs), varargs...)
}

// ListDutStates mocks base method.
func (m *MockFleetClient) ListDutStates(ctx context.Context, in *ufspb1.ListDutStatesRequest, opts ...grpc.CallOption) (*ufspb1.ListDutStatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDutStates", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListDutStatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDutStates indicates an expected call of ListDutStates.
func (mr *MockFleetClientMockRecorder) ListDutStates(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDutStates", reflect.TypeOf((*MockFleetClient)(nil).ListDutStates), varargs...)
}

// ListIPs mocks base method.
func (m *MockFleetClient) ListIPs(ctx context.Context, in *ufspb1.ListIPsRequest, opts ...grpc.CallOption) (*ufspb1.ListIPsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListIPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPs indicates an expected call of ListIPs.
func (mr *MockFleetClientMockRecorder) ListIPs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPs", reflect.TypeOf((*MockFleetClient)(nil).ListIPs), varargs...)
}

// ListKVMs mocks base method.
func (m *MockFleetClient) ListKVMs(ctx context.Context, in *ufspb1.ListKVMsRequest, opts ...grpc.CallOption) (*ufspb1.ListKVMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKVMs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListKVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKVMs indicates an expected call of ListKVMs.
func (mr *MockFleetClientMockRecorder) ListKVMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKVMs", reflect.TypeOf((*MockFleetClient)(nil).ListKVMs), varargs...)
}

// ListMachineLSEDeployments mocks base method.
func (m *MockFleetClient) ListMachineLSEDeployments(ctx context.Context, in *ufspb1.ListMachineLSEDeploymentsRequest, opts ...grpc.CallOption) (*ufspb1.ListMachineLSEDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineLSEDeployments", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListMachineLSEDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineLSEDeployments indicates an expected call of ListMachineLSEDeployments.
func (mr *MockFleetClientMockRecorder) ListMachineLSEDeployments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineLSEDeployments", reflect.TypeOf((*MockFleetClient)(nil).ListMachineLSEDeployments), varargs...)
}

// ListMachineLSEPrototypes mocks base method.
func (m *MockFleetClient) ListMachineLSEPrototypes(ctx context.Context, in *ufspb1.ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ufspb1.ListMachineLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineLSEPrototypes", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListMachineLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineLSEPrototypes indicates an expected call of ListMachineLSEPrototypes.
func (mr *MockFleetClientMockRecorder) ListMachineLSEPrototypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineLSEPrototypes", reflect.TypeOf((*MockFleetClient)(nil).ListMachineLSEPrototypes), varargs...)
}

// ListMachineLSEs mocks base method.
func (m *MockFleetClient) ListMachineLSEs(ctx context.Context, in *ufspb1.ListMachineLSEsRequest, opts ...grpc.CallOption) (*ufspb1.ListMachineLSEsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachineLSEs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListMachineLSEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineLSEs indicates an expected call of ListMachineLSEs.
func (mr *MockFleetClientMockRecorder) ListMachineLSEs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineLSEs", reflect.TypeOf((*MockFleetClient)(nil).ListMachineLSEs), varargs...)
}

// ListMachines mocks base method.
func (m *MockFleetClient) ListMachines(ctx context.Context, in *ufspb1.ListMachinesRequest, opts ...grpc.CallOption) (*ufspb1.ListMachinesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMachines", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListMachinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachines indicates an expected call of ListMachines.
func (mr *MockFleetClientMockRecorder) ListMachines(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachines", reflect.TypeOf((*MockFleetClient)(nil).ListMachines), varargs...)
}

// ListNics mocks base method.
func (m *MockFleetClient) ListNics(ctx context.Context, in *ufspb1.ListNicsRequest, opts ...grpc.CallOption) (*ufspb1.ListNicsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNics", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListNicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNics indicates an expected call of ListNics.
func (mr *MockFleetClientMockRecorder) ListNics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNics", reflect.TypeOf((*MockFleetClient)(nil).ListNics), varargs...)
}

// ListOSVersions mocks base method.
func (m *MockFleetClient) ListOSVersions(ctx context.Context, in *ufspb1.ListOSVersionsRequest, opts ...grpc.CallOption) (*ufspb1.ListOSVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOSVersions", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListOSVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOSVersions indicates an expected call of ListOSVersions.
func (mr *MockFleetClientMockRecorder) ListOSVersions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOSVersions", reflect.TypeOf((*MockFleetClient)(nil).ListOSVersions), varargs...)
}

// ListOwnershipData mocks base method.
func (m *MockFleetClient) ListOwnershipData(ctx context.Context, in *ufspb1.ListOwnershipDataRequest, opts ...grpc.CallOption) (*ufspb1.ListOwnershipDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOwnershipData", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListOwnershipDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwnershipData indicates an expected call of ListOwnershipData.
func (mr *MockFleetClientMockRecorder) ListOwnershipData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwnershipData", reflect.TypeOf((*MockFleetClient)(nil).ListOwnershipData), varargs...)
}

// ListRPMs mocks base method.
func (m *MockFleetClient) ListRPMs(ctx context.Context, in *ufspb1.ListRPMsRequest, opts ...grpc.CallOption) (*ufspb1.ListRPMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRPMs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListRPMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRPMs indicates an expected call of ListRPMs.
func (mr *MockFleetClientMockRecorder) ListRPMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRPMs", reflect.TypeOf((*MockFleetClient)(nil).ListRPMs), varargs...)
}

// ListRackLSEPrototypes mocks base method.
func (m *MockFleetClient) ListRackLSEPrototypes(ctx context.Context, in *ufspb1.ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ufspb1.ListRackLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRackLSEPrototypes", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListRackLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRackLSEPrototypes indicates an expected call of ListRackLSEPrototypes.
func (mr *MockFleetClientMockRecorder) ListRackLSEPrototypes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRackLSEPrototypes", reflect.TypeOf((*MockFleetClient)(nil).ListRackLSEPrototypes), varargs...)
}

// ListRackLSEs mocks base method.
func (m *MockFleetClient) ListRackLSEs(ctx context.Context, in *ufspb1.ListRackLSEsRequest, opts ...grpc.CallOption) (*ufspb1.ListRackLSEsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRackLSEs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListRackLSEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRackLSEs indicates an expected call of ListRackLSEs.
func (mr *MockFleetClientMockRecorder) ListRackLSEs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRackLSEs", reflect.TypeOf((*MockFleetClient)(nil).ListRackLSEs), varargs...)
}

// ListRacks mocks base method.
func (m *MockFleetClient) ListRacks(ctx context.Context, in *ufspb1.ListRacksRequest, opts ...grpc.CallOption) (*ufspb1.ListRacksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRacks", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListRacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRacks indicates an expected call of ListRacks.
func (mr *MockFleetClientMockRecorder) ListRacks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRacks", reflect.TypeOf((*MockFleetClient)(nil).ListRacks), varargs...)
}

// ListSchedulingUnits mocks base method.
func (m *MockFleetClient) ListSchedulingUnits(ctx context.Context, in *ufspb1.ListSchedulingUnitsRequest, opts ...grpc.CallOption) (*ufspb1.ListSchedulingUnitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchedulingUnits", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListSchedulingUnitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulingUnits indicates an expected call of ListSchedulingUnits.
func (mr *MockFleetClientMockRecorder) ListSchedulingUnits(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulingUnits", reflect.TypeOf((*MockFleetClient)(nil).ListSchedulingUnits), varargs...)
}

// ListSwitches mocks base method.
func (m *MockFleetClient) ListSwitches(ctx context.Context, in *ufspb1.ListSwitchesRequest, opts ...grpc.CallOption) (*ufspb1.ListSwitchesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSwitches", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListSwitchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSwitches indicates an expected call of ListSwitches.
func (mr *MockFleetClientMockRecorder) ListSwitches(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSwitches", reflect.TypeOf((*MockFleetClient)(nil).ListSwitches), varargs...)
}

// ListVMs mocks base method.
func (m *MockFleetClient) ListVMs(ctx context.Context, in *ufspb1.ListVMsRequest, opts ...grpc.CallOption) (*ufspb1.ListVMsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVMs", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMs indicates an expected call of ListVMs.
func (mr *MockFleetClientMockRecorder) ListVMs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMs", reflect.TypeOf((*MockFleetClient)(nil).ListVMs), varargs...)
}

// ListVlans mocks base method.
func (m *MockFleetClient) ListVlans(ctx context.Context, in *ufspb1.ListVlansRequest, opts ...grpc.CallOption) (*ufspb1.ListVlansResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVlans", varargs...)
	ret0, _ := ret[0].(*ufspb1.ListVlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVlans indicates an expected call of ListVlans.
func (mr *MockFleetClientMockRecorder) ListVlans(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVlans", reflect.TypeOf((*MockFleetClient)(nil).ListVlans), varargs...)
}

// MachineRegistration mocks base method.
func (m *MockFleetClient) MachineRegistration(ctx context.Context, in *ufspb1.MachineRegistrationRequest, opts ...grpc.CallOption) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MachineRegistration", varargs...)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineRegistration indicates an expected call of MachineRegistration.
func (mr *MockFleetClientMockRecorder) MachineRegistration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineRegistration", reflect.TypeOf((*MockFleetClient)(nil).MachineRegistration), varargs...)
}

// RackRegistration mocks base method.
func (m *MockFleetClient) RackRegistration(ctx context.Context, in *ufspb1.RackRegistrationRequest, opts ...grpc.CallOption) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RackRegistration", varargs...)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RackRegistration indicates an expected call of RackRegistration.
func (mr *MockFleetClientMockRecorder) RackRegistration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RackRegistration", reflect.TypeOf((*MockFleetClient)(nil).RackRegistration), varargs...)
}

// RenameAsset mocks base method.
func (m *MockFleetClient) RenameAsset(ctx context.Context, in *ufspb1.RenameAssetRequest, opts ...grpc.CallOption) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameAsset", varargs...)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameAsset indicates an expected call of RenameAsset.
func (mr *MockFleetClientMockRecorder) RenameAsset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameAsset", reflect.TypeOf((*MockFleetClient)(nil).RenameAsset), varargs...)
}

// RenameMachine mocks base method.
func (m *MockFleetClient) RenameMachine(ctx context.Context, in *ufspb1.RenameMachineRequest, opts ...grpc.CallOption) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameMachine", varargs...)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameMachine indicates an expected call of RenameMachine.
func (mr *MockFleetClientMockRecorder) RenameMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameMachine", reflect.TypeOf((*MockFleetClient)(nil).RenameMachine), varargs...)
}

// RenameMachineLSE mocks base method.
func (m *MockFleetClient) RenameMachineLSE(ctx context.Context, in *ufspb1.RenameMachineLSERequest, opts ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameMachineLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameMachineLSE indicates an expected call of RenameMachineLSE.
func (mr *MockFleetClientMockRecorder) RenameMachineLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameMachineLSE", reflect.TypeOf((*MockFleetClient)(nil).RenameMachineLSE), varargs...)
}

// RenameNic mocks base method.
func (m *MockFleetClient) RenameNic(ctx context.Context, in *ufspb1.RenameNicRequest, opts ...grpc.CallOption) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameNic", varargs...)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameNic indicates an expected call of RenameNic.
func (mr *MockFleetClientMockRecorder) RenameNic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNic", reflect.TypeOf((*MockFleetClient)(nil).RenameNic), varargs...)
}

// RenameRack mocks base method.
func (m *MockFleetClient) RenameRack(ctx context.Context, in *ufspb1.RenameRackRequest, opts ...grpc.CallOption) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameRack", varargs...)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameRack indicates an expected call of RenameRack.
func (mr *MockFleetClientMockRecorder) RenameRack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameRack", reflect.TypeOf((*MockFleetClient)(nil).RenameRack), varargs...)
}

// RenameSwitch mocks base method.
func (m *MockFleetClient) RenameSwitch(ctx context.Context, in *ufspb1.RenameSwitchRequest, opts ...grpc.CallOption) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameSwitch", varargs...)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameSwitch indicates an expected call of RenameSwitch.
func (mr *MockFleetClientMockRecorder) RenameSwitch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSwitch", reflect.TypeOf((*MockFleetClient)(nil).RenameSwitch), varargs...)
}

// UpdateAsset mocks base method.
func (m *MockFleetClient) UpdateAsset(ctx context.Context, in *ufspb1.UpdateAssetRequest, opts ...grpc.CallOption) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAsset", varargs...)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockFleetClientMockRecorder) UpdateAsset(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockFleetClient)(nil).UpdateAsset), varargs...)
}

// UpdateCachingService mocks base method.
func (m *MockFleetClient) UpdateCachingService(ctx context.Context, in *ufspb1.UpdateCachingServiceRequest, opts ...grpc.CallOption) (*ufspb.CachingService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCachingService", varargs...)
	ret0, _ := ret[0].(*ufspb.CachingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCachingService indicates an expected call of UpdateCachingService.
func (mr *MockFleetClientMockRecorder) UpdateCachingService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachingService", reflect.TypeOf((*MockFleetClient)(nil).UpdateCachingService), varargs...)
}

// UpdateChromePlatform mocks base method.
func (m *MockFleetClient) UpdateChromePlatform(ctx context.Context, in *ufspb1.UpdateChromePlatformRequest, opts ...grpc.CallOption) (*ufspb.ChromePlatform, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateChromePlatform", varargs...)
	ret0, _ := ret[0].(*ufspb.ChromePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChromePlatform indicates an expected call of UpdateChromePlatform.
func (mr *MockFleetClientMockRecorder) UpdateChromePlatform(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChromePlatform", reflect.TypeOf((*MockFleetClient)(nil).UpdateChromePlatform), varargs...)
}

// UpdateConfigBundle mocks base method.
func (m *MockFleetClient) UpdateConfigBundle(ctx context.Context, in *ufspb1.UpdateConfigBundleRequest, opts ...grpc.CallOption) (*ufspb1.UpdateConfigBundleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigBundle", varargs...)
	ret0, _ := ret[0].(*ufspb1.UpdateConfigBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigBundle indicates an expected call of UpdateConfigBundle.
func (mr *MockFleetClientMockRecorder) UpdateConfigBundle(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigBundle", reflect.TypeOf((*MockFleetClient)(nil).UpdateConfigBundle), varargs...)
}

// UpdateDefaultWifi mocks base method.
func (m *MockFleetClient) UpdateDefaultWifi(ctx context.Context, in *ufspb1.UpdateDefaultWifiRequest, opts ...grpc.CallOption) (*ufspb.DefaultWifi, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDefaultWifi", varargs...)
	ret0, _ := ret[0].(*ufspb.DefaultWifi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultWifi indicates an expected call of UpdateDefaultWifi.
func (mr *MockFleetClientMockRecorder) UpdateDefaultWifi(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultWifi", reflect.TypeOf((*MockFleetClient)(nil).UpdateDefaultWifi), varargs...)
}

// UpdateDeviceRecoveryData mocks base method.
func (m *MockFleetClient) UpdateDeviceRecoveryData(ctx context.Context, in *ufspb1.UpdateDeviceRecoveryDataRequest, opts ...grpc.CallOption) (*ufspb1.UpdateDeviceRecoveryDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeviceRecoveryData", varargs...)
	ret0, _ := ret[0].(*ufspb1.UpdateDeviceRecoveryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceRecoveryData indicates an expected call of UpdateDeviceRecoveryData.
func (mr *MockFleetClientMockRecorder) UpdateDeviceRecoveryData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceRecoveryData", reflect.TypeOf((*MockFleetClient)(nil).UpdateDeviceRecoveryData), varargs...)
}

// UpdateDrac mocks base method.
func (m *MockFleetClient) UpdateDrac(ctx context.Context, in *ufspb1.UpdateDracRequest, opts ...grpc.CallOption) (*ufspb.Drac, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDrac", varargs...)
	ret0, _ := ret[0].(*ufspb.Drac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDrac indicates an expected call of UpdateDrac.
func (mr *MockFleetClientMockRecorder) UpdateDrac(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrac", reflect.TypeOf((*MockFleetClient)(nil).UpdateDrac), varargs...)
}

// UpdateDutState mocks base method.
func (m *MockFleetClient) UpdateDutState(ctx context.Context, in *ufspb1.UpdateDutStateRequest, opts ...grpc.CallOption) (*ufspb0.DutState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDutState", varargs...)
	ret0, _ := ret[0].(*ufspb0.DutState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDutState indicates an expected call of UpdateDutState.
func (mr *MockFleetClientMockRecorder) UpdateDutState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDutState", reflect.TypeOf((*MockFleetClient)(nil).UpdateDutState), varargs...)
}

// UpdateKVM mocks base method.
func (m *MockFleetClient) UpdateKVM(ctx context.Context, in *ufspb1.UpdateKVMRequest, opts ...grpc.CallOption) (*ufspb.KVM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateKVM", varargs...)
	ret0, _ := ret[0].(*ufspb.KVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKVM indicates an expected call of UpdateKVM.
func (mr *MockFleetClientMockRecorder) UpdateKVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKVM", reflect.TypeOf((*MockFleetClient)(nil).UpdateKVM), varargs...)
}

// UpdateMachine mocks base method.
func (m *MockFleetClient) UpdateMachine(ctx context.Context, in *ufspb1.UpdateMachineRequest, opts ...grpc.CallOption) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMachine", varargs...)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachine indicates an expected call of UpdateMachine.
func (mr *MockFleetClientMockRecorder) UpdateMachine(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachine", reflect.TypeOf((*MockFleetClient)(nil).UpdateMachine), varargs...)
}

// UpdateMachineLSE mocks base method.
func (m *MockFleetClient) UpdateMachineLSE(ctx context.Context, in *ufspb1.UpdateMachineLSERequest, opts ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMachineLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachineLSE indicates an expected call of UpdateMachineLSE.
func (mr *MockFleetClientMockRecorder) UpdateMachineLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineLSE", reflect.TypeOf((*MockFleetClient)(nil).UpdateMachineLSE), varargs...)
}

// UpdateMachineLSEDeployment mocks base method.
func (m *MockFleetClient) UpdateMachineLSEDeployment(ctx context.Context, in *ufspb1.UpdateMachineLSEDeploymentRequest, opts ...grpc.CallOption) (*ufspb.MachineLSEDeployment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMachineLSEDeployment", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSEDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachineLSEDeployment indicates an expected call of UpdateMachineLSEDeployment.
func (mr *MockFleetClientMockRecorder) UpdateMachineLSEDeployment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineLSEDeployment", reflect.TypeOf((*MockFleetClient)(nil).UpdateMachineLSEDeployment), varargs...)
}

// UpdateMachineLSEPrototype mocks base method.
func (m *MockFleetClient) UpdateMachineLSEPrototype(ctx context.Context, in *ufspb1.UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*ufspb.MachineLSEPrototype, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMachineLSEPrototype", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachineLSEPrototype indicates an expected call of UpdateMachineLSEPrototype.
func (mr *MockFleetClientMockRecorder) UpdateMachineLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).UpdateMachineLSEPrototype), varargs...)
}

// UpdateNic mocks base method.
func (m *MockFleetClient) UpdateNic(ctx context.Context, in *ufspb1.UpdateNicRequest, opts ...grpc.CallOption) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNic", varargs...)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNic indicates an expected call of UpdateNic.
func (mr *MockFleetClientMockRecorder) UpdateNic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNic", reflect.TypeOf((*MockFleetClient)(nil).UpdateNic), varargs...)
}

// UpdateRPM mocks base method.
func (m *MockFleetClient) UpdateRPM(ctx context.Context, in *ufspb1.UpdateRPMRequest, opts ...grpc.CallOption) (*ufspb.RPM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRPM", varargs...)
	ret0, _ := ret[0].(*ufspb.RPM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRPM indicates an expected call of UpdateRPM.
func (mr *MockFleetClientMockRecorder) UpdateRPM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRPM", reflect.TypeOf((*MockFleetClient)(nil).UpdateRPM), varargs...)
}

// UpdateRack mocks base method.
func (m *MockFleetClient) UpdateRack(ctx context.Context, in *ufspb1.UpdateRackRequest, opts ...grpc.CallOption) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRack", varargs...)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRack indicates an expected call of UpdateRack.
func (mr *MockFleetClientMockRecorder) UpdateRack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRack", reflect.TypeOf((*MockFleetClient)(nil).UpdateRack), varargs...)
}

// UpdateRackLSE mocks base method.
func (m *MockFleetClient) UpdateRackLSE(ctx context.Context, in *ufspb1.UpdateRackLSERequest, opts ...grpc.CallOption) (*ufspb.RackLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRackLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.RackLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRackLSE indicates an expected call of UpdateRackLSE.
func (mr *MockFleetClientMockRecorder) UpdateRackLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRackLSE", reflect.TypeOf((*MockFleetClient)(nil).UpdateRackLSE), varargs...)
}

// UpdateRackLSEPrototype mocks base method.
func (m *MockFleetClient) UpdateRackLSEPrototype(ctx context.Context, in *ufspb1.UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*ufspb.RackLSEPrototype, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRackLSEPrototype", varargs...)
	ret0, _ := ret[0].(*ufspb.RackLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRackLSEPrototype indicates an expected call of UpdateRackLSEPrototype.
func (mr *MockFleetClientMockRecorder) UpdateRackLSEPrototype(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRackLSEPrototype", reflect.TypeOf((*MockFleetClient)(nil).UpdateRackLSEPrototype), varargs...)
}

// UpdateSchedulingUnit mocks base method.
func (m *MockFleetClient) UpdateSchedulingUnit(ctx context.Context, in *ufspb1.UpdateSchedulingUnitRequest, opts ...grpc.CallOption) (*ufspb.SchedulingUnit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchedulingUnit", varargs...)
	ret0, _ := ret[0].(*ufspb.SchedulingUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedulingUnit indicates an expected call of UpdateSchedulingUnit.
func (mr *MockFleetClientMockRecorder) UpdateSchedulingUnit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulingUnit", reflect.TypeOf((*MockFleetClient)(nil).UpdateSchedulingUnit), varargs...)
}

// UpdateState mocks base method.
func (m *MockFleetClient) UpdateState(ctx context.Context, in *ufspb1.UpdateStateRequest, opts ...grpc.CallOption) (*ufspb.StateRecord, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateState", varargs...)
	ret0, _ := ret[0].(*ufspb.StateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockFleetClientMockRecorder) UpdateState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockFleetClient)(nil).UpdateState), varargs...)
}

// UpdateSwitch mocks base method.
func (m *MockFleetClient) UpdateSwitch(ctx context.Context, in *ufspb1.UpdateSwitchRequest, opts ...grpc.CallOption) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSwitch", varargs...)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSwitch indicates an expected call of UpdateSwitch.
func (mr *MockFleetClientMockRecorder) UpdateSwitch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwitch", reflect.TypeOf((*MockFleetClient)(nil).UpdateSwitch), varargs...)
}

// UpdateTestData mocks base method.
func (m *MockFleetClient) UpdateTestData(ctx context.Context, in *ufspb1.UpdateTestDataRequest, opts ...grpc.CallOption) (*ufspb1.UpdateTestDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTestData", varargs...)
	ret0, _ := ret[0].(*ufspb1.UpdateTestDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestData indicates an expected call of UpdateTestData.
func (mr *MockFleetClientMockRecorder) UpdateTestData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestData", reflect.TypeOf((*MockFleetClient)(nil).UpdateTestData), varargs...)
}

// UpdateVM mocks base method.
func (m *MockFleetClient) UpdateVM(ctx context.Context, in *ufspb1.UpdateVMRequest, opts ...grpc.CallOption) (*ufspb.VM, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVM", varargs...)
	ret0, _ := ret[0].(*ufspb.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVM indicates an expected call of UpdateVM.
func (mr *MockFleetClientMockRecorder) UpdateVM(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVM", reflect.TypeOf((*MockFleetClient)(nil).UpdateVM), varargs...)
}

// UpdateVlan mocks base method.
func (m *MockFleetClient) UpdateVlan(ctx context.Context, in *ufspb1.UpdateVlanRequest, opts ...grpc.CallOption) (*ufspb.Vlan, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVlan", varargs...)
	ret0, _ := ret[0].(*ufspb.Vlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVlan indicates an expected call of UpdateVlan.
func (mr *MockFleetClientMockRecorder) UpdateVlan(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVlan", reflect.TypeOf((*MockFleetClient)(nil).UpdateVlan), varargs...)
}

// MockFleetServer is a mock of FleetServer interface.
type MockFleetServer struct {
	ctrl     *gomock.Controller
	recorder *MockFleetServerMockRecorder
}

// MockFleetServerMockRecorder is the mock recorder for MockFleetServer.
type MockFleetServerMockRecorder struct {
	mock *MockFleetServer
}

// NewMockFleetServer creates a new mock instance.
func NewMockFleetServer(ctrl *gomock.Controller) *MockFleetServer {
	mock := &MockFleetServer{ctrl: ctrl}
	mock.recorder = &MockFleetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFleetServer) EXPECT() *MockFleetServerMockRecorder {
	return m.recorder
}

// BatchGetChromePlatforms mocks base method.
func (m *MockFleetServer) BatchGetChromePlatforms(arg0 context.Context, arg1 *ufspb1.BatchGetChromePlatformsRequest) (*ufspb1.BatchGetChromePlatformsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetChromePlatforms", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetChromePlatformsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetChromePlatforms indicates an expected call of BatchGetChromePlatforms.
func (mr *MockFleetServerMockRecorder) BatchGetChromePlatforms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetChromePlatforms", reflect.TypeOf((*MockFleetServer)(nil).BatchGetChromePlatforms), arg0, arg1)
}

// BatchGetDHCPConfigs mocks base method.
func (m *MockFleetServer) BatchGetDHCPConfigs(arg0 context.Context, arg1 *ufspb1.BatchGetDHCPConfigsRequest) (*ufspb1.BatchGetDHCPConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDHCPConfigs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetDHCPConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDHCPConfigs indicates an expected call of BatchGetDHCPConfigs.
func (mr *MockFleetServerMockRecorder) BatchGetDHCPConfigs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDHCPConfigs", reflect.TypeOf((*MockFleetServer)(nil).BatchGetDHCPConfigs), arg0, arg1)
}

// BatchGetDracs mocks base method.
func (m *MockFleetServer) BatchGetDracs(arg0 context.Context, arg1 *ufspb1.BatchGetDracsRequest) (*ufspb1.BatchGetDracsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDracs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetDracsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDracs indicates an expected call of BatchGetDracs.
func (mr *MockFleetServerMockRecorder) BatchGetDracs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDracs", reflect.TypeOf((*MockFleetServer)(nil).BatchGetDracs), arg0, arg1)
}

// BatchGetKVMs mocks base method.
func (m *MockFleetServer) BatchGetKVMs(arg0 context.Context, arg1 *ufspb1.BatchGetKVMsRequest) (*ufspb1.BatchGetKVMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetKVMs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetKVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetKVMs indicates an expected call of BatchGetKVMs.
func (mr *MockFleetServerMockRecorder) BatchGetKVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetKVMs", reflect.TypeOf((*MockFleetServer)(nil).BatchGetKVMs), arg0, arg1)
}

// BatchGetMachineLSEDeployments mocks base method.
func (m *MockFleetServer) BatchGetMachineLSEDeployments(arg0 context.Context, arg1 *ufspb1.BatchGetMachineLSEDeploymentsRequest) (*ufspb1.BatchGetMachineLSEDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMachineLSEDeployments", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachineLSEDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachineLSEDeployments indicates an expected call of BatchGetMachineLSEDeployments.
func (mr *MockFleetServerMockRecorder) BatchGetMachineLSEDeployments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachineLSEDeployments", reflect.TypeOf((*MockFleetServer)(nil).BatchGetMachineLSEDeployments), arg0, arg1)
}

// BatchGetMachineLSEPrototypes mocks base method.
func (m *MockFleetServer) BatchGetMachineLSEPrototypes(arg0 context.Context, arg1 *ufspb1.BatchGetMachineLSEPrototypesRequest) (*ufspb1.BatchGetMachineLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMachineLSEPrototypes", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachineLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachineLSEPrototypes indicates an expected call of BatchGetMachineLSEPrototypes.
func (mr *MockFleetServerMockRecorder) BatchGetMachineLSEPrototypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachineLSEPrototypes", reflect.TypeOf((*MockFleetServer)(nil).BatchGetMachineLSEPrototypes), arg0, arg1)
}

// BatchGetMachineLSEs mocks base method.
func (m *MockFleetServer) BatchGetMachineLSEs(arg0 context.Context, arg1 *ufspb1.BatchGetMachineLSEsRequest) (*ufspb1.BatchGetMachineLSEsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMachineLSEs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachineLSEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachineLSEs indicates an expected call of BatchGetMachineLSEs.
func (mr *MockFleetServerMockRecorder) BatchGetMachineLSEs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachineLSEs", reflect.TypeOf((*MockFleetServer)(nil).BatchGetMachineLSEs), arg0, arg1)
}

// BatchGetMachines mocks base method.
func (m *MockFleetServer) BatchGetMachines(arg0 context.Context, arg1 *ufspb1.BatchGetMachinesRequest) (*ufspb1.BatchGetMachinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetMachines", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetMachinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetMachines indicates an expected call of BatchGetMachines.
func (mr *MockFleetServerMockRecorder) BatchGetMachines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetMachines", reflect.TypeOf((*MockFleetServer)(nil).BatchGetMachines), arg0, arg1)
}

// BatchGetNics mocks base method.
func (m *MockFleetServer) BatchGetNics(arg0 context.Context, arg1 *ufspb1.BatchGetNicsRequest) (*ufspb1.BatchGetNicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetNics", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetNicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetNics indicates an expected call of BatchGetNics.
func (mr *MockFleetServerMockRecorder) BatchGetNics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetNics", reflect.TypeOf((*MockFleetServer)(nil).BatchGetNics), arg0, arg1)
}

// BatchGetRPMs mocks base method.
func (m *MockFleetServer) BatchGetRPMs(arg0 context.Context, arg1 *ufspb1.BatchGetRPMsRequest) (*ufspb1.BatchGetRPMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRPMs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetRPMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRPMs indicates an expected call of BatchGetRPMs.
func (mr *MockFleetServerMockRecorder) BatchGetRPMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRPMs", reflect.TypeOf((*MockFleetServer)(nil).BatchGetRPMs), arg0, arg1)
}

// BatchGetRackLSEPrototypes mocks base method.
func (m *MockFleetServer) BatchGetRackLSEPrototypes(arg0 context.Context, arg1 *ufspb1.BatchGetRackLSEPrototypesRequest) (*ufspb1.BatchGetRackLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRackLSEPrototypes", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetRackLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRackLSEPrototypes indicates an expected call of BatchGetRackLSEPrototypes.
func (mr *MockFleetServerMockRecorder) BatchGetRackLSEPrototypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRackLSEPrototypes", reflect.TypeOf((*MockFleetServer)(nil).BatchGetRackLSEPrototypes), arg0, arg1)
}

// BatchGetRacks mocks base method.
func (m *MockFleetServer) BatchGetRacks(arg0 context.Context, arg1 *ufspb1.BatchGetRacksRequest) (*ufspb1.BatchGetRacksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRacks", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetRacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRacks indicates an expected call of BatchGetRacks.
func (mr *MockFleetServerMockRecorder) BatchGetRacks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRacks", reflect.TypeOf((*MockFleetServer)(nil).BatchGetRacks), arg0, arg1)
}

// BatchGetSwitches mocks base method.
func (m *MockFleetServer) BatchGetSwitches(arg0 context.Context, arg1 *ufspb1.BatchGetSwitchesRequest) (*ufspb1.BatchGetSwitchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSwitches", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetSwitchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSwitches indicates an expected call of BatchGetSwitches.
func (mr *MockFleetServerMockRecorder) BatchGetSwitches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSwitches", reflect.TypeOf((*MockFleetServer)(nil).BatchGetSwitches), arg0, arg1)
}

// BatchGetVMs mocks base method.
func (m *MockFleetServer) BatchGetVMs(arg0 context.Context, arg1 *ufspb1.BatchGetVMsRequest) (*ufspb1.BatchGetVMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVMs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVMs indicates an expected call of BatchGetVMs.
func (mr *MockFleetServerMockRecorder) BatchGetVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVMs", reflect.TypeOf((*MockFleetServer)(nil).BatchGetVMs), arg0, arg1)
}

// BatchGetVlans mocks base method.
func (m *MockFleetServer) BatchGetVlans(arg0 context.Context, arg1 *ufspb1.BatchGetVlansRequest) (*ufspb1.BatchGetVlansResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVlans", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchGetVlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVlans indicates an expected call of BatchGetVlans.
func (mr *MockFleetServerMockRecorder) BatchGetVlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVlans", reflect.TypeOf((*MockFleetServer)(nil).BatchGetVlans), arg0, arg1)
}

// BatchUpdateMachineLSEDeployment mocks base method.
func (m *MockFleetServer) BatchUpdateMachineLSEDeployment(arg0 context.Context, arg1 *ufspb1.BatchUpdateMachineLSEDeploymentRequest) (*ufspb1.BatchUpdateMachineLSEDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateMachineLSEDeployment", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.BatchUpdateMachineLSEDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateMachineLSEDeployment indicates an expected call of BatchUpdateMachineLSEDeployment.
func (mr *MockFleetServerMockRecorder) BatchUpdateMachineLSEDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateMachineLSEDeployment", reflect.TypeOf((*MockFleetServer)(nil).BatchUpdateMachineLSEDeployment), arg0, arg1)
}

// CheckFleetTestsPolicy mocks base method.
func (m *MockFleetServer) CheckFleetTestsPolicy(arg0 context.Context, arg1 *ufspb1.CheckFleetTestsPolicyRequest) (*ufspb1.CheckFleetTestsPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFleetTestsPolicy", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.CheckFleetTestsPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFleetTestsPolicy indicates an expected call of CheckFleetTestsPolicy.
func (mr *MockFleetServerMockRecorder) CheckFleetTestsPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFleetTestsPolicy", reflect.TypeOf((*MockFleetServer)(nil).CheckFleetTestsPolicy), arg0, arg1)
}

// CreateAsset mocks base method.
func (m *MockFleetServer) CreateAsset(arg0 context.Context, arg1 *ufspb1.CreateAssetRequest) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockFleetServerMockRecorder) CreateAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockFleetServer)(nil).CreateAsset), arg0, arg1)
}

// CreateCachingService mocks base method.
func (m *MockFleetServer) CreateCachingService(arg0 context.Context, arg1 *ufspb1.CreateCachingServiceRequest) (*ufspb.CachingService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCachingService", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.CachingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCachingService indicates an expected call of CreateCachingService.
func (mr *MockFleetServerMockRecorder) CreateCachingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCachingService", reflect.TypeOf((*MockFleetServer)(nil).CreateCachingService), arg0, arg1)
}

// CreateChromePlatform mocks base method.
func (m *MockFleetServer) CreateChromePlatform(arg0 context.Context, arg1 *ufspb1.CreateChromePlatformRequest) (*ufspb.ChromePlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChromePlatform", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.ChromePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChromePlatform indicates an expected call of CreateChromePlatform.
func (mr *MockFleetServerMockRecorder) CreateChromePlatform(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChromePlatform", reflect.TypeOf((*MockFleetServer)(nil).CreateChromePlatform), arg0, arg1)
}

// CreateDefaultWifi mocks base method.
func (m *MockFleetServer) CreateDefaultWifi(arg0 context.Context, arg1 *ufspb1.CreateDefaultWifiRequest) (*ufspb.DefaultWifi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultWifi", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.DefaultWifi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefaultWifi indicates an expected call of CreateDefaultWifi.
func (mr *MockFleetServerMockRecorder) CreateDefaultWifi(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultWifi", reflect.TypeOf((*MockFleetServer)(nil).CreateDefaultWifi), arg0, arg1)
}

// CreateDrac mocks base method.
func (m *MockFleetServer) CreateDrac(arg0 context.Context, arg1 *ufspb1.CreateDracRequest) (*ufspb.Drac, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDrac", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Drac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDrac indicates an expected call of CreateDrac.
func (mr *MockFleetServerMockRecorder) CreateDrac(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDrac", reflect.TypeOf((*MockFleetServer)(nil).CreateDrac), arg0, arg1)
}

// CreateKVM mocks base method.
func (m *MockFleetServer) CreateKVM(arg0 context.Context, arg1 *ufspb1.CreateKVMRequest) (*ufspb.KVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKVM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.KVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKVM indicates an expected call of CreateKVM.
func (mr *MockFleetServerMockRecorder) CreateKVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKVM", reflect.TypeOf((*MockFleetServer)(nil).CreateKVM), arg0, arg1)
}

// CreateMachineLSE mocks base method.
func (m *MockFleetServer) CreateMachineLSE(arg0 context.Context, arg1 *ufspb1.CreateMachineLSERequest) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachineLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachineLSE indicates an expected call of CreateMachineLSE.
func (mr *MockFleetServerMockRecorder) CreateMachineLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineLSE", reflect.TypeOf((*MockFleetServer)(nil).CreateMachineLSE), arg0, arg1)
}

// CreateMachineLSEPrototype mocks base method.
func (m *MockFleetServer) CreateMachineLSEPrototype(arg0 context.Context, arg1 *ufspb1.CreateMachineLSEPrototypeRequest) (*ufspb.MachineLSEPrototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachineLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMachineLSEPrototype indicates an expected call of CreateMachineLSEPrototype.
func (mr *MockFleetServerMockRecorder) CreateMachineLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).CreateMachineLSEPrototype), arg0, arg1)
}

// CreateNic mocks base method.
func (m *MockFleetServer) CreateNic(arg0 context.Context, arg1 *ufspb1.CreateNicRequest) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNic", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNic indicates an expected call of CreateNic.
func (mr *MockFleetServerMockRecorder) CreateNic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNic", reflect.TypeOf((*MockFleetServer)(nil).CreateNic), arg0, arg1)
}

// CreateRPM mocks base method.
func (m *MockFleetServer) CreateRPM(arg0 context.Context, arg1 *ufspb1.CreateRPMRequest) (*ufspb.RPM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRPM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RPM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRPM indicates an expected call of CreateRPM.
func (mr *MockFleetServerMockRecorder) CreateRPM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRPM", reflect.TypeOf((*MockFleetServer)(nil).CreateRPM), arg0, arg1)
}

// CreateRackLSE mocks base method.
func (m *MockFleetServer) CreateRackLSE(arg0 context.Context, arg1 *ufspb1.CreateRackLSERequest) (*ufspb.RackLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRackLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RackLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRackLSE indicates an expected call of CreateRackLSE.
func (mr *MockFleetServerMockRecorder) CreateRackLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRackLSE", reflect.TypeOf((*MockFleetServer)(nil).CreateRackLSE), arg0, arg1)
}

// CreateRackLSEPrototype mocks base method.
func (m *MockFleetServer) CreateRackLSEPrototype(arg0 context.Context, arg1 *ufspb1.CreateRackLSEPrototypeRequest) (*ufspb.RackLSEPrototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRackLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RackLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRackLSEPrototype indicates an expected call of CreateRackLSEPrototype.
func (mr *MockFleetServerMockRecorder) CreateRackLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRackLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).CreateRackLSEPrototype), arg0, arg1)
}

// CreateSchedulingUnit mocks base method.
func (m *MockFleetServer) CreateSchedulingUnit(arg0 context.Context, arg1 *ufspb1.CreateSchedulingUnitRequest) (*ufspb.SchedulingUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedulingUnit", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.SchedulingUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedulingUnit indicates an expected call of CreateSchedulingUnit.
func (mr *MockFleetServerMockRecorder) CreateSchedulingUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedulingUnit", reflect.TypeOf((*MockFleetServer)(nil).CreateSchedulingUnit), arg0, arg1)
}

// CreateSwitch mocks base method.
func (m *MockFleetServer) CreateSwitch(arg0 context.Context, arg1 *ufspb1.CreateSwitchRequest) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwitch", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSwitch indicates an expected call of CreateSwitch.
func (mr *MockFleetServerMockRecorder) CreateSwitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwitch", reflect.TypeOf((*MockFleetServer)(nil).CreateSwitch), arg0, arg1)
}

// CreateVM mocks base method.
func (m *MockFleetServer) CreateVM(arg0 context.Context, arg1 *ufspb1.CreateVMRequest) (*ufspb.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockFleetServerMockRecorder) CreateVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockFleetServer)(nil).CreateVM), arg0, arg1)
}

// CreateVlan mocks base method.
func (m *MockFleetServer) CreateVlan(arg0 context.Context, arg1 *ufspb1.CreateVlanRequest) (*ufspb.Vlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVlan", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Vlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVlan indicates an expected call of CreateVlan.
func (mr *MockFleetServerMockRecorder) CreateVlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVlan", reflect.TypeOf((*MockFleetServer)(nil).CreateVlan), arg0, arg1)
}

// DeleteAsset mocks base method.
func (m *MockFleetServer) DeleteAsset(arg0 context.Context, arg1 *ufspb1.DeleteAssetRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockFleetServerMockRecorder) DeleteAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockFleetServer)(nil).DeleteAsset), arg0, arg1)
}

// DeleteCachingService mocks base method.
func (m *MockFleetServer) DeleteCachingService(arg0 context.Context, arg1 *ufspb1.DeleteCachingServiceRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCachingService", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCachingService indicates an expected call of DeleteCachingService.
func (mr *MockFleetServerMockRecorder) DeleteCachingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCachingService", reflect.TypeOf((*MockFleetServer)(nil).DeleteCachingService), arg0, arg1)
}

// DeleteChromePlatform mocks base method.
func (m *MockFleetServer) DeleteChromePlatform(arg0 context.Context, arg1 *ufspb1.DeleteChromePlatformRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChromePlatform", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChromePlatform indicates an expected call of DeleteChromePlatform.
func (mr *MockFleetServerMockRecorder) DeleteChromePlatform(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChromePlatform", reflect.TypeOf((*MockFleetServer)(nil).DeleteChromePlatform), arg0, arg1)
}

// DeleteDefaultWifi mocks base method.
func (m *MockFleetServer) DeleteDefaultWifi(arg0 context.Context, arg1 *ufspb1.DeleteDefaultWifiRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultWifi", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultWifi indicates an expected call of DeleteDefaultWifi.
func (mr *MockFleetServerMockRecorder) DeleteDefaultWifi(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultWifi", reflect.TypeOf((*MockFleetServer)(nil).DeleteDefaultWifi), arg0, arg1)
}

// DeleteDrac mocks base method.
func (m *MockFleetServer) DeleteDrac(arg0 context.Context, arg1 *ufspb1.DeleteDracRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrac", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDrac indicates an expected call of DeleteDrac.
func (mr *MockFleetServerMockRecorder) DeleteDrac(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrac", reflect.TypeOf((*MockFleetServer)(nil).DeleteDrac), arg0, arg1)
}

// DeleteKVM mocks base method.
func (m *MockFleetServer) DeleteKVM(arg0 context.Context, arg1 *ufspb1.DeleteKVMRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKVM", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKVM indicates an expected call of DeleteKVM.
func (mr *MockFleetServerMockRecorder) DeleteKVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKVM", reflect.TypeOf((*MockFleetServer)(nil).DeleteKVM), arg0, arg1)
}

// DeleteMachine mocks base method.
func (m *MockFleetServer) DeleteMachine(arg0 context.Context, arg1 *ufspb1.DeleteMachineRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachine indicates an expected call of DeleteMachine.
func (mr *MockFleetServerMockRecorder) DeleteMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockFleetServer)(nil).DeleteMachine), arg0, arg1)
}

// DeleteMachineLSE mocks base method.
func (m *MockFleetServer) DeleteMachineLSE(arg0 context.Context, arg1 *ufspb1.DeleteMachineLSERequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachineLSE", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachineLSE indicates an expected call of DeleteMachineLSE.
func (mr *MockFleetServerMockRecorder) DeleteMachineLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineLSE", reflect.TypeOf((*MockFleetServer)(nil).DeleteMachineLSE), arg0, arg1)
}

// DeleteMachineLSEPrototype mocks base method.
func (m *MockFleetServer) DeleteMachineLSEPrototype(arg0 context.Context, arg1 *ufspb1.DeleteMachineLSEPrototypeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachineLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMachineLSEPrototype indicates an expected call of DeleteMachineLSEPrototype.
func (mr *MockFleetServerMockRecorder) DeleteMachineLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).DeleteMachineLSEPrototype), arg0, arg1)
}

// DeleteNic mocks base method.
func (m *MockFleetServer) DeleteNic(arg0 context.Context, arg1 *ufspb1.DeleteNicRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNic", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNic indicates an expected call of DeleteNic.
func (mr *MockFleetServerMockRecorder) DeleteNic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNic", reflect.TypeOf((*MockFleetServer)(nil).DeleteNic), arg0, arg1)
}

// DeleteRPM mocks base method.
func (m *MockFleetServer) DeleteRPM(arg0 context.Context, arg1 *ufspb1.DeleteRPMRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRPM", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRPM indicates an expected call of DeleteRPM.
func (mr *MockFleetServerMockRecorder) DeleteRPM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRPM", reflect.TypeOf((*MockFleetServer)(nil).DeleteRPM), arg0, arg1)
}

// DeleteRack mocks base method.
func (m *MockFleetServer) DeleteRack(arg0 context.Context, arg1 *ufspb1.DeleteRackRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRack", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRack indicates an expected call of DeleteRack.
func (mr *MockFleetServerMockRecorder) DeleteRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRack", reflect.TypeOf((*MockFleetServer)(nil).DeleteRack), arg0, arg1)
}

// DeleteRackLSE mocks base method.
func (m *MockFleetServer) DeleteRackLSE(arg0 context.Context, arg1 *ufspb1.DeleteRackLSERequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRackLSE", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRackLSE indicates an expected call of DeleteRackLSE.
func (mr *MockFleetServerMockRecorder) DeleteRackLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRackLSE", reflect.TypeOf((*MockFleetServer)(nil).DeleteRackLSE), arg0, arg1)
}

// DeleteRackLSEPrototype mocks base method.
func (m *MockFleetServer) DeleteRackLSEPrototype(arg0 context.Context, arg1 *ufspb1.DeleteRackLSEPrototypeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRackLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRackLSEPrototype indicates an expected call of DeleteRackLSEPrototype.
func (mr *MockFleetServerMockRecorder) DeleteRackLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRackLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).DeleteRackLSEPrototype), arg0, arg1)
}

// DeleteSchedulingUnit mocks base method.
func (m *MockFleetServer) DeleteSchedulingUnit(arg0 context.Context, arg1 *ufspb1.DeleteSchedulingUnitRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedulingUnit", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchedulingUnit indicates an expected call of DeleteSchedulingUnit.
func (mr *MockFleetServerMockRecorder) DeleteSchedulingUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedulingUnit", reflect.TypeOf((*MockFleetServer)(nil).DeleteSchedulingUnit), arg0, arg1)
}

// DeleteSwitch mocks base method.
func (m *MockFleetServer) DeleteSwitch(arg0 context.Context, arg1 *ufspb1.DeleteSwitchRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSwitch", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSwitch indicates an expected call of DeleteSwitch.
func (mr *MockFleetServerMockRecorder) DeleteSwitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSwitch", reflect.TypeOf((*MockFleetServer)(nil).DeleteSwitch), arg0, arg1)
}

// DeleteVM mocks base method.
func (m *MockFleetServer) DeleteVM(arg0 context.Context, arg1 *ufspb1.DeleteVMRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockFleetServerMockRecorder) DeleteVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockFleetServer)(nil).DeleteVM), arg0, arg1)
}

// DeleteVlan mocks base method.
func (m *MockFleetServer) DeleteVlan(arg0 context.Context, arg1 *ufspb1.DeleteVlanRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVlan", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVlan indicates an expected call of DeleteVlan.
func (mr *MockFleetServerMockRecorder) DeleteVlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVlan", reflect.TypeOf((*MockFleetServer)(nil).DeleteVlan), arg0, arg1)
}

// GetAsset mocks base method.
func (m *MockFleetServer) GetAsset(arg0 context.Context, arg1 *ufspb1.GetAssetRequest) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockFleetServerMockRecorder) GetAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockFleetServer)(nil).GetAsset), arg0, arg1)
}

// GetCachingService mocks base method.
func (m *MockFleetServer) GetCachingService(arg0 context.Context, arg1 *ufspb1.GetCachingServiceRequest) (*ufspb.CachingService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachingService", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.CachingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachingService indicates an expected call of GetCachingService.
func (mr *MockFleetServerMockRecorder) GetCachingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachingService", reflect.TypeOf((*MockFleetServer)(nil).GetCachingService), arg0, arg1)
}

// GetChromeOSDeviceData mocks base method.
func (m *MockFleetServer) GetChromeOSDeviceData(arg0 context.Context, arg1 *ufspb1.GetChromeOSDeviceDataRequest) (*ufspb.ChromeOSDeviceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChromeOSDeviceData", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.ChromeOSDeviceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChromeOSDeviceData indicates an expected call of GetChromeOSDeviceData.
func (mr *MockFleetServerMockRecorder) GetChromeOSDeviceData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChromeOSDeviceData", reflect.TypeOf((*MockFleetServer)(nil).GetChromeOSDeviceData), arg0, arg1)
}

// GetChromePlatform mocks base method.
func (m *MockFleetServer) GetChromePlatform(arg0 context.Context, arg1 *ufspb1.GetChromePlatformRequest) (*ufspb.ChromePlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChromePlatform", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.ChromePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChromePlatform indicates an expected call of GetChromePlatform.
func (mr *MockFleetServerMockRecorder) GetChromePlatform(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChromePlatform", reflect.TypeOf((*MockFleetServer)(nil).GetChromePlatform), arg0, arg1)
}

// GetDHCPConfig mocks base method.
func (m *MockFleetServer) GetDHCPConfig(arg0 context.Context, arg1 *ufspb1.GetDHCPConfigRequest) (*ufspb.DHCPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHCPConfig", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.DHCPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDHCPConfig indicates an expected call of GetDHCPConfig.
func (mr *MockFleetServerMockRecorder) GetDHCPConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHCPConfig", reflect.TypeOf((*MockFleetServer)(nil).GetDHCPConfig), arg0, arg1)
}

// GetDUTsForLabstation mocks base method.
func (m *MockFleetServer) GetDUTsForLabstation(arg0 context.Context, arg1 *ufspb1.GetDUTsForLabstationRequest) (*ufspb1.GetDUTsForLabstationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDUTsForLabstation", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.GetDUTsForLabstationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDUTsForLabstation indicates an expected call of GetDUTsForLabstation.
func (mr *MockFleetServerMockRecorder) GetDUTsForLabstation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDUTsForLabstation", reflect.TypeOf((*MockFleetServer)(nil).GetDUTsForLabstation), arg0, arg1)
}

// GetDefaultWifi mocks base method.
func (m *MockFleetServer) GetDefaultWifi(arg0 context.Context, arg1 *ufspb1.GetDefaultWifiRequest) (*ufspb.DefaultWifi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultWifi", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.DefaultWifi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultWifi indicates an expected call of GetDefaultWifi.
func (mr *MockFleetServerMockRecorder) GetDefaultWifi(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultWifi", reflect.TypeOf((*MockFleetServer)(nil).GetDefaultWifi), arg0, arg1)
}

// GetDeviceData mocks base method.
func (m *MockFleetServer) GetDeviceData(arg0 context.Context, arg1 *ufspb1.GetDeviceDataRequest) (*ufspb1.GetDeviceDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceData", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.GetDeviceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceData indicates an expected call of GetDeviceData.
func (mr *MockFleetServerMockRecorder) GetDeviceData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceData", reflect.TypeOf((*MockFleetServer)(nil).GetDeviceData), arg0, arg1)
}

// GetDrac mocks base method.
func (m *MockFleetServer) GetDrac(arg0 context.Context, arg1 *ufspb1.GetDracRequest) (*ufspb.Drac, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrac", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Drac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrac indicates an expected call of GetDrac.
func (mr *MockFleetServerMockRecorder) GetDrac(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrac", reflect.TypeOf((*MockFleetServer)(nil).GetDrac), arg0, arg1)
}

// GetDutState mocks base method.
func (m *MockFleetServer) GetDutState(arg0 context.Context, arg1 *ufspb1.GetDutStateRequest) (*ufspb0.DutState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDutState", arg0, arg1)
	ret0, _ := ret[0].(*ufspb0.DutState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDutState indicates an expected call of GetDutState.
func (mr *MockFleetServerMockRecorder) GetDutState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDutState", reflect.TypeOf((*MockFleetServer)(nil).GetDutState), arg0, arg1)
}

// GetKVM mocks base method.
func (m *MockFleetServer) GetKVM(arg0 context.Context, arg1 *ufspb1.GetKVMRequest) (*ufspb.KVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKVM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.KVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKVM indicates an expected call of GetKVM.
func (mr *MockFleetServerMockRecorder) GetKVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKVM", reflect.TypeOf((*MockFleetServer)(nil).GetKVM), arg0, arg1)
}

// GetMachine mocks base method.
func (m *MockFleetServer) GetMachine(arg0 context.Context, arg1 *ufspb1.GetMachineRequest) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachine", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachine indicates an expected call of GetMachine.
func (mr *MockFleetServerMockRecorder) GetMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachine", reflect.TypeOf((*MockFleetServer)(nil).GetMachine), arg0, arg1)
}

// GetMachineLSE mocks base method.
func (m *MockFleetServer) GetMachineLSE(arg0 context.Context, arg1 *ufspb1.GetMachineLSERequest) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSE indicates an expected call of GetMachineLSE.
func (mr *MockFleetServerMockRecorder) GetMachineLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSE", reflect.TypeOf((*MockFleetServer)(nil).GetMachineLSE), arg0, arg1)
}

// GetMachineLSEBySerial mocks base method.
func (m *MockFleetServer) GetMachineLSEBySerial(arg0 context.Context, arg1 *ufspb1.GetMachineLSEBySerialRequest) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLSEBySerial", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSEBySerial indicates an expected call of GetMachineLSEBySerial.
func (mr *MockFleetServerMockRecorder) GetMachineLSEBySerial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSEBySerial", reflect.TypeOf((*MockFleetServer)(nil).GetMachineLSEBySerial), arg0, arg1)
}

// GetMachineLSEDeployment mocks base method.
func (m *MockFleetServer) GetMachineLSEDeployment(arg0 context.Context, arg1 *ufspb1.GetMachineLSEDeploymentRequest) (*ufspb.MachineLSEDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLSEDeployment", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSEDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSEDeployment indicates an expected call of GetMachineLSEDeployment.
func (mr *MockFleetServerMockRecorder) GetMachineLSEDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSEDeployment", reflect.TypeOf((*MockFleetServer)(nil).GetMachineLSEDeployment), arg0, arg1)
}

// GetMachineLSEPrototype mocks base method.
func (m *MockFleetServer) GetMachineLSEPrototype(arg0 context.Context, arg1 *ufspb1.GetMachineLSEPrototypeRequest) (*ufspb.MachineLSEPrototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSEPrototype indicates an expected call of GetMachineLSEPrototype.
func (mr *MockFleetServerMockRecorder) GetMachineLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).GetMachineLSEPrototype), arg0, arg1)
}

// GetNic mocks base method.
func (m *MockFleetServer) GetNic(arg0 context.Context, arg1 *ufspb1.GetNicRequest) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNic", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNic indicates an expected call of GetNic.
func (mr *MockFleetServerMockRecorder) GetNic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNic", reflect.TypeOf((*MockFleetServer)(nil).GetNic), arg0, arg1)
}

// GetOwnershipData mocks base method.
func (m *MockFleetServer) GetOwnershipData(arg0 context.Context, arg1 *ufspb1.GetOwnershipDataRequest) (*ufspb.OwnershipData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipData", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.OwnershipData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipData indicates an expected call of GetOwnershipData.
func (mr *MockFleetServerMockRecorder) GetOwnershipData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipData", reflect.TypeOf((*MockFleetServer)(nil).GetOwnershipData), arg0, arg1)
}

// GetRPM mocks base method.
func (m *MockFleetServer) GetRPM(arg0 context.Context, arg1 *ufspb1.GetRPMRequest) (*ufspb.RPM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRPM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RPM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRPM indicates an expected call of GetRPM.
func (mr *MockFleetServerMockRecorder) GetRPM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRPM", reflect.TypeOf((*MockFleetServer)(nil).GetRPM), arg0, arg1)
}

// GetRack mocks base method.
func (m *MockFleetServer) GetRack(arg0 context.Context, arg1 *ufspb1.GetRackRequest) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRack", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRack indicates an expected call of GetRack.
func (mr *MockFleetServerMockRecorder) GetRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRack", reflect.TypeOf((*MockFleetServer)(nil).GetRack), arg0, arg1)
}

// GetRackLSE mocks base method.
func (m *MockFleetServer) GetRackLSE(arg0 context.Context, arg1 *ufspb1.GetRackLSERequest) (*ufspb.RackLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRackLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RackLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRackLSE indicates an expected call of GetRackLSE.
func (mr *MockFleetServerMockRecorder) GetRackLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRackLSE", reflect.TypeOf((*MockFleetServer)(nil).GetRackLSE), arg0, arg1)
}

// GetRackLSEPrototype mocks base method.
func (m *MockFleetServer) GetRackLSEPrototype(arg0 context.Context, arg1 *ufspb1.GetRackLSEPrototypeRequest) (*ufspb.RackLSEPrototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRackLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RackLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRackLSEPrototype indicates an expected call of GetRackLSEPrototype.
func (mr *MockFleetServerMockRecorder) GetRackLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRackLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).GetRackLSEPrototype), arg0, arg1)
}

// GetSchedulingUnit mocks base method.
func (m *MockFleetServer) GetSchedulingUnit(arg0 context.Context, arg1 *ufspb1.GetSchedulingUnitRequest) (*ufspb.SchedulingUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulingUnit", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.SchedulingUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulingUnit indicates an expected call of GetSchedulingUnit.
func (mr *MockFleetServerMockRecorder) GetSchedulingUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulingUnit", reflect.TypeOf((*MockFleetServer)(nil).GetSchedulingUnit), arg0, arg1)
}

// GetState mocks base method.
func (m *MockFleetServer) GetState(arg0 context.Context, arg1 *ufspb1.GetStateRequest) (*ufspb.StateRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.StateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockFleetServerMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockFleetServer)(nil).GetState), arg0, arg1)
}

// GetSwitch mocks base method.
func (m *MockFleetServer) GetSwitch(arg0 context.Context, arg1 *ufspb1.GetSwitchRequest) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwitch", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitch indicates an expected call of GetSwitch.
func (mr *MockFleetServerMockRecorder) GetSwitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitch", reflect.TypeOf((*MockFleetServer)(nil).GetSwitch), arg0, arg1)
}

// GetVM mocks base method.
func (m *MockFleetServer) GetVM(arg0 context.Context, arg1 *ufspb1.GetVMRequest) (*ufspb.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVM indicates an expected call of GetVM.
func (mr *MockFleetServerMockRecorder) GetVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVM", reflect.TypeOf((*MockFleetServer)(nil).GetVM), arg0, arg1)
}

// GetVlan mocks base method.
func (m *MockFleetServer) GetVlan(arg0 context.Context, arg1 *ufspb1.GetVlanRequest) (*ufspb.Vlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVlan", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Vlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVlan indicates an expected call of GetVlan.
func (mr *MockFleetServerMockRecorder) GetVlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVlan", reflect.TypeOf((*MockFleetServer)(nil).GetVlan), arg0, arg1)
}

// ImportOSMachineLSEs mocks base method.
func (m *MockFleetServer) ImportOSMachineLSEs(arg0 context.Context, arg1 *ufspb1.ImportOSMachineLSEsRequest) (*status.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOSMachineLSEs", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportOSMachineLSEs indicates an expected call of ImportOSMachineLSEs.
func (mr *MockFleetServerMockRecorder) ImportOSMachineLSEs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOSMachineLSEs", reflect.TypeOf((*MockFleetServer)(nil).ImportOSMachineLSEs), arg0, arg1)
}

// ImportOSVlans mocks base method.
func (m *MockFleetServer) ImportOSVlans(arg0 context.Context, arg1 *ufspb1.ImportOSVlansRequest) (*status.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportOSVlans", arg0, arg1)
	ret0, _ := ret[0].(*status.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportOSVlans indicates an expected call of ImportOSVlans.
func (mr *MockFleetServerMockRecorder) ImportOSVlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOSVlans", reflect.TypeOf((*MockFleetServer)(nil).ImportOSVlans), arg0, arg1)
}

// ListAssets mocks base method.
func (m *MockFleetServer) ListAssets(arg0 context.Context, arg1 *ufspb1.ListAssetsRequest) (*ufspb1.ListAssetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssets", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssets indicates an expected call of ListAssets.
func (mr *MockFleetServerMockRecorder) ListAssets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssets", reflect.TypeOf((*MockFleetServer)(nil).ListAssets), arg0, arg1)
}

// ListCachingServices mocks base method.
func (m *MockFleetServer) ListCachingServices(arg0 context.Context, arg1 *ufspb1.ListCachingServicesRequest) (*ufspb1.ListCachingServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCachingServices", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListCachingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCachingServices indicates an expected call of ListCachingServices.
func (mr *MockFleetServerMockRecorder) ListCachingServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCachingServices", reflect.TypeOf((*MockFleetServer)(nil).ListCachingServices), arg0, arg1)
}

// ListChromePlatforms mocks base method.
func (m *MockFleetServer) ListChromePlatforms(arg0 context.Context, arg1 *ufspb1.ListChromePlatformsRequest) (*ufspb1.ListChromePlatformsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChromePlatforms", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListChromePlatformsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChromePlatforms indicates an expected call of ListChromePlatforms.
func (mr *MockFleetServerMockRecorder) ListChromePlatforms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChromePlatforms", reflect.TypeOf((*MockFleetServer)(nil).ListChromePlatforms), arg0, arg1)
}

// ListDefaultWifis mocks base method.
func (m *MockFleetServer) ListDefaultWifis(arg0 context.Context, arg1 *ufspb1.ListDefaultWifisRequest) (*ufspb1.ListDefaultWifisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDefaultWifis", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListDefaultWifisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDefaultWifis indicates an expected call of ListDefaultWifis.
func (mr *MockFleetServerMockRecorder) ListDefaultWifis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDefaultWifis", reflect.TypeOf((*MockFleetServer)(nil).ListDefaultWifis), arg0, arg1)
}

// ListDracs mocks base method.
func (m *MockFleetServer) ListDracs(arg0 context.Context, arg1 *ufspb1.ListDracsRequest) (*ufspb1.ListDracsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDracs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListDracsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDracs indicates an expected call of ListDracs.
func (mr *MockFleetServerMockRecorder) ListDracs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDracs", reflect.TypeOf((*MockFleetServer)(nil).ListDracs), arg0, arg1)
}

// ListDutStates mocks base method.
func (m *MockFleetServer) ListDutStates(arg0 context.Context, arg1 *ufspb1.ListDutStatesRequest) (*ufspb1.ListDutStatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDutStates", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListDutStatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDutStates indicates an expected call of ListDutStates.
func (mr *MockFleetServerMockRecorder) ListDutStates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDutStates", reflect.TypeOf((*MockFleetServer)(nil).ListDutStates), arg0, arg1)
}

// ListIPs mocks base method.
func (m *MockFleetServer) ListIPs(arg0 context.Context, arg1 *ufspb1.ListIPsRequest) (*ufspb1.ListIPsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIPs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListIPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPs indicates an expected call of ListIPs.
func (mr *MockFleetServerMockRecorder) ListIPs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPs", reflect.TypeOf((*MockFleetServer)(nil).ListIPs), arg0, arg1)
}

// ListKVMs mocks base method.
func (m *MockFleetServer) ListKVMs(arg0 context.Context, arg1 *ufspb1.ListKVMsRequest) (*ufspb1.ListKVMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKVMs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListKVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKVMs indicates an expected call of ListKVMs.
func (mr *MockFleetServerMockRecorder) ListKVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKVMs", reflect.TypeOf((*MockFleetServer)(nil).ListKVMs), arg0, arg1)
}

// ListMachineLSEDeployments mocks base method.
func (m *MockFleetServer) ListMachineLSEDeployments(arg0 context.Context, arg1 *ufspb1.ListMachineLSEDeploymentsRequest) (*ufspb1.ListMachineLSEDeploymentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineLSEDeployments", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListMachineLSEDeploymentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineLSEDeployments indicates an expected call of ListMachineLSEDeployments.
func (mr *MockFleetServerMockRecorder) ListMachineLSEDeployments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineLSEDeployments", reflect.TypeOf((*MockFleetServer)(nil).ListMachineLSEDeployments), arg0, arg1)
}

// ListMachineLSEPrototypes mocks base method.
func (m *MockFleetServer) ListMachineLSEPrototypes(arg0 context.Context, arg1 *ufspb1.ListMachineLSEPrototypesRequest) (*ufspb1.ListMachineLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineLSEPrototypes", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListMachineLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineLSEPrototypes indicates an expected call of ListMachineLSEPrototypes.
func (mr *MockFleetServerMockRecorder) ListMachineLSEPrototypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineLSEPrototypes", reflect.TypeOf((*MockFleetServer)(nil).ListMachineLSEPrototypes), arg0, arg1)
}

// ListMachineLSEs mocks base method.
func (m *MockFleetServer) ListMachineLSEs(arg0 context.Context, arg1 *ufspb1.ListMachineLSEsRequest) (*ufspb1.ListMachineLSEsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineLSEs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListMachineLSEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineLSEs indicates an expected call of ListMachineLSEs.
func (mr *MockFleetServerMockRecorder) ListMachineLSEs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineLSEs", reflect.TypeOf((*MockFleetServer)(nil).ListMachineLSEs), arg0, arg1)
}

// ListMachines mocks base method.
func (m *MockFleetServer) ListMachines(arg0 context.Context, arg1 *ufspb1.ListMachinesRequest) (*ufspb1.ListMachinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachines", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListMachinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachines indicates an expected call of ListMachines.
func (mr *MockFleetServerMockRecorder) ListMachines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachines", reflect.TypeOf((*MockFleetServer)(nil).ListMachines), arg0, arg1)
}

// ListNics mocks base method.
func (m *MockFleetServer) ListNics(arg0 context.Context, arg1 *ufspb1.ListNicsRequest) (*ufspb1.ListNicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNics", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListNicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNics indicates an expected call of ListNics.
func (mr *MockFleetServerMockRecorder) ListNics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNics", reflect.TypeOf((*MockFleetServer)(nil).ListNics), arg0, arg1)
}

// ListOSVersions mocks base method.
func (m *MockFleetServer) ListOSVersions(arg0 context.Context, arg1 *ufspb1.ListOSVersionsRequest) (*ufspb1.ListOSVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOSVersions", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListOSVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOSVersions indicates an expected call of ListOSVersions.
func (mr *MockFleetServerMockRecorder) ListOSVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOSVersions", reflect.TypeOf((*MockFleetServer)(nil).ListOSVersions), arg0, arg1)
}

// ListOwnershipData mocks base method.
func (m *MockFleetServer) ListOwnershipData(arg0 context.Context, arg1 *ufspb1.ListOwnershipDataRequest) (*ufspb1.ListOwnershipDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOwnershipData", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListOwnershipDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwnershipData indicates an expected call of ListOwnershipData.
func (mr *MockFleetServerMockRecorder) ListOwnershipData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwnershipData", reflect.TypeOf((*MockFleetServer)(nil).ListOwnershipData), arg0, arg1)
}

// ListRPMs mocks base method.
func (m *MockFleetServer) ListRPMs(arg0 context.Context, arg1 *ufspb1.ListRPMsRequest) (*ufspb1.ListRPMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRPMs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListRPMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRPMs indicates an expected call of ListRPMs.
func (mr *MockFleetServerMockRecorder) ListRPMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRPMs", reflect.TypeOf((*MockFleetServer)(nil).ListRPMs), arg0, arg1)
}

// ListRackLSEPrototypes mocks base method.
func (m *MockFleetServer) ListRackLSEPrototypes(arg0 context.Context, arg1 *ufspb1.ListRackLSEPrototypesRequest) (*ufspb1.ListRackLSEPrototypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRackLSEPrototypes", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListRackLSEPrototypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRackLSEPrototypes indicates an expected call of ListRackLSEPrototypes.
func (mr *MockFleetServerMockRecorder) ListRackLSEPrototypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRackLSEPrototypes", reflect.TypeOf((*MockFleetServer)(nil).ListRackLSEPrototypes), arg0, arg1)
}

// ListRackLSEs mocks base method.
func (m *MockFleetServer) ListRackLSEs(arg0 context.Context, arg1 *ufspb1.ListRackLSEsRequest) (*ufspb1.ListRackLSEsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRackLSEs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListRackLSEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRackLSEs indicates an expected call of ListRackLSEs.
func (mr *MockFleetServerMockRecorder) ListRackLSEs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRackLSEs", reflect.TypeOf((*MockFleetServer)(nil).ListRackLSEs), arg0, arg1)
}

// ListRacks mocks base method.
func (m *MockFleetServer) ListRacks(arg0 context.Context, arg1 *ufspb1.ListRacksRequest) (*ufspb1.ListRacksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRacks", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListRacksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRacks indicates an expected call of ListRacks.
func (mr *MockFleetServerMockRecorder) ListRacks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRacks", reflect.TypeOf((*MockFleetServer)(nil).ListRacks), arg0, arg1)
}

// ListSchedulingUnits mocks base method.
func (m *MockFleetServer) ListSchedulingUnits(arg0 context.Context, arg1 *ufspb1.ListSchedulingUnitsRequest) (*ufspb1.ListSchedulingUnitsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulingUnits", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListSchedulingUnitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulingUnits indicates an expected call of ListSchedulingUnits.
func (mr *MockFleetServerMockRecorder) ListSchedulingUnits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulingUnits", reflect.TypeOf((*MockFleetServer)(nil).ListSchedulingUnits), arg0, arg1)
}

// ListSwitches mocks base method.
func (m *MockFleetServer) ListSwitches(arg0 context.Context, arg1 *ufspb1.ListSwitchesRequest) (*ufspb1.ListSwitchesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSwitches", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListSwitchesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSwitches indicates an expected call of ListSwitches.
func (mr *MockFleetServerMockRecorder) ListSwitches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSwitches", reflect.TypeOf((*MockFleetServer)(nil).ListSwitches), arg0, arg1)
}

// ListVMs mocks base method.
func (m *MockFleetServer) ListVMs(arg0 context.Context, arg1 *ufspb1.ListVMsRequest) (*ufspb1.ListVMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMs", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListVMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMs indicates an expected call of ListVMs.
func (mr *MockFleetServerMockRecorder) ListVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMs", reflect.TypeOf((*MockFleetServer)(nil).ListVMs), arg0, arg1)
}

// ListVlans mocks base method.
func (m *MockFleetServer) ListVlans(arg0 context.Context, arg1 *ufspb1.ListVlansRequest) (*ufspb1.ListVlansResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVlans", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.ListVlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVlans indicates an expected call of ListVlans.
func (mr *MockFleetServerMockRecorder) ListVlans(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVlans", reflect.TypeOf((*MockFleetServer)(nil).ListVlans), arg0, arg1)
}

// MachineRegistration mocks base method.
func (m *MockFleetServer) MachineRegistration(arg0 context.Context, arg1 *ufspb1.MachineRegistrationRequest) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineRegistration", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineRegistration indicates an expected call of MachineRegistration.
func (mr *MockFleetServerMockRecorder) MachineRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineRegistration", reflect.TypeOf((*MockFleetServer)(nil).MachineRegistration), arg0, arg1)
}

// RackRegistration mocks base method.
func (m *MockFleetServer) RackRegistration(arg0 context.Context, arg1 *ufspb1.RackRegistrationRequest) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RackRegistration", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RackRegistration indicates an expected call of RackRegistration.
func (mr *MockFleetServerMockRecorder) RackRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RackRegistration", reflect.TypeOf((*MockFleetServer)(nil).RackRegistration), arg0, arg1)
}

// RenameAsset mocks base method.
func (m *MockFleetServer) RenameAsset(arg0 context.Context, arg1 *ufspb1.RenameAssetRequest) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameAsset", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameAsset indicates an expected call of RenameAsset.
func (mr *MockFleetServerMockRecorder) RenameAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameAsset", reflect.TypeOf((*MockFleetServer)(nil).RenameAsset), arg0, arg1)
}

// RenameMachine mocks base method.
func (m *MockFleetServer) RenameMachine(arg0 context.Context, arg1 *ufspb1.RenameMachineRequest) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameMachine", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameMachine indicates an expected call of RenameMachine.
func (mr *MockFleetServerMockRecorder) RenameMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameMachine", reflect.TypeOf((*MockFleetServer)(nil).RenameMachine), arg0, arg1)
}

// RenameMachineLSE mocks base method.
func (m *MockFleetServer) RenameMachineLSE(arg0 context.Context, arg1 *ufspb1.RenameMachineLSERequest) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameMachineLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameMachineLSE indicates an expected call of RenameMachineLSE.
func (mr *MockFleetServerMockRecorder) RenameMachineLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameMachineLSE", reflect.TypeOf((*MockFleetServer)(nil).RenameMachineLSE), arg0, arg1)
}

// RenameNic mocks base method.
func (m *MockFleetServer) RenameNic(arg0 context.Context, arg1 *ufspb1.RenameNicRequest) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNic", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameNic indicates an expected call of RenameNic.
func (mr *MockFleetServerMockRecorder) RenameNic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNic", reflect.TypeOf((*MockFleetServer)(nil).RenameNic), arg0, arg1)
}

// RenameRack mocks base method.
func (m *MockFleetServer) RenameRack(arg0 context.Context, arg1 *ufspb1.RenameRackRequest) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameRack", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameRack indicates an expected call of RenameRack.
func (mr *MockFleetServerMockRecorder) RenameRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameRack", reflect.TypeOf((*MockFleetServer)(nil).RenameRack), arg0, arg1)
}

// RenameSwitch mocks base method.
func (m *MockFleetServer) RenameSwitch(arg0 context.Context, arg1 *ufspb1.RenameSwitchRequest) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameSwitch", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameSwitch indicates an expected call of RenameSwitch.
func (mr *MockFleetServerMockRecorder) RenameSwitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSwitch", reflect.TypeOf((*MockFleetServer)(nil).RenameSwitch), arg0, arg1)
}

// UpdateAsset mocks base method.
func (m *MockFleetServer) UpdateAsset(arg0 context.Context, arg1 *ufspb1.UpdateAssetRequest) (*ufspb.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockFleetServerMockRecorder) UpdateAsset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockFleetServer)(nil).UpdateAsset), arg0, arg1)
}

// UpdateCachingService mocks base method.
func (m *MockFleetServer) UpdateCachingService(arg0 context.Context, arg1 *ufspb1.UpdateCachingServiceRequest) (*ufspb.CachingService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCachingService", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.CachingService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCachingService indicates an expected call of UpdateCachingService.
func (mr *MockFleetServerMockRecorder) UpdateCachingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachingService", reflect.TypeOf((*MockFleetServer)(nil).UpdateCachingService), arg0, arg1)
}

// UpdateChromePlatform mocks base method.
func (m *MockFleetServer) UpdateChromePlatform(arg0 context.Context, arg1 *ufspb1.UpdateChromePlatformRequest) (*ufspb.ChromePlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChromePlatform", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.ChromePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChromePlatform indicates an expected call of UpdateChromePlatform.
func (mr *MockFleetServerMockRecorder) UpdateChromePlatform(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChromePlatform", reflect.TypeOf((*MockFleetServer)(nil).UpdateChromePlatform), arg0, arg1)
}

// UpdateConfigBundle mocks base method.
func (m *MockFleetServer) UpdateConfigBundle(arg0 context.Context, arg1 *ufspb1.UpdateConfigBundleRequest) (*ufspb1.UpdateConfigBundleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfigBundle", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.UpdateConfigBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigBundle indicates an expected call of UpdateConfigBundle.
func (mr *MockFleetServerMockRecorder) UpdateConfigBundle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigBundle", reflect.TypeOf((*MockFleetServer)(nil).UpdateConfigBundle), arg0, arg1)
}

// UpdateDefaultWifi mocks base method.
func (m *MockFleetServer) UpdateDefaultWifi(arg0 context.Context, arg1 *ufspb1.UpdateDefaultWifiRequest) (*ufspb.DefaultWifi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultWifi", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.DefaultWifi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultWifi indicates an expected call of UpdateDefaultWifi.
func (mr *MockFleetServerMockRecorder) UpdateDefaultWifi(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultWifi", reflect.TypeOf((*MockFleetServer)(nil).UpdateDefaultWifi), arg0, arg1)
}

// UpdateDeviceRecoveryData mocks base method.
func (m *MockFleetServer) UpdateDeviceRecoveryData(arg0 context.Context, arg1 *ufspb1.UpdateDeviceRecoveryDataRequest) (*ufspb1.UpdateDeviceRecoveryDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceRecoveryData", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.UpdateDeviceRecoveryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceRecoveryData indicates an expected call of UpdateDeviceRecoveryData.
func (mr *MockFleetServerMockRecorder) UpdateDeviceRecoveryData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceRecoveryData", reflect.TypeOf((*MockFleetServer)(nil).UpdateDeviceRecoveryData), arg0, arg1)
}

// UpdateDrac mocks base method.
func (m *MockFleetServer) UpdateDrac(arg0 context.Context, arg1 *ufspb1.UpdateDracRequest) (*ufspb.Drac, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDrac", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Drac)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDrac indicates an expected call of UpdateDrac.
func (mr *MockFleetServerMockRecorder) UpdateDrac(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrac", reflect.TypeOf((*MockFleetServer)(nil).UpdateDrac), arg0, arg1)
}

// UpdateDutState mocks base method.
func (m *MockFleetServer) UpdateDutState(arg0 context.Context, arg1 *ufspb1.UpdateDutStateRequest) (*ufspb0.DutState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDutState", arg0, arg1)
	ret0, _ := ret[0].(*ufspb0.DutState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDutState indicates an expected call of UpdateDutState.
func (mr *MockFleetServerMockRecorder) UpdateDutState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDutState", reflect.TypeOf((*MockFleetServer)(nil).UpdateDutState), arg0, arg1)
}

// UpdateKVM mocks base method.
func (m *MockFleetServer) UpdateKVM(arg0 context.Context, arg1 *ufspb1.UpdateKVMRequest) (*ufspb.KVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKVM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.KVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKVM indicates an expected call of UpdateKVM.
func (mr *MockFleetServerMockRecorder) UpdateKVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKVM", reflect.TypeOf((*MockFleetServer)(nil).UpdateKVM), arg0, arg1)
}

// UpdateMachine mocks base method.
func (m *MockFleetServer) UpdateMachine(arg0 context.Context, arg1 *ufspb1.UpdateMachineRequest) (*ufspb.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachine", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachine indicates an expected call of UpdateMachine.
func (mr *MockFleetServerMockRecorder) UpdateMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachine", reflect.TypeOf((*MockFleetServer)(nil).UpdateMachine), arg0, arg1)
}

// UpdateMachineLSE mocks base method.
func (m *MockFleetServer) UpdateMachineLSE(arg0 context.Context, arg1 *ufspb1.UpdateMachineLSERequest) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachineLSE indicates an expected call of UpdateMachineLSE.
func (mr *MockFleetServerMockRecorder) UpdateMachineLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineLSE", reflect.TypeOf((*MockFleetServer)(nil).UpdateMachineLSE), arg0, arg1)
}

// UpdateMachineLSEDeployment mocks base method.
func (m *MockFleetServer) UpdateMachineLSEDeployment(arg0 context.Context, arg1 *ufspb1.UpdateMachineLSEDeploymentRequest) (*ufspb.MachineLSEDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineLSEDeployment", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSEDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachineLSEDeployment indicates an expected call of UpdateMachineLSEDeployment.
func (mr *MockFleetServerMockRecorder) UpdateMachineLSEDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineLSEDeployment", reflect.TypeOf((*MockFleetServer)(nil).UpdateMachineLSEDeployment), arg0, arg1)
}

// UpdateMachineLSEPrototype mocks base method.
func (m *MockFleetServer) UpdateMachineLSEPrototype(arg0 context.Context, arg1 *ufspb1.UpdateMachineLSEPrototypeRequest) (*ufspb.MachineLSEPrototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.MachineLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMachineLSEPrototype indicates an expected call of UpdateMachineLSEPrototype.
func (mr *MockFleetServerMockRecorder) UpdateMachineLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).UpdateMachineLSEPrototype), arg0, arg1)
}

// UpdateNic mocks base method.
func (m *MockFleetServer) UpdateNic(arg0 context.Context, arg1 *ufspb1.UpdateNicRequest) (*ufspb.Nic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNic", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Nic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNic indicates an expected call of UpdateNic.
func (mr *MockFleetServerMockRecorder) UpdateNic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNic", reflect.TypeOf((*MockFleetServer)(nil).UpdateNic), arg0, arg1)
}

// UpdateRPM mocks base method.
func (m *MockFleetServer) UpdateRPM(arg0 context.Context, arg1 *ufspb1.UpdateRPMRequest) (*ufspb.RPM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRPM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RPM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRPM indicates an expected call of UpdateRPM.
func (mr *MockFleetServerMockRecorder) UpdateRPM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRPM", reflect.TypeOf((*MockFleetServer)(nil).UpdateRPM), arg0, arg1)
}

// UpdateRack mocks base method.
func (m *MockFleetServer) UpdateRack(arg0 context.Context, arg1 *ufspb1.UpdateRackRequest) (*ufspb.Rack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRack", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Rack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRack indicates an expected call of UpdateRack.
func (mr *MockFleetServerMockRecorder) UpdateRack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRack", reflect.TypeOf((*MockFleetServer)(nil).UpdateRack), arg0, arg1)
}

// UpdateRackLSE mocks base method.
func (m *MockFleetServer) UpdateRackLSE(arg0 context.Context, arg1 *ufspb1.UpdateRackLSERequest) (*ufspb.RackLSE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRackLSE", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RackLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRackLSE indicates an expected call of UpdateRackLSE.
func (mr *MockFleetServerMockRecorder) UpdateRackLSE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRackLSE", reflect.TypeOf((*MockFleetServer)(nil).UpdateRackLSE), arg0, arg1)
}

// UpdateRackLSEPrototype mocks base method.
func (m *MockFleetServer) UpdateRackLSEPrototype(arg0 context.Context, arg1 *ufspb1.UpdateRackLSEPrototypeRequest) (*ufspb.RackLSEPrototype, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRackLSEPrototype", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.RackLSEPrototype)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRackLSEPrototype indicates an expected call of UpdateRackLSEPrototype.
func (mr *MockFleetServerMockRecorder) UpdateRackLSEPrototype(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRackLSEPrototype", reflect.TypeOf((*MockFleetServer)(nil).UpdateRackLSEPrototype), arg0, arg1)
}

// UpdateSchedulingUnit mocks base method.
func (m *MockFleetServer) UpdateSchedulingUnit(arg0 context.Context, arg1 *ufspb1.UpdateSchedulingUnitRequest) (*ufspb.SchedulingUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedulingUnit", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.SchedulingUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedulingUnit indicates an expected call of UpdateSchedulingUnit.
func (mr *MockFleetServerMockRecorder) UpdateSchedulingUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulingUnit", reflect.TypeOf((*MockFleetServer)(nil).UpdateSchedulingUnit), arg0, arg1)
}

// UpdateState mocks base method.
func (m *MockFleetServer) UpdateState(arg0 context.Context, arg1 *ufspb1.UpdateStateRequest) (*ufspb.StateRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.StateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockFleetServerMockRecorder) UpdateState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockFleetServer)(nil).UpdateState), arg0, arg1)
}

// UpdateSwitch mocks base method.
func (m *MockFleetServer) UpdateSwitch(arg0 context.Context, arg1 *ufspb1.UpdateSwitchRequest) (*ufspb.Switch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSwitch", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Switch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSwitch indicates an expected call of UpdateSwitch.
func (mr *MockFleetServerMockRecorder) UpdateSwitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSwitch", reflect.TypeOf((*MockFleetServer)(nil).UpdateSwitch), arg0, arg1)
}

// UpdateTestData mocks base method.
func (m *MockFleetServer) UpdateTestData(arg0 context.Context, arg1 *ufspb1.UpdateTestDataRequest) (*ufspb1.UpdateTestDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestData", arg0, arg1)
	ret0, _ := ret[0].(*ufspb1.UpdateTestDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTestData indicates an expected call of UpdateTestData.
func (mr *MockFleetServerMockRecorder) UpdateTestData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestData", reflect.TypeOf((*MockFleetServer)(nil).UpdateTestData), arg0, arg1)
}

// UpdateVM mocks base method.
func (m *MockFleetServer) UpdateVM(arg0 context.Context, arg1 *ufspb1.UpdateVMRequest) (*ufspb.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVM", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVM indicates an expected call of UpdateVM.
func (mr *MockFleetServerMockRecorder) UpdateVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVM", reflect.TypeOf((*MockFleetServer)(nil).UpdateVM), arg0, arg1)
}

// UpdateVlan mocks base method.
func (m *MockFleetServer) UpdateVlan(arg0 context.Context, arg1 *ufspb1.UpdateVlanRequest) (*ufspb.Vlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVlan", arg0, arg1)
	ret0, _ := ret[0].(*ufspb.Vlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVlan indicates an expected call of UpdateVlan.
func (mr *MockFleetServerMockRecorder) UpdateVlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVlan", reflect.TypeOf((*MockFleetServer)(nil).UpdateVlan), arg0, arg1)
}
