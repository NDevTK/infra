// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/unifiedfleet/api/v1/rpc/fleet.proto

package ufspb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	proto1 "infra/unifiedfleet/api/v1/proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Contains the required information for creating a ChromePlatform represented in
// the database.
type CreateChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chromePlatform to create.
	ChromePlatform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The ID to use for the ChromePlatform, which will become the final component of
	// the ChromePlatform's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	ChromePlatformId string `protobuf:"bytes,2,opt,name=chromePlatform_id,json=chromePlatformId,proto3" json:"chromePlatform_id,omitempty"`
}

func (x *CreateChromePlatformRequest) Reset() {
	*x = CreateChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChromePlatformRequest) ProtoMessage() {}

func (x *CreateChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*CreateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChromePlatformRequest) GetChromePlatform() *proto1.ChromePlatform {
	if x != nil {
		return x.ChromePlatform
	}
	return nil
}

func (x *CreateChromePlatformRequest) GetChromePlatformId() string {
	if x != nil {
		return x.ChromePlatformId
	}
	return ""
}

type UpdateChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chromePlatform to update.
	ChromePlatform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateChromePlatformRequest) Reset() {
	*x = UpdateChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChromePlatformRequest) ProtoMessage() {}

func (x *UpdateChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*UpdateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateChromePlatformRequest) GetChromePlatform() *proto1.ChromePlatform {
	if x != nil {
		return x.ChromePlatform
	}
	return nil
}

func (x *UpdateChromePlatformRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the chromePlatform to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetChromePlatformRequest) Reset() {
	*x = GetChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChromePlatformRequest) ProtoMessage() {}

func (x *GetChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*GetChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{2}
}

func (x *GetChromePlatformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListChromePlatformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of chromePlatforms to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 chromePlatforms will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListChromePlatforms` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListChromePlatforms` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListChromePlatformsRequest) Reset() {
	*x = ListChromePlatformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChromePlatformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChromePlatformsRequest) ProtoMessage() {}

func (x *ListChromePlatformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChromePlatformsRequest.ProtoReflect.Descriptor instead.
func (*ListChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{3}
}

func (x *ListChromePlatformsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListChromePlatformsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListChromePlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chromePlatforms from datastore.
	ChromePlatforms []*proto1.ChromePlatform `protobuf:"bytes,1,rep,name=chromePlatforms,proto3" json:"chromePlatforms,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListChromePlatformsResponse) Reset() {
	*x = ListChromePlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChromePlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChromePlatformsResponse) ProtoMessage() {}

func (x *ListChromePlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChromePlatformsResponse.ProtoReflect.Descriptor instead.
func (*ListChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{4}
}

func (x *ListChromePlatformsResponse) GetChromePlatforms() []*proto1.ChromePlatform {
	if x != nil {
		return x.ChromePlatforms
	}
	return nil
}

func (x *ListChromePlatformsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteChromePlatformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the ChromePlatform to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteChromePlatformRequest) Reset() {
	*x = DeleteChromePlatformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChromePlatformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChromePlatformRequest) ProtoMessage() {}

func (x *DeleteChromePlatformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChromePlatformRequest.ProtoReflect.Descriptor instead.
func (*DeleteChromePlatformRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteChromePlatformRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportChromePlatformsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportChromePlatformsRequest_MachineDbSource
	//	*ImportChromePlatformsRequest_ConfigSource
	Source isImportChromePlatformsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportChromePlatformsRequest) Reset() {
	*x = ImportChromePlatformsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportChromePlatformsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChromePlatformsRequest) ProtoMessage() {}

func (x *ImportChromePlatformsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChromePlatformsRequest.ProtoReflect.Descriptor instead.
func (*ImportChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{6}
}

func (m *ImportChromePlatformsRequest) GetSource() isImportChromePlatformsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportChromePlatformsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportChromePlatformsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportChromePlatformsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportChromePlatformsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportChromePlatformsRequest_Source interface {
	isImportChromePlatformsRequest_Source()
}

type ImportChromePlatformsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportChromePlatformsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportChromePlatformsRequest_MachineDbSource) isImportChromePlatformsRequest_Source() {}

func (*ImportChromePlatformsRequest_ConfigSource) isImportChromePlatformsRequest_Source() {}

type ImportChromePlatformsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed []*ChromePlatformResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed []*ChromePlatformResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *ImportChromePlatformsResponse) Reset() {
	*x = ImportChromePlatformsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportChromePlatformsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportChromePlatformsResponse) ProtoMessage() {}

func (x *ImportChromePlatformsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportChromePlatformsResponse.ProtoReflect.Descriptor instead.
func (*ImportChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{7}
}

func (x *ImportChromePlatformsResponse) GetPassed() []*ChromePlatformResult {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *ImportChromePlatformsResponse) GetFailed() []*ChromePlatformResult {
	if x != nil {
		return x.Failed
	}
	return nil
}

type ChromePlatformResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	ErrorMsg string                 `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *ChromePlatformResult) Reset() {
	*x = ChromePlatformResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromePlatformResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromePlatformResult) ProtoMessage() {}

func (x *ChromePlatformResult) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromePlatformResult.ProtoReflect.Descriptor instead.
func (*ChromePlatformResult) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{8}
}

func (x *ChromePlatformResult) GetPlatform() *proto1.ChromePlatform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *ChromePlatformResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type ImportOSVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportOSVersionsRequest_MachineDbSource
	//	*ImportOSVersionsRequest_ConfigSource
	Source isImportOSVersionsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportOSVersionsRequest) Reset() {
	*x = ImportOSVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOSVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOSVersionsRequest) ProtoMessage() {}

func (x *ImportOSVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOSVersionsRequest.ProtoReflect.Descriptor instead.
func (*ImportOSVersionsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{9}
}

func (m *ImportOSVersionsRequest) GetSource() isImportOSVersionsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportOSVersionsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportOSVersionsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportOSVersionsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportOSVersionsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportOSVersionsRequest_Source interface {
	isImportOSVersionsRequest_Source()
}

type ImportOSVersionsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportOSVersionsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportOSVersionsRequest_MachineDbSource) isImportOSVersionsRequest_Source() {}

func (*ImportOSVersionsRequest_ConfigSource) isImportOSVersionsRequest_Source() {}

type ListOSVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of OSVersion to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 OSVersion will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListOSVersion` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListOSVersion` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOSVersionsRequest) Reset() {
	*x = ListOSVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOSVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOSVersionsRequest) ProtoMessage() {}

func (x *ListOSVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOSVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListOSVersionsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{10}
}

func (x *ListOSVersionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOSVersionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListOSVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The os versions for browser lab from datastore.
	OsVersion []*proto1.OSVersion `protobuf:"bytes,1,rep,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListOSVersionsResponse) Reset() {
	*x = ListOSVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOSVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOSVersionsResponse) ProtoMessage() {}

func (x *ListOSVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOSVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListOSVersionsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{11}
}

func (x *ListOSVersionsResponse) GetOsVersion() []*proto1.OSVersion {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *ListOSVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Contains the required information for creating a MachineLSEPrototype represented in
// the database.
type CreateMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEPrototype to create.
	MachineLSEPrototype *proto1.MachineLSEPrototype `protobuf:"bytes,1,opt,name=machineLSEPrototype,proto3" json:"machineLSEPrototype,omitempty"`
	// The ID to use for the MachineLSEPrototype, which will become the final component of
	// the MachineLSEPrototype's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEPrototypeId string `protobuf:"bytes,2,opt,name=machineLSEPrototype_id,json=machineLSEPrototypeId,proto3" json:"machineLSEPrototype_id,omitempty"`
}

func (x *CreateMachineLSEPrototypeRequest) Reset() {
	*x = CreateMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *CreateMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*CreateMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{12}
}

func (x *CreateMachineLSEPrototypeRequest) GetMachineLSEPrototype() *proto1.MachineLSEPrototype {
	if x != nil {
		return x.MachineLSEPrototype
	}
	return nil
}

func (x *CreateMachineLSEPrototypeRequest) GetMachineLSEPrototypeId() string {
	if x != nil {
		return x.MachineLSEPrototypeId
	}
	return ""
}

type UpdateMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEPrototype to update.
	MachineLSEPrototype *proto1.MachineLSEPrototype `protobuf:"bytes,1,opt,name=machineLSEPrototype,proto3" json:"machineLSEPrototype,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMachineLSEPrototypeRequest) Reset() {
	*x = UpdateMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *UpdateMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMachineLSEPrototypeRequest) GetMachineLSEPrototype() *proto1.MachineLSEPrototype {
	if x != nil {
		return x.MachineLSEPrototype
	}
	return nil
}

func (x *UpdateMachineLSEPrototypeRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSEPrototype to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineLSEPrototypeRequest) Reset() {
	*x = GetMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *GetMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*GetMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{14}
}

func (x *GetMachineLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachineLSEPrototypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of MachineLSEPrototypes to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 MachineLSEPrototypes will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEPrototypes` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEPrototypes` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListMachineLSEPrototypesRequest) Reset() {
	*x = ListMachineLSEPrototypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEPrototypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEPrototypesRequest) ProtoMessage() {}

func (x *ListMachineLSEPrototypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEPrototypesRequest.ProtoReflect.Descriptor instead.
func (*ListMachineLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{15}
}

func (x *ListMachineLSEPrototypesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachineLSEPrototypesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMachineLSEPrototypesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListMachineLSEPrototypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MachineLSEPrototypes from datastore.
	MachineLSEPrototypes []*proto1.MachineLSEPrototype `protobuf:"bytes,1,rep,name=machineLSEPrototypes,proto3" json:"machineLSEPrototypes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachineLSEPrototypesResponse) Reset() {
	*x = ListMachineLSEPrototypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEPrototypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEPrototypesResponse) ProtoMessage() {}

func (x *ListMachineLSEPrototypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEPrototypesResponse.ProtoReflect.Descriptor instead.
func (*ListMachineLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{16}
}

func (x *ListMachineLSEPrototypesResponse) GetMachineLSEPrototypes() []*proto1.MachineLSEPrototype {
	if x != nil {
		return x.MachineLSEPrototypes
	}
	return nil
}

func (x *ListMachineLSEPrototypesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMachineLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSEPrototype to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachineLSEPrototypeRequest) Reset() {
	*x = DeleteMachineLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineLSEPrototypeRequest) ProtoMessage() {}

func (x *DeleteMachineLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteMachineLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a RackLSEPrototype represented in
// the database.
type CreateRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RackLSEPrototype to create.
	RackLSEPrototype *proto1.RackLSEPrototype `protobuf:"bytes,1,opt,name=rackLSEPrototype,proto3" json:"rackLSEPrototype,omitempty"`
	// The ID to use for the RackLSEPrototype, which will become the final component of
	// the RackLSEPrototype's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEPrototypeId string `protobuf:"bytes,2,opt,name=rackLSEPrototype_id,json=rackLSEPrototypeId,proto3" json:"rackLSEPrototype_id,omitempty"`
}

func (x *CreateRackLSEPrototypeRequest) Reset() {
	*x = CreateRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRackLSEPrototypeRequest) ProtoMessage() {}

func (x *CreateRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*CreateRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{18}
}

func (x *CreateRackLSEPrototypeRequest) GetRackLSEPrototype() *proto1.RackLSEPrototype {
	if x != nil {
		return x.RackLSEPrototype
	}
	return nil
}

func (x *CreateRackLSEPrototypeRequest) GetRackLSEPrototypeId() string {
	if x != nil {
		return x.RackLSEPrototypeId
	}
	return ""
}

type UpdateRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RackLSEPrototype to update.
	RackLSEPrototype *proto1.RackLSEPrototype `protobuf:"bytes,1,opt,name=rackLSEPrototype,proto3" json:"rackLSEPrototype,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRackLSEPrototypeRequest) Reset() {
	*x = UpdateRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackLSEPrototypeRequest) ProtoMessage() {}

func (x *UpdateRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateRackLSEPrototypeRequest) GetRackLSEPrototype() *proto1.RackLSEPrototype {
	if x != nil {
		return x.RackLSEPrototype
	}
	return nil
}

func (x *UpdateRackLSEPrototypeRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RackLSEPrototype to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackLSEPrototypeRequest) Reset() {
	*x = GetRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackLSEPrototypeRequest) ProtoMessage() {}

func (x *GetRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*GetRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{20}
}

func (x *GetRackLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRackLSEPrototypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of RackLSEPrototypes to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 RackLSEPrototypes will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEPrototypes` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEPrototypes` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// filter
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRackLSEPrototypesRequest) Reset() {
	*x = ListRackLSEPrototypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEPrototypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEPrototypesRequest) ProtoMessage() {}

func (x *ListRackLSEPrototypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEPrototypesRequest.ProtoReflect.Descriptor instead.
func (*ListRackLSEPrototypesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{21}
}

func (x *ListRackLSEPrototypesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRackLSEPrototypesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRackLSEPrototypesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListRackLSEPrototypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RackLSEPrototypes from datastore.
	RackLSEPrototypes []*proto1.RackLSEPrototype `protobuf:"bytes,1,rep,name=rackLSEPrototypes,proto3" json:"rackLSEPrototypes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRackLSEPrototypesResponse) Reset() {
	*x = ListRackLSEPrototypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEPrototypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEPrototypesResponse) ProtoMessage() {}

func (x *ListRackLSEPrototypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEPrototypesResponse.ProtoReflect.Descriptor instead.
func (*ListRackLSEPrototypesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{22}
}

func (x *ListRackLSEPrototypesResponse) GetRackLSEPrototypes() []*proto1.RackLSEPrototype {
	if x != nil {
		return x.RackLSEPrototypes
	}
	return nil
}

func (x *ListRackLSEPrototypesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRackLSEPrototypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RackLSEPrototype to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRackLSEPrototypeRequest) Reset() {
	*x = DeleteRackLSEPrototypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRackLSEPrototypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRackLSEPrototypeRequest) ProtoMessage() {}

func (x *DeleteRackLSEPrototypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRackLSEPrototypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRackLSEPrototypeRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteRackLSEPrototypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Machine represented in
// the database.
type CreateMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine to create.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The ID to use for the Machine, which will become the final component of
	// the Machine's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineId string `protobuf:"bytes,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
}

func (x *CreateMachineRequest) Reset() {
	*x = CreateMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMachineRequest) ProtoMessage() {}

func (x *CreateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMachineRequest.ProtoReflect.Descriptor instead.
func (*CreateMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{24}
}

func (x *CreateMachineRequest) GetMachine() *proto1.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *CreateMachineRequest) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

type UpdateMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine to update.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateMachineRequest) Reset() {
	*x = UpdateMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineRequest) ProtoMessage() {}

func (x *UpdateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineRequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateMachineRequest) GetMachine() *proto1.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *UpdateMachineRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the machine to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineRequest) Reset() {
	*x = GetMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineRequest) ProtoMessage() {}

func (x *GetMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineRequest.ProtoReflect.Descriptor instead.
func (*GetMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{26}
}

func (x *GetMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of machines to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machines will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachines` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachines` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListMachinesRequest) Reset() {
	*x = ListMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinesRequest) ProtoMessage() {}

func (x *ListMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachinesRequest.ProtoReflect.Descriptor instead.
func (*ListMachinesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{27}
}

func (x *ListMachinesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachinesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListMachinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machines from datastore.
	Machines []*proto1.Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachinesResponse) Reset() {
	*x = ListMachinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachinesResponse) ProtoMessage() {}

func (x *ListMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachinesResponse.ProtoReflect.Descriptor instead.
func (*ListMachinesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{28}
}

func (x *ListMachinesResponse) GetMachines() []*proto1.Machine {
	if x != nil {
		return x.Machines
	}
	return nil
}

func (x *ListMachinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Machine to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachineRequest) Reset() {
	*x = DeleteMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineRequest) ProtoMessage() {}

func (x *DeleteMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineRequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportMachinesRequest_MachineDbSource
	//	*ImportMachinesRequest_ConfigSource
	Source isImportMachinesRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportMachinesRequest) Reset() {
	*x = ImportMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMachinesRequest) ProtoMessage() {}

func (x *ImportMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMachinesRequest.ProtoReflect.Descriptor instead.
func (*ImportMachinesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{30}
}

func (m *ImportMachinesRequest) GetSource() isImportMachinesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportMachinesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportMachinesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportMachinesRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportMachinesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportMachinesRequest_Source interface {
	isImportMachinesRequest_Source()
}

type ImportMachinesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachinesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachinesRequest_MachineDbSource) isImportMachinesRequest_Source() {}

func (*ImportMachinesRequest_ConfigSource) isImportMachinesRequest_Source() {}

type MachineDBSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *MachineDBSource) Reset() {
	*x = MachineDBSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineDBSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineDBSource) ProtoMessage() {}

func (x *MachineDBSource) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineDBSource.ProtoReflect.Descriptor instead.
func (*MachineDBSource) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{31}
}

func (x *MachineDBSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type ConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Empty config_service means it's local file.
	ConfigServiceName string `protobuf:"bytes,1,opt,name=config_service_name,json=configServiceName,proto3" json:"config_service_name,omitempty"`
	FileName          string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *ConfigSource) Reset() {
	*x = ConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource) ProtoMessage() {}

func (x *ConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource.ProtoReflect.Descriptor instead.
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{32}
}

func (x *ConfigSource) GetConfigServiceName() string {
	if x != nil {
		return x.ConfigServiceName
	}
	return ""
}

func (x *ConfigSource) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// Contains the required information for creating a Rack represented in
// the database.
type CreateRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack to create.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The ID to use for the Rack, which will become the final component of
	// the Rack's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackId string `protobuf:"bytes,2,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
}

func (x *CreateRackRequest) Reset() {
	*x = CreateRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRackRequest) ProtoMessage() {}

func (x *CreateRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRackRequest.ProtoReflect.Descriptor instead.
func (*CreateRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{33}
}

func (x *CreateRackRequest) GetRack() *proto1.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

func (x *CreateRackRequest) GetRackId() string {
	if x != nil {
		return x.RackId
	}
	return ""
}

type UpdateRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack to update.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRackRequest) Reset() {
	*x = UpdateRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackRequest) ProtoMessage() {}

func (x *UpdateRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackRequest.ProtoReflect.Descriptor instead.
func (*UpdateRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateRackRequest) GetRack() *proto1.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

func (x *UpdateRackRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the rack to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackRequest) Reset() {
	*x = GetRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackRequest) ProtoMessage() {}

func (x *GetRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackRequest.ProtoReflect.Descriptor instead.
func (*GetRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{35}
}

func (x *GetRackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRacksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of racks to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 racks will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRacks` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRacks` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRacksRequest) Reset() {
	*x = ListRacksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacksRequest) ProtoMessage() {}

func (x *ListRacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacksRequest.ProtoReflect.Descriptor instead.
func (*ListRacksRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{36}
}

func (x *ListRacksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRacksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRacksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The racks from datastore.
	Racks []*proto1.Rack `protobuf:"bytes,1,rep,name=racks,proto3" json:"racks,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRacksResponse) Reset() {
	*x = ListRacksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRacksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacksResponse) ProtoMessage() {}

func (x *ListRacksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacksResponse.ProtoReflect.Descriptor instead.
func (*ListRacksResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{37}
}

func (x *ListRacksResponse) GetRacks() []*proto1.Rack {
	if x != nil {
		return x.Racks
	}
	return nil
}

func (x *ListRacksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Rack to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRackRequest) Reset() {
	*x = DeleteRackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRackRequest) ProtoMessage() {}

func (x *DeleteRackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRackRequest.ProtoReflect.Descriptor instead.
func (*DeleteRackRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteRackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a MachineLSE represented in
// the database.
type CreateMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machineLSE to create.
	MachineLSE *proto1.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The ID to use for the MachineLSE, which will become the final component of
	// the MachineLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEId string `protobuf:"bytes,2,opt,name=machineLSE_id,json=machineLSEId,proto3" json:"machineLSE_id,omitempty"`
	// A host/MachineLSE cannot be added without being associated with a Machine/s.
	// Refers to the machines to associate this host/MachineLSE.
	Machines []string `protobuf:"bytes,3,rep,name=machines,proto3" json:"machines,omitempty"`
}

func (x *CreateMachineLSERequest) Reset() {
	*x = CreateMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMachineLSERequest) ProtoMessage() {}

func (x *CreateMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMachineLSERequest.ProtoReflect.Descriptor instead.
func (*CreateMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{39}
}

func (x *CreateMachineLSERequest) GetMachineLSE() *proto1.MachineLSE {
	if x != nil {
		return x.MachineLSE
	}
	return nil
}

func (x *CreateMachineLSERequest) GetMachineLSEId() string {
	if x != nil {
		return x.MachineLSEId
	}
	return ""
}

func (x *CreateMachineLSERequest) GetMachines() []string {
	if x != nil {
		return x.Machines
	}
	return nil
}

type UpdateMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machineLSE to update.
	MachineLSE *proto1.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Refers to the machines to associate this host/MachineLSE.
	// When it is empty, MachineLSE will associated with the same machines
	// and we dont update association between machine and MachineLSE.
	Machines []string `protobuf:"bytes,3,rep,name=machines,proto3" json:"machines,omitempty"`
}

func (x *UpdateMachineLSERequest) Reset() {
	*x = UpdateMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMachineLSERequest) ProtoMessage() {}

func (x *UpdateMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMachineLSERequest.ProtoReflect.Descriptor instead.
func (*UpdateMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateMachineLSERequest) GetMachineLSE() *proto1.MachineLSE {
	if x != nil {
		return x.MachineLSE
	}
	return nil
}

func (x *UpdateMachineLSERequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateMachineLSERequest) GetMachines() []string {
	if x != nil {
		return x.Machines
	}
	return nil
}

type GetMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the machineLSE to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMachineLSERequest) Reset() {
	*x = GetMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachineLSERequest) ProtoMessage() {}

func (x *GetMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachineLSERequest.ProtoReflect.Descriptor instead.
func (*GetMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{41}
}

func (x *GetMachineLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of machineLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machineLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListMachineLSEsRequest) Reset() {
	*x = ListMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEsRequest) ProtoMessage() {}

func (x *ListMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*ListMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{42}
}

func (x *ListMachineLSEsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMachineLSEsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListMachineLSEsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machineLSEs from datastore.
	MachineLSEs []*proto1.MachineLSE `protobuf:"bytes,1,rep,name=machineLSEs,proto3" json:"machineLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMachineLSEsResponse) Reset() {
	*x = ListMachineLSEsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMachineLSEsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMachineLSEsResponse) ProtoMessage() {}

func (x *ListMachineLSEsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMachineLSEsResponse.ProtoReflect.Descriptor instead.
func (*ListMachineLSEsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{43}
}

func (x *ListMachineLSEsResponse) GetMachineLSEs() []*proto1.MachineLSE {
	if x != nil {
		return x.MachineLSEs
	}
	return nil
}

func (x *ListMachineLSEsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteMachineLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the MachineLSE to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteMachineLSERequest) Reset() {
	*x = DeleteMachineLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineLSERequest) ProtoMessage() {}

func (x *DeleteMachineLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineLSERequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteMachineLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportMachineLSEsRequest_MachineDbSource
	//	*ImportMachineLSEsRequest_ConfigSource
	Source isImportMachineLSEsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportMachineLSEsRequest) Reset() {
	*x = ImportMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportMachineLSEsRequest) ProtoMessage() {}

func (x *ImportMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*ImportMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{45}
}

func (m *ImportMachineLSEsRequest) GetSource() isImportMachineLSEsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportMachineLSEsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportMachineLSEsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportMachineLSEsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportMachineLSEsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportMachineLSEsRequest_Source interface {
	isImportMachineLSEsRequest_Source()
}

type ImportMachineLSEsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachineLSEsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachineLSEsRequest_MachineDbSource) isImportMachineLSEsRequest_Source() {}

func (*ImportMachineLSEsRequest_ConfigSource) isImportMachineLSEsRequest_Source() {}

type ImportOSMachineLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportOSMachineLSEsRequest_MachineDbSource
	//	*ImportOSMachineLSEsRequest_ConfigSource
	Source isImportOSMachineLSEsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportOSMachineLSEsRequest) Reset() {
	*x = ImportOSMachineLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOSMachineLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOSMachineLSEsRequest) ProtoMessage() {}

func (x *ImportOSMachineLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOSMachineLSEsRequest.ProtoReflect.Descriptor instead.
func (*ImportOSMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{46}
}

func (m *ImportOSMachineLSEsRequest) GetSource() isImportOSMachineLSEsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportOSMachineLSEsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportOSMachineLSEsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportOSMachineLSEsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportOSMachineLSEsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportOSMachineLSEsRequest_Source interface {
	isImportOSMachineLSEsRequest_Source()
}

type ImportOSMachineLSEsRequest_MachineDbSource struct {
	// Continue to use machine_db_source to specify any service host for consistency
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportOSMachineLSEsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportOSMachineLSEsRequest_MachineDbSource) isImportOSMachineLSEsRequest_Source() {}

func (*ImportOSMachineLSEsRequest_ConfigSource) isImportOSMachineLSEsRequest_Source() {}

// Contains the required information for creating a RackLSE represented in
// the database.
type CreateRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rackLSE to create.
	RackLSE *proto1.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The ID to use for the RackLSE, which will become the final component of
	// the RackLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEId string `protobuf:"bytes,2,opt,name=rackLSE_id,json=rackLSEId,proto3" json:"rackLSE_id,omitempty"`
}

func (x *CreateRackLSERequest) Reset() {
	*x = CreateRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRackLSERequest) ProtoMessage() {}

func (x *CreateRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRackLSERequest.ProtoReflect.Descriptor instead.
func (*CreateRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{47}
}

func (x *CreateRackLSERequest) GetRackLSE() *proto1.RackLSE {
	if x != nil {
		return x.RackLSE
	}
	return nil
}

func (x *CreateRackLSERequest) GetRackLSEId() string {
	if x != nil {
		return x.RackLSEId
	}
	return ""
}

type UpdateRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rackLSE to update.
	RackLSE *proto1.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRackLSERequest) Reset() {
	*x = UpdateRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRackLSERequest) ProtoMessage() {}

func (x *UpdateRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRackLSERequest.ProtoReflect.Descriptor instead.
func (*UpdateRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateRackLSERequest) GetRackLSE() *proto1.RackLSE {
	if x != nil {
		return x.RackLSE
	}
	return nil
}

func (x *UpdateRackLSERequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the rackLSE to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRackLSERequest) Reset() {
	*x = GetRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRackLSERequest) ProtoMessage() {}

func (x *GetRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRackLSERequest.ProtoReflect.Descriptor instead.
func (*GetRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{49}
}

func (x *GetRackLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRackLSEsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of rackLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 rackLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRackLSEsRequest) Reset() {
	*x = ListRackLSEsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEsRequest) ProtoMessage() {}

func (x *ListRackLSEsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEsRequest.ProtoReflect.Descriptor instead.
func (*ListRackLSEsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{50}
}

func (x *ListRackLSEsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRackLSEsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRackLSEsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rackLSEs from datastore.
	RackLSEs []*proto1.RackLSE `protobuf:"bytes,1,rep,name=rackLSEs,proto3" json:"rackLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRackLSEsResponse) Reset() {
	*x = ListRackLSEsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRackLSEsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRackLSEsResponse) ProtoMessage() {}

func (x *ListRackLSEsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRackLSEsResponse.ProtoReflect.Descriptor instead.
func (*ListRackLSEsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{51}
}

func (x *ListRackLSEsResponse) GetRackLSEs() []*proto1.RackLSE {
	if x != nil {
		return x.RackLSEs
	}
	return nil
}

func (x *ListRackLSEsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRackLSERequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RackLSE to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRackLSERequest) Reset() {
	*x = DeleteRackLSERequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRackLSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRackLSERequest) ProtoMessage() {}

func (x *DeleteRackLSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRackLSERequest.ProtoReflect.Descriptor instead.
func (*DeleteRackLSERequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteRackLSERequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Nic represented in
// the database.
type CreateNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nic to create.
	Nic *proto1.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The ID to use for the Nic, which will become the final component of
	// the Nic's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	NicId string `protobuf:"bytes,2,opt,name=nic_id,json=nicId,proto3" json:"nic_id,omitempty"`
	// A nic cannot be added without being associated with a Machine.
	// Refers to the machine to associate this nic.
	Machine string `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *CreateNicRequest) Reset() {
	*x = CreateNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNicRequest) ProtoMessage() {}

func (x *CreateNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNicRequest.ProtoReflect.Descriptor instead.
func (*CreateNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{53}
}

func (x *CreateNicRequest) GetNic() *proto1.Nic {
	if x != nil {
		return x.Nic
	}
	return nil
}

func (x *CreateNicRequest) GetNicId() string {
	if x != nil {
		return x.NicId
	}
	return ""
}

func (x *CreateNicRequest) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

type UpdateNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nic to update.
	Nic *proto1.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Refers to the machine to associate this nic.
	// When it is empty, nic will associated with the same machine
	// and we dont update association between machine and nic.
	Machine string `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *UpdateNicRequest) Reset() {
	*x = UpdateNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNicRequest) ProtoMessage() {}

func (x *UpdateNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNicRequest.ProtoReflect.Descriptor instead.
func (*UpdateNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{54}
}

func (x *UpdateNicRequest) GetNic() *proto1.Nic {
	if x != nil {
		return x.Nic
	}
	return nil
}

func (x *UpdateNicRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNicRequest) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

type GetNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the nic to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNicRequest) Reset() {
	*x = GetNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNicRequest) ProtoMessage() {}

func (x *GetNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNicRequest.ProtoReflect.Descriptor instead.
func (*GetNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{55}
}

func (x *GetNicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListNicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of nics to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 nics will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListNics` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListNics` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNicsRequest) Reset() {
	*x = ListNicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNicsRequest) ProtoMessage() {}

func (x *ListNicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNicsRequest.ProtoReflect.Descriptor instead.
func (*ListNicsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{56}
}

func (x *ListNicsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNicsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nics from datastore.
	Nics []*proto1.Nic `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListNicsResponse) Reset() {
	*x = ListNicsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNicsResponse) ProtoMessage() {}

func (x *ListNicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNicsResponse.ProtoReflect.Descriptor instead.
func (*ListNicsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{57}
}

func (x *ListNicsResponse) GetNics() []*proto1.Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *ListNicsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteNicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Nic to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteNicRequest) Reset() {
	*x = DeleteNicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNicRequest) ProtoMessage() {}

func (x *DeleteNicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNicRequest.ProtoReflect.Descriptor instead.
func (*DeleteNicRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{58}
}

func (x *DeleteNicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportNicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportNicsRequest_MachineDbSource
	//	*ImportNicsRequest_ConfigSource
	Source isImportNicsRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportNicsRequest) Reset() {
	*x = ImportNicsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportNicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportNicsRequest) ProtoMessage() {}

func (x *ImportNicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportNicsRequest.ProtoReflect.Descriptor instead.
func (*ImportNicsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{59}
}

func (m *ImportNicsRequest) GetSource() isImportNicsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportNicsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportNicsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportNicsRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportNicsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportNicsRequest_Source interface {
	isImportNicsRequest_Source()
}

type ImportNicsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportNicsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportNicsRequest_MachineDbSource) isImportNicsRequest_Source() {}

func (*ImportNicsRequest_ConfigSource) isImportNicsRequest_Source() {}

type ImportDatacentersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportDatacentersRequest_MachineDbSource
	//	*ImportDatacentersRequest_ConfigSource
	Source isImportDatacentersRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportDatacentersRequest) Reset() {
	*x = ImportDatacentersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDatacentersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDatacentersRequest) ProtoMessage() {}

func (x *ImportDatacentersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDatacentersRequest.ProtoReflect.Descriptor instead.
func (*ImportDatacentersRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{60}
}

func (m *ImportDatacentersRequest) GetSource() isImportDatacentersRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportDatacentersRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportDatacentersRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportDatacentersRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportDatacentersRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportDatacentersRequest_Source interface {
	isImportDatacentersRequest_Source()
}

type ImportDatacentersRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportDatacentersRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportDatacentersRequest_MachineDbSource) isImportDatacentersRequest_Source() {}

func (*ImportDatacentersRequest_ConfigSource) isImportDatacentersRequest_Source() {}

// Contains the required information for creating a KVM represented in
// the database.
type CreateKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVM to create.
	KVM *proto1.KVM `protobuf:"bytes,1,opt,name=KVM,proto3" json:"KVM,omitempty"`
	// The ID to use for the KVM, which will become the final component of
	// the KVM's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	KVMId string `protobuf:"bytes,2,opt,name=KVM_id,json=KVMId,proto3" json:"KVM_id,omitempty"`
	// A KVM cannot be added without being associated with a Rack.
	// Refers to the rack to associate this KVM.
	Rack string `protobuf:"bytes,3,opt,name=rack,proto3" json:"rack,omitempty"`
}

func (x *CreateKVMRequest) Reset() {
	*x = CreateKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKVMRequest) ProtoMessage() {}

func (x *CreateKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKVMRequest.ProtoReflect.Descriptor instead.
func (*CreateKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{61}
}

func (x *CreateKVMRequest) GetKVM() *proto1.KVM {
	if x != nil {
		return x.KVM
	}
	return nil
}

func (x *CreateKVMRequest) GetKVMId() string {
	if x != nil {
		return x.KVMId
	}
	return ""
}

func (x *CreateKVMRequest) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

type UpdateKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVM to update.
	KVM *proto1.KVM `protobuf:"bytes,1,opt,name=KVM,proto3" json:"KVM,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Refers to the rack to associate this KVM.
	// When it is empty, KVM will be associated with the same rack
	// and we dont update association between rack and KVM.
	Rack string `protobuf:"bytes,3,opt,name=rack,proto3" json:"rack,omitempty"`
}

func (x *UpdateKVMRequest) Reset() {
	*x = UpdateKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKVMRequest) ProtoMessage() {}

func (x *UpdateKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKVMRequest.ProtoReflect.Descriptor instead.
func (*UpdateKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateKVMRequest) GetKVM() *proto1.KVM {
	if x != nil {
		return x.KVM
	}
	return nil
}

func (x *UpdateKVMRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateKVMRequest) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

type GetKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the KVM to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetKVMRequest) Reset() {
	*x = GetKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKVMRequest) ProtoMessage() {}

func (x *GetKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKVMRequest.ProtoReflect.Descriptor instead.
func (*GetKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{63}
}

func (x *GetKVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListKVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of KVMs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 KVMs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListKVMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListKVMs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListKVMsRequest) Reset() {
	*x = ListKVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKVMsRequest) ProtoMessage() {}

func (x *ListKVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKVMsRequest.ProtoReflect.Descriptor instead.
func (*ListKVMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{64}
}

func (x *ListKVMsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKVMsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListKVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KVMs from datastore.
	KVMs []*proto1.KVM `protobuf:"bytes,1,rep,name=KVMs,proto3" json:"KVMs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListKVMsResponse) Reset() {
	*x = ListKVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKVMsResponse) ProtoMessage() {}

func (x *ListKVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKVMsResponse.ProtoReflect.Descriptor instead.
func (*ListKVMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{65}
}

func (x *ListKVMsResponse) GetKVMs() []*proto1.KVM {
	if x != nil {
		return x.KVMs
	}
	return nil
}

func (x *ListKVMsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteKVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the KVM to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteKVMRequest) Reset() {
	*x = DeleteKVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKVMRequest) ProtoMessage() {}

func (x *DeleteKVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKVMRequest.ProtoReflect.Descriptor instead.
func (*DeleteKVMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteKVMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a RPM represented in
// the database.
type CreateRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RPM to create.
	RPM *proto1.RPM `protobuf:"bytes,1,opt,name=RPM,proto3" json:"RPM,omitempty"`
	// The ID to use for the RPM, which will become the final component of
	// the RPM's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RPMId string `protobuf:"bytes,2,opt,name=RPM_id,json=RPMId,proto3" json:"RPM_id,omitempty"`
}

func (x *CreateRPMRequest) Reset() {
	*x = CreateRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRPMRequest) ProtoMessage() {}

func (x *CreateRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRPMRequest.ProtoReflect.Descriptor instead.
func (*CreateRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{67}
}

func (x *CreateRPMRequest) GetRPM() *proto1.RPM {
	if x != nil {
		return x.RPM
	}
	return nil
}

func (x *CreateRPMRequest) GetRPMId() string {
	if x != nil {
		return x.RPMId
	}
	return ""
}

type UpdateRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RPM to update.
	RPM *proto1.RPM `protobuf:"bytes,1,opt,name=RPM,proto3" json:"RPM,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRPMRequest) Reset() {
	*x = UpdateRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRPMRequest) ProtoMessage() {}

func (x *UpdateRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRPMRequest.ProtoReflect.Descriptor instead.
func (*UpdateRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateRPMRequest) GetRPM() *proto1.RPM {
	if x != nil {
		return x.RPM
	}
	return nil
}

func (x *UpdateRPMRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RPM to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRPMRequest) Reset() {
	*x = GetRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRPMRequest) ProtoMessage() {}

func (x *GetRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRPMRequest.ProtoReflect.Descriptor instead.
func (*GetRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{69}
}

func (x *GetRPMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRPMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of RPMs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 RPMs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRPMs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRPMs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRPMsRequest) Reset() {
	*x = ListRPMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRPMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRPMsRequest) ProtoMessage() {}

func (x *ListRPMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRPMsRequest.ProtoReflect.Descriptor instead.
func (*ListRPMsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{70}
}

func (x *ListRPMsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRPMsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRPMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RPMs from datastore.
	RPMs []*proto1.RPM `protobuf:"bytes,1,rep,name=RPMs,proto3" json:"RPMs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRPMsResponse) Reset() {
	*x = ListRPMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRPMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRPMsResponse) ProtoMessage() {}

func (x *ListRPMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRPMsResponse.ProtoReflect.Descriptor instead.
func (*ListRPMsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{71}
}

func (x *ListRPMsResponse) GetRPMs() []*proto1.RPM {
	if x != nil {
		return x.RPMs
	}
	return nil
}

func (x *ListRPMsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteRPMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RPM to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteRPMRequest) Reset() {
	*x = DeleteRPMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRPMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRPMRequest) ProtoMessage() {}

func (x *DeleteRPMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRPMRequest.ProtoReflect.Descriptor instead.
func (*DeleteRPMRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteRPMRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Drac represented in
// the database.
type CreateDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The drac to create.
	Drac *proto1.Drac `protobuf:"bytes,1,opt,name=drac,proto3" json:"drac,omitempty"`
	// The ID to use for the Drac, which will become the final component of
	// the Drac's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	DracId string `protobuf:"bytes,2,opt,name=drac_id,json=dracId,proto3" json:"drac_id,omitempty"`
	// A drac cannot be added without being associated with a Machine.
	// Refers to the machine to associate this drac.
	Machine string `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *CreateDracRequest) Reset() {
	*x = CreateDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDracRequest) ProtoMessage() {}

func (x *CreateDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDracRequest.ProtoReflect.Descriptor instead.
func (*CreateDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{73}
}

func (x *CreateDracRequest) GetDrac() *proto1.Drac {
	if x != nil {
		return x.Drac
	}
	return nil
}

func (x *CreateDracRequest) GetDracId() string {
	if x != nil {
		return x.DracId
	}
	return ""
}

func (x *CreateDracRequest) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

type UpdateDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The drac to update.
	Drac *proto1.Drac `protobuf:"bytes,1,opt,name=drac,proto3" json:"drac,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Refers to the machine to associate this drac.
	// When it is empty, drac will associated with the same machine
	// and we dont update association between machine and drac.
	Machine string `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *UpdateDracRequest) Reset() {
	*x = UpdateDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDracRequest) ProtoMessage() {}

func (x *UpdateDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDracRequest.ProtoReflect.Descriptor instead.
func (*UpdateDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateDracRequest) GetDrac() *proto1.Drac {
	if x != nil {
		return x.Drac
	}
	return nil
}

func (x *UpdateDracRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDracRequest) GetMachine() string {
	if x != nil {
		return x.Machine
	}
	return ""
}

type GetDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the drac to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDracRequest) Reset() {
	*x = GetDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDracRequest) ProtoMessage() {}

func (x *GetDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDracRequest.ProtoReflect.Descriptor instead.
func (*GetDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{75}
}

func (x *GetDracRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDracsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of dracs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 dracs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDracs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListDracs` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListDracsRequest) Reset() {
	*x = ListDracsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDracsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDracsRequest) ProtoMessage() {}

func (x *ListDracsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDracsRequest.ProtoReflect.Descriptor instead.
func (*ListDracsRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{76}
}

func (x *ListDracsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDracsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListDracsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dracs from datastore.
	Dracs []*proto1.Drac `protobuf:"bytes,1,rep,name=dracs,proto3" json:"dracs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDracsResponse) Reset() {
	*x = ListDracsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDracsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDracsResponse) ProtoMessage() {}

func (x *ListDracsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDracsResponse.ProtoReflect.Descriptor instead.
func (*ListDracsResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{77}
}

func (x *ListDracsResponse) GetDracs() []*proto1.Drac {
	if x != nil {
		return x.Dracs
	}
	return nil
}

func (x *ListDracsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteDracRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Drac to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDracRequest) Reset() {
	*x = DeleteDracRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDracRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDracRequest) ProtoMessage() {}

func (x *DeleteDracRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDracRequest.ProtoReflect.Descriptor instead.
func (*DeleteDracRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{78}
}

func (x *DeleteDracRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Switch represented in
// the database.
type CreateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switch to create.
	Switch *proto1.Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// The ID to use for the Switch, which will become the final component of
	// the Switch's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	SwitchId string `protobuf:"bytes,2,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	// A switch cannot be added without being associated with a Rack.
	// Refers to the rack to associate this switch.
	Rack string `protobuf:"bytes,3,opt,name=rack,proto3" json:"rack,omitempty"`
}

func (x *CreateSwitchRequest) Reset() {
	*x = CreateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwitchRequest) ProtoMessage() {}

func (x *CreateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwitchRequest.ProtoReflect.Descriptor instead.
func (*CreateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{79}
}

func (x *CreateSwitchRequest) GetSwitch() *proto1.Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *CreateSwitchRequest) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

func (x *CreateSwitchRequest) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

type UpdateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switch to update.
	Switch *proto1.Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Refers to the rack to associate this switch.
	// When it is empty, switch will be associated with the same rack
	// and we dont update association between rack and switch.
	Rack string `protobuf:"bytes,3,opt,name=rack,proto3" json:"rack,omitempty"`
}

func (x *UpdateSwitchRequest) Reset() {
	*x = UpdateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSwitchRequest) ProtoMessage() {}

func (x *UpdateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSwitchRequest.ProtoReflect.Descriptor instead.
func (*UpdateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{80}
}

func (x *UpdateSwitchRequest) GetSwitch() *proto1.Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *UpdateSwitchRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateSwitchRequest) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

type GetSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the switch to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSwitchRequest) Reset() {
	*x = GetSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchRequest) ProtoMessage() {}

func (x *GetSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchRequest.ProtoReflect.Descriptor instead.
func (*GetSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{81}
}

func (x *GetSwitchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListSwitchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of switches to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 switches will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSwitches` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListSwitches` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSwitchesRequest) Reset() {
	*x = ListSwitchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwitchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwitchesRequest) ProtoMessage() {}

func (x *ListSwitchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwitchesRequest.ProtoReflect.Descriptor instead.
func (*ListSwitchesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{82}
}

func (x *ListSwitchesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSwitchesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSwitchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The switches from datastore.
	Switches []*proto1.Switch `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSwitchesResponse) Reset() {
	*x = ListSwitchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwitchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwitchesResponse) ProtoMessage() {}

func (x *ListSwitchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwitchesResponse.ProtoReflect.Descriptor instead.
func (*ListSwitchesResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{83}
}

func (x *ListSwitchesResponse) GetSwitches() []*proto1.Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

func (x *ListSwitchesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Switch to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSwitchRequest) Reset() {
	*x = DeleteSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSwitchRequest) ProtoMessage() {}

func (x *DeleteSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSwitchRequest.ProtoReflect.Descriptor instead.
func (*DeleteSwitchRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteSwitchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Contains the required information for creating a Vlan represented in
// the database.
type CreateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan to create.
	Vlan *proto1.Vlan `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The ID to use for the Vlan, which will become the final component of
	// the Vlan's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	VlanId string `protobuf:"bytes,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *CreateVlanRequest) Reset() {
	*x = CreateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanRequest) ProtoMessage() {}

func (x *CreateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanRequest.ProtoReflect.Descriptor instead.
func (*CreateVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{85}
}

func (x *CreateVlanRequest) GetVlan() *proto1.Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *CreateVlanRequest) GetVlanId() string {
	if x != nil {
		return x.VlanId
	}
	return ""
}

type UpdateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlan to update.
	Vlan *proto1.Vlan `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateVlanRequest) Reset() {
	*x = UpdateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVlanRequest) ProtoMessage() {}

func (x *UpdateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateVlanRequest) GetVlan() *proto1.Vlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *UpdateVlanRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type GetVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the vlan to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVlanRequest) Reset() {
	*x = GetVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanRequest) ProtoMessage() {}

func (x *GetVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanRequest.ProtoReflect.Descriptor instead.
func (*GetVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{87}
}

func (x *GetVlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of vlans to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 vlans will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListVlans` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListVlans` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListVlansRequest) Reset() {
	*x = ListVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVlansRequest) ProtoMessage() {}

func (x *ListVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVlansRequest.ProtoReflect.Descriptor instead.
func (*ListVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{88}
}

func (x *ListVlansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVlansRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListVlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vlans from datastore.
	Vlans []*proto1.Vlan `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVlansResponse) Reset() {
	*x = ListVlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVlansResponse) ProtoMessage() {}

func (x *ListVlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVlansResponse.ProtoReflect.Descriptor instead.
func (*ListVlansResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{89}
}

func (x *ListVlansResponse) GetVlans() []*proto1.Vlan {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *ListVlansResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Vlan to delete
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteVlanRequest) Reset() {
	*x = DeleteVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVlanRequest) ProtoMessage() {}

func (x *DeleteVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteVlanRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteVlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ImportVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportVlansRequest_MachineDbSource
	//	*ImportVlansRequest_ConfigSource
	Source isImportVlansRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportVlansRequest) Reset() {
	*x = ImportVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportVlansRequest) ProtoMessage() {}

func (x *ImportVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportVlansRequest.ProtoReflect.Descriptor instead.
func (*ImportVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{91}
}

func (m *ImportVlansRequest) GetSource() isImportVlansRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportVlansRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportVlansRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportVlansRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportVlansRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportVlansRequest_Source interface {
	isImportVlansRequest_Source()
}

type ImportVlansRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportVlansRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportVlansRequest_MachineDbSource) isImportVlansRequest_Source() {}

func (*ImportVlansRequest_ConfigSource) isImportVlansRequest_Source() {}

type ImportOSVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportOSVlansRequest_MachineDbSource
	//	*ImportOSVlansRequest_ConfigSource
	Source isImportOSVlansRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportOSVlansRequest) Reset() {
	*x = ImportOSVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOSVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOSVlansRequest) ProtoMessage() {}

func (x *ImportOSVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOSVlansRequest.ProtoReflect.Descriptor instead.
func (*ImportOSVlansRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{92}
}

func (m *ImportOSVlansRequest) GetSource() isImportOSVlansRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportOSVlansRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportOSVlansRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportOSVlansRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportOSVlansRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportOSVlansRequest_Source interface {
	isImportOSVlansRequest_Source()
}

type ImportOSVlansRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportOSVlansRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportOSVlansRequest_MachineDbSource) isImportOSVlansRequest_Source() {}

func (*ImportOSVlansRequest_ConfigSource) isImportOSVlansRequest_Source() {}

type ImportStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImportStatesRequest_MachineDbSource
	//	*ImportStatesRequest_ConfigSource
	Source isImportStatesRequest_Source `protobuf_oneof:"source"`
}

func (x *ImportStatesRequest) Reset() {
	*x = ImportStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportStatesRequest) ProtoMessage() {}

func (x *ImportStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportStatesRequest.ProtoReflect.Descriptor instead.
func (*ImportStatesRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{93}
}

func (m *ImportStatesRequest) GetSource() isImportStatesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportStatesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := x.GetSource().(*ImportStatesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (x *ImportStatesRequest) GetConfigSource() *ConfigSource {
	if x, ok := x.GetSource().(*ImportStatesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

type isImportStatesRequest_Source interface {
	isImportStatesRequest_Source()
}

type ImportStatesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportStatesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportStatesRequest_MachineDbSource) isImportStatesRequest_Source() {}

func (*ImportStatesRequest_ConfigSource) isImportStatesRequest_Source() {}

type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the resource to retrieve the state.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{94}
}

func (x *GetStateRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type UpdateStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state record to update.
	State *proto1.StateRecord `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// The list of fields to be updated.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateStateRequest) Reset() {
	*x = UpdateStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateRequest) ProtoMessage() {}

func (x *UpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{95}
}

func (x *UpdateStateRequest) GetState() *proto1.StateRecord {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UpdateStateRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type MachineRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The machine to create.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The nics to create.
	Nics []*proto1.Nic `protobuf:"bytes,2,rep,name=nics,proto3" json:"nics,omitempty"`
	// The drac to create.
	Drac *proto1.Drac `protobuf:"bytes,3,opt,name=drac,proto3" json:"drac,omitempty"`
}

func (x *MachineRegistrationRequest) Reset() {
	*x = MachineRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineRegistrationRequest) ProtoMessage() {}

func (x *MachineRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineRegistrationRequest.ProtoReflect.Descriptor instead.
func (*MachineRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{96}
}

func (x *MachineRegistrationRequest) GetMachine() *proto1.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *MachineRegistrationRequest) GetNics() []*proto1.Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *MachineRegistrationRequest) GetDrac() *proto1.Drac {
	if x != nil {
		return x.Drac
	}
	return nil
}

type MachineRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Create machine
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// Created nics
	Nics []*proto1.Nic `protobuf:"bytes,2,rep,name=nics,proto3" json:"nics,omitempty"`
	// Created drac
	Drac *proto1.Drac `protobuf:"bytes,3,opt,name=drac,proto3" json:"drac,omitempty"`
}

func (x *MachineRegistrationResponse) Reset() {
	*x = MachineRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineRegistrationResponse) ProtoMessage() {}

func (x *MachineRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineRegistrationResponse.ProtoReflect.Descriptor instead.
func (*MachineRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{97}
}

func (x *MachineRegistrationResponse) GetMachine() *proto1.Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *MachineRegistrationResponse) GetNics() []*proto1.Nic {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *MachineRegistrationResponse) GetDrac() *proto1.Drac {
	if x != nil {
		return x.Drac
	}
	return nil
}

type RackRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rack to create.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The switches to create.
	Switches []*proto1.Switch `protobuf:"bytes,2,rep,name=switches,proto3" json:"switches,omitempty"`
	// The kvms to create.
	Kvms []*proto1.KVM `protobuf:"bytes,3,rep,name=kvms,proto3" json:"kvms,omitempty"`
	// The rpms to create.
	Rpms []*proto1.RPM `protobuf:"bytes,4,rep,name=rpms,proto3" json:"rpms,omitempty"`
}

func (x *RackRegistrationRequest) Reset() {
	*x = RackRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackRegistrationRequest) ProtoMessage() {}

func (x *RackRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackRegistrationRequest.ProtoReflect.Descriptor instead.
func (*RackRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{98}
}

func (x *RackRegistrationRequest) GetRack() *proto1.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

func (x *RackRegistrationRequest) GetSwitches() []*proto1.Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

func (x *RackRegistrationRequest) GetKvms() []*proto1.KVM {
	if x != nil {
		return x.Kvms
	}
	return nil
}

func (x *RackRegistrationRequest) GetRpms() []*proto1.RPM {
	if x != nil {
		return x.Rpms
	}
	return nil
}

type RackRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Create rack
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// Created switches
	Switches []*proto1.Switch `protobuf:"bytes,2,rep,name=switches,proto3" json:"switches,omitempty"`
	// Created kvms
	Kvms []*proto1.KVM `protobuf:"bytes,3,rep,name=kvms,proto3" json:"kvms,omitempty"`
	// Created rpms
	Rpms []*proto1.RPM `protobuf:"bytes,4,rep,name=rpms,proto3" json:"rpms,omitempty"`
}

func (x *RackRegistrationResponse) Reset() {
	*x = RackRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackRegistrationResponse) ProtoMessage() {}

func (x *RackRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackRegistrationResponse.ProtoReflect.Descriptor instead.
func (*RackRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP(), []int{99}
}

func (x *RackRegistrationResponse) GetRack() *proto1.Rack {
	if x != nil {
		return x.Rack
	}
	return nil
}

func (x *RackRegistrationResponse) GetSwitches() []*proto1.Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

func (x *RackRegistrationResponse) GetKvms() []*proto1.KVM {
	if x != nil {
		return x.Kvms
	}
	return nil
}

func (x *RackRegistrationResponse) GetRpms() []*proto1.RPM {
	if x != nil {
		return x.Rpms
	}
	return nil
}

var File_infra_unifiedfleet_api_v1_rpc_fleet_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc = []byte{
	0x0a, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x65,
	0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x33, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6c, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x67, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x0f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x0f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31,
	0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x45, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc0, 0x01,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x22, 0xc6, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x71, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x36,
	0x0a, 0x34, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x1f,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x14, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x36, 0x0a, 0x34,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x10,
	0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x61,
	0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a,
	0x10, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x33, 0x0a, 0x31, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x72,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e,
	0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x33, 0x0a, 0x31, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x78,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x5c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x01,
	0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x5b,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xd8, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x30, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x0b, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x62, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x2d, 0x0a, 0x2b, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x78, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b,
	0x4c, 0x53, 0x45, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72,
	0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x59, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7e, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52,
	0x08, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x5c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a,
	0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xac, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69,
	0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0xcf,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69, 0x63,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70,
	0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x69, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xca,
	0x01, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x03, 0x4b, 0x56, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x4b, 0x56, 0x4d, 0x12, 0x15, 0x0a, 0x06, 0x4b, 0x56, 0x4d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x56, 0x4d, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41,
	0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x61, 0x63,
	0x6b, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x4b, 0x56, 0x4d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x56, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x4b, 0x56, 0x4d, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x61,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x4b, 0x56, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4d, 0x52, 0x04,
	0x4b, 0x56, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x52, 0x50, 0x4d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x50, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x52, 0x50, 0x4d, 0x12, 0x15, 0x0a,
	0x06, 0x52, 0x50, 0x4d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52,
	0x50, 0x4d, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x52, 0x50, 0x4d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x50, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x52, 0x50, 0x4d,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x51, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x50, 0x4d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x6e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x52, 0x50, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x50,
	0x4d, 0x52, 0x04, 0x52, 0x50, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x50, 0x4d, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x64,
	0x72, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x64, 0x72, 0x61, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x63, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x72, 0x61, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x61, 0x63, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x72,
	0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x52, 0x05, 0x64, 0x72, 0x61, 0x63,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x72, 0x61, 0x63, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3e,
	0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xfa, 0x41,
	0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x57,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x27, 0x0a, 0x25, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x72, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x27, 0x0a, 0x25,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x12,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44,
	0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x13,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x44, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69, 0x63, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x72, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x52, 0x04, 0x64, 0x72,
	0x61, 0x63, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69, 0x63, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x72, 0x61, 0x63, 0x52, 0x04, 0x64, 0x72, 0x61, 0x63, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x52, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x3d, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x04, 0x6b, 0x76, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x6b, 0x76,
	0x6d, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x70, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x50, 0x4d,
	0x52, 0x04, 0x72, 0x70, 0x6d, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x18, 0x52, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x63, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x76, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x56, 0x4d, 0x52, 0x04, 0x6b, 0x76, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x72,
	0x70, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x50, 0x4d, 0x52, 0x04, 0x72, 0x70, 0x6d, 0x73, 0x32,
	0x9e, 0x3e, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x77,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x71, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x31, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x5c, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x54, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x12, 0x59, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x12,
	0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63,
	0x6b, 0x12, 0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x29,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x30, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x12, 0x6b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53,
	0x45, 0x12, 0x65, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x12, 0x74, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x2f, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c,
	0x53, 0x45, 0x12, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x11,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45,
	0x73, 0x12, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x12,
	0x33, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53,
	0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x62, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2d, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x63, 0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45,
	0x12, 0x5c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2a,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x63, 0x6b,
	0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x6b,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x73, 0x12, 0x2c,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x6b, 0x4c,
	0x53, 0x45, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63, 0x6b, 0x4c, 0x53, 0x45, 0x12, 0x2d, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x63,
	0x6b, 0x4c, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63,
	0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69, 0x63, 0x12, 0x56, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x12, 0x26, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x69, 0x63, 0x12, 0x5f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63,
	0x73, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x69, 0x63, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x56, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x12, 0x29, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4d, 0x12, 0x56, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x56, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x56, 0x4d,
	0x12, 0x50, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x56, 0x4d, 0x12, 0x26, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b,
	0x56, 0x4d, 0x12, 0x5f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x12, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x4d,
	0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d,
	0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x50, 0x4d, 0x12, 0x56, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x50, 0x4d, 0x12, 0x50, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x12, 0x26, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x50, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x50, 0x4d, 0x12, 0x5f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d,
	0x73, 0x12, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x50, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50, 0x4d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x50, 0x4d, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x63, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61,
	0x63, 0x12, 0x59, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x12,
	0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x63, 0x12, 0x53, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x12, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61,
	0x63, 0x12, 0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x12, 0x29,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x63, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x59, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x6b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x2c, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x59, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x53, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x29, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x53, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x53, 0x56, 0x6c, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x25, 0x5a, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70,
	0x63, 0x3b, 0x75, 0x66, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData = file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes = make([]protoimpl.MessageInfo, 100)
var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_goTypes = []interface{}{
	(*CreateChromePlatformRequest)(nil),      // 0: unifiedfleet.api.v1.rpc.CreateChromePlatformRequest
	(*UpdateChromePlatformRequest)(nil),      // 1: unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest
	(*GetChromePlatformRequest)(nil),         // 2: unifiedfleet.api.v1.rpc.GetChromePlatformRequest
	(*ListChromePlatformsRequest)(nil),       // 3: unifiedfleet.api.v1.rpc.ListChromePlatformsRequest
	(*ListChromePlatformsResponse)(nil),      // 4: unifiedfleet.api.v1.rpc.ListChromePlatformsResponse
	(*DeleteChromePlatformRequest)(nil),      // 5: unifiedfleet.api.v1.rpc.DeleteChromePlatformRequest
	(*ImportChromePlatformsRequest)(nil),     // 6: unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest
	(*ImportChromePlatformsResponse)(nil),    // 7: unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse
	(*ChromePlatformResult)(nil),             // 8: unifiedfleet.api.v1.rpc.ChromePlatformResult
	(*ImportOSVersionsRequest)(nil),          // 9: unifiedfleet.api.v1.rpc.ImportOSVersionsRequest
	(*ListOSVersionsRequest)(nil),            // 10: unifiedfleet.api.v1.rpc.ListOSVersionsRequest
	(*ListOSVersionsResponse)(nil),           // 11: unifiedfleet.api.v1.rpc.ListOSVersionsResponse
	(*CreateMachineLSEPrototypeRequest)(nil), // 12: unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest
	(*UpdateMachineLSEPrototypeRequest)(nil), // 13: unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest
	(*GetMachineLSEPrototypeRequest)(nil),    // 14: unifiedfleet.api.v1.rpc.GetMachineLSEPrototypeRequest
	(*ListMachineLSEPrototypesRequest)(nil),  // 15: unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesRequest
	(*ListMachineLSEPrototypesResponse)(nil), // 16: unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse
	(*DeleteMachineLSEPrototypeRequest)(nil), // 17: unifiedfleet.api.v1.rpc.DeleteMachineLSEPrototypeRequest
	(*CreateRackLSEPrototypeRequest)(nil),    // 18: unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest
	(*UpdateRackLSEPrototypeRequest)(nil),    // 19: unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest
	(*GetRackLSEPrototypeRequest)(nil),       // 20: unifiedfleet.api.v1.rpc.GetRackLSEPrototypeRequest
	(*ListRackLSEPrototypesRequest)(nil),     // 21: unifiedfleet.api.v1.rpc.ListRackLSEPrototypesRequest
	(*ListRackLSEPrototypesResponse)(nil),    // 22: unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse
	(*DeleteRackLSEPrototypeRequest)(nil),    // 23: unifiedfleet.api.v1.rpc.DeleteRackLSEPrototypeRequest
	(*CreateMachineRequest)(nil),             // 24: unifiedfleet.api.v1.rpc.CreateMachineRequest
	(*UpdateMachineRequest)(nil),             // 25: unifiedfleet.api.v1.rpc.UpdateMachineRequest
	(*GetMachineRequest)(nil),                // 26: unifiedfleet.api.v1.rpc.GetMachineRequest
	(*ListMachinesRequest)(nil),              // 27: unifiedfleet.api.v1.rpc.ListMachinesRequest
	(*ListMachinesResponse)(nil),             // 28: unifiedfleet.api.v1.rpc.ListMachinesResponse
	(*DeleteMachineRequest)(nil),             // 29: unifiedfleet.api.v1.rpc.DeleteMachineRequest
	(*ImportMachinesRequest)(nil),            // 30: unifiedfleet.api.v1.rpc.ImportMachinesRequest
	(*MachineDBSource)(nil),                  // 31: unifiedfleet.api.v1.rpc.MachineDBSource
	(*ConfigSource)(nil),                     // 32: unifiedfleet.api.v1.rpc.ConfigSource
	(*CreateRackRequest)(nil),                // 33: unifiedfleet.api.v1.rpc.CreateRackRequest
	(*UpdateRackRequest)(nil),                // 34: unifiedfleet.api.v1.rpc.UpdateRackRequest
	(*GetRackRequest)(nil),                   // 35: unifiedfleet.api.v1.rpc.GetRackRequest
	(*ListRacksRequest)(nil),                 // 36: unifiedfleet.api.v1.rpc.ListRacksRequest
	(*ListRacksResponse)(nil),                // 37: unifiedfleet.api.v1.rpc.ListRacksResponse
	(*DeleteRackRequest)(nil),                // 38: unifiedfleet.api.v1.rpc.DeleteRackRequest
	(*CreateMachineLSERequest)(nil),          // 39: unifiedfleet.api.v1.rpc.CreateMachineLSERequest
	(*UpdateMachineLSERequest)(nil),          // 40: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest
	(*GetMachineLSERequest)(nil),             // 41: unifiedfleet.api.v1.rpc.GetMachineLSERequest
	(*ListMachineLSEsRequest)(nil),           // 42: unifiedfleet.api.v1.rpc.ListMachineLSEsRequest
	(*ListMachineLSEsResponse)(nil),          // 43: unifiedfleet.api.v1.rpc.ListMachineLSEsResponse
	(*DeleteMachineLSERequest)(nil),          // 44: unifiedfleet.api.v1.rpc.DeleteMachineLSERequest
	(*ImportMachineLSEsRequest)(nil),         // 45: unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest
	(*ImportOSMachineLSEsRequest)(nil),       // 46: unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest
	(*CreateRackLSERequest)(nil),             // 47: unifiedfleet.api.v1.rpc.CreateRackLSERequest
	(*UpdateRackLSERequest)(nil),             // 48: unifiedfleet.api.v1.rpc.UpdateRackLSERequest
	(*GetRackLSERequest)(nil),                // 49: unifiedfleet.api.v1.rpc.GetRackLSERequest
	(*ListRackLSEsRequest)(nil),              // 50: unifiedfleet.api.v1.rpc.ListRackLSEsRequest
	(*ListRackLSEsResponse)(nil),             // 51: unifiedfleet.api.v1.rpc.ListRackLSEsResponse
	(*DeleteRackLSERequest)(nil),             // 52: unifiedfleet.api.v1.rpc.DeleteRackLSERequest
	(*CreateNicRequest)(nil),                 // 53: unifiedfleet.api.v1.rpc.CreateNicRequest
	(*UpdateNicRequest)(nil),                 // 54: unifiedfleet.api.v1.rpc.UpdateNicRequest
	(*GetNicRequest)(nil),                    // 55: unifiedfleet.api.v1.rpc.GetNicRequest
	(*ListNicsRequest)(nil),                  // 56: unifiedfleet.api.v1.rpc.ListNicsRequest
	(*ListNicsResponse)(nil),                 // 57: unifiedfleet.api.v1.rpc.ListNicsResponse
	(*DeleteNicRequest)(nil),                 // 58: unifiedfleet.api.v1.rpc.DeleteNicRequest
	(*ImportNicsRequest)(nil),                // 59: unifiedfleet.api.v1.rpc.ImportNicsRequest
	(*ImportDatacentersRequest)(nil),         // 60: unifiedfleet.api.v1.rpc.ImportDatacentersRequest
	(*CreateKVMRequest)(nil),                 // 61: unifiedfleet.api.v1.rpc.CreateKVMRequest
	(*UpdateKVMRequest)(nil),                 // 62: unifiedfleet.api.v1.rpc.UpdateKVMRequest
	(*GetKVMRequest)(nil),                    // 63: unifiedfleet.api.v1.rpc.GetKVMRequest
	(*ListKVMsRequest)(nil),                  // 64: unifiedfleet.api.v1.rpc.ListKVMsRequest
	(*ListKVMsResponse)(nil),                 // 65: unifiedfleet.api.v1.rpc.ListKVMsResponse
	(*DeleteKVMRequest)(nil),                 // 66: unifiedfleet.api.v1.rpc.DeleteKVMRequest
	(*CreateRPMRequest)(nil),                 // 67: unifiedfleet.api.v1.rpc.CreateRPMRequest
	(*UpdateRPMRequest)(nil),                 // 68: unifiedfleet.api.v1.rpc.UpdateRPMRequest
	(*GetRPMRequest)(nil),                    // 69: unifiedfleet.api.v1.rpc.GetRPMRequest
	(*ListRPMsRequest)(nil),                  // 70: unifiedfleet.api.v1.rpc.ListRPMsRequest
	(*ListRPMsResponse)(nil),                 // 71: unifiedfleet.api.v1.rpc.ListRPMsResponse
	(*DeleteRPMRequest)(nil),                 // 72: unifiedfleet.api.v1.rpc.DeleteRPMRequest
	(*CreateDracRequest)(nil),                // 73: unifiedfleet.api.v1.rpc.CreateDracRequest
	(*UpdateDracRequest)(nil),                // 74: unifiedfleet.api.v1.rpc.UpdateDracRequest
	(*GetDracRequest)(nil),                   // 75: unifiedfleet.api.v1.rpc.GetDracRequest
	(*ListDracsRequest)(nil),                 // 76: unifiedfleet.api.v1.rpc.ListDracsRequest
	(*ListDracsResponse)(nil),                // 77: unifiedfleet.api.v1.rpc.ListDracsResponse
	(*DeleteDracRequest)(nil),                // 78: unifiedfleet.api.v1.rpc.DeleteDracRequest
	(*CreateSwitchRequest)(nil),              // 79: unifiedfleet.api.v1.rpc.CreateSwitchRequest
	(*UpdateSwitchRequest)(nil),              // 80: unifiedfleet.api.v1.rpc.UpdateSwitchRequest
	(*GetSwitchRequest)(nil),                 // 81: unifiedfleet.api.v1.rpc.GetSwitchRequest
	(*ListSwitchesRequest)(nil),              // 82: unifiedfleet.api.v1.rpc.ListSwitchesRequest
	(*ListSwitchesResponse)(nil),             // 83: unifiedfleet.api.v1.rpc.ListSwitchesResponse
	(*DeleteSwitchRequest)(nil),              // 84: unifiedfleet.api.v1.rpc.DeleteSwitchRequest
	(*CreateVlanRequest)(nil),                // 85: unifiedfleet.api.v1.rpc.CreateVlanRequest
	(*UpdateVlanRequest)(nil),                // 86: unifiedfleet.api.v1.rpc.UpdateVlanRequest
	(*GetVlanRequest)(nil),                   // 87: unifiedfleet.api.v1.rpc.GetVlanRequest
	(*ListVlansRequest)(nil),                 // 88: unifiedfleet.api.v1.rpc.ListVlansRequest
	(*ListVlansResponse)(nil),                // 89: unifiedfleet.api.v1.rpc.ListVlansResponse
	(*DeleteVlanRequest)(nil),                // 90: unifiedfleet.api.v1.rpc.DeleteVlanRequest
	(*ImportVlansRequest)(nil),               // 91: unifiedfleet.api.v1.rpc.ImportVlansRequest
	(*ImportOSVlansRequest)(nil),             // 92: unifiedfleet.api.v1.rpc.ImportOSVlansRequest
	(*ImportStatesRequest)(nil),              // 93: unifiedfleet.api.v1.rpc.ImportStatesRequest
	(*GetStateRequest)(nil),                  // 94: unifiedfleet.api.v1.rpc.GetStateRequest
	(*UpdateStateRequest)(nil),               // 95: unifiedfleet.api.v1.rpc.UpdateStateRequest
	(*MachineRegistrationRequest)(nil),       // 96: unifiedfleet.api.v1.rpc.MachineRegistrationRequest
	(*MachineRegistrationResponse)(nil),      // 97: unifiedfleet.api.v1.rpc.MachineRegistrationResponse
	(*RackRegistrationRequest)(nil),          // 98: unifiedfleet.api.v1.rpc.RackRegistrationRequest
	(*RackRegistrationResponse)(nil),         // 99: unifiedfleet.api.v1.rpc.RackRegistrationResponse
	(*proto1.ChromePlatform)(nil),            // 100: unifiedfleet.api.v1.proto.ChromePlatform
	(*field_mask.FieldMask)(nil),             // 101: google.protobuf.FieldMask
	(*proto1.OSVersion)(nil),                 // 102: unifiedfleet.api.v1.proto.OSVersion
	(*proto1.MachineLSEPrototype)(nil),       // 103: unifiedfleet.api.v1.proto.MachineLSEPrototype
	(*proto1.RackLSEPrototype)(nil),          // 104: unifiedfleet.api.v1.proto.RackLSEPrototype
	(*proto1.Machine)(nil),                   // 105: unifiedfleet.api.v1.proto.Machine
	(*proto1.Rack)(nil),                      // 106: unifiedfleet.api.v1.proto.Rack
	(*proto1.MachineLSE)(nil),                // 107: unifiedfleet.api.v1.proto.MachineLSE
	(*proto1.RackLSE)(nil),                   // 108: unifiedfleet.api.v1.proto.RackLSE
	(*proto1.Nic)(nil),                       // 109: unifiedfleet.api.v1.proto.Nic
	(*proto1.KVM)(nil),                       // 110: unifiedfleet.api.v1.proto.KVM
	(*proto1.RPM)(nil),                       // 111: unifiedfleet.api.v1.proto.RPM
	(*proto1.Drac)(nil),                      // 112: unifiedfleet.api.v1.proto.Drac
	(*proto1.Switch)(nil),                    // 113: unifiedfleet.api.v1.proto.Switch
	(*proto1.Vlan)(nil),                      // 114: unifiedfleet.api.v1.proto.Vlan
	(*proto1.StateRecord)(nil),               // 115: unifiedfleet.api.v1.proto.StateRecord
	(*empty.Empty)(nil),                      // 116: google.protobuf.Empty
	(*status.Status)(nil),                    // 117: google.rpc.Status
}
var file_infra_unifiedfleet_api_v1_rpc_fleet_proto_depIdxs = []int32{
	100, // 0: unifiedfleet.api.v1.rpc.CreateChromePlatformRequest.chromePlatform:type_name -> unifiedfleet.api.v1.proto.ChromePlatform
	100, // 1: unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest.chromePlatform:type_name -> unifiedfleet.api.v1.proto.ChromePlatform
	101, // 2: unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest.update_mask:type_name -> google.protobuf.FieldMask
	100, // 3: unifiedfleet.api.v1.rpc.ListChromePlatformsResponse.chromePlatforms:type_name -> unifiedfleet.api.v1.proto.ChromePlatform
	31,  // 4: unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 5: unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	8,   // 6: unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse.passed:type_name -> unifiedfleet.api.v1.rpc.ChromePlatformResult
	8,   // 7: unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse.failed:type_name -> unifiedfleet.api.v1.rpc.ChromePlatformResult
	100, // 8: unifiedfleet.api.v1.rpc.ChromePlatformResult.platform:type_name -> unifiedfleet.api.v1.proto.ChromePlatform
	31,  // 9: unifiedfleet.api.v1.rpc.ImportOSVersionsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 10: unifiedfleet.api.v1.rpc.ImportOSVersionsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	102, // 11: unifiedfleet.api.v1.rpc.ListOSVersionsResponse.os_version:type_name -> unifiedfleet.api.v1.proto.OSVersion
	103, // 12: unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest.machineLSEPrototype:type_name -> unifiedfleet.api.v1.proto.MachineLSEPrototype
	103, // 13: unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest.machineLSEPrototype:type_name -> unifiedfleet.api.v1.proto.MachineLSEPrototype
	101, // 14: unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest.update_mask:type_name -> google.protobuf.FieldMask
	103, // 15: unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse.machineLSEPrototypes:type_name -> unifiedfleet.api.v1.proto.MachineLSEPrototype
	104, // 16: unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest.rackLSEPrototype:type_name -> unifiedfleet.api.v1.proto.RackLSEPrototype
	104, // 17: unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest.rackLSEPrototype:type_name -> unifiedfleet.api.v1.proto.RackLSEPrototype
	101, // 18: unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest.update_mask:type_name -> google.protobuf.FieldMask
	104, // 19: unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse.rackLSEPrototypes:type_name -> unifiedfleet.api.v1.proto.RackLSEPrototype
	105, // 20: unifiedfleet.api.v1.rpc.CreateMachineRequest.machine:type_name -> unifiedfleet.api.v1.proto.Machine
	105, // 21: unifiedfleet.api.v1.rpc.UpdateMachineRequest.machine:type_name -> unifiedfleet.api.v1.proto.Machine
	101, // 22: unifiedfleet.api.v1.rpc.UpdateMachineRequest.update_mask:type_name -> google.protobuf.FieldMask
	105, // 23: unifiedfleet.api.v1.rpc.ListMachinesResponse.machines:type_name -> unifiedfleet.api.v1.proto.Machine
	31,  // 24: unifiedfleet.api.v1.rpc.ImportMachinesRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 25: unifiedfleet.api.v1.rpc.ImportMachinesRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	106, // 26: unifiedfleet.api.v1.rpc.CreateRackRequest.rack:type_name -> unifiedfleet.api.v1.proto.Rack
	106, // 27: unifiedfleet.api.v1.rpc.UpdateRackRequest.rack:type_name -> unifiedfleet.api.v1.proto.Rack
	101, // 28: unifiedfleet.api.v1.rpc.UpdateRackRequest.update_mask:type_name -> google.protobuf.FieldMask
	106, // 29: unifiedfleet.api.v1.rpc.ListRacksResponse.racks:type_name -> unifiedfleet.api.v1.proto.Rack
	107, // 30: unifiedfleet.api.v1.rpc.CreateMachineLSERequest.machineLSE:type_name -> unifiedfleet.api.v1.proto.MachineLSE
	107, // 31: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.machineLSE:type_name -> unifiedfleet.api.v1.proto.MachineLSE
	101, // 32: unifiedfleet.api.v1.rpc.UpdateMachineLSERequest.update_mask:type_name -> google.protobuf.FieldMask
	107, // 33: unifiedfleet.api.v1.rpc.ListMachineLSEsResponse.machineLSEs:type_name -> unifiedfleet.api.v1.proto.MachineLSE
	31,  // 34: unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 35: unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	31,  // 36: unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 37: unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	108, // 38: unifiedfleet.api.v1.rpc.CreateRackLSERequest.rackLSE:type_name -> unifiedfleet.api.v1.proto.RackLSE
	108, // 39: unifiedfleet.api.v1.rpc.UpdateRackLSERequest.rackLSE:type_name -> unifiedfleet.api.v1.proto.RackLSE
	101, // 40: unifiedfleet.api.v1.rpc.UpdateRackLSERequest.update_mask:type_name -> google.protobuf.FieldMask
	108, // 41: unifiedfleet.api.v1.rpc.ListRackLSEsResponse.rackLSEs:type_name -> unifiedfleet.api.v1.proto.RackLSE
	109, // 42: unifiedfleet.api.v1.rpc.CreateNicRequest.nic:type_name -> unifiedfleet.api.v1.proto.Nic
	109, // 43: unifiedfleet.api.v1.rpc.UpdateNicRequest.nic:type_name -> unifiedfleet.api.v1.proto.Nic
	101, // 44: unifiedfleet.api.v1.rpc.UpdateNicRequest.update_mask:type_name -> google.protobuf.FieldMask
	109, // 45: unifiedfleet.api.v1.rpc.ListNicsResponse.nics:type_name -> unifiedfleet.api.v1.proto.Nic
	31,  // 46: unifiedfleet.api.v1.rpc.ImportNicsRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 47: unifiedfleet.api.v1.rpc.ImportNicsRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	31,  // 48: unifiedfleet.api.v1.rpc.ImportDatacentersRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 49: unifiedfleet.api.v1.rpc.ImportDatacentersRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	110, // 50: unifiedfleet.api.v1.rpc.CreateKVMRequest.KVM:type_name -> unifiedfleet.api.v1.proto.KVM
	110, // 51: unifiedfleet.api.v1.rpc.UpdateKVMRequest.KVM:type_name -> unifiedfleet.api.v1.proto.KVM
	101, // 52: unifiedfleet.api.v1.rpc.UpdateKVMRequest.update_mask:type_name -> google.protobuf.FieldMask
	110, // 53: unifiedfleet.api.v1.rpc.ListKVMsResponse.KVMs:type_name -> unifiedfleet.api.v1.proto.KVM
	111, // 54: unifiedfleet.api.v1.rpc.CreateRPMRequest.RPM:type_name -> unifiedfleet.api.v1.proto.RPM
	111, // 55: unifiedfleet.api.v1.rpc.UpdateRPMRequest.RPM:type_name -> unifiedfleet.api.v1.proto.RPM
	101, // 56: unifiedfleet.api.v1.rpc.UpdateRPMRequest.update_mask:type_name -> google.protobuf.FieldMask
	111, // 57: unifiedfleet.api.v1.rpc.ListRPMsResponse.RPMs:type_name -> unifiedfleet.api.v1.proto.RPM
	112, // 58: unifiedfleet.api.v1.rpc.CreateDracRequest.drac:type_name -> unifiedfleet.api.v1.proto.Drac
	112, // 59: unifiedfleet.api.v1.rpc.UpdateDracRequest.drac:type_name -> unifiedfleet.api.v1.proto.Drac
	101, // 60: unifiedfleet.api.v1.rpc.UpdateDracRequest.update_mask:type_name -> google.protobuf.FieldMask
	112, // 61: unifiedfleet.api.v1.rpc.ListDracsResponse.dracs:type_name -> unifiedfleet.api.v1.proto.Drac
	113, // 62: unifiedfleet.api.v1.rpc.CreateSwitchRequest.switch:type_name -> unifiedfleet.api.v1.proto.Switch
	113, // 63: unifiedfleet.api.v1.rpc.UpdateSwitchRequest.switch:type_name -> unifiedfleet.api.v1.proto.Switch
	101, // 64: unifiedfleet.api.v1.rpc.UpdateSwitchRequest.update_mask:type_name -> google.protobuf.FieldMask
	113, // 65: unifiedfleet.api.v1.rpc.ListSwitchesResponse.switches:type_name -> unifiedfleet.api.v1.proto.Switch
	114, // 66: unifiedfleet.api.v1.rpc.CreateVlanRequest.vlan:type_name -> unifiedfleet.api.v1.proto.Vlan
	114, // 67: unifiedfleet.api.v1.rpc.UpdateVlanRequest.vlan:type_name -> unifiedfleet.api.v1.proto.Vlan
	101, // 68: unifiedfleet.api.v1.rpc.UpdateVlanRequest.update_mask:type_name -> google.protobuf.FieldMask
	114, // 69: unifiedfleet.api.v1.rpc.ListVlansResponse.vlans:type_name -> unifiedfleet.api.v1.proto.Vlan
	31,  // 70: unifiedfleet.api.v1.rpc.ImportVlansRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 71: unifiedfleet.api.v1.rpc.ImportVlansRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	31,  // 72: unifiedfleet.api.v1.rpc.ImportOSVlansRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 73: unifiedfleet.api.v1.rpc.ImportOSVlansRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	31,  // 74: unifiedfleet.api.v1.rpc.ImportStatesRequest.machine_db_source:type_name -> unifiedfleet.api.v1.rpc.MachineDBSource
	32,  // 75: unifiedfleet.api.v1.rpc.ImportStatesRequest.config_source:type_name -> unifiedfleet.api.v1.rpc.ConfigSource
	115, // 76: unifiedfleet.api.v1.rpc.UpdateStateRequest.state:type_name -> unifiedfleet.api.v1.proto.StateRecord
	101, // 77: unifiedfleet.api.v1.rpc.UpdateStateRequest.update_mask:type_name -> google.protobuf.FieldMask
	105, // 78: unifiedfleet.api.v1.rpc.MachineRegistrationRequest.machine:type_name -> unifiedfleet.api.v1.proto.Machine
	109, // 79: unifiedfleet.api.v1.rpc.MachineRegistrationRequest.nics:type_name -> unifiedfleet.api.v1.proto.Nic
	112, // 80: unifiedfleet.api.v1.rpc.MachineRegistrationRequest.drac:type_name -> unifiedfleet.api.v1.proto.Drac
	105, // 81: unifiedfleet.api.v1.rpc.MachineRegistrationResponse.machine:type_name -> unifiedfleet.api.v1.proto.Machine
	109, // 82: unifiedfleet.api.v1.rpc.MachineRegistrationResponse.nics:type_name -> unifiedfleet.api.v1.proto.Nic
	112, // 83: unifiedfleet.api.v1.rpc.MachineRegistrationResponse.drac:type_name -> unifiedfleet.api.v1.proto.Drac
	106, // 84: unifiedfleet.api.v1.rpc.RackRegistrationRequest.rack:type_name -> unifiedfleet.api.v1.proto.Rack
	113, // 85: unifiedfleet.api.v1.rpc.RackRegistrationRequest.switches:type_name -> unifiedfleet.api.v1.proto.Switch
	110, // 86: unifiedfleet.api.v1.rpc.RackRegistrationRequest.kvms:type_name -> unifiedfleet.api.v1.proto.KVM
	111, // 87: unifiedfleet.api.v1.rpc.RackRegistrationRequest.rpms:type_name -> unifiedfleet.api.v1.proto.RPM
	106, // 88: unifiedfleet.api.v1.rpc.RackRegistrationResponse.rack:type_name -> unifiedfleet.api.v1.proto.Rack
	113, // 89: unifiedfleet.api.v1.rpc.RackRegistrationResponse.switches:type_name -> unifiedfleet.api.v1.proto.Switch
	110, // 90: unifiedfleet.api.v1.rpc.RackRegistrationResponse.kvms:type_name -> unifiedfleet.api.v1.proto.KVM
	111, // 91: unifiedfleet.api.v1.rpc.RackRegistrationResponse.rpms:type_name -> unifiedfleet.api.v1.proto.RPM
	96,  // 92: unifiedfleet.api.v1.rpc.Fleet.MachineRegistration:input_type -> unifiedfleet.api.v1.rpc.MachineRegistrationRequest
	98,  // 93: unifiedfleet.api.v1.rpc.Fleet.RackRegistration:input_type -> unifiedfleet.api.v1.rpc.RackRegistrationRequest
	0,   // 94: unifiedfleet.api.v1.rpc.Fleet.CreateChromePlatform:input_type -> unifiedfleet.api.v1.rpc.CreateChromePlatformRequest
	1,   // 95: unifiedfleet.api.v1.rpc.Fleet.UpdateChromePlatform:input_type -> unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest
	2,   // 96: unifiedfleet.api.v1.rpc.Fleet.GetChromePlatform:input_type -> unifiedfleet.api.v1.rpc.GetChromePlatformRequest
	3,   // 97: unifiedfleet.api.v1.rpc.Fleet.ListChromePlatforms:input_type -> unifiedfleet.api.v1.rpc.ListChromePlatformsRequest
	5,   // 98: unifiedfleet.api.v1.rpc.Fleet.DeleteChromePlatform:input_type -> unifiedfleet.api.v1.rpc.DeleteChromePlatformRequest
	6,   // 99: unifiedfleet.api.v1.rpc.Fleet.ImportChromePlatforms:input_type -> unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest
	10,  // 100: unifiedfleet.api.v1.rpc.Fleet.ListOSVersions:input_type -> unifiedfleet.api.v1.rpc.ListOSVersionsRequest
	9,   // 101: unifiedfleet.api.v1.rpc.Fleet.ImportOSVersions:input_type -> unifiedfleet.api.v1.rpc.ImportOSVersionsRequest
	12,  // 102: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.CreateMachineLSEPrototypeRequest
	13,  // 103: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineLSEPrototypeRequest
	14,  // 104: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.GetMachineLSEPrototypeRequest
	15,  // 105: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEPrototypes:input_type -> unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesRequest
	17,  // 106: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.DeleteMachineLSEPrototypeRequest
	18,  // 107: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.CreateRackLSEPrototypeRequest
	19,  // 108: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.UpdateRackLSEPrototypeRequest
	20,  // 109: unifiedfleet.api.v1.rpc.Fleet.GetRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.GetRackLSEPrototypeRequest
	21,  // 110: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEPrototypes:input_type -> unifiedfleet.api.v1.rpc.ListRackLSEPrototypesRequest
	23,  // 111: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSEPrototype:input_type -> unifiedfleet.api.v1.rpc.DeleteRackLSEPrototypeRequest
	24,  // 112: unifiedfleet.api.v1.rpc.Fleet.CreateMachine:input_type -> unifiedfleet.api.v1.rpc.CreateMachineRequest
	25,  // 113: unifiedfleet.api.v1.rpc.Fleet.UpdateMachine:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineRequest
	26,  // 114: unifiedfleet.api.v1.rpc.Fleet.GetMachine:input_type -> unifiedfleet.api.v1.rpc.GetMachineRequest
	27,  // 115: unifiedfleet.api.v1.rpc.Fleet.ListMachines:input_type -> unifiedfleet.api.v1.rpc.ListMachinesRequest
	29,  // 116: unifiedfleet.api.v1.rpc.Fleet.DeleteMachine:input_type -> unifiedfleet.api.v1.rpc.DeleteMachineRequest
	30,  // 117: unifiedfleet.api.v1.rpc.Fleet.ImportMachines:input_type -> unifiedfleet.api.v1.rpc.ImportMachinesRequest
	33,  // 118: unifiedfleet.api.v1.rpc.Fleet.CreateRack:input_type -> unifiedfleet.api.v1.rpc.CreateRackRequest
	34,  // 119: unifiedfleet.api.v1.rpc.Fleet.UpdateRack:input_type -> unifiedfleet.api.v1.rpc.UpdateRackRequest
	35,  // 120: unifiedfleet.api.v1.rpc.Fleet.GetRack:input_type -> unifiedfleet.api.v1.rpc.GetRackRequest
	36,  // 121: unifiedfleet.api.v1.rpc.Fleet.ListRacks:input_type -> unifiedfleet.api.v1.rpc.ListRacksRequest
	38,  // 122: unifiedfleet.api.v1.rpc.Fleet.DeleteRack:input_type -> unifiedfleet.api.v1.rpc.DeleteRackRequest
	39,  // 123: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSE:input_type -> unifiedfleet.api.v1.rpc.CreateMachineLSERequest
	40,  // 124: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSE:input_type -> unifiedfleet.api.v1.rpc.UpdateMachineLSERequest
	41,  // 125: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSE:input_type -> unifiedfleet.api.v1.rpc.GetMachineLSERequest
	42,  // 126: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.ListMachineLSEsRequest
	44,  // 127: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSE:input_type -> unifiedfleet.api.v1.rpc.DeleteMachineLSERequest
	45,  // 128: unifiedfleet.api.v1.rpc.Fleet.ImportMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.ImportMachineLSEsRequest
	46,  // 129: unifiedfleet.api.v1.rpc.Fleet.ImportOSMachineLSEs:input_type -> unifiedfleet.api.v1.rpc.ImportOSMachineLSEsRequest
	47,  // 130: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSE:input_type -> unifiedfleet.api.v1.rpc.CreateRackLSERequest
	48,  // 131: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSE:input_type -> unifiedfleet.api.v1.rpc.UpdateRackLSERequest
	49,  // 132: unifiedfleet.api.v1.rpc.Fleet.GetRackLSE:input_type -> unifiedfleet.api.v1.rpc.GetRackLSERequest
	50,  // 133: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEs:input_type -> unifiedfleet.api.v1.rpc.ListRackLSEsRequest
	52,  // 134: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSE:input_type -> unifiedfleet.api.v1.rpc.DeleteRackLSERequest
	53,  // 135: unifiedfleet.api.v1.rpc.Fleet.CreateNic:input_type -> unifiedfleet.api.v1.rpc.CreateNicRequest
	54,  // 136: unifiedfleet.api.v1.rpc.Fleet.UpdateNic:input_type -> unifiedfleet.api.v1.rpc.UpdateNicRequest
	55,  // 137: unifiedfleet.api.v1.rpc.Fleet.GetNic:input_type -> unifiedfleet.api.v1.rpc.GetNicRequest
	56,  // 138: unifiedfleet.api.v1.rpc.Fleet.ListNics:input_type -> unifiedfleet.api.v1.rpc.ListNicsRequest
	58,  // 139: unifiedfleet.api.v1.rpc.Fleet.DeleteNic:input_type -> unifiedfleet.api.v1.rpc.DeleteNicRequest
	59,  // 140: unifiedfleet.api.v1.rpc.Fleet.ImportNics:input_type -> unifiedfleet.api.v1.rpc.ImportNicsRequest
	60,  // 141: unifiedfleet.api.v1.rpc.Fleet.ImportDatacenters:input_type -> unifiedfleet.api.v1.rpc.ImportDatacentersRequest
	61,  // 142: unifiedfleet.api.v1.rpc.Fleet.CreateKVM:input_type -> unifiedfleet.api.v1.rpc.CreateKVMRequest
	62,  // 143: unifiedfleet.api.v1.rpc.Fleet.UpdateKVM:input_type -> unifiedfleet.api.v1.rpc.UpdateKVMRequest
	63,  // 144: unifiedfleet.api.v1.rpc.Fleet.GetKVM:input_type -> unifiedfleet.api.v1.rpc.GetKVMRequest
	64,  // 145: unifiedfleet.api.v1.rpc.Fleet.ListKVMs:input_type -> unifiedfleet.api.v1.rpc.ListKVMsRequest
	66,  // 146: unifiedfleet.api.v1.rpc.Fleet.DeleteKVM:input_type -> unifiedfleet.api.v1.rpc.DeleteKVMRequest
	67,  // 147: unifiedfleet.api.v1.rpc.Fleet.CreateRPM:input_type -> unifiedfleet.api.v1.rpc.CreateRPMRequest
	68,  // 148: unifiedfleet.api.v1.rpc.Fleet.UpdateRPM:input_type -> unifiedfleet.api.v1.rpc.UpdateRPMRequest
	69,  // 149: unifiedfleet.api.v1.rpc.Fleet.GetRPM:input_type -> unifiedfleet.api.v1.rpc.GetRPMRequest
	70,  // 150: unifiedfleet.api.v1.rpc.Fleet.ListRPMs:input_type -> unifiedfleet.api.v1.rpc.ListRPMsRequest
	72,  // 151: unifiedfleet.api.v1.rpc.Fleet.DeleteRPM:input_type -> unifiedfleet.api.v1.rpc.DeleteRPMRequest
	73,  // 152: unifiedfleet.api.v1.rpc.Fleet.CreateDrac:input_type -> unifiedfleet.api.v1.rpc.CreateDracRequest
	74,  // 153: unifiedfleet.api.v1.rpc.Fleet.UpdateDrac:input_type -> unifiedfleet.api.v1.rpc.UpdateDracRequest
	75,  // 154: unifiedfleet.api.v1.rpc.Fleet.GetDrac:input_type -> unifiedfleet.api.v1.rpc.GetDracRequest
	76,  // 155: unifiedfleet.api.v1.rpc.Fleet.ListDracs:input_type -> unifiedfleet.api.v1.rpc.ListDracsRequest
	78,  // 156: unifiedfleet.api.v1.rpc.Fleet.DeleteDrac:input_type -> unifiedfleet.api.v1.rpc.DeleteDracRequest
	79,  // 157: unifiedfleet.api.v1.rpc.Fleet.CreateSwitch:input_type -> unifiedfleet.api.v1.rpc.CreateSwitchRequest
	80,  // 158: unifiedfleet.api.v1.rpc.Fleet.UpdateSwitch:input_type -> unifiedfleet.api.v1.rpc.UpdateSwitchRequest
	81,  // 159: unifiedfleet.api.v1.rpc.Fleet.GetSwitch:input_type -> unifiedfleet.api.v1.rpc.GetSwitchRequest
	82,  // 160: unifiedfleet.api.v1.rpc.Fleet.ListSwitches:input_type -> unifiedfleet.api.v1.rpc.ListSwitchesRequest
	84,  // 161: unifiedfleet.api.v1.rpc.Fleet.DeleteSwitch:input_type -> unifiedfleet.api.v1.rpc.DeleteSwitchRequest
	85,  // 162: unifiedfleet.api.v1.rpc.Fleet.CreateVlan:input_type -> unifiedfleet.api.v1.rpc.CreateVlanRequest
	86,  // 163: unifiedfleet.api.v1.rpc.Fleet.UpdateVlan:input_type -> unifiedfleet.api.v1.rpc.UpdateVlanRequest
	87,  // 164: unifiedfleet.api.v1.rpc.Fleet.GetVlan:input_type -> unifiedfleet.api.v1.rpc.GetVlanRequest
	88,  // 165: unifiedfleet.api.v1.rpc.Fleet.ListVlans:input_type -> unifiedfleet.api.v1.rpc.ListVlansRequest
	90,  // 166: unifiedfleet.api.v1.rpc.Fleet.DeleteVlan:input_type -> unifiedfleet.api.v1.rpc.DeleteVlanRequest
	91,  // 167: unifiedfleet.api.v1.rpc.Fleet.ImportVlans:input_type -> unifiedfleet.api.v1.rpc.ImportVlansRequest
	92,  // 168: unifiedfleet.api.v1.rpc.Fleet.ImportOSVlans:input_type -> unifiedfleet.api.v1.rpc.ImportOSVlansRequest
	93,  // 169: unifiedfleet.api.v1.rpc.Fleet.ImportStates:input_type -> unifiedfleet.api.v1.rpc.ImportStatesRequest
	95,  // 170: unifiedfleet.api.v1.rpc.Fleet.UpdateState:input_type -> unifiedfleet.api.v1.rpc.UpdateStateRequest
	94,  // 171: unifiedfleet.api.v1.rpc.Fleet.GetState:input_type -> unifiedfleet.api.v1.rpc.GetStateRequest
	97,  // 172: unifiedfleet.api.v1.rpc.Fleet.MachineRegistration:output_type -> unifiedfleet.api.v1.rpc.MachineRegistrationResponse
	99,  // 173: unifiedfleet.api.v1.rpc.Fleet.RackRegistration:output_type -> unifiedfleet.api.v1.rpc.RackRegistrationResponse
	100, // 174: unifiedfleet.api.v1.rpc.Fleet.CreateChromePlatform:output_type -> unifiedfleet.api.v1.proto.ChromePlatform
	100, // 175: unifiedfleet.api.v1.rpc.Fleet.UpdateChromePlatform:output_type -> unifiedfleet.api.v1.proto.ChromePlatform
	100, // 176: unifiedfleet.api.v1.rpc.Fleet.GetChromePlatform:output_type -> unifiedfleet.api.v1.proto.ChromePlatform
	4,   // 177: unifiedfleet.api.v1.rpc.Fleet.ListChromePlatforms:output_type -> unifiedfleet.api.v1.rpc.ListChromePlatformsResponse
	116, // 178: unifiedfleet.api.v1.rpc.Fleet.DeleteChromePlatform:output_type -> google.protobuf.Empty
	117, // 179: unifiedfleet.api.v1.rpc.Fleet.ImportChromePlatforms:output_type -> google.rpc.Status
	11,  // 180: unifiedfleet.api.v1.rpc.Fleet.ListOSVersions:output_type -> unifiedfleet.api.v1.rpc.ListOSVersionsResponse
	117, // 181: unifiedfleet.api.v1.rpc.Fleet.ImportOSVersions:output_type -> google.rpc.Status
	103, // 182: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSEPrototype:output_type -> unifiedfleet.api.v1.proto.MachineLSEPrototype
	103, // 183: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSEPrototype:output_type -> unifiedfleet.api.v1.proto.MachineLSEPrototype
	103, // 184: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSEPrototype:output_type -> unifiedfleet.api.v1.proto.MachineLSEPrototype
	16,  // 185: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEPrototypes:output_type -> unifiedfleet.api.v1.rpc.ListMachineLSEPrototypesResponse
	116, // 186: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSEPrototype:output_type -> google.protobuf.Empty
	104, // 187: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSEPrototype:output_type -> unifiedfleet.api.v1.proto.RackLSEPrototype
	104, // 188: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSEPrototype:output_type -> unifiedfleet.api.v1.proto.RackLSEPrototype
	104, // 189: unifiedfleet.api.v1.rpc.Fleet.GetRackLSEPrototype:output_type -> unifiedfleet.api.v1.proto.RackLSEPrototype
	22,  // 190: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEPrototypes:output_type -> unifiedfleet.api.v1.rpc.ListRackLSEPrototypesResponse
	116, // 191: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSEPrototype:output_type -> google.protobuf.Empty
	105, // 192: unifiedfleet.api.v1.rpc.Fleet.CreateMachine:output_type -> unifiedfleet.api.v1.proto.Machine
	105, // 193: unifiedfleet.api.v1.rpc.Fleet.UpdateMachine:output_type -> unifiedfleet.api.v1.proto.Machine
	105, // 194: unifiedfleet.api.v1.rpc.Fleet.GetMachine:output_type -> unifiedfleet.api.v1.proto.Machine
	28,  // 195: unifiedfleet.api.v1.rpc.Fleet.ListMachines:output_type -> unifiedfleet.api.v1.rpc.ListMachinesResponse
	116, // 196: unifiedfleet.api.v1.rpc.Fleet.DeleteMachine:output_type -> google.protobuf.Empty
	117, // 197: unifiedfleet.api.v1.rpc.Fleet.ImportMachines:output_type -> google.rpc.Status
	106, // 198: unifiedfleet.api.v1.rpc.Fleet.CreateRack:output_type -> unifiedfleet.api.v1.proto.Rack
	106, // 199: unifiedfleet.api.v1.rpc.Fleet.UpdateRack:output_type -> unifiedfleet.api.v1.proto.Rack
	106, // 200: unifiedfleet.api.v1.rpc.Fleet.GetRack:output_type -> unifiedfleet.api.v1.proto.Rack
	37,  // 201: unifiedfleet.api.v1.rpc.Fleet.ListRacks:output_type -> unifiedfleet.api.v1.rpc.ListRacksResponse
	116, // 202: unifiedfleet.api.v1.rpc.Fleet.DeleteRack:output_type -> google.protobuf.Empty
	107, // 203: unifiedfleet.api.v1.rpc.Fleet.CreateMachineLSE:output_type -> unifiedfleet.api.v1.proto.MachineLSE
	107, // 204: unifiedfleet.api.v1.rpc.Fleet.UpdateMachineLSE:output_type -> unifiedfleet.api.v1.proto.MachineLSE
	107, // 205: unifiedfleet.api.v1.rpc.Fleet.GetMachineLSE:output_type -> unifiedfleet.api.v1.proto.MachineLSE
	43,  // 206: unifiedfleet.api.v1.rpc.Fleet.ListMachineLSEs:output_type -> unifiedfleet.api.v1.rpc.ListMachineLSEsResponse
	116, // 207: unifiedfleet.api.v1.rpc.Fleet.DeleteMachineLSE:output_type -> google.protobuf.Empty
	117, // 208: unifiedfleet.api.v1.rpc.Fleet.ImportMachineLSEs:output_type -> google.rpc.Status
	117, // 209: unifiedfleet.api.v1.rpc.Fleet.ImportOSMachineLSEs:output_type -> google.rpc.Status
	108, // 210: unifiedfleet.api.v1.rpc.Fleet.CreateRackLSE:output_type -> unifiedfleet.api.v1.proto.RackLSE
	108, // 211: unifiedfleet.api.v1.rpc.Fleet.UpdateRackLSE:output_type -> unifiedfleet.api.v1.proto.RackLSE
	108, // 212: unifiedfleet.api.v1.rpc.Fleet.GetRackLSE:output_type -> unifiedfleet.api.v1.proto.RackLSE
	51,  // 213: unifiedfleet.api.v1.rpc.Fleet.ListRackLSEs:output_type -> unifiedfleet.api.v1.rpc.ListRackLSEsResponse
	116, // 214: unifiedfleet.api.v1.rpc.Fleet.DeleteRackLSE:output_type -> google.protobuf.Empty
	109, // 215: unifiedfleet.api.v1.rpc.Fleet.CreateNic:output_type -> unifiedfleet.api.v1.proto.Nic
	109, // 216: unifiedfleet.api.v1.rpc.Fleet.UpdateNic:output_type -> unifiedfleet.api.v1.proto.Nic
	109, // 217: unifiedfleet.api.v1.rpc.Fleet.GetNic:output_type -> unifiedfleet.api.v1.proto.Nic
	57,  // 218: unifiedfleet.api.v1.rpc.Fleet.ListNics:output_type -> unifiedfleet.api.v1.rpc.ListNicsResponse
	116, // 219: unifiedfleet.api.v1.rpc.Fleet.DeleteNic:output_type -> google.protobuf.Empty
	117, // 220: unifiedfleet.api.v1.rpc.Fleet.ImportNics:output_type -> google.rpc.Status
	117, // 221: unifiedfleet.api.v1.rpc.Fleet.ImportDatacenters:output_type -> google.rpc.Status
	110, // 222: unifiedfleet.api.v1.rpc.Fleet.CreateKVM:output_type -> unifiedfleet.api.v1.proto.KVM
	110, // 223: unifiedfleet.api.v1.rpc.Fleet.UpdateKVM:output_type -> unifiedfleet.api.v1.proto.KVM
	110, // 224: unifiedfleet.api.v1.rpc.Fleet.GetKVM:output_type -> unifiedfleet.api.v1.proto.KVM
	65,  // 225: unifiedfleet.api.v1.rpc.Fleet.ListKVMs:output_type -> unifiedfleet.api.v1.rpc.ListKVMsResponse
	116, // 226: unifiedfleet.api.v1.rpc.Fleet.DeleteKVM:output_type -> google.protobuf.Empty
	111, // 227: unifiedfleet.api.v1.rpc.Fleet.CreateRPM:output_type -> unifiedfleet.api.v1.proto.RPM
	111, // 228: unifiedfleet.api.v1.rpc.Fleet.UpdateRPM:output_type -> unifiedfleet.api.v1.proto.RPM
	111, // 229: unifiedfleet.api.v1.rpc.Fleet.GetRPM:output_type -> unifiedfleet.api.v1.proto.RPM
	71,  // 230: unifiedfleet.api.v1.rpc.Fleet.ListRPMs:output_type -> unifiedfleet.api.v1.rpc.ListRPMsResponse
	116, // 231: unifiedfleet.api.v1.rpc.Fleet.DeleteRPM:output_type -> google.protobuf.Empty
	112, // 232: unifiedfleet.api.v1.rpc.Fleet.CreateDrac:output_type -> unifiedfleet.api.v1.proto.Drac
	112, // 233: unifiedfleet.api.v1.rpc.Fleet.UpdateDrac:output_type -> unifiedfleet.api.v1.proto.Drac
	112, // 234: unifiedfleet.api.v1.rpc.Fleet.GetDrac:output_type -> unifiedfleet.api.v1.proto.Drac
	77,  // 235: unifiedfleet.api.v1.rpc.Fleet.ListDracs:output_type -> unifiedfleet.api.v1.rpc.ListDracsResponse
	116, // 236: unifiedfleet.api.v1.rpc.Fleet.DeleteDrac:output_type -> google.protobuf.Empty
	113, // 237: unifiedfleet.api.v1.rpc.Fleet.CreateSwitch:output_type -> unifiedfleet.api.v1.proto.Switch
	113, // 238: unifiedfleet.api.v1.rpc.Fleet.UpdateSwitch:output_type -> unifiedfleet.api.v1.proto.Switch
	113, // 239: unifiedfleet.api.v1.rpc.Fleet.GetSwitch:output_type -> unifiedfleet.api.v1.proto.Switch
	83,  // 240: unifiedfleet.api.v1.rpc.Fleet.ListSwitches:output_type -> unifiedfleet.api.v1.rpc.ListSwitchesResponse
	116, // 241: unifiedfleet.api.v1.rpc.Fleet.DeleteSwitch:output_type -> google.protobuf.Empty
	114, // 242: unifiedfleet.api.v1.rpc.Fleet.CreateVlan:output_type -> unifiedfleet.api.v1.proto.Vlan
	114, // 243: unifiedfleet.api.v1.rpc.Fleet.UpdateVlan:output_type -> unifiedfleet.api.v1.proto.Vlan
	114, // 244: unifiedfleet.api.v1.rpc.Fleet.GetVlan:output_type -> unifiedfleet.api.v1.proto.Vlan
	89,  // 245: unifiedfleet.api.v1.rpc.Fleet.ListVlans:output_type -> unifiedfleet.api.v1.rpc.ListVlansResponse
	116, // 246: unifiedfleet.api.v1.rpc.Fleet.DeleteVlan:output_type -> google.protobuf.Empty
	117, // 247: unifiedfleet.api.v1.rpc.Fleet.ImportVlans:output_type -> google.rpc.Status
	117, // 248: unifiedfleet.api.v1.rpc.Fleet.ImportOSVlans:output_type -> google.rpc.Status
	117, // 249: unifiedfleet.api.v1.rpc.Fleet.ImportStates:output_type -> google.rpc.Status
	115, // 250: unifiedfleet.api.v1.rpc.Fleet.UpdateState:output_type -> unifiedfleet.api.v1.proto.StateRecord
	115, // 251: unifiedfleet.api.v1.rpc.Fleet.GetState:output_type -> unifiedfleet.api.v1.proto.StateRecord
	172, // [172:252] is the sub-list for method output_type
	92,  // [92:172] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_rpc_fleet_proto_init() }
func file_infra_unifiedfleet_api_v1_rpc_fleet_proto_init() {
	if File_infra_unifiedfleet_api_v1_rpc_fleet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChromePlatformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChromePlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChromePlatformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportChromePlatformsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportChromePlatformsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromePlatformResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOSVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOSVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOSVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEPrototypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEPrototypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEPrototypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEPrototypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRackLSEPrototypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineDBSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRacksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRacksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMachineLSEsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOSMachineLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRackLSEsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRackLSERequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNicsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportNicsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDatacentersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRPMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRPMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRPMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDracsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDracsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDracRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwitchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwitchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOSVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RackRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ImportChromePlatformsRequest_MachineDbSource)(nil),
		(*ImportChromePlatformsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ImportOSVersionsRequest_MachineDbSource)(nil),
		(*ImportOSVersionsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*ImportMachinesRequest_MachineDbSource)(nil),
		(*ImportMachinesRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*ImportMachineLSEsRequest_MachineDbSource)(nil),
		(*ImportMachineLSEsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*ImportOSMachineLSEsRequest_MachineDbSource)(nil),
		(*ImportOSMachineLSEsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*ImportNicsRequest_MachineDbSource)(nil),
		(*ImportNicsRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*ImportDatacentersRequest_MachineDbSource)(nil),
		(*ImportDatacentersRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[91].OneofWrappers = []interface{}{
		(*ImportVlansRequest_MachineDbSource)(nil),
		(*ImportVlansRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*ImportOSVlansRequest_MachineDbSource)(nil),
		(*ImportOSVlansRequest_ConfigSource)(nil),
	}
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*ImportStatesRequest_MachineDbSource)(nil),
		(*ImportStatesRequest_ConfigSource)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   100,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_rpc_fleet_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_rpc_fleet_proto_depIdxs,
		MessageInfos:      file_infra_unifiedfleet_api_v1_rpc_fleet_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_rpc_fleet_proto = out.File
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_rpc_fleet_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetClient interface {
	// MachineRegistration creates a new machine, nic and drac.
	MachineRegistration(ctx context.Context, in *MachineRegistrationRequest, opts ...grpc.CallOption) (*MachineRegistrationResponse, error)
	// RackRegistration creates a new rack, switches, kvms and rpms.
	RackRegistration(ctx context.Context, in *RackRegistrationRequest, opts ...grpc.CallOption) (*RackRegistrationResponse, error)
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// List all the chrome osversions.
	ListOSVersions(ctx context.Context, in *ListOSVersionsRequest, opts ...grpc.CallOption) (*ListOSVersionsResponse, error)
	// ImportOSVersions imports the OS versions.
	ImportOSVersions(ctx context.Context, in *ImportOSVersionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateMachineLSEPrototype creates a new MachineLSEPrototype.
	CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error)
	// Update updates the MachineLSEPrototype
	UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error)
	// Get retrieves the details of the MachineLSEPrototype
	GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error)
	// List gets all the MachineLSEPrototypes
	ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error)
	// Delete delete the MachineLSEPrototype
	DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateRackLSEPrototype creates a new RackLSEPrototype.
	CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error)
	// Update updates the RackLSEPrototype
	UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error)
	// Get retrieves the details of the RackLSEPrototype
	GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error)
	// List gets all the RackLSEPrototypes
	ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error)
	// Delete delete the RackLSEPrototype
	DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateMachine creates a new machine.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// Update updates the machine
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// List gets all the machines
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateRack creates a new rack
	CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// Update updates the rack
	UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// Get retrieves the details of the rack
	GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// List gets all the racks
	ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportMachineLSEs imports machine LSEs & all related infos.
	ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportOSMachineLSEs imports ChromeOS machine LSEs & all related infos if needed.
	ImportOSMachineLSEs(ctx context.Context, in *ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateNic creates a new nic
	CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// Update updates the nic
	UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// Get retrieves the details of the nic
	GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// List gets all the nics
	ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportNics imports nics info.
	ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateKVM creates a new KVM
	CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error)
	// Update updates the KVM
	UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error)
	// Get retrieves the details of the KVM
	GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error)
	// List gets all the KVMs
	ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error)
	// Delete delete the KVM
	DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateRPM creates a new RPM
	CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error)
	// Update updates the RPM
	UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error)
	// Get retrieves the details of the RPM
	GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error)
	// List gets all the RPMs
	ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error)
	// Delete delete the RPM
	DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateDrac creates a new drac
	CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error)
	// Update updates the drac
	UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error)
	// Get retrieves the details of the drac
	GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error)
	// List gets all the dracs
	ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error)
	// Delete delete the drac
	DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateSwitch creates a new switch
	CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error)
	// Update updates the switch
	UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error)
	// Get retrieves the details of the switch
	GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error)
	// List gets all the switches
	ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error)
	// Delete delete the switch
	DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateVlan creates a new vlan
	CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error)
	// Update updates the vlan
	UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error)
	// Get retrieves the details of the vlan
	GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error)
	// List gets all the vlans
	ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error)
	// Delete delete the vlan
	DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportVlans imports vlans & all IP-related infos.
	ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportOSVlans imports the ChromeOS vlans, ips, and dhcp configs.
	ImportOSVlans(ctx context.Context, in *ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportStates imports states of all objects.
	ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// UpdateState updates the state for a resource.
	// If the state doesn't exist before, it will create the state record for the resource.
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*proto1.StateRecord, error)
	// GetState retrieves the state of a resource.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*proto1.StateRecord, error)
}
type fleetPRPCClient struct {
	client *prpc.Client
}

func NewFleetPRPCClient(client *prpc.Client) FleetClient {
	return &fleetPRPCClient{client}
}

func (c *fleetPRPCClient) MachineRegistration(ctx context.Context, in *MachineRegistrationRequest, opts ...grpc.CallOption) (*MachineRegistrationResponse, error) {
	out := new(MachineRegistrationResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "MachineRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) RackRegistration(ctx context.Context, in *RackRegistrationRequest, opts ...grpc.CallOption) (*RackRegistrationResponse, error) {
	out := new(RackRegistrationResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "RackRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListOSVersions(ctx context.Context, in *ListOSVersionsRequest, opts ...grpc.CallOption) (*ListOSVersionsResponse, error) {
	out := new(ListOSVersionsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportOSVersions(ctx context.Context, in *ImportOSVersionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error) {
	out := new(ListMachineLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error) {
	out := new(ListRackLSEPrototypesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportOSMachineLSEs(ctx context.Context, in *ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportOSMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error) {
	out := new(ListRPMsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error) {
	out := new(ListDracsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error) {
	out := new(ListVlansResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportOSVlans(ctx context.Context, in *ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportOSVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*proto1.StateRecord, error) {
	out := new(proto1.StateRecord)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*proto1.StateRecord, error) {
	out := new(proto1.StateRecord)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) MachineRegistration(ctx context.Context, in *MachineRegistrationRequest, opts ...grpc.CallOption) (*MachineRegistrationResponse, error) {
	out := new(MachineRegistrationResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/MachineRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) RackRegistration(ctx context.Context, in *RackRegistrationRequest, opts ...grpc.CallOption) (*RackRegistrationResponse, error) {
	out := new(RackRegistrationResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/RackRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListOSVersions(ctx context.Context, in *ListOSVersionsRequest, opts ...grpc.CallOption) (*ListOSVersionsResponse, error) {
	out := new(ListOSVersionsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportOSVersions(ctx context.Context, in *ImportOSVersionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSEPrototype(ctx context.Context, in *CreateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSEPrototype(ctx context.Context, in *UpdateMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSEPrototype(ctx context.Context, in *GetMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.MachineLSEPrototype, error) {
	out := new(proto1.MachineLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEPrototypes(ctx context.Context, in *ListMachineLSEPrototypesRequest, opts ...grpc.CallOption) (*ListMachineLSEPrototypesResponse, error) {
	out := new(ListMachineLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSEPrototype(ctx context.Context, in *DeleteMachineLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSEPrototype(ctx context.Context, in *CreateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSEPrototype(ctx context.Context, in *UpdateRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSEPrototype(ctx context.Context, in *GetRackLSEPrototypeRequest, opts ...grpc.CallOption) (*proto1.RackLSEPrototype, error) {
	out := new(proto1.RackLSEPrototype)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEPrototypes(ctx context.Context, in *ListRackLSEPrototypesRequest, opts ...grpc.CallOption) (*ListRackLSEPrototypesResponse, error) {
	out := new(ListRackLSEPrototypesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEPrototypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSEPrototype(ctx context.Context, in *DeleteRackLSEPrototypeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSEPrototype", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachineLSEs(ctx context.Context, in *ImportMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportOSMachineLSEs(ctx context.Context, in *ImportOSMachineLSEsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportOSMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateKVM(ctx context.Context, in *CreateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateKVM(ctx context.Context, in *UpdateKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetKVM(ctx context.Context, in *GetKVMRequest, opts ...grpc.CallOption) (*proto1.KVM, error) {
	out := new(proto1.KVM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteKVM(ctx context.Context, in *DeleteKVMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteKVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRPM(ctx context.Context, in *CreateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRPM(ctx context.Context, in *UpdateRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRPM(ctx context.Context, in *GetRPMRequest, opts ...grpc.CallOption) (*proto1.RPM, error) {
	out := new(proto1.RPM)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRPMs(ctx context.Context, in *ListRPMsRequest, opts ...grpc.CallOption) (*ListRPMsResponse, error) {
	out := new(ListRPMsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRPMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRPM(ctx context.Context, in *DeleteRPMRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRPM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateDrac(ctx context.Context, in *CreateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateDrac(ctx context.Context, in *UpdateDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDrac(ctx context.Context, in *GetDracRequest, opts ...grpc.CallOption) (*proto1.Drac, error) {
	out := new(proto1.Drac)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListDracs(ctx context.Context, in *ListDracsRequest, opts ...grpc.CallOption) (*ListDracsResponse, error) {
	out := new(ListDracsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListDracs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteDrac(ctx context.Context, in *DeleteDracRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteDrac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetSwitch(ctx context.Context, in *GetSwitchRequest, opts ...grpc.CallOption) (*proto1.Switch, error) {
	out := new(proto1.Switch)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateVlan(ctx context.Context, in *UpdateVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetVlan(ctx context.Context, in *GetVlanRequest, opts ...grpc.CallOption) (*proto1.Vlan, error) {
	out := new(proto1.Vlan)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListVlans(ctx context.Context, in *ListVlansRequest, opts ...grpc.CallOption) (*ListVlansResponse, error) {
	out := new(ListVlansResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteVlan(ctx context.Context, in *DeleteVlanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportVlans(ctx context.Context, in *ImportVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportOSVlans(ctx context.Context, in *ImportOSVlansRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportStates(ctx context.Context, in *ImportStatesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*proto1.StateRecord, error) {
	out := new(proto1.StateRecord)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*proto1.StateRecord, error) {
	out := new(proto1.StateRecord)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
type FleetServer interface {
	// MachineRegistration creates a new machine, nic and drac.
	MachineRegistration(context.Context, *MachineRegistrationRequest) (*MachineRegistrationResponse, error)
	// RackRegistration creates a new rack, switches, kvms and rpms.
	RackRegistration(context.Context, *RackRegistrationRequest) (*RackRegistrationResponse, error)
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(context.Context, *CreateChromePlatformRequest) (*proto1.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(context.Context, *UpdateChromePlatformRequest) (*proto1.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(context.Context, *GetChromePlatformRequest) (*proto1.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(context.Context, *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(context.Context, *DeleteChromePlatformRequest) (*empty.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(context.Context, *ImportChromePlatformsRequest) (*status.Status, error)
	// List all the chrome osversions.
	ListOSVersions(context.Context, *ListOSVersionsRequest) (*ListOSVersionsResponse, error)
	// ImportOSVersions imports the OS versions.
	ImportOSVersions(context.Context, *ImportOSVersionsRequest) (*status.Status, error)
	// CreateMachineLSEPrototype creates a new MachineLSEPrototype.
	CreateMachineLSEPrototype(context.Context, *CreateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error)
	// Update updates the MachineLSEPrototype
	UpdateMachineLSEPrototype(context.Context, *UpdateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error)
	// Get retrieves the details of the MachineLSEPrototype
	GetMachineLSEPrototype(context.Context, *GetMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error)
	// List gets all the MachineLSEPrototypes
	ListMachineLSEPrototypes(context.Context, *ListMachineLSEPrototypesRequest) (*ListMachineLSEPrototypesResponse, error)
	// Delete delete the MachineLSEPrototype
	DeleteMachineLSEPrototype(context.Context, *DeleteMachineLSEPrototypeRequest) (*empty.Empty, error)
	// CreateRackLSEPrototype creates a new RackLSEPrototype.
	CreateRackLSEPrototype(context.Context, *CreateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error)
	// Update updates the RackLSEPrototype
	UpdateRackLSEPrototype(context.Context, *UpdateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error)
	// Get retrieves the details of the RackLSEPrototype
	GetRackLSEPrototype(context.Context, *GetRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error)
	// List gets all the RackLSEPrototypes
	ListRackLSEPrototypes(context.Context, *ListRackLSEPrototypesRequest) (*ListRackLSEPrototypesResponse, error)
	// Delete delete the RackLSEPrototype
	DeleteRackLSEPrototype(context.Context, *DeleteRackLSEPrototypeRequest) (*empty.Empty, error)
	// CreateMachine creates a new machine.
	CreateMachine(context.Context, *CreateMachineRequest) (*proto1.Machine, error)
	// Update updates the machine
	UpdateMachine(context.Context, *UpdateMachineRequest) (*proto1.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(context.Context, *GetMachineRequest) (*proto1.Machine, error)
	// List gets all the machines
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(context.Context, *DeleteMachineRequest) (*empty.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(context.Context, *ImportMachinesRequest) (*status.Status, error)
	// CreateRack creates a new rack
	CreateRack(context.Context, *CreateRackRequest) (*proto1.Rack, error)
	// Update updates the rack
	UpdateRack(context.Context, *UpdateRackRequest) (*proto1.Rack, error)
	// Get retrieves the details of the rack
	GetRack(context.Context, *GetRackRequest) (*proto1.Rack, error)
	// List gets all the racks
	ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(context.Context, *DeleteRackRequest) (*empty.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(context.Context, *CreateMachineLSERequest) (*proto1.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(context.Context, *UpdateMachineLSERequest) (*proto1.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(context.Context, *GetMachineLSERequest) (*proto1.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(context.Context, *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(context.Context, *DeleteMachineLSERequest) (*empty.Empty, error)
	// ImportMachineLSEs imports machine LSEs & all related infos.
	ImportMachineLSEs(context.Context, *ImportMachineLSEsRequest) (*status.Status, error)
	// ImportOSMachineLSEs imports ChromeOS machine LSEs & all related infos if needed.
	ImportOSMachineLSEs(context.Context, *ImportOSMachineLSEsRequest) (*status.Status, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(context.Context, *CreateRackLSERequest) (*proto1.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(context.Context, *UpdateRackLSERequest) (*proto1.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(context.Context, *GetRackLSERequest) (*proto1.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(context.Context, *ListRackLSEsRequest) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(context.Context, *DeleteRackLSERequest) (*empty.Empty, error)
	// CreateNic creates a new nic
	CreateNic(context.Context, *CreateNicRequest) (*proto1.Nic, error)
	// Update updates the nic
	UpdateNic(context.Context, *UpdateNicRequest) (*proto1.Nic, error)
	// Get retrieves the details of the nic
	GetNic(context.Context, *GetNicRequest) (*proto1.Nic, error)
	// List gets all the nics
	ListNics(context.Context, *ListNicsRequest) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(context.Context, *DeleteNicRequest) (*empty.Empty, error)
	// ImportNics imports nics info.
	ImportNics(context.Context, *ImportNicsRequest) (*status.Status, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(context.Context, *ImportDatacentersRequest) (*status.Status, error)
	// CreateKVM creates a new KVM
	CreateKVM(context.Context, *CreateKVMRequest) (*proto1.KVM, error)
	// Update updates the KVM
	UpdateKVM(context.Context, *UpdateKVMRequest) (*proto1.KVM, error)
	// Get retrieves the details of the KVM
	GetKVM(context.Context, *GetKVMRequest) (*proto1.KVM, error)
	// List gets all the KVMs
	ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error)
	// Delete delete the KVM
	DeleteKVM(context.Context, *DeleteKVMRequest) (*empty.Empty, error)
	// CreateRPM creates a new RPM
	CreateRPM(context.Context, *CreateRPMRequest) (*proto1.RPM, error)
	// Update updates the RPM
	UpdateRPM(context.Context, *UpdateRPMRequest) (*proto1.RPM, error)
	// Get retrieves the details of the RPM
	GetRPM(context.Context, *GetRPMRequest) (*proto1.RPM, error)
	// List gets all the RPMs
	ListRPMs(context.Context, *ListRPMsRequest) (*ListRPMsResponse, error)
	// Delete delete the RPM
	DeleteRPM(context.Context, *DeleteRPMRequest) (*empty.Empty, error)
	// CreateDrac creates a new drac
	CreateDrac(context.Context, *CreateDracRequest) (*proto1.Drac, error)
	// Update updates the drac
	UpdateDrac(context.Context, *UpdateDracRequest) (*proto1.Drac, error)
	// Get retrieves the details of the drac
	GetDrac(context.Context, *GetDracRequest) (*proto1.Drac, error)
	// List gets all the dracs
	ListDracs(context.Context, *ListDracsRequest) (*ListDracsResponse, error)
	// Delete delete the drac
	DeleteDrac(context.Context, *DeleteDracRequest) (*empty.Empty, error)
	// CreateSwitch creates a new switch
	CreateSwitch(context.Context, *CreateSwitchRequest) (*proto1.Switch, error)
	// Update updates the switch
	UpdateSwitch(context.Context, *UpdateSwitchRequest) (*proto1.Switch, error)
	// Get retrieves the details of the switch
	GetSwitch(context.Context, *GetSwitchRequest) (*proto1.Switch, error)
	// List gets all the switches
	ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error)
	// Delete delete the switch
	DeleteSwitch(context.Context, *DeleteSwitchRequest) (*empty.Empty, error)
	// CreateVlan creates a new vlan
	CreateVlan(context.Context, *CreateVlanRequest) (*proto1.Vlan, error)
	// Update updates the vlan
	UpdateVlan(context.Context, *UpdateVlanRequest) (*proto1.Vlan, error)
	// Get retrieves the details of the vlan
	GetVlan(context.Context, *GetVlanRequest) (*proto1.Vlan, error)
	// List gets all the vlans
	ListVlans(context.Context, *ListVlansRequest) (*ListVlansResponse, error)
	// Delete delete the vlan
	DeleteVlan(context.Context, *DeleteVlanRequest) (*empty.Empty, error)
	// ImportVlans imports vlans & all IP-related infos.
	ImportVlans(context.Context, *ImportVlansRequest) (*status.Status, error)
	// ImportOSVlans imports the ChromeOS vlans, ips, and dhcp configs.
	ImportOSVlans(context.Context, *ImportOSVlansRequest) (*status.Status, error)
	// ImportStates imports states of all objects.
	ImportStates(context.Context, *ImportStatesRequest) (*status.Status, error)
	// UpdateState updates the state for a resource.
	// If the state doesn't exist before, it will create the state record for the resource.
	UpdateState(context.Context, *UpdateStateRequest) (*proto1.StateRecord, error)
	// GetState retrieves the state of a resource.
	GetState(context.Context, *GetStateRequest) (*proto1.StateRecord, error)
}

// UnimplementedFleetServer can be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (*UnimplementedFleetServer) MachineRegistration(context.Context, *MachineRegistrationRequest) (*MachineRegistrationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MachineRegistration not implemented")
}
func (*UnimplementedFleetServer) RackRegistration(context.Context, *RackRegistrationRequest) (*RackRegistrationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RackRegistration not implemented")
}
func (*UnimplementedFleetServer) CreateChromePlatform(context.Context, *CreateChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) UpdateChromePlatform(context.Context, *UpdateChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) GetChromePlatform(context.Context, *GetChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ListChromePlatforms(context.Context, *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) DeleteChromePlatform(context.Context, *DeleteChromePlatformRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ImportChromePlatforms(context.Context, *ImportChromePlatformsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) ListOSVersions(context.Context, *ListOSVersionsRequest) (*ListOSVersionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOSVersions not implemented")
}
func (*UnimplementedFleetServer) ImportOSVersions(context.Context, *ImportOSVersionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportOSVersions not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSEPrototype(context.Context, *CreateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSEPrototype(context.Context, *UpdateMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSEPrototype(context.Context, *GetMachineLSEPrototypeRequest) (*proto1.MachineLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEPrototypes(context.Context, *ListMachineLSEPrototypesRequest) (*ListMachineLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSEPrototype(context.Context, *DeleteMachineLSEPrototypeRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSEPrototype(context.Context, *CreateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSEPrototype(context.Context, *UpdateRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) GetRackLSEPrototype(context.Context, *GetRackLSEPrototypeRequest) (*proto1.RackLSEPrototype, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEPrototypes(context.Context, *ListRackLSEPrototypesRequest) (*ListRackLSEPrototypesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEPrototypes not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSEPrototype(context.Context, *DeleteRackLSEPrototypeRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSEPrototype not implemented")
}
func (*UnimplementedFleetServer) CreateMachine(context.Context, *CreateMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedFleetServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (*UnimplementedFleetServer) GetMachine(context.Context, *GetMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (*UnimplementedFleetServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (*UnimplementedFleetServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedFleetServer) ImportMachines(context.Context, *ImportMachinesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachines not implemented")
}
func (*UnimplementedFleetServer) CreateRack(context.Context, *CreateRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRack not implemented")
}
func (*UnimplementedFleetServer) UpdateRack(context.Context, *UpdateRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRack not implemented")
}
func (*UnimplementedFleetServer) GetRack(context.Context, *GetRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRack not implemented")
}
func (*UnimplementedFleetServer) ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (*UnimplementedFleetServer) DeleteRack(context.Context, *DeleteRackRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRack not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSE(context.Context, *CreateMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSE(context.Context, *UpdateMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSE(context.Context, *GetMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEs(context.Context, *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSE(context.Context, *DeleteMachineLSERequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ImportMachineLSEs(context.Context, *ImportMachineLSEsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) ImportOSMachineLSEs(context.Context, *ImportOSMachineLSEsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportOSMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSE(context.Context, *CreateRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSE(context.Context, *UpdateRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSE not implemented")
}
func (*UnimplementedFleetServer) GetRackLSE(context.Context, *GetRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSE not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEs(context.Context, *ListRackLSEsRequest) (*ListRackLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSE(context.Context, *DeleteRackLSERequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSE not implemented")
}
func (*UnimplementedFleetServer) CreateNic(context.Context, *CreateNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNic not implemented")
}
func (*UnimplementedFleetServer) UpdateNic(context.Context, *UpdateNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNic not implemented")
}
func (*UnimplementedFleetServer) GetNic(context.Context, *GetNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNic not implemented")
}
func (*UnimplementedFleetServer) ListNics(context.Context, *ListNicsRequest) (*ListNicsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNics not implemented")
}
func (*UnimplementedFleetServer) DeleteNic(context.Context, *DeleteNicRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNic not implemented")
}
func (*UnimplementedFleetServer) ImportNics(context.Context, *ImportNicsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportNics not implemented")
}
func (*UnimplementedFleetServer) ImportDatacenters(context.Context, *ImportDatacentersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportDatacenters not implemented")
}
func (*UnimplementedFleetServer) CreateKVM(context.Context, *CreateKVMRequest) (*proto1.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateKVM not implemented")
}
func (*UnimplementedFleetServer) UpdateKVM(context.Context, *UpdateKVMRequest) (*proto1.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateKVM not implemented")
}
func (*UnimplementedFleetServer) GetKVM(context.Context, *GetKVMRequest) (*proto1.KVM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetKVM not implemented")
}
func (*UnimplementedFleetServer) ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListKVMs not implemented")
}
func (*UnimplementedFleetServer) DeleteKVM(context.Context, *DeleteKVMRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteKVM not implemented")
}
func (*UnimplementedFleetServer) CreateRPM(context.Context, *CreateRPMRequest) (*proto1.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRPM not implemented")
}
func (*UnimplementedFleetServer) UpdateRPM(context.Context, *UpdateRPMRequest) (*proto1.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRPM not implemented")
}
func (*UnimplementedFleetServer) GetRPM(context.Context, *GetRPMRequest) (*proto1.RPM, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRPM not implemented")
}
func (*UnimplementedFleetServer) ListRPMs(context.Context, *ListRPMsRequest) (*ListRPMsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRPMs not implemented")
}
func (*UnimplementedFleetServer) DeleteRPM(context.Context, *DeleteRPMRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRPM not implemented")
}
func (*UnimplementedFleetServer) CreateDrac(context.Context, *CreateDracRequest) (*proto1.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateDrac not implemented")
}
func (*UnimplementedFleetServer) UpdateDrac(context.Context, *UpdateDracRequest) (*proto1.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateDrac not implemented")
}
func (*UnimplementedFleetServer) GetDrac(context.Context, *GetDracRequest) (*proto1.Drac, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDrac not implemented")
}
func (*UnimplementedFleetServer) ListDracs(context.Context, *ListDracsRequest) (*ListDracsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDracs not implemented")
}
func (*UnimplementedFleetServer) DeleteDrac(context.Context, *DeleteDracRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDrac not implemented")
}
func (*UnimplementedFleetServer) CreateSwitch(context.Context, *CreateSwitchRequest) (*proto1.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSwitch not implemented")
}
func (*UnimplementedFleetServer) UpdateSwitch(context.Context, *UpdateSwitchRequest) (*proto1.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (*UnimplementedFleetServer) GetSwitch(context.Context, *GetSwitchRequest) (*proto1.Switch, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSwitch not implemented")
}
func (*UnimplementedFleetServer) ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (*UnimplementedFleetServer) DeleteSwitch(context.Context, *DeleteSwitchRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSwitch not implemented")
}
func (*UnimplementedFleetServer) CreateVlan(context.Context, *CreateVlanRequest) (*proto1.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (*UnimplementedFleetServer) UpdateVlan(context.Context, *UpdateVlanRequest) (*proto1.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateVlan not implemented")
}
func (*UnimplementedFleetServer) GetVlan(context.Context, *GetVlanRequest) (*proto1.Vlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVlan not implemented")
}
func (*UnimplementedFleetServer) ListVlans(context.Context, *ListVlansRequest) (*ListVlansResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVlans not implemented")
}
func (*UnimplementedFleetServer) DeleteVlan(context.Context, *DeleteVlanRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVlan not implemented")
}
func (*UnimplementedFleetServer) ImportVlans(context.Context, *ImportVlansRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportVlans not implemented")
}
func (*UnimplementedFleetServer) ImportOSVlans(context.Context, *ImportOSVlansRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportOSVlans not implemented")
}
func (*UnimplementedFleetServer) ImportStates(context.Context, *ImportStatesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportStates not implemented")
}
func (*UnimplementedFleetServer) UpdateState(context.Context, *UpdateStateRequest) (*proto1.StateRecord, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (*UnimplementedFleetServer) GetState(context.Context, *GetStateRequest) (*proto1.StateRecord, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetState not implemented")
}

func RegisterFleetServer(s prpc.Registrar, srv FleetServer) {
	s.RegisterService(&_Fleet_serviceDesc, srv)
}

func _Fleet_MachineRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).MachineRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/MachineRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).MachineRegistration(ctx, req.(*MachineRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_RackRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RackRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).RackRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/RackRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).RackRegistration(ctx, req.(*RackRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateChromePlatform(ctx, req.(*CreateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateChromePlatform(ctx, req.(*UpdateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetChromePlatform(ctx, req.(*GetChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListChromePlatforms(ctx, req.(*ListChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteChromePlatform(ctx, req.(*DeleteChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportChromePlatforms(ctx, req.(*ImportChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListOSVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOSVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListOSVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListOSVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListOSVersions(ctx, req.(*ListOSVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportOSVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOSVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportOSVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportOSVersions(ctx, req.(*ImportOSVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSEPrototype(ctx, req.(*CreateMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSEPrototype(ctx, req.(*UpdateMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSEPrototype(ctx, req.(*GetMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEPrototypes(ctx, req.(*ListMachineLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSEPrototype(ctx, req.(*DeleteMachineLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSEPrototype(ctx, req.(*CreateRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSEPrototype(ctx, req.(*UpdateRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSEPrototype(ctx, req.(*GetRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEPrototypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEPrototypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEPrototypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEPrototypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEPrototypes(ctx, req.(*ListRackLSEPrototypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSEPrototype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSEPrototypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSEPrototype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSEPrototype",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSEPrototype(ctx, req.(*DeleteRackLSEPrototypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachines(ctx, req.(*ImportMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRack(ctx, req.(*CreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRack(ctx, req.(*UpdateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRack(ctx, req.(*GetRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRacks(ctx, req.(*ListRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRack(ctx, req.(*DeleteRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSE(ctx, req.(*CreateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSE(ctx, req.(*UpdateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSE(ctx, req.(*GetMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEs(ctx, req.(*ListMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSE(ctx, req.(*DeleteMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachineLSEs(ctx, req.(*ImportMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportOSMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOSMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportOSMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportOSMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportOSMachineLSEs(ctx, req.(*ImportOSMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSE(ctx, req.(*CreateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSE(ctx, req.(*UpdateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSE(ctx, req.(*GetRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEs(ctx, req.(*ListRackLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSE(ctx, req.(*DeleteRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateNic(ctx, req.(*CreateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateNic(ctx, req.(*UpdateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetNic(ctx, req.(*GetNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListNics(ctx, req.(*ListNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteNic(ctx, req.(*DeleteNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportNics(ctx, req.(*ImportNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportDatacenters(ctx, req.(*ImportDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateKVM(ctx, req.(*CreateKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateKVM(ctx, req.(*UpdateKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetKVM(ctx, req.(*GetKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListKVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListKVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListKVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListKVMs(ctx, req.(*ListKVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteKVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteKVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteKVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteKVM(ctx, req.(*DeleteKVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRPM(ctx, req.(*CreateRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRPM(ctx, req.(*UpdateRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRPM(ctx, req.(*GetRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRPMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRPMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRPMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRPMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRPMs(ctx, req.(*ListRPMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRPM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRPMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRPM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRPM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRPM(ctx, req.(*DeleteRPMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateDrac(ctx, req.(*CreateDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateDrac(ctx, req.(*UpdateDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDrac(ctx, req.(*GetDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListDracs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDracsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListDracs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListDracs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListDracs(ctx, req.(*ListDracsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteDrac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDracRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteDrac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteDrac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteDrac(ctx, req.(*DeleteDracRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateSwitch(ctx, req.(*CreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateSwitch(ctx, req.(*UpdateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetSwitch(ctx, req.(*GetSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListSwitches(ctx, req.(*ListSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteSwitch(ctx, req.(*DeleteSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateVlan(ctx, req.(*CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateVlan(ctx, req.(*UpdateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetVlan(ctx, req.(*GetVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListVlans(ctx, req.(*ListVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteVlan(ctx, req.(*DeleteVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportVlans(ctx, req.(*ImportVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportOSVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOSVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportOSVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportOSVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportOSVlans(ctx, req.(*ImportOSVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportStates(ctx, req.(*ImportStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateState(ctx, req.(*UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fleet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unifiedfleet.api.v1.rpc.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MachineRegistration",
			Handler:    _Fleet_MachineRegistration_Handler,
		},
		{
			MethodName: "RackRegistration",
			Handler:    _Fleet_RackRegistration_Handler,
		},
		{
			MethodName: "CreateChromePlatform",
			Handler:    _Fleet_CreateChromePlatform_Handler,
		},
		{
			MethodName: "UpdateChromePlatform",
			Handler:    _Fleet_UpdateChromePlatform_Handler,
		},
		{
			MethodName: "GetChromePlatform",
			Handler:    _Fleet_GetChromePlatform_Handler,
		},
		{
			MethodName: "ListChromePlatforms",
			Handler:    _Fleet_ListChromePlatforms_Handler,
		},
		{
			MethodName: "DeleteChromePlatform",
			Handler:    _Fleet_DeleteChromePlatform_Handler,
		},
		{
			MethodName: "ImportChromePlatforms",
			Handler:    _Fleet_ImportChromePlatforms_Handler,
		},
		{
			MethodName: "ListOSVersions",
			Handler:    _Fleet_ListOSVersions_Handler,
		},
		{
			MethodName: "ImportOSVersions",
			Handler:    _Fleet_ImportOSVersions_Handler,
		},
		{
			MethodName: "CreateMachineLSEPrototype",
			Handler:    _Fleet_CreateMachineLSEPrototype_Handler,
		},
		{
			MethodName: "UpdateMachineLSEPrototype",
			Handler:    _Fleet_UpdateMachineLSEPrototype_Handler,
		},
		{
			MethodName: "GetMachineLSEPrototype",
			Handler:    _Fleet_GetMachineLSEPrototype_Handler,
		},
		{
			MethodName: "ListMachineLSEPrototypes",
			Handler:    _Fleet_ListMachineLSEPrototypes_Handler,
		},
		{
			MethodName: "DeleteMachineLSEPrototype",
			Handler:    _Fleet_DeleteMachineLSEPrototype_Handler,
		},
		{
			MethodName: "CreateRackLSEPrototype",
			Handler:    _Fleet_CreateRackLSEPrototype_Handler,
		},
		{
			MethodName: "UpdateRackLSEPrototype",
			Handler:    _Fleet_UpdateRackLSEPrototype_Handler,
		},
		{
			MethodName: "GetRackLSEPrototype",
			Handler:    _Fleet_GetRackLSEPrototype_Handler,
		},
		{
			MethodName: "ListRackLSEPrototypes",
			Handler:    _Fleet_ListRackLSEPrototypes_Handler,
		},
		{
			MethodName: "DeleteRackLSEPrototype",
			Handler:    _Fleet_DeleteRackLSEPrototype_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Fleet_CreateMachine_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Fleet_UpdateMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _Fleet_GetMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Fleet_ListMachines_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Fleet_DeleteMachine_Handler,
		},
		{
			MethodName: "ImportMachines",
			Handler:    _Fleet_ImportMachines_Handler,
		},
		{
			MethodName: "CreateRack",
			Handler:    _Fleet_CreateRack_Handler,
		},
		{
			MethodName: "UpdateRack",
			Handler:    _Fleet_UpdateRack_Handler,
		},
		{
			MethodName: "GetRack",
			Handler:    _Fleet_GetRack_Handler,
		},
		{
			MethodName: "ListRacks",
			Handler:    _Fleet_ListRacks_Handler,
		},
		{
			MethodName: "DeleteRack",
			Handler:    _Fleet_DeleteRack_Handler,
		},
		{
			MethodName: "CreateMachineLSE",
			Handler:    _Fleet_CreateMachineLSE_Handler,
		},
		{
			MethodName: "UpdateMachineLSE",
			Handler:    _Fleet_UpdateMachineLSE_Handler,
		},
		{
			MethodName: "GetMachineLSE",
			Handler:    _Fleet_GetMachineLSE_Handler,
		},
		{
			MethodName: "ListMachineLSEs",
			Handler:    _Fleet_ListMachineLSEs_Handler,
		},
		{
			MethodName: "DeleteMachineLSE",
			Handler:    _Fleet_DeleteMachineLSE_Handler,
		},
		{
			MethodName: "ImportMachineLSEs",
			Handler:    _Fleet_ImportMachineLSEs_Handler,
		},
		{
			MethodName: "ImportOSMachineLSEs",
			Handler:    _Fleet_ImportOSMachineLSEs_Handler,
		},
		{
			MethodName: "CreateRackLSE",
			Handler:    _Fleet_CreateRackLSE_Handler,
		},
		{
			MethodName: "UpdateRackLSE",
			Handler:    _Fleet_UpdateRackLSE_Handler,
		},
		{
			MethodName: "GetRackLSE",
			Handler:    _Fleet_GetRackLSE_Handler,
		},
		{
			MethodName: "ListRackLSEs",
			Handler:    _Fleet_ListRackLSEs_Handler,
		},
		{
			MethodName: "DeleteRackLSE",
			Handler:    _Fleet_DeleteRackLSE_Handler,
		},
		{
			MethodName: "CreateNic",
			Handler:    _Fleet_CreateNic_Handler,
		},
		{
			MethodName: "UpdateNic",
			Handler:    _Fleet_UpdateNic_Handler,
		},
		{
			MethodName: "GetNic",
			Handler:    _Fleet_GetNic_Handler,
		},
		{
			MethodName: "ListNics",
			Handler:    _Fleet_ListNics_Handler,
		},
		{
			MethodName: "DeleteNic",
			Handler:    _Fleet_DeleteNic_Handler,
		},
		{
			MethodName: "ImportNics",
			Handler:    _Fleet_ImportNics_Handler,
		},
		{
			MethodName: "ImportDatacenters",
			Handler:    _Fleet_ImportDatacenters_Handler,
		},
		{
			MethodName: "CreateKVM",
			Handler:    _Fleet_CreateKVM_Handler,
		},
		{
			MethodName: "UpdateKVM",
			Handler:    _Fleet_UpdateKVM_Handler,
		},
		{
			MethodName: "GetKVM",
			Handler:    _Fleet_GetKVM_Handler,
		},
		{
			MethodName: "ListKVMs",
			Handler:    _Fleet_ListKVMs_Handler,
		},
		{
			MethodName: "DeleteKVM",
			Handler:    _Fleet_DeleteKVM_Handler,
		},
		{
			MethodName: "CreateRPM",
			Handler:    _Fleet_CreateRPM_Handler,
		},
		{
			MethodName: "UpdateRPM",
			Handler:    _Fleet_UpdateRPM_Handler,
		},
		{
			MethodName: "GetRPM",
			Handler:    _Fleet_GetRPM_Handler,
		},
		{
			MethodName: "ListRPMs",
			Handler:    _Fleet_ListRPMs_Handler,
		},
		{
			MethodName: "DeleteRPM",
			Handler:    _Fleet_DeleteRPM_Handler,
		},
		{
			MethodName: "CreateDrac",
			Handler:    _Fleet_CreateDrac_Handler,
		},
		{
			MethodName: "UpdateDrac",
			Handler:    _Fleet_UpdateDrac_Handler,
		},
		{
			MethodName: "GetDrac",
			Handler:    _Fleet_GetDrac_Handler,
		},
		{
			MethodName: "ListDracs",
			Handler:    _Fleet_ListDracs_Handler,
		},
		{
			MethodName: "DeleteDrac",
			Handler:    _Fleet_DeleteDrac_Handler,
		},
		{
			MethodName: "CreateSwitch",
			Handler:    _Fleet_CreateSwitch_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _Fleet_UpdateSwitch_Handler,
		},
		{
			MethodName: "GetSwitch",
			Handler:    _Fleet_GetSwitch_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _Fleet_ListSwitches_Handler,
		},
		{
			MethodName: "DeleteSwitch",
			Handler:    _Fleet_DeleteSwitch_Handler,
		},
		{
			MethodName: "CreateVlan",
			Handler:    _Fleet_CreateVlan_Handler,
		},
		{
			MethodName: "UpdateVlan",
			Handler:    _Fleet_UpdateVlan_Handler,
		},
		{
			MethodName: "GetVlan",
			Handler:    _Fleet_GetVlan_Handler,
		},
		{
			MethodName: "ListVlans",
			Handler:    _Fleet_ListVlans_Handler,
		},
		{
			MethodName: "DeleteVlan",
			Handler:    _Fleet_DeleteVlan_Handler,
		},
		{
			MethodName: "ImportVlans",
			Handler:    _Fleet_ImportVlans_Handler,
		},
		{
			MethodName: "ImportOSVlans",
			Handler:    _Fleet_ImportOSVlans_Handler,
		},
		{
			MethodName: "ImportStates",
			Handler:    _Fleet_ImportStates_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Fleet_UpdateState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Fleet_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/unifiedfleet/api/v1/rpc/fleet.proto",
}
