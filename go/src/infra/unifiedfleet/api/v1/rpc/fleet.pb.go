// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/unifiedfleet/api/v1/rpc/fleet.proto

package ufspb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	proto1 "infra/unifiedfleet/api/v1/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Contains the required information for creating a ChromePlatform represented in
// the database.
type CreateChromePlatformRequest struct {
	// The chromePlatform to create.
	ChromePlatform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The ID to use for the ChromePlatform, which will become the final component of
	// the ChromePlatform's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	ChromePlatformId     string   `protobuf:"bytes,2,opt,name=chromePlatform_id,json=chromePlatformId,proto3" json:"chromePlatform_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateChromePlatformRequest) Reset()         { *m = CreateChromePlatformRequest{} }
func (m *CreateChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChromePlatformRequest) ProtoMessage()    {}
func (*CreateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{0}
}

func (m *CreateChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateChromePlatformRequest.Unmarshal(m, b)
}
func (m *CreateChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *CreateChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChromePlatformRequest.Merge(m, src)
}
func (m *CreateChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_CreateChromePlatformRequest.Size(m)
}
func (m *CreateChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChromePlatformRequest proto.InternalMessageInfo

func (m *CreateChromePlatformRequest) GetChromePlatform() *proto1.ChromePlatform {
	if m != nil {
		return m.ChromePlatform
	}
	return nil
}

func (m *CreateChromePlatformRequest) GetChromePlatformId() string {
	if m != nil {
		return m.ChromePlatformId
	}
	return ""
}

type UpdateChromePlatformRequest struct {
	// The chromePlatform to update.
	ChromePlatform *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=chromePlatform,proto3" json:"chromePlatform,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateChromePlatformRequest) Reset()         { *m = UpdateChromePlatformRequest{} }
func (m *UpdateChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateChromePlatformRequest) ProtoMessage()    {}
func (*UpdateChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{1}
}

func (m *UpdateChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateChromePlatformRequest.Unmarshal(m, b)
}
func (m *UpdateChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *UpdateChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChromePlatformRequest.Merge(m, src)
}
func (m *UpdateChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateChromePlatformRequest.Size(m)
}
func (m *UpdateChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChromePlatformRequest proto.InternalMessageInfo

func (m *UpdateChromePlatformRequest) GetChromePlatform() *proto1.ChromePlatform {
	if m != nil {
		return m.ChromePlatform
	}
	return nil
}

func (m *UpdateChromePlatformRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetChromePlatformRequest struct {
	// The name of the chromePlatform to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChromePlatformRequest) Reset()         { *m = GetChromePlatformRequest{} }
func (m *GetChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*GetChromePlatformRequest) ProtoMessage()    {}
func (*GetChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{2}
}

func (m *GetChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChromePlatformRequest.Unmarshal(m, b)
}
func (m *GetChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *GetChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChromePlatformRequest.Merge(m, src)
}
func (m *GetChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_GetChromePlatformRequest.Size(m)
}
func (m *GetChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChromePlatformRequest proto.InternalMessageInfo

func (m *GetChromePlatformRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListChromePlatformsRequest struct {
	// The maximum number of chromePlatforms to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 chromePlatforms will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListChromePlatforms` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListChromePlatforms` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChromePlatformsRequest) Reset()         { *m = ListChromePlatformsRequest{} }
func (m *ListChromePlatformsRequest) String() string { return proto.CompactTextString(m) }
func (*ListChromePlatformsRequest) ProtoMessage()    {}
func (*ListChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{3}
}

func (m *ListChromePlatformsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChromePlatformsRequest.Unmarshal(m, b)
}
func (m *ListChromePlatformsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChromePlatformsRequest.Marshal(b, m, deterministic)
}
func (m *ListChromePlatformsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChromePlatformsRequest.Merge(m, src)
}
func (m *ListChromePlatformsRequest) XXX_Size() int {
	return xxx_messageInfo_ListChromePlatformsRequest.Size(m)
}
func (m *ListChromePlatformsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChromePlatformsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListChromePlatformsRequest proto.InternalMessageInfo

func (m *ListChromePlatformsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListChromePlatformsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListChromePlatformsResponse struct {
	// The chromePlatforms from datastore.
	ChromePlatforms []*proto1.ChromePlatform `protobuf:"bytes,1,rep,name=chromePlatforms,proto3" json:"chromePlatforms,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListChromePlatformsResponse) Reset()         { *m = ListChromePlatformsResponse{} }
func (m *ListChromePlatformsResponse) String() string { return proto.CompactTextString(m) }
func (*ListChromePlatformsResponse) ProtoMessage()    {}
func (*ListChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{4}
}

func (m *ListChromePlatformsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListChromePlatformsResponse.Unmarshal(m, b)
}
func (m *ListChromePlatformsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListChromePlatformsResponse.Marshal(b, m, deterministic)
}
func (m *ListChromePlatformsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListChromePlatformsResponse.Merge(m, src)
}
func (m *ListChromePlatformsResponse) XXX_Size() int {
	return xxx_messageInfo_ListChromePlatformsResponse.Size(m)
}
func (m *ListChromePlatformsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListChromePlatformsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListChromePlatformsResponse proto.InternalMessageInfo

func (m *ListChromePlatformsResponse) GetChromePlatforms() []*proto1.ChromePlatform {
	if m != nil {
		return m.ChromePlatforms
	}
	return nil
}

func (m *ListChromePlatformsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteChromePlatformRequest struct {
	// The name of the ChromePlatform to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteChromePlatformRequest) Reset()         { *m = DeleteChromePlatformRequest{} }
func (m *DeleteChromePlatformRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteChromePlatformRequest) ProtoMessage()    {}
func (*DeleteChromePlatformRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{5}
}

func (m *DeleteChromePlatformRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteChromePlatformRequest.Unmarshal(m, b)
}
func (m *DeleteChromePlatformRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteChromePlatformRequest.Marshal(b, m, deterministic)
}
func (m *DeleteChromePlatformRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteChromePlatformRequest.Merge(m, src)
}
func (m *DeleteChromePlatformRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteChromePlatformRequest.Size(m)
}
func (m *DeleteChromePlatformRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteChromePlatformRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteChromePlatformRequest proto.InternalMessageInfo

func (m *DeleteChromePlatformRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportChromePlatformsRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportChromePlatformsRequest_MachineDbSource
	//	*ImportChromePlatformsRequest_ConfigSource
	Source               isImportChromePlatformsRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ImportChromePlatformsRequest) Reset()         { *m = ImportChromePlatformsRequest{} }
func (m *ImportChromePlatformsRequest) String() string { return proto.CompactTextString(m) }
func (*ImportChromePlatformsRequest) ProtoMessage()    {}
func (*ImportChromePlatformsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{6}
}

func (m *ImportChromePlatformsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportChromePlatformsRequest.Unmarshal(m, b)
}
func (m *ImportChromePlatformsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportChromePlatformsRequest.Marshal(b, m, deterministic)
}
func (m *ImportChromePlatformsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportChromePlatformsRequest.Merge(m, src)
}
func (m *ImportChromePlatformsRequest) XXX_Size() int {
	return xxx_messageInfo_ImportChromePlatformsRequest.Size(m)
}
func (m *ImportChromePlatformsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportChromePlatformsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportChromePlatformsRequest proto.InternalMessageInfo

type isImportChromePlatformsRequest_Source interface {
	isImportChromePlatformsRequest_Source()
}

type ImportChromePlatformsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportChromePlatformsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportChromePlatformsRequest_MachineDbSource) isImportChromePlatformsRequest_Source() {}

func (*ImportChromePlatformsRequest_ConfigSource) isImportChromePlatformsRequest_Source() {}

func (m *ImportChromePlatformsRequest) GetSource() isImportChromePlatformsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportChromePlatformsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportChromePlatformsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportChromePlatformsRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportChromePlatformsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportChromePlatformsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportChromePlatformsRequest_MachineDbSource)(nil),
		(*ImportChromePlatformsRequest_ConfigSource)(nil),
	}
}

type ImportChromePlatformsResponse struct {
	Passed               []*ChromePlatformResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed               []*ChromePlatformResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ImportChromePlatformsResponse) Reset()         { *m = ImportChromePlatformsResponse{} }
func (m *ImportChromePlatformsResponse) String() string { return proto.CompactTextString(m) }
func (*ImportChromePlatformsResponse) ProtoMessage()    {}
func (*ImportChromePlatformsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{7}
}

func (m *ImportChromePlatformsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportChromePlatformsResponse.Unmarshal(m, b)
}
func (m *ImportChromePlatformsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportChromePlatformsResponse.Marshal(b, m, deterministic)
}
func (m *ImportChromePlatformsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportChromePlatformsResponse.Merge(m, src)
}
func (m *ImportChromePlatformsResponse) XXX_Size() int {
	return xxx_messageInfo_ImportChromePlatformsResponse.Size(m)
}
func (m *ImportChromePlatformsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportChromePlatformsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportChromePlatformsResponse proto.InternalMessageInfo

func (m *ImportChromePlatformsResponse) GetPassed() []*ChromePlatformResult {
	if m != nil {
		return m.Passed
	}
	return nil
}

func (m *ImportChromePlatformsResponse) GetFailed() []*ChromePlatformResult {
	if m != nil {
		return m.Failed
	}
	return nil
}

type ChromePlatformResult struct {
	Platform             *proto1.ChromePlatform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	ErrorMsg             string                 `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ChromePlatformResult) Reset()         { *m = ChromePlatformResult{} }
func (m *ChromePlatformResult) String() string { return proto.CompactTextString(m) }
func (*ChromePlatformResult) ProtoMessage()    {}
func (*ChromePlatformResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{8}
}

func (m *ChromePlatformResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChromePlatformResult.Unmarshal(m, b)
}
func (m *ChromePlatformResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChromePlatformResult.Marshal(b, m, deterministic)
}
func (m *ChromePlatformResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChromePlatformResult.Merge(m, src)
}
func (m *ChromePlatformResult) XXX_Size() int {
	return xxx_messageInfo_ChromePlatformResult.Size(m)
}
func (m *ChromePlatformResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ChromePlatformResult.DiscardUnknown(m)
}

var xxx_messageInfo_ChromePlatformResult proto.InternalMessageInfo

func (m *ChromePlatformResult) GetPlatform() *proto1.ChromePlatform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *ChromePlatformResult) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// Contains the required information for creating a Machine represented in
// the database.
type CreateMachineRequest struct {
	// The machine to create.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The ID to use for the Machine, which will become the final component of
	// the Machine's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineId            string   `protobuf:"bytes,2,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMachineRequest) Reset()         { *m = CreateMachineRequest{} }
func (m *CreateMachineRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMachineRequest) ProtoMessage()    {}
func (*CreateMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{9}
}

func (m *CreateMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineRequest.Unmarshal(m, b)
}
func (m *CreateMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineRequest.Marshal(b, m, deterministic)
}
func (m *CreateMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineRequest.Merge(m, src)
}
func (m *CreateMachineRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMachineRequest.Size(m)
}
func (m *CreateMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineRequest proto.InternalMessageInfo

func (m *CreateMachineRequest) GetMachine() *proto1.Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

func (m *CreateMachineRequest) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

type UpdateMachineRequest struct {
	// The machine to update.
	Machine *proto1.Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateMachineRequest) Reset()         { *m = UpdateMachineRequest{} }
func (m *UpdateMachineRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMachineRequest) ProtoMessage()    {}
func (*UpdateMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{10}
}

func (m *UpdateMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMachineRequest.Unmarshal(m, b)
}
func (m *UpdateMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMachineRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMachineRequest.Merge(m, src)
}
func (m *UpdateMachineRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMachineRequest.Size(m)
}
func (m *UpdateMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMachineRequest proto.InternalMessageInfo

func (m *UpdateMachineRequest) GetMachine() *proto1.Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

func (m *UpdateMachineRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetMachineRequest struct {
	// The name of the machine to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMachineRequest) Reset()         { *m = GetMachineRequest{} }
func (m *GetMachineRequest) String() string { return proto.CompactTextString(m) }
func (*GetMachineRequest) ProtoMessage()    {}
func (*GetMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{11}
}

func (m *GetMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineRequest.Unmarshal(m, b)
}
func (m *GetMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineRequest.Marshal(b, m, deterministic)
}
func (m *GetMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineRequest.Merge(m, src)
}
func (m *GetMachineRequest) XXX_Size() int {
	return xxx_messageInfo_GetMachineRequest.Size(m)
}
func (m *GetMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineRequest proto.InternalMessageInfo

func (m *GetMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMachinesRequest struct {
	// The maximum number of machines to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machines will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachines` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachines` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachinesRequest) Reset()         { *m = ListMachinesRequest{} }
func (m *ListMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*ListMachinesRequest) ProtoMessage()    {}
func (*ListMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{12}
}

func (m *ListMachinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachinesRequest.Unmarshal(m, b)
}
func (m *ListMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachinesRequest.Marshal(b, m, deterministic)
}
func (m *ListMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachinesRequest.Merge(m, src)
}
func (m *ListMachinesRequest) XXX_Size() int {
	return xxx_messageInfo_ListMachinesRequest.Size(m)
}
func (m *ListMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachinesRequest proto.InternalMessageInfo

func (m *ListMachinesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListMachinesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListMachinesResponse struct {
	// The machines from datastore.
	Machines []*proto1.Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachinesResponse) Reset()         { *m = ListMachinesResponse{} }
func (m *ListMachinesResponse) String() string { return proto.CompactTextString(m) }
func (*ListMachinesResponse) ProtoMessage()    {}
func (*ListMachinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{13}
}

func (m *ListMachinesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachinesResponse.Unmarshal(m, b)
}
func (m *ListMachinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachinesResponse.Marshal(b, m, deterministic)
}
func (m *ListMachinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachinesResponse.Merge(m, src)
}
func (m *ListMachinesResponse) XXX_Size() int {
	return xxx_messageInfo_ListMachinesResponse.Size(m)
}
func (m *ListMachinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachinesResponse proto.InternalMessageInfo

func (m *ListMachinesResponse) GetMachines() []*proto1.Machine {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *ListMachinesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteMachineRequest struct {
	// The name of the Machine to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineRequest) Reset()         { *m = DeleteMachineRequest{} }
func (m *DeleteMachineRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineRequest) ProtoMessage()    {}
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{14}
}

func (m *DeleteMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineRequest.Unmarshal(m, b)
}
func (m *DeleteMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineRequest.Merge(m, src)
}
func (m *DeleteMachineRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineRequest.Size(m)
}
func (m *DeleteMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineRequest proto.InternalMessageInfo

func (m *DeleteMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportMachinesRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportMachinesRequest_MachineDbSource
	//	*ImportMachinesRequest_ConfigSource
	Source               isImportMachinesRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ImportMachinesRequest) Reset()         { *m = ImportMachinesRequest{} }
func (m *ImportMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*ImportMachinesRequest) ProtoMessage()    {}
func (*ImportMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{15}
}

func (m *ImportMachinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportMachinesRequest.Unmarshal(m, b)
}
func (m *ImportMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportMachinesRequest.Marshal(b, m, deterministic)
}
func (m *ImportMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportMachinesRequest.Merge(m, src)
}
func (m *ImportMachinesRequest) XXX_Size() int {
	return xxx_messageInfo_ImportMachinesRequest.Size(m)
}
func (m *ImportMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportMachinesRequest proto.InternalMessageInfo

type isImportMachinesRequest_Source interface {
	isImportMachinesRequest_Source()
}

type ImportMachinesRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportMachinesRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportMachinesRequest_MachineDbSource) isImportMachinesRequest_Source() {}

func (*ImportMachinesRequest_ConfigSource) isImportMachinesRequest_Source() {}

func (m *ImportMachinesRequest) GetSource() isImportMachinesRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportMachinesRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportMachinesRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportMachinesRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportMachinesRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportMachinesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportMachinesRequest_MachineDbSource)(nil),
		(*ImportMachinesRequest_ConfigSource)(nil),
	}
}

type MachineDBSource struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MachineDBSource) Reset()         { *m = MachineDBSource{} }
func (m *MachineDBSource) String() string { return proto.CompactTextString(m) }
func (*MachineDBSource) ProtoMessage()    {}
func (*MachineDBSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{16}
}

func (m *MachineDBSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineDBSource.Unmarshal(m, b)
}
func (m *MachineDBSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineDBSource.Marshal(b, m, deterministic)
}
func (m *MachineDBSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineDBSource.Merge(m, src)
}
func (m *MachineDBSource) XXX_Size() int {
	return xxx_messageInfo_MachineDBSource.Size(m)
}
func (m *MachineDBSource) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineDBSource.DiscardUnknown(m)
}

var xxx_messageInfo_MachineDBSource proto.InternalMessageInfo

func (m *MachineDBSource) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ConfigSource struct {
	// Empty config_service means it's local file.
	ConfigServiceName    string   `protobuf:"bytes,1,opt,name=config_service_name,json=configServiceName,proto3" json:"config_service_name,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigSource) Reset()         { *m = ConfigSource{} }
func (m *ConfigSource) String() string { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()    {}
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{17}
}

func (m *ConfigSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSource.Unmarshal(m, b)
}
func (m *ConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSource.Marshal(b, m, deterministic)
}
func (m *ConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSource.Merge(m, src)
}
func (m *ConfigSource) XXX_Size() int {
	return xxx_messageInfo_ConfigSource.Size(m)
}
func (m *ConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSource proto.InternalMessageInfo

func (m *ConfigSource) GetConfigServiceName() string {
	if m != nil {
		return m.ConfigServiceName
	}
	return ""
}

func (m *ConfigSource) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// Contains the required information for creating a Rack represented in
// the database.
type CreateRackRequest struct {
	// The rack to create.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The ID to use for the Rack, which will become the final component of
	// the Rack's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackId               string   `protobuf:"bytes,2,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRackRequest) Reset()         { *m = CreateRackRequest{} }
func (m *CreateRackRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRackRequest) ProtoMessage()    {}
func (*CreateRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{18}
}

func (m *CreateRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRackRequest.Unmarshal(m, b)
}
func (m *CreateRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRackRequest.Marshal(b, m, deterministic)
}
func (m *CreateRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRackRequest.Merge(m, src)
}
func (m *CreateRackRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRackRequest.Size(m)
}
func (m *CreateRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRackRequest proto.InternalMessageInfo

func (m *CreateRackRequest) GetRack() *proto1.Rack {
	if m != nil {
		return m.Rack
	}
	return nil
}

func (m *CreateRackRequest) GetRackId() string {
	if m != nil {
		return m.RackId
	}
	return ""
}

type UpdateRackRequest struct {
	// The rack to update.
	Rack *proto1.Rack `protobuf:"bytes,1,opt,name=rack,proto3" json:"rack,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRackRequest) Reset()         { *m = UpdateRackRequest{} }
func (m *UpdateRackRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRackRequest) ProtoMessage()    {}
func (*UpdateRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{19}
}

func (m *UpdateRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRackRequest.Unmarshal(m, b)
}
func (m *UpdateRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRackRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRackRequest.Merge(m, src)
}
func (m *UpdateRackRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRackRequest.Size(m)
}
func (m *UpdateRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRackRequest proto.InternalMessageInfo

func (m *UpdateRackRequest) GetRack() *proto1.Rack {
	if m != nil {
		return m.Rack
	}
	return nil
}

func (m *UpdateRackRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetRackRequest struct {
	// The name of the rack to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRackRequest) Reset()         { *m = GetRackRequest{} }
func (m *GetRackRequest) String() string { return proto.CompactTextString(m) }
func (*GetRackRequest) ProtoMessage()    {}
func (*GetRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{20}
}

func (m *GetRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRackRequest.Unmarshal(m, b)
}
func (m *GetRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRackRequest.Marshal(b, m, deterministic)
}
func (m *GetRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRackRequest.Merge(m, src)
}
func (m *GetRackRequest) XXX_Size() int {
	return xxx_messageInfo_GetRackRequest.Size(m)
}
func (m *GetRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRackRequest proto.InternalMessageInfo

func (m *GetRackRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRacksRequest struct {
	// The maximum number of racks to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 racks will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRacks` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRacks` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRacksRequest) Reset()         { *m = ListRacksRequest{} }
func (m *ListRacksRequest) String() string { return proto.CompactTextString(m) }
func (*ListRacksRequest) ProtoMessage()    {}
func (*ListRacksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{21}
}

func (m *ListRacksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRacksRequest.Unmarshal(m, b)
}
func (m *ListRacksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRacksRequest.Marshal(b, m, deterministic)
}
func (m *ListRacksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRacksRequest.Merge(m, src)
}
func (m *ListRacksRequest) XXX_Size() int {
	return xxx_messageInfo_ListRacksRequest.Size(m)
}
func (m *ListRacksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRacksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRacksRequest proto.InternalMessageInfo

func (m *ListRacksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRacksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRacksResponse struct {
	// The racks from datastore.
	Racks []*proto1.Rack `protobuf:"bytes,1,rep,name=racks,proto3" json:"racks,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRacksResponse) Reset()         { *m = ListRacksResponse{} }
func (m *ListRacksResponse) String() string { return proto.CompactTextString(m) }
func (*ListRacksResponse) ProtoMessage()    {}
func (*ListRacksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{22}
}

func (m *ListRacksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRacksResponse.Unmarshal(m, b)
}
func (m *ListRacksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRacksResponse.Marshal(b, m, deterministic)
}
func (m *ListRacksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRacksResponse.Merge(m, src)
}
func (m *ListRacksResponse) XXX_Size() int {
	return xxx_messageInfo_ListRacksResponse.Size(m)
}
func (m *ListRacksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRacksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRacksResponse proto.InternalMessageInfo

func (m *ListRacksResponse) GetRacks() []*proto1.Rack {
	if m != nil {
		return m.Racks
	}
	return nil
}

func (m *ListRacksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteRackRequest struct {
	// The name of the Rack to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRackRequest) Reset()         { *m = DeleteRackRequest{} }
func (m *DeleteRackRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRackRequest) ProtoMessage()    {}
func (*DeleteRackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{23}
}

func (m *DeleteRackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRackRequest.Unmarshal(m, b)
}
func (m *DeleteRackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRackRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRackRequest.Merge(m, src)
}
func (m *DeleteRackRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRackRequest.Size(m)
}
func (m *DeleteRackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRackRequest proto.InternalMessageInfo

func (m *DeleteRackRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a MachineLSE represented in
// the database.
type CreateMachineLSERequest struct {
	// The machineLSE to create.
	MachineLSE *proto1.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The ID to use for the MachineLSE, which will become the final component of
	// the MachineLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	MachineLSEId         string   `protobuf:"bytes,2,opt,name=machineLSE_id,json=machineLSEId,proto3" json:"machineLSE_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMachineLSERequest) Reset()         { *m = CreateMachineLSERequest{} }
func (m *CreateMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*CreateMachineLSERequest) ProtoMessage()    {}
func (*CreateMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{24}
}

func (m *CreateMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineLSERequest.Unmarshal(m, b)
}
func (m *CreateMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *CreateMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineLSERequest.Merge(m, src)
}
func (m *CreateMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_CreateMachineLSERequest.Size(m)
}
func (m *CreateMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineLSERequest proto.InternalMessageInfo

func (m *CreateMachineLSERequest) GetMachineLSE() *proto1.MachineLSE {
	if m != nil {
		return m.MachineLSE
	}
	return nil
}

func (m *CreateMachineLSERequest) GetMachineLSEId() string {
	if m != nil {
		return m.MachineLSEId
	}
	return ""
}

type UpdateMachineLSERequest struct {
	// The machineLSE to update.
	MachineLSE *proto1.MachineLSE `protobuf:"bytes,1,opt,name=machineLSE,proto3" json:"machineLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateMachineLSERequest) Reset()         { *m = UpdateMachineLSERequest{} }
func (m *UpdateMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMachineLSERequest) ProtoMessage()    {}
func (*UpdateMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{25}
}

func (m *UpdateMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMachineLSERequest.Unmarshal(m, b)
}
func (m *UpdateMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *UpdateMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMachineLSERequest.Merge(m, src)
}
func (m *UpdateMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMachineLSERequest.Size(m)
}
func (m *UpdateMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMachineLSERequest proto.InternalMessageInfo

func (m *UpdateMachineLSERequest) GetMachineLSE() *proto1.MachineLSE {
	if m != nil {
		return m.MachineLSE
	}
	return nil
}

func (m *UpdateMachineLSERequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetMachineLSERequest struct {
	// The name of the machineLSE to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMachineLSERequest) Reset()         { *m = GetMachineLSERequest{} }
func (m *GetMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*GetMachineLSERequest) ProtoMessage()    {}
func (*GetMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{26}
}

func (m *GetMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineLSERequest.Unmarshal(m, b)
}
func (m *GetMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *GetMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineLSERequest.Merge(m, src)
}
func (m *GetMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_GetMachineLSERequest.Size(m)
}
func (m *GetMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineLSERequest proto.InternalMessageInfo

func (m *GetMachineLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMachineLSEsRequest struct {
	// The maximum number of machineLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 machineLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMachineLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListMachineLSEs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachineLSEsRequest) Reset()         { *m = ListMachineLSEsRequest{} }
func (m *ListMachineLSEsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMachineLSEsRequest) ProtoMessage()    {}
func (*ListMachineLSEsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{27}
}

func (m *ListMachineLSEsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachineLSEsRequest.Unmarshal(m, b)
}
func (m *ListMachineLSEsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachineLSEsRequest.Marshal(b, m, deterministic)
}
func (m *ListMachineLSEsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLSEsRequest.Merge(m, src)
}
func (m *ListMachineLSEsRequest) XXX_Size() int {
	return xxx_messageInfo_ListMachineLSEsRequest.Size(m)
}
func (m *ListMachineLSEsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLSEsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLSEsRequest proto.InternalMessageInfo

func (m *ListMachineLSEsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListMachineLSEsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListMachineLSEsResponse struct {
	// The machineLSEs from datastore.
	MachineLSEs []*proto1.MachineLSE `protobuf:"bytes,1,rep,name=machineLSEs,proto3" json:"machineLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMachineLSEsResponse) Reset()         { *m = ListMachineLSEsResponse{} }
func (m *ListMachineLSEsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMachineLSEsResponse) ProtoMessage()    {}
func (*ListMachineLSEsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{28}
}

func (m *ListMachineLSEsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachineLSEsResponse.Unmarshal(m, b)
}
func (m *ListMachineLSEsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachineLSEsResponse.Marshal(b, m, deterministic)
}
func (m *ListMachineLSEsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachineLSEsResponse.Merge(m, src)
}
func (m *ListMachineLSEsResponse) XXX_Size() int {
	return xxx_messageInfo_ListMachineLSEsResponse.Size(m)
}
func (m *ListMachineLSEsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachineLSEsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachineLSEsResponse proto.InternalMessageInfo

func (m *ListMachineLSEsResponse) GetMachineLSEs() []*proto1.MachineLSE {
	if m != nil {
		return m.MachineLSEs
	}
	return nil
}

func (m *ListMachineLSEsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteMachineLSERequest struct {
	// The name of the MachineLSE to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineLSERequest) Reset()         { *m = DeleteMachineLSERequest{} }
func (m *DeleteMachineLSERequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineLSERequest) ProtoMessage()    {}
func (*DeleteMachineLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{29}
}

func (m *DeleteMachineLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineLSERequest.Unmarshal(m, b)
}
func (m *DeleteMachineLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineLSERequest.Marshal(b, m, deterministic)
}
func (m *DeleteMachineLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineLSERequest.Merge(m, src)
}
func (m *DeleteMachineLSERequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineLSERequest.Size(m)
}
func (m *DeleteMachineLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineLSERequest proto.InternalMessageInfo

func (m *DeleteMachineLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a RackLSE represented in
// the database.
type CreateRackLSERequest struct {
	// The rackLSE to create.
	RackLSE *proto1.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The ID to use for the RackLSE, which will become the final component of
	// the RackLSE's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	RackLSEId            string   `protobuf:"bytes,2,opt,name=rackLSE_id,json=rackLSEId,proto3" json:"rackLSE_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRackLSERequest) Reset()         { *m = CreateRackLSERequest{} }
func (m *CreateRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*CreateRackLSERequest) ProtoMessage()    {}
func (*CreateRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{30}
}

func (m *CreateRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRackLSERequest.Unmarshal(m, b)
}
func (m *CreateRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRackLSERequest.Marshal(b, m, deterministic)
}
func (m *CreateRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRackLSERequest.Merge(m, src)
}
func (m *CreateRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_CreateRackLSERequest.Size(m)
}
func (m *CreateRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRackLSERequest proto.InternalMessageInfo

func (m *CreateRackLSERequest) GetRackLSE() *proto1.RackLSE {
	if m != nil {
		return m.RackLSE
	}
	return nil
}

func (m *CreateRackLSERequest) GetRackLSEId() string {
	if m != nil {
		return m.RackLSEId
	}
	return ""
}

type UpdateRackLSERequest struct {
	// The rackLSE to update.
	RackLSE *proto1.RackLSE `protobuf:"bytes,1,opt,name=rackLSE,proto3" json:"rackLSE,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateRackLSERequest) Reset()         { *m = UpdateRackLSERequest{} }
func (m *UpdateRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRackLSERequest) ProtoMessage()    {}
func (*UpdateRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{31}
}

func (m *UpdateRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRackLSERequest.Unmarshal(m, b)
}
func (m *UpdateRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRackLSERequest.Marshal(b, m, deterministic)
}
func (m *UpdateRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRackLSERequest.Merge(m, src)
}
func (m *UpdateRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRackLSERequest.Size(m)
}
func (m *UpdateRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRackLSERequest proto.InternalMessageInfo

func (m *UpdateRackLSERequest) GetRackLSE() *proto1.RackLSE {
	if m != nil {
		return m.RackLSE
	}
	return nil
}

func (m *UpdateRackLSERequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetRackLSERequest struct {
	// The name of the rackLSE to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRackLSERequest) Reset()         { *m = GetRackLSERequest{} }
func (m *GetRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*GetRackLSERequest) ProtoMessage()    {}
func (*GetRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{32}
}

func (m *GetRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRackLSERequest.Unmarshal(m, b)
}
func (m *GetRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRackLSERequest.Marshal(b, m, deterministic)
}
func (m *GetRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRackLSERequest.Merge(m, src)
}
func (m *GetRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_GetRackLSERequest.Size(m)
}
func (m *GetRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRackLSERequest proto.InternalMessageInfo

func (m *GetRackLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListRackLSEsRequest struct {
	// The maximum number of rackLSEs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 rackLSEs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRackLSEs` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRackLSEs` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRackLSEsRequest) Reset()         { *m = ListRackLSEsRequest{} }
func (m *ListRackLSEsRequest) String() string { return proto.CompactTextString(m) }
func (*ListRackLSEsRequest) ProtoMessage()    {}
func (*ListRackLSEsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{33}
}

func (m *ListRackLSEsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRackLSEsRequest.Unmarshal(m, b)
}
func (m *ListRackLSEsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRackLSEsRequest.Marshal(b, m, deterministic)
}
func (m *ListRackLSEsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRackLSEsRequest.Merge(m, src)
}
func (m *ListRackLSEsRequest) XXX_Size() int {
	return xxx_messageInfo_ListRackLSEsRequest.Size(m)
}
func (m *ListRackLSEsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRackLSEsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRackLSEsRequest proto.InternalMessageInfo

func (m *ListRackLSEsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRackLSEsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListRackLSEsResponse struct {
	// The rackLSEs from datastore.
	RackLSEs []*proto1.RackLSE `protobuf:"bytes,1,rep,name=rackLSEs,proto3" json:"rackLSEs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRackLSEsResponse) Reset()         { *m = ListRackLSEsResponse{} }
func (m *ListRackLSEsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRackLSEsResponse) ProtoMessage()    {}
func (*ListRackLSEsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{34}
}

func (m *ListRackLSEsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRackLSEsResponse.Unmarshal(m, b)
}
func (m *ListRackLSEsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRackLSEsResponse.Marshal(b, m, deterministic)
}
func (m *ListRackLSEsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRackLSEsResponse.Merge(m, src)
}
func (m *ListRackLSEsResponse) XXX_Size() int {
	return xxx_messageInfo_ListRackLSEsResponse.Size(m)
}
func (m *ListRackLSEsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRackLSEsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRackLSEsResponse proto.InternalMessageInfo

func (m *ListRackLSEsResponse) GetRackLSEs() []*proto1.RackLSE {
	if m != nil {
		return m.RackLSEs
	}
	return nil
}

func (m *ListRackLSEsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteRackLSERequest struct {
	// The name of the RackLSE to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRackLSERequest) Reset()         { *m = DeleteRackLSERequest{} }
func (m *DeleteRackLSERequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRackLSERequest) ProtoMessage()    {}
func (*DeleteRackLSERequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{35}
}

func (m *DeleteRackLSERequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRackLSERequest.Unmarshal(m, b)
}
func (m *DeleteRackLSERequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRackLSERequest.Marshal(b, m, deterministic)
}
func (m *DeleteRackLSERequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRackLSERequest.Merge(m, src)
}
func (m *DeleteRackLSERequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRackLSERequest.Size(m)
}
func (m *DeleteRackLSERequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRackLSERequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRackLSERequest proto.InternalMessageInfo

func (m *DeleteRackLSERequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Contains the required information for creating a Nic represented in
// the database.
type CreateNicRequest struct {
	// The nic to create.
	Nic *proto1.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The ID to use for the Nic, which will become the final component of
	// the Nic's resource name.
	//
	// This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
	// contains only ASCII letters, numbers, dash and underscore.
	NicId                string   `protobuf:"bytes,2,opt,name=nic_id,json=nicId,proto3" json:"nic_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNicRequest) Reset()         { *m = CreateNicRequest{} }
func (m *CreateNicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNicRequest) ProtoMessage()    {}
func (*CreateNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{36}
}

func (m *CreateNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNicRequest.Unmarshal(m, b)
}
func (m *CreateNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNicRequest.Marshal(b, m, deterministic)
}
func (m *CreateNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNicRequest.Merge(m, src)
}
func (m *CreateNicRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNicRequest.Size(m)
}
func (m *CreateNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNicRequest proto.InternalMessageInfo

func (m *CreateNicRequest) GetNic() *proto1.Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *CreateNicRequest) GetNicId() string {
	if m != nil {
		return m.NicId
	}
	return ""
}

type UpdateNicRequest struct {
	// The nic to update.
	Nic *proto1.Nic `protobuf:"bytes,1,opt,name=nic,proto3" json:"nic,omitempty"`
	// The list of fields to be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateNicRequest) Reset()         { *m = UpdateNicRequest{} }
func (m *UpdateNicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNicRequest) ProtoMessage()    {}
func (*UpdateNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{37}
}

func (m *UpdateNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNicRequest.Unmarshal(m, b)
}
func (m *UpdateNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNicRequest.Marshal(b, m, deterministic)
}
func (m *UpdateNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNicRequest.Merge(m, src)
}
func (m *UpdateNicRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNicRequest.Size(m)
}
func (m *UpdateNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNicRequest proto.InternalMessageInfo

func (m *UpdateNicRequest) GetNic() *proto1.Nic {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *UpdateNicRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type GetNicRequest struct {
	// The name of the nic to retrieve.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNicRequest) Reset()         { *m = GetNicRequest{} }
func (m *GetNicRequest) String() string { return proto.CompactTextString(m) }
func (*GetNicRequest) ProtoMessage()    {}
func (*GetNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{38}
}

func (m *GetNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNicRequest.Unmarshal(m, b)
}
func (m *GetNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNicRequest.Marshal(b, m, deterministic)
}
func (m *GetNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNicRequest.Merge(m, src)
}
func (m *GetNicRequest) XXX_Size() int {
	return xxx_messageInfo_GetNicRequest.Size(m)
}
func (m *GetNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNicRequest proto.InternalMessageInfo

func (m *GetNicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListNicsRequest struct {
	// The maximum number of nics to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 nics will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListNics` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListNics` must match
	// the call that provided the page token.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNicsRequest) Reset()         { *m = ListNicsRequest{} }
func (m *ListNicsRequest) String() string { return proto.CompactTextString(m) }
func (*ListNicsRequest) ProtoMessage()    {}
func (*ListNicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{39}
}

func (m *ListNicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNicsRequest.Unmarshal(m, b)
}
func (m *ListNicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNicsRequest.Marshal(b, m, deterministic)
}
func (m *ListNicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNicsRequest.Merge(m, src)
}
func (m *ListNicsRequest) XXX_Size() int {
	return xxx_messageInfo_ListNicsRequest.Size(m)
}
func (m *ListNicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNicsRequest proto.InternalMessageInfo

func (m *ListNicsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNicsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListNicsResponse struct {
	// The nics from datastore.
	Nics []*proto1.Nic `protobuf:"bytes,1,rep,name=nics,proto3" json:"nics,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNicsResponse) Reset()         { *m = ListNicsResponse{} }
func (m *ListNicsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNicsResponse) ProtoMessage()    {}
func (*ListNicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{40}
}

func (m *ListNicsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNicsResponse.Unmarshal(m, b)
}
func (m *ListNicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNicsResponse.Marshal(b, m, deterministic)
}
func (m *ListNicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNicsResponse.Merge(m, src)
}
func (m *ListNicsResponse) XXX_Size() int {
	return xxx_messageInfo_ListNicsResponse.Size(m)
}
func (m *ListNicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNicsResponse proto.InternalMessageInfo

func (m *ListNicsResponse) GetNics() []*proto1.Nic {
	if m != nil {
		return m.Nics
	}
	return nil
}

func (m *ListNicsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteNicRequest struct {
	// The name of the Nic to delete
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNicRequest) Reset()         { *m = DeleteNicRequest{} }
func (m *DeleteNicRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNicRequest) ProtoMessage()    {}
func (*DeleteNicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{41}
}

func (m *DeleteNicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNicRequest.Unmarshal(m, b)
}
func (m *DeleteNicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNicRequest.Marshal(b, m, deterministic)
}
func (m *DeleteNicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNicRequest.Merge(m, src)
}
func (m *DeleteNicRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNicRequest.Size(m)
}
func (m *DeleteNicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNicRequest proto.InternalMessageInfo

func (m *DeleteNicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImportNicsRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportNicsRequest_MachineDbSource
	//	*ImportNicsRequest_ConfigSource
	Source               isImportNicsRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ImportNicsRequest) Reset()         { *m = ImportNicsRequest{} }
func (m *ImportNicsRequest) String() string { return proto.CompactTextString(m) }
func (*ImportNicsRequest) ProtoMessage()    {}
func (*ImportNicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{42}
}

func (m *ImportNicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportNicsRequest.Unmarshal(m, b)
}
func (m *ImportNicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportNicsRequest.Marshal(b, m, deterministic)
}
func (m *ImportNicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportNicsRequest.Merge(m, src)
}
func (m *ImportNicsRequest) XXX_Size() int {
	return xxx_messageInfo_ImportNicsRequest.Size(m)
}
func (m *ImportNicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportNicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportNicsRequest proto.InternalMessageInfo

type isImportNicsRequest_Source interface {
	isImportNicsRequest_Source()
}

type ImportNicsRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportNicsRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportNicsRequest_MachineDbSource) isImportNicsRequest_Source() {}

func (*ImportNicsRequest_ConfigSource) isImportNicsRequest_Source() {}

func (m *ImportNicsRequest) GetSource() isImportNicsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportNicsRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportNicsRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportNicsRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportNicsRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportNicsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportNicsRequest_MachineDbSource)(nil),
		(*ImportNicsRequest_ConfigSource)(nil),
	}
}

type ImportDatacentersRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImportDatacentersRequest_MachineDbSource
	//	*ImportDatacentersRequest_ConfigSource
	Source               isImportDatacentersRequest_Source `protobuf_oneof:"source"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ImportDatacentersRequest) Reset()         { *m = ImportDatacentersRequest{} }
func (m *ImportDatacentersRequest) String() string { return proto.CompactTextString(m) }
func (*ImportDatacentersRequest) ProtoMessage()    {}
func (*ImportDatacentersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc37a625f56a717, []int{43}
}

func (m *ImportDatacentersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportDatacentersRequest.Unmarshal(m, b)
}
func (m *ImportDatacentersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportDatacentersRequest.Marshal(b, m, deterministic)
}
func (m *ImportDatacentersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportDatacentersRequest.Merge(m, src)
}
func (m *ImportDatacentersRequest) XXX_Size() int {
	return xxx_messageInfo_ImportDatacentersRequest.Size(m)
}
func (m *ImportDatacentersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportDatacentersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportDatacentersRequest proto.InternalMessageInfo

type isImportDatacentersRequest_Source interface {
	isImportDatacentersRequest_Source()
}

type ImportDatacentersRequest_MachineDbSource struct {
	MachineDbSource *MachineDBSource `protobuf:"bytes,1,opt,name=machine_db_source,json=machineDbSource,proto3,oneof"`
}

type ImportDatacentersRequest_ConfigSource struct {
	ConfigSource *ConfigSource `protobuf:"bytes,2,opt,name=config_source,json=configSource,proto3,oneof"`
}

func (*ImportDatacentersRequest_MachineDbSource) isImportDatacentersRequest_Source() {}

func (*ImportDatacentersRequest_ConfigSource) isImportDatacentersRequest_Source() {}

func (m *ImportDatacentersRequest) GetSource() isImportDatacentersRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImportDatacentersRequest) GetMachineDbSource() *MachineDBSource {
	if x, ok := m.GetSource().(*ImportDatacentersRequest_MachineDbSource); ok {
		return x.MachineDbSource
	}
	return nil
}

func (m *ImportDatacentersRequest) GetConfigSource() *ConfigSource {
	if x, ok := m.GetSource().(*ImportDatacentersRequest_ConfigSource); ok {
		return x.ConfigSource
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ImportDatacentersRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ImportDatacentersRequest_MachineDbSource)(nil),
		(*ImportDatacentersRequest_ConfigSource)(nil),
	}
}

func init() {
	proto.RegisterType((*CreateChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.CreateChromePlatformRequest")
	proto.RegisterType((*UpdateChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateChromePlatformRequest")
	proto.RegisterType((*GetChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.GetChromePlatformRequest")
	proto.RegisterType((*ListChromePlatformsRequest)(nil), "unifiedfleet.api.v1.rpc.ListChromePlatformsRequest")
	proto.RegisterType((*ListChromePlatformsResponse)(nil), "unifiedfleet.api.v1.rpc.ListChromePlatformsResponse")
	proto.RegisterType((*DeleteChromePlatformRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteChromePlatformRequest")
	proto.RegisterType((*ImportChromePlatformsRequest)(nil), "unifiedfleet.api.v1.rpc.ImportChromePlatformsRequest")
	proto.RegisterType((*ImportChromePlatformsResponse)(nil), "unifiedfleet.api.v1.rpc.ImportChromePlatformsResponse")
	proto.RegisterType((*ChromePlatformResult)(nil), "unifiedfleet.api.v1.rpc.ChromePlatformResult")
	proto.RegisterType((*CreateMachineRequest)(nil), "unifiedfleet.api.v1.rpc.CreateMachineRequest")
	proto.RegisterType((*UpdateMachineRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateMachineRequest")
	proto.RegisterType((*GetMachineRequest)(nil), "unifiedfleet.api.v1.rpc.GetMachineRequest")
	proto.RegisterType((*ListMachinesRequest)(nil), "unifiedfleet.api.v1.rpc.ListMachinesRequest")
	proto.RegisterType((*ListMachinesResponse)(nil), "unifiedfleet.api.v1.rpc.ListMachinesResponse")
	proto.RegisterType((*DeleteMachineRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteMachineRequest")
	proto.RegisterType((*ImportMachinesRequest)(nil), "unifiedfleet.api.v1.rpc.ImportMachinesRequest")
	proto.RegisterType((*MachineDBSource)(nil), "unifiedfleet.api.v1.rpc.MachineDBSource")
	proto.RegisterType((*ConfigSource)(nil), "unifiedfleet.api.v1.rpc.ConfigSource")
	proto.RegisterType((*CreateRackRequest)(nil), "unifiedfleet.api.v1.rpc.CreateRackRequest")
	proto.RegisterType((*UpdateRackRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateRackRequest")
	proto.RegisterType((*GetRackRequest)(nil), "unifiedfleet.api.v1.rpc.GetRackRequest")
	proto.RegisterType((*ListRacksRequest)(nil), "unifiedfleet.api.v1.rpc.ListRacksRequest")
	proto.RegisterType((*ListRacksResponse)(nil), "unifiedfleet.api.v1.rpc.ListRacksResponse")
	proto.RegisterType((*DeleteRackRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteRackRequest")
	proto.RegisterType((*CreateMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.CreateMachineLSERequest")
	proto.RegisterType((*UpdateMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.UpdateMachineLSERequest")
	proto.RegisterType((*GetMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.GetMachineLSERequest")
	proto.RegisterType((*ListMachineLSEsRequest)(nil), "unifiedfleet.api.v1.rpc.ListMachineLSEsRequest")
	proto.RegisterType((*ListMachineLSEsResponse)(nil), "unifiedfleet.api.v1.rpc.ListMachineLSEsResponse")
	proto.RegisterType((*DeleteMachineLSERequest)(nil), "unifiedfleet.api.v1.rpc.DeleteMachineLSERequest")
	proto.RegisterType((*CreateRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.CreateRackLSERequest")
	proto.RegisterType((*UpdateRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.UpdateRackLSERequest")
	proto.RegisterType((*GetRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.GetRackLSERequest")
	proto.RegisterType((*ListRackLSEsRequest)(nil), "unifiedfleet.api.v1.rpc.ListRackLSEsRequest")
	proto.RegisterType((*ListRackLSEsResponse)(nil), "unifiedfleet.api.v1.rpc.ListRackLSEsResponse")
	proto.RegisterType((*DeleteRackLSERequest)(nil), "unifiedfleet.api.v1.rpc.DeleteRackLSERequest")
	proto.RegisterType((*CreateNicRequest)(nil), "unifiedfleet.api.v1.rpc.CreateNicRequest")
	proto.RegisterType((*UpdateNicRequest)(nil), "unifiedfleet.api.v1.rpc.UpdateNicRequest")
	proto.RegisterType((*GetNicRequest)(nil), "unifiedfleet.api.v1.rpc.GetNicRequest")
	proto.RegisterType((*ListNicsRequest)(nil), "unifiedfleet.api.v1.rpc.ListNicsRequest")
	proto.RegisterType((*ListNicsResponse)(nil), "unifiedfleet.api.v1.rpc.ListNicsResponse")
	proto.RegisterType((*DeleteNicRequest)(nil), "unifiedfleet.api.v1.rpc.DeleteNicRequest")
	proto.RegisterType((*ImportNicsRequest)(nil), "unifiedfleet.api.v1.rpc.ImportNicsRequest")
	proto.RegisterType((*ImportDatacentersRequest)(nil), "unifiedfleet.api.v1.rpc.ImportDatacentersRequest")
}

func init() {
	proto.RegisterFile("infra/unifiedfleet/api/v1/rpc/fleet.proto", fileDescriptor_bfc37a625f56a717)
}

var fileDescriptor_bfc37a625f56a717 = []byte{
	// 1813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcd, 0x52, 0x1b, 0xd7,
	0x12, 0xbe, 0x63, 0x03, 0x86, 0x06, 0x0c, 0x3a, 0xc6, 0x86, 0x1a, 0xae, 0xef, 0xa5, 0xe4, 0x8b,
	0x0d, 0xd8, 0x1a, 0x19, 0x6c, 0xca, 0x37, 0xe5, 0xaa, 0x24, 0x60, 0x30, 0x21, 0x01, 0x0a, 0x8f,
	0x30, 0x15, 0x3b, 0xae, 0x52, 0x46, 0xa3, 0x23, 0x31, 0x41, 0xd2, 0x8c, 0x67, 0x46, 0xf8, 0x67,
	0x91, 0xca, 0x2a, 0x0b, 0x3f, 0x40, 0x2a, 0x95, 0x65, 0xf6, 0xd9, 0xe4, 0x15, 0xb2, 0x48, 0x55,
	0x16, 0x79, 0x06, 0x3f, 0x47, 0x56, 0xa9, 0xf3, 0x37, 0x7f, 0xd2, 0xfc, 0x08, 0x44, 0xaa, 0xbc,
	0x43, 0x67, 0x4e, 0x7f, 0xdd, 0xa7, 0xcf, 0xd7, 0x7d, 0xba, 0xdb, 0x86, 0x45, 0xa3, 0x55, 0xb3,
	0xb5, 0x62, 0xbb, 0x65, 0xd4, 0x0c, 0x5c, 0xad, 0x35, 0x30, 0x76, 0x8b, 0x9a, 0x65, 0x14, 0x4f,
	0x96, 0x8b, 0xb6, 0xa5, 0x17, 0xe9, 0x82, 0x62, 0xd9, 0xa6, 0x6b, 0xa2, 0xe9, 0xe0, 0x26, 0x45,
	0xb3, 0x0c, 0xe5, 0x64, 0x59, 0xb1, 0x2d, 0x5d, 0x9e, 0xad, 0x9b, 0x66, 0xbd, 0x81, 0x8b, 0x74,
	0x5b, 0xa5, 0x5d, 0x2b, 0xe2, 0xa6, 0xe5, 0xbe, 0x61, 0x52, 0xf2, 0x5c, 0xf4, 0x63, 0xcd, 0xc0,
	0x8d, 0x6a, 0xb9, 0xa9, 0x39, 0xc7, 0x7c, 0xc7, 0x27, 0x75, 0x53, 0xd1, 0x8f, 0x6c, 0xb3, 0x69,
	0xb4, 0x9b, 0x8a, 0x69, 0xd7, 0x8b, 0x8d, 0xb6, 0x6e, 0x14, 0xeb, 0x44, 0x3d, 0xdd, 0x50, 0xe4,
	0x08, 0xc4, 0x2c, 0x26, 0x5c, 0xc1, 0x47, 0xda, 0x89, 0x61, 0xda, 0x1c, 0xe0, 0xa3, 0x1e, 0x00,
	0x6c, 0xec, 0x98, 0x6d, 0x5b, 0xc7, 0x5c, 0xf4, 0x41, 0x46, 0x51, 0xb2, 0xe0, 0xb8, 0x9a, 0xdb,
	0x76, 0xb8, 0x60, 0x21, 0xde, 0x6f, 0x4c, 0xb0, 0xa9, 0xe9, 0x47, 0x46, 0x4b, 0xe8, 0x59, 0x4a,
	0xdb, 0x6e, 0x6b, 0xba, 0xf0, 0xc7, 0x6a, 0xda, 0x5e, 0x6a, 0x30, 0x2e, 0x5b, 0x0d, 0xcd, 0xad,
	0x99, 0x76, 0x93, 0x8b, 0x2d, 0x67, 0xb4, 0xa8, 0xdc, 0x70, 0x84, 0x55, 0x4a, 0x16, 0xab, 0x02,
	0xfb, 0x53, 0x0f, 0xdd, 0xc2, 0xee, 0x2b, 0xd3, 0xe6, 0x07, 0xc9, 0xff, 0x2c, 0xc1, 0xec, 0x23,
	0x1b, 0x6b, 0x2e, 0x7e, 0x44, 0x2d, 0xde, 0xe7, 0x06, 0xab, 0xf8, 0x65, 0x1b, 0x3b, 0x2e, 0x3a,
	0x84, 0xcb, 0x7a, 0xe8, 0xc3, 0x8c, 0x34, 0x27, 0x2d, 0x8c, 0xae, 0x2c, 0x2a, 0xdd, 0x98, 0x46,
	0x31, 0x95, 0x30, 0xd2, 0xfa, 0xc5, 0xf7, 0x6b, 0x17, 0xd4, 0x08, 0x0a, 0xba, 0x0d, 0xb9, 0xf0,
	0x4a, 0xd9, 0xa8, 0xce, 0x5c, 0x98, 0x93, 0x16, 0x46, 0xd4, 0xc9, 0xf0, 0x87, 0xed, 0x6a, 0xfe,
	0x57, 0x09, 0x66, 0x9f, 0x5a, 0xd5, 0x7f, 0xdc, 0xc8, 0x87, 0x30, 0xda, 0xa6, 0x6a, 0x69, 0x28,
	0x50, 0xf3, 0x46, 0x57, 0x64, 0x85, 0xf1, 0x4d, 0x11, 0xd1, 0xa2, 0x3c, 0x26, 0x84, 0xdf, 0xd5,
	0x9c, 0x63, 0x15, 0xd8, 0x76, 0xf2, 0x77, 0xbe, 0x0e, 0x33, 0x5b, 0xd8, 0xed, 0x6e, 0xf0, 0x17,
	0x30, 0xd0, 0xd2, 0x9a, 0x98, 0x9a, 0x39, 0xb2, 0xfe, 0xe0, 0xfd, 0xda, 0x85, 0xbf, 0xd6, 0x96,
	0x41, 0x5c, 0x5a, 0x81, 0x9a, 0x5b, 0x70, 0xde, 0x38, 0x2e, 0x6e, 0x2a, 0x9a, 0x65, 0x39, 0x96,
	0xe9, 0x2a, 0xba, 0xd9, 0x2c, 0x46, 0xd0, 0x28, 0x48, 0xfe, 0x4b, 0x90, 0x77, 0x0c, 0x27, 0xa2,
	0xc9, 0x11, 0xaa, 0x66, 0x61, 0xc4, 0xd2, 0xea, 0xb8, 0xec, 0x18, 0x6f, 0x99, 0xbe, 0x41, 0x75,
	0x98, 0x2c, 0x94, 0x8c, 0xb7, 0x18, 0x5d, 0x07, 0xa0, 0x1f, 0x5d, 0xf3, 0x18, 0xb7, 0xb8, 0xfb,
	0xe9, 0xf6, 0x03, 0xb2, 0x90, 0xff, 0x49, 0x82, 0xd9, 0xae, 0xd0, 0x8e, 0x65, 0xb6, 0x1c, 0x8c,
	0x4a, 0x30, 0x11, 0xf6, 0x98, 0x33, 0x23, 0xcd, 0x5d, 0xec, 0xc9, 0xf1, 0x6a, 0x14, 0x01, 0xdd,
	0x84, 0x89, 0x16, 0x7e, 0xed, 0x96, 0x3b, 0x0c, 0x1b, 0x27, 0xcb, 0xfb, 0x9e, 0x71, 0xdf, 0xc0,
	0xec, 0x06, 0x6e, 0xe0, 0x38, 0x4e, 0xf4, 0xd5, 0xc5, 0x7f, 0x4a, 0xf0, 0xef, 0xed, 0xa6, 0x65,
	0xda, 0x71, 0x5e, 0x3e, 0x84, 0x9c, 0x08, 0xdd, 0x6a, 0xa5, 0xcc, 0xd2, 0x17, 0x27, 0xe1, 0x82,
	0x12, 0x93, 0x93, 0x95, 0x5d, 0x26, 0xb1, 0xb1, 0x5e, 0xa2, 0xfb, 0x3f, 0xfb, 0x97, 0x3a, 0xc1,
	0x41, 0x36, 0x2a, 0x6c, 0x09, 0xed, 0xc0, 0xb8, 0x6e, 0xb6, 0x6a, 0x46, 0x5d, 0x60, 0x32, 0x0e,
	0xce, 0xc7, 0x62, 0x3e, 0xa2, 0xbb, 0x3d, 0xc0, 0x31, 0x3d, 0xf0, 0x7b, 0x7d, 0x18, 0x86, 0x18,
	0x4c, 0xfe, 0x17, 0x09, 0xae, 0xc7, 0x1c, 0x88, 0xdf, 0xed, 0x26, 0x0c, 0x59, 0x9a, 0xe3, 0xe0,
	0x2a, 0xbf, 0xd2, 0x42, 0xbc, 0xca, 0x88, 0xff, 0x9d, 0x76, 0xc3, 0x55, 0xb9, 0x30, 0x81, 0xa9,
	0x69, 0x46, 0x03, 0x93, 0xe0, 0x3e, 0x0d, 0x0c, 0x13, 0xce, 0xbf, 0x85, 0xa9, 0x6e, 0xdf, 0xd1,
	0x26, 0x0c, 0x5b, 0xa7, 0x8d, 0x79, 0xd5, 0x13, 0x25, 0x41, 0x82, 0x6d, 0xdb, 0xb4, 0xcb, 0x4d,
	0xa7, 0xce, 0xd9, 0x36, 0x4c, 0x17, 0x76, 0x9d, 0x7a, 0xfe, 0x35, 0x4c, 0xb1, 0x0c, 0xc9, 0xef,
	0x4b, 0xdc, 0xf9, 0x1a, 0x5c, 0xe2, 0xd7, 0xc5, 0x55, 0xe7, 0x13, 0x54, 0x73, 0x59, 0x96, 0x67,
	0x84, 0x1c, 0x89, 0x3f, 0x41, 0x1b, 0x2f, 0xfd, 0x8d, 0xf0, 0x95, 0xed, 0x6a, 0xfe, 0x07, 0x09,
	0xa6, 0x9e, 0xf2, 0x8c, 0xd2, 0x6f, 0xd5, 0x67, 0xca, 0x6d, 0xcf, 0x20, 0xb7, 0x85, 0xdd, 0x88,
	0x51, 0x1b, 0xa1, 0x88, 0xbb, 0x4b, 0x23, 0x6e, 0x09, 0x16, 0x52, 0x23, 0x4e, 0xc0, 0xb0, 0x50,
	0x7b, 0x02, 0x57, 0x48, 0xca, 0xe1, 0x8b, 0x7d, 0x49, 0x63, 0xdf, 0xc2, 0x54, 0x18, 0x92, 0x53,
	0xfc, 0x63, 0x18, 0xe6, 0xde, 0x10, 0x79, 0x2b, 0x83, 0x1b, 0x55, 0x4f, 0x26, 0x73, 0xa6, 0x7a,
	0x01, 0x53, 0x2c, 0x53, 0x9d, 0x8b, 0xc3, 0x7e, 0x97, 0xe0, 0x2a, 0x0b, 0xe5, 0xa8, 0xcf, 0x3e,
	0xb4, 0xa4, 0x34, 0x0f, 0x13, 0x11, 0xed, 0x08, 0xc1, 0xc0, 0x91, 0xe9, 0xb8, 0xcc, 0x45, 0x2a,
	0xfd, 0x3b, 0xff, 0x15, 0x8c, 0x05, 0x01, 0x91, 0x02, 0x57, 0x84, 0x39, 0xd8, 0x3e, 0x31, 0x74,
	0x5c, 0xf6, 0xbd, 0xaa, 0xe6, 0xb8, 0x2e, 0xf6, 0x65, 0x4f, 0x6b, 0x62, 0x42, 0xa5, 0x9a, 0xd1,
	0xe0, 0xbb, 0x78, 0xb0, 0x93, 0x05, 0xf2, 0x31, 0x5f, 0x83, 0x1c, 0x0b, 0x76, 0x55, 0xd3, 0x8f,
	0x85, 0x23, 0xff, 0x0f, 0x03, 0xa4, 0xca, 0xe2, 0xbe, 0xfb, 0x6f, 0x02, 0x49, 0x88, 0x14, 0x0b,
	0x34, 0x2a, 0x81, 0xa6, 0xe1, 0x12, 0xad, 0xcf, 0xbc, 0xe8, 0x1e, 0x22, 0x3f, 0xb7, 0xab, 0xf9,
	0x77, 0x12, 0xe4, 0x58, 0x68, 0xf7, 0x47, 0xd1, 0x99, 0xc2, 0xb9, 0x04, 0x97, 0xb7, 0xb0, 0x1b,
	0x34, 0x64, 0x2d, 0x44, 0xcd, 0x02, 0xa5, 0xe6, 0x2d, 0x98, 0x4f, 0xa5, 0x26, 0xc5, 0x60, 0xbc,
	0xdc, 0x83, 0x49, 0x12, 0x75, 0x64, 0xa5, 0x2f, 0x51, 0x6c, 0x43, 0x2e, 0x80, 0xc7, 0x43, 0x78,
	0x15, 0x06, 0xc9, 0xf1, 0x45, 0xfc, 0xa6, 0x79, 0x4c, 0x65, 0xbb, 0x33, 0x47, 0xee, 0x21, 0xe4,
	0x58, 0xe4, 0xf6, 0xd9, 0x37, 0xef, 0x24, 0x98, 0x0e, 0xbd, 0x29, 0x3b, 0xa5, 0x4d, 0x01, 0xff,
	0xb9, 0xf7, 0x26, 0xec, 0x94, 0x36, 0x39, 0x13, 0xe6, 0xd3, 0xf3, 0xd2, 0x4e, 0x69, 0x93, 0xf1,
	0x21, 0x20, 0x8d, 0x6e, 0xc0, 0xb8, 0xff, 0xcb, 0x27, 0xe1, 0x98, 0xbf, 0xb8, 0x5d, 0x25, 0x2d,
	0xc0, 0x74, 0xe8, 0x95, 0x39, 0x27, 0x63, 0xce, 0x44, 0xd1, 0x32, 0x4c, 0xf9, 0x2f, 0x4e, 0xc0,
	0xc0, 0xad, 0xd0, 0x65, 0xdc, 0xa3, 0x97, 0x51, 0x80, 0xdb, 0x59, 0x73, 0x28, 0x41, 0x62, 0x57,
	0x72, 0x00, 0xd7, 0x02, 0x8f, 0xc4, 0x4e, 0x69, 0xb3, 0x2f, 0xa4, 0x25, 0x17, 0xdd, 0x01, 0xcb,
	0xb9, 0xbb, 0x05, 0xa3, 0xbe, 0x77, 0x04, 0x83, 0xb3, 0x39, 0x57, 0x0d, 0x4a, 0x66, 0x66, 0x73,
	0x05, 0xa6, 0x43, 0xef, 0xd0, 0x79, 0xb8, 0xd1, 0x2b, 0x96, 0x08, 0xdb, 0x03, 0x0a, 0xd6, 0x58,
	0x22, 0xf4, 0x59, 0x94, 0x4f, 0x09, 0x55, 0x8f, 0x42, 0x42, 0x8e, 0xb8, 0x9a, 0xff, 0x19, 0x28,
	0x96, 0xf8, 0x4a, 0xa8, 0x58, 0xea, 0xbf, 0xea, 0x3e, 0x14, 0x4b, 0x11, 0xa3, 0x4e, 0xfb, 0xf6,
	0x0b, 0x98, 0x50, 0xb1, 0xc4, 0x17, 0xfb, 0x59, 0x2c, 0xf9, 0x90, 0x7e, 0xb1, 0xc4, 0xbd, 0x91,
	0xa5, 0x58, 0x12, 0x66, 0x7a, 0x32, 0xbd, 0x17, 0x4b, 0xe7, 0xe2, 0xb0, 0xaf, 0x61, 0x92, 0xd1,
	0x73, 0xcf, 0xd0, 0x05, 0xf2, 0x2a, 0x5c, 0x6c, 0x19, 0x3a, 0xe7, 0xc6, 0x7f, 0x12, 0x0e, 0xb5,
	0x67, 0xe8, 0x8c, 0x17, 0x64, 0x3f, 0xba, 0x0a, 0x43, 0x2d, 0x43, 0xf7, 0xa9, 0x38, 0xd8, 0x32,
	0xf4, 0xed, 0x6a, 0xfe, 0x7b, 0x09, 0x26, 0x19, 0x0d, 0xcf, 0xae, 0xe2, 0x4c, 0xb4, 0x7b, 0x02,
	0xe3, 0x5b, 0xd8, 0x0d, 0x18, 0xf1, 0x69, 0xc8, 0x83, 0x77, 0xa8, 0x07, 0x6f, 0xc2, 0xff, 0x52,
	0x3d, 0x48, 0x20, 0x98, 0xf7, 0x76, 0x61, 0x82, 0x70, 0x63, 0xcf, 0xd0, 0xfb, 0x42, 0xb5, 0x16,
	0xab, 0x10, 0x18, 0x1c, 0xa7, 0xd9, 0x0a, 0x0c, 0xb4, 0x0c, 0x5d, 0x50, 0x2c, 0xc5, 0x55, 0x2a,
	0xdd, 0x9b, 0x99, 0x5a, 0x07, 0x30, 0xc9, 0xa8, 0xd5, 0x57, 0xa7, 0xfc, 0x26, 0x41, 0x8e, 0xd5,
	0xdf, 0x41, 0xbf, 0x7c, 0x68, 0xb5, 0xf7, 0x1f, 0x12, 0xcc, 0xb0, 0x53, 0x6c, 0x68, 0xae, 0xa6,
	0xe3, 0x96, 0x8b, 0xed, 0x0f, 0xf5, 0x30, 0x2b, 0x3f, 0xca, 0x30, 0xf8, 0x98, 0xc8, 0xa2, 0x57,
	0xe2, 0x39, 0x0a, 0xb7, 0xfe, 0xe8, 0x7e, 0xbc, 0x8a, 0xf8, 0x61, 0xa8, 0x9c, 0x7d, 0xb6, 0x40,
	0x14, 0x77, 0x9b, 0x58, 0x26, 0x28, 0x4e, 0x18, 0x70, 0xf6, 0xa2, 0xf8, 0x25, 0x7d, 0x6d, 0x22,
	0x8b, 0xcb, 0xb1, 0x5a, 0xe3, 0x46, 0x94, 0xbd, 0xa8, 0xfc, 0x4e, 0x62, 0xcf, 0x50, 0x64, 0x94,
	0x84, 0xee, 0xc5, 0x6a, 0x8d, 0x9f, 0x57, 0xca, 0xf7, 0x7b, 0x13, 0xe2, 0x69, 0xa3, 0x2a, 0x5e,
	0x8d, 0xcc, 0xee, 0x4e, 0x98, 0x1d, 0xca, 0xd7, 0x3a, 0x52, 0xec, 0x66, 0xd3, 0x72, 0xdf, 0xa0,
	0x8a, 0xe8, 0xb4, 0xa3, 0x27, 0x5d, 0x8d, 0x55, 0x93, 0x34, 0x35, 0x94, 0x91, 0xd0, 0x43, 0x76,
	0x96, 0xe8, 0x3f, 0x5d, 0xa0, 0x0a, 0x8c, 0x87, 0x3a, 0x03, 0x54, 0x48, 0xa1, 0x6a, 0x78, 0xa8,
	0x20, 0x67, 0x18, 0x61, 0x10, 0x1d, 0xa1, 0x82, 0x3f, 0x41, 0x47, 0xb7, 0xf1, 0x53, 0x26, 0x1d,
	0x2f, 0x00, 0xfc, 0x82, 0x1d, 0x2d, 0x25, 0x11, 0xf0, 0x14, 0xe8, 0xc7, 0x30, 0x16, 0x1c, 0xe9,
	0xa0, 0x3b, 0x89, 0xac, 0x89, 0x0c, 0x46, 0xe4, 0x42, 0xc6, 0xdd, 0x9c, 0x5c, 0x87, 0x30, 0x1e,
	0xaa, 0x9b, 0x13, 0xdc, 0xd5, 0x6d, 0xce, 0x13, 0x4b, 0xa7, 0x03, 0xb8, 0x1c, 0x1e, 0xdc, 0x20,
	0x25, 0x85, 0x47, 0xd1, 0x83, 0x74, 0x23, 0xd0, 0x33, 0x00, 0xbf, 0x02, 0x4f, 0x70, 0x7c, 0xc7,
	0x98, 0x43, 0x4e, 0xeb, 0x9e, 0x09, 0xb4, 0x5f, 0x61, 0x27, 0x40, 0x77, 0x0c, 0x36, 0xd2, 0xa1,
	0x4b, 0x70, 0x89, 0x17, 0xc9, 0xe8, 0x56, 0x12, 0x57, 0x7a, 0x02, 0xad, 0xc0, 0x88, 0x37, 0x32,
	0x40, 0x8b, 0x89, 0x97, 0x1e, 0x1c, 0x53, 0xc8, 0x4b, 0x59, 0xb6, 0x72, 0x72, 0xec, 0x03, 0xf8,
	0xf5, 0x6a, 0x82, 0x4f, 0x3a, 0xe6, 0x08, 0xb1, 0xb4, 0x38, 0x16, 0x35, 0xaa, 0xdf, 0x5c, 0xa1,
	0xbb, 0xd9, 0x92, 0x80, 0x5f, 0x2f, 0xcb, 0xd9, 0x1a, 0x49, 0xa2, 0x2c, 0xda, 0xfb, 0x27, 0x28,
	0x8b, 0x19, 0x13, 0x64, 0x55, 0x86, 0x69, 0x49, 0x1a, 0x58, 0x28, 0x64, 0x48, 0x0b, 0xbd, 0xab,
	0x71, 0x59, 0x99, 0x1a, 0xe8, 0xb9, 0x51, 0x31, 0x4b, 0xc4, 0x07, 0x5a, 0x28, 0xf9, 0x6e, 0x76,
	0x01, 0x4e, 0x84, 0x17, 0xa2, 0xba, 0xcc, 0xe4, 0xc9, 0x98, 0x46, 0x3c, 0xe1, 0xe9, 0x19, 0x0f,
	0xf5, 0xd5, 0xa9, 0xcf, 0x42, 0xb8, 0x7d, 0x92, 0x33, 0x34, 0x6b, 0xfe, 0xb3, 0x90, 0xae, 0xa3,
	0x5b, 0xa3, 0x9d, 0x49, 0x07, 0x7b, 0x16, 0xc4, 0xaf, 0xa5, 0xb4, 0x50, 0xef, 0x11, 0x9d, 0x3f,
	0x0b, 0xa2, 0x79, 0x4d, 0x79, 0x16, 0x22, 0x6d, 0x73, 0xca, 0xb3, 0xd0, 0xd1, 0x11, 0x7b, 0xcf,
	0x42, 0xba, 0xbb, 0xba, 0x75, 0xb4, 0xb1, 0x57, 0x7d, 0x08, 0x23, 0x5e, 0x8f, 0x9a, 0x90, 0xb5,
	0xa2, 0x7d, 0xac, 0x9c, 0xd2, 0x2c, 0x11, 0x5c, 0xaf, 0x31, 0x4d, 0xc0, 0x8d, 0x36, 0xaf, 0xa9,
	0xb8, 0xfb, 0x30, 0xc4, 0x1a, 0x4d, 0x74, 0x33, 0xe9, 0x3a, 0x7b, 0x40, 0x2c, 0xc3, 0xb0, 0x68,
	0x0c, 0xd1, 0x42, 0xe2, 0xa5, 0x04, 0x5a, 0x2e, 0x79, 0x31, 0xc3, 0x4e, 0x7e, 0x75, 0x7b, 0x30,
	0xe2, 0x75, 0x82, 0x09, 0xae, 0x88, 0x76, 0x8b, 0xb1, 0x57, 0xb6, 0x03, 0xe0, 0xb7, 0x80, 0x09,
	0xac, 0xee, 0xe8, 0x13, 0xbb, 0xbe, 0xe0, 0xcf, 0x45, 0x43, 0x19, 0x68, 0xc5, 0x12, 0x4a, 0xf8,
	0xb8, 0xb6, 0xad, 0x1b, 0xf6, 0xfa, 0xfc, 0xf3, 0x1b, 0x89, 0xff, 0x9b, 0xe8, 0x61, 0xbb, 0xe6,
	0x58, 0x95, 0xca, 0x10, 0x3d, 0xe0, 0xbd, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xef, 0xa1,
	0xb5, 0x7b, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FleetClient interface {
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateMachine creates a new machine.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// Update updates the machine
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error)
	// List gets all the machines
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// CreateRack creates a new rack
	CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// Update updates the rack
	UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// Get retrieves the details of the rack
	GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error)
	// List gets all the racks
	ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateNic creates a new nic
	CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// Update updates the nic
	UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// Get retrieves the details of the nic
	GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error)
	// List gets all the nics
	ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ImportNics imports nics info.
	ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error)
}
type fleetPRPCClient struct {
	client *prpc.Client
}

func NewFleetPRPCClient(client *prpc.Client) FleetClient {
	return &fleetPRPCClient{client}
}

func (c *fleetPRPCClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetPRPCClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.client.Call(ctx, "unifiedfleet.api.v1.rpc.Fleet", "ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) CreateChromePlatform(ctx context.Context, in *CreateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateChromePlatform(ctx context.Context, in *UpdateChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetChromePlatform(ctx context.Context, in *GetChromePlatformRequest, opts ...grpc.CallOption) (*proto1.ChromePlatform, error) {
	out := new(proto1.ChromePlatform)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListChromePlatforms(ctx context.Context, in *ListChromePlatformsRequest, opts ...grpc.CallOption) (*ListChromePlatformsResponse, error) {
	out := new(ListChromePlatformsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteChromePlatform(ctx context.Context, in *DeleteChromePlatformRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportChromePlatforms(ctx context.Context, in *ImportChromePlatformsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*proto1.Machine, error) {
	out := new(proto1.Machine)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportMachines(ctx context.Context, in *ImportMachinesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRack(ctx context.Context, in *GetRackRequest, opts ...grpc.CallOption) (*proto1.Rack, error) {
	out := new(proto1.Rack)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRack(ctx context.Context, in *DeleteRackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateMachineLSE(ctx context.Context, in *CreateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateMachineLSE(ctx context.Context, in *UpdateMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetMachineLSE(ctx context.Context, in *GetMachineLSERequest, opts ...grpc.CallOption) (*proto1.MachineLSE, error) {
	out := new(proto1.MachineLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListMachineLSEs(ctx context.Context, in *ListMachineLSEsRequest, opts ...grpc.CallOption) (*ListMachineLSEsResponse, error) {
	out := new(ListMachineLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteMachineLSE(ctx context.Context, in *DeleteMachineLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateRackLSE(ctx context.Context, in *CreateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateRackLSE(ctx context.Context, in *UpdateRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetRackLSE(ctx context.Context, in *GetRackLSERequest, opts ...grpc.CallOption) (*proto1.RackLSE, error) {
	out := new(proto1.RackLSE)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListRackLSEs(ctx context.Context, in *ListRackLSEsRequest, opts ...grpc.CallOption) (*ListRackLSEsResponse, error) {
	out := new(ListRackLSEsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteRackLSE(ctx context.Context, in *DeleteRackLSERequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateNic(ctx context.Context, in *CreateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/CreateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateNic(ctx context.Context, in *UpdateNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetNic(ctx context.Context, in *GetNicRequest, opts ...grpc.CallOption) (*proto1.Nic, error) {
	out := new(proto1.Nic)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/GetNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListNics(ctx context.Context, in *ListNicsRequest, opts ...grpc.CallOption) (*ListNicsResponse, error) {
	out := new(ListNicsResponse)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ListNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteNic(ctx context.Context, in *DeleteNicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportNics(ctx context.Context, in *ImportNicsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportNics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ImportDatacenters(ctx context.Context, in *ImportDatacentersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
type FleetServer interface {
	// CreateChromePlatform creates a new chromePlatform.
	CreateChromePlatform(context.Context, *CreateChromePlatformRequest) (*proto1.ChromePlatform, error)
	// Update updates the chromePlatform
	UpdateChromePlatform(context.Context, *UpdateChromePlatformRequest) (*proto1.ChromePlatform, error)
	// Get retrieves the details of the chromePlatform
	GetChromePlatform(context.Context, *GetChromePlatformRequest) (*proto1.ChromePlatform, error)
	// List gets all the chromePlatforms
	ListChromePlatforms(context.Context, *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error)
	// Delete delete the chromePlatform
	DeleteChromePlatform(context.Context, *DeleteChromePlatformRequest) (*empty.Empty, error)
	// ImportChromePlatforms imports chrome platforms.
	ImportChromePlatforms(context.Context, *ImportChromePlatformsRequest) (*status.Status, error)
	// CreateMachine creates a new machine.
	CreateMachine(context.Context, *CreateMachineRequest) (*proto1.Machine, error)
	// Update updates the machine
	UpdateMachine(context.Context, *UpdateMachineRequest) (*proto1.Machine, error)
	// Get retrieves the details of the machine
	GetMachine(context.Context, *GetMachineRequest) (*proto1.Machine, error)
	// List gets all the machines
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// Delete delete the machine
	DeleteMachine(context.Context, *DeleteMachineRequest) (*empty.Empty, error)
	// Import machines from sources
	//
	// This doesn't return google.longrunning.Operation as the corresponding
	// package is not imported into chops go package.
	ImportMachines(context.Context, *ImportMachinesRequest) (*status.Status, error)
	// CreateRack creates a new rack
	CreateRack(context.Context, *CreateRackRequest) (*proto1.Rack, error)
	// Update updates the rack
	UpdateRack(context.Context, *UpdateRackRequest) (*proto1.Rack, error)
	// Get retrieves the details of the rack
	GetRack(context.Context, *GetRackRequest) (*proto1.Rack, error)
	// List gets all the racks
	ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error)
	// Delete delete the rack
	DeleteRack(context.Context, *DeleteRackRequest) (*empty.Empty, error)
	// CreateMachineLSE creates a new machineLSE
	CreateMachineLSE(context.Context, *CreateMachineLSERequest) (*proto1.MachineLSE, error)
	// Update updates the machineLSE
	UpdateMachineLSE(context.Context, *UpdateMachineLSERequest) (*proto1.MachineLSE, error)
	// Get retrieves the details of the machineLSE
	GetMachineLSE(context.Context, *GetMachineLSERequest) (*proto1.MachineLSE, error)
	// List gets all the machineLSEs
	ListMachineLSEs(context.Context, *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error)
	// Delete delete the machineLSE
	DeleteMachineLSE(context.Context, *DeleteMachineLSERequest) (*empty.Empty, error)
	// CreateRackLSE creates a new rackLSE
	CreateRackLSE(context.Context, *CreateRackLSERequest) (*proto1.RackLSE, error)
	// Update updates the rackLSE
	UpdateRackLSE(context.Context, *UpdateRackLSERequest) (*proto1.RackLSE, error)
	// Get retrieves the details of the rackLSE
	GetRackLSE(context.Context, *GetRackLSERequest) (*proto1.RackLSE, error)
	// List gets all the rackLSEs
	ListRackLSEs(context.Context, *ListRackLSEsRequest) (*ListRackLSEsResponse, error)
	// Delete delete the rackLSE
	DeleteRackLSE(context.Context, *DeleteRackLSERequest) (*empty.Empty, error)
	// CreateNic creates a new nic
	CreateNic(context.Context, *CreateNicRequest) (*proto1.Nic, error)
	// Update updates the nic
	UpdateNic(context.Context, *UpdateNicRequest) (*proto1.Nic, error)
	// Get retrieves the details of the nic
	GetNic(context.Context, *GetNicRequest) (*proto1.Nic, error)
	// List gets all the nics
	ListNics(context.Context, *ListNicsRequest) (*ListNicsResponse, error)
	// Delete delete the nic
	DeleteNic(context.Context, *DeleteNicRequest) (*empty.Empty, error)
	// ImportNics imports nics info.
	ImportNics(context.Context, *ImportNicsRequest) (*status.Status, error)
	// ImportDatacenters imports datacenter & its related info, including kvm & switch.
	ImportDatacenters(context.Context, *ImportDatacentersRequest) (*status.Status, error)
}

// UnimplementedFleetServer can be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (*UnimplementedFleetServer) CreateChromePlatform(ctx context.Context, req *CreateChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) UpdateChromePlatform(ctx context.Context, req *UpdateChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateChromePlatform not implemented")
}
func (*UnimplementedFleetServer) GetChromePlatform(ctx context.Context, req *GetChromePlatformRequest) (*proto1.ChromePlatform, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ListChromePlatforms(ctx context.Context, req *ListChromePlatformsRequest) (*ListChromePlatformsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) DeleteChromePlatform(ctx context.Context, req *DeleteChromePlatformRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteChromePlatform not implemented")
}
func (*UnimplementedFleetServer) ImportChromePlatforms(ctx context.Context, req *ImportChromePlatformsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportChromePlatforms not implemented")
}
func (*UnimplementedFleetServer) CreateMachine(ctx context.Context, req *CreateMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedFleetServer) UpdateMachine(ctx context.Context, req *UpdateMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (*UnimplementedFleetServer) GetMachine(ctx context.Context, req *GetMachineRequest) (*proto1.Machine, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (*UnimplementedFleetServer) ListMachines(ctx context.Context, req *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (*UnimplementedFleetServer) DeleteMachine(ctx context.Context, req *DeleteMachineRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedFleetServer) ImportMachines(ctx context.Context, req *ImportMachinesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportMachines not implemented")
}
func (*UnimplementedFleetServer) CreateRack(ctx context.Context, req *CreateRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRack not implemented")
}
func (*UnimplementedFleetServer) UpdateRack(ctx context.Context, req *UpdateRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRack not implemented")
}
func (*UnimplementedFleetServer) GetRack(ctx context.Context, req *GetRackRequest) (*proto1.Rack, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRack not implemented")
}
func (*UnimplementedFleetServer) ListRacks(ctx context.Context, req *ListRacksRequest) (*ListRacksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (*UnimplementedFleetServer) DeleteRack(ctx context.Context, req *DeleteRackRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRack not implemented")
}
func (*UnimplementedFleetServer) CreateMachineLSE(ctx context.Context, req *CreateMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateMachineLSE(ctx context.Context, req *UpdateMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateMachineLSE not implemented")
}
func (*UnimplementedFleetServer) GetMachineLSE(ctx context.Context, req *GetMachineLSERequest) (*proto1.MachineLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetMachineLSE not implemented")
}
func (*UnimplementedFleetServer) ListMachineLSEs(ctx context.Context, req *ListMachineLSEsRequest) (*ListMachineLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMachineLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteMachineLSE(ctx context.Context, req *DeleteMachineLSERequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteMachineLSE not implemented")
}
func (*UnimplementedFleetServer) CreateRackLSE(ctx context.Context, req *CreateRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateRackLSE not implemented")
}
func (*UnimplementedFleetServer) UpdateRackLSE(ctx context.Context, req *UpdateRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateRackLSE not implemented")
}
func (*UnimplementedFleetServer) GetRackLSE(ctx context.Context, req *GetRackLSERequest) (*proto1.RackLSE, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRackLSE not implemented")
}
func (*UnimplementedFleetServer) ListRackLSEs(ctx context.Context, req *ListRackLSEsRequest) (*ListRackLSEsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRackLSEs not implemented")
}
func (*UnimplementedFleetServer) DeleteRackLSE(ctx context.Context, req *DeleteRackLSERequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRackLSE not implemented")
}
func (*UnimplementedFleetServer) CreateNic(ctx context.Context, req *CreateNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNic not implemented")
}
func (*UnimplementedFleetServer) UpdateNic(ctx context.Context, req *UpdateNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNic not implemented")
}
func (*UnimplementedFleetServer) GetNic(ctx context.Context, req *GetNicRequest) (*proto1.Nic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNic not implemented")
}
func (*UnimplementedFleetServer) ListNics(ctx context.Context, req *ListNicsRequest) (*ListNicsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNics not implemented")
}
func (*UnimplementedFleetServer) DeleteNic(ctx context.Context, req *DeleteNicRequest) (*empty.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNic not implemented")
}
func (*UnimplementedFleetServer) ImportNics(ctx context.Context, req *ImportNicsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportNics not implemented")
}
func (*UnimplementedFleetServer) ImportDatacenters(ctx context.Context, req *ImportDatacentersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportDatacenters not implemented")
}

func RegisterFleetServer(s prpc.Registrar, srv FleetServer) {
	s.RegisterService(&_Fleet_serviceDesc, srv)
}

func _Fleet_CreateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateChromePlatform(ctx, req.(*CreateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateChromePlatform(ctx, req.(*UpdateChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetChromePlatform(ctx, req.(*GetChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListChromePlatforms(ctx, req.(*ListChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteChromePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChromePlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteChromePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteChromePlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteChromePlatform(ctx, req.(*DeleteChromePlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportChromePlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportChromePlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportChromePlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportChromePlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportChromePlatforms(ctx, req.(*ImportChromePlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportMachines(ctx, req.(*ImportMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRack(ctx, req.(*CreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRack(ctx, req.(*UpdateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRack(ctx, req.(*GetRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRacks(ctx, req.(*ListRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRack(ctx, req.(*DeleteRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateMachineLSE(ctx, req.(*CreateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateMachineLSE(ctx, req.(*UpdateMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetMachineLSE(ctx, req.(*GetMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListMachineLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListMachineLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListMachineLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListMachineLSEs(ctx, req.(*ListMachineLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteMachineLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteMachineLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteMachineLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteMachineLSE(ctx, req.(*DeleteMachineLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateRackLSE(ctx, req.(*CreateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateRackLSE(ctx, req.(*UpdateRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetRackLSE(ctx, req.(*GetRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListRackLSEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRackLSEsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListRackLSEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListRackLSEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListRackLSEs(ctx, req.(*ListRackLSEsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteRackLSE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackLSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteRackLSE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteRackLSE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteRackLSE(ctx, req.(*DeleteRackLSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/CreateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateNic(ctx, req.(*CreateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/UpdateNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateNic(ctx, req.(*UpdateNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/GetNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetNic(ctx, req.(*GetNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ListNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListNics(ctx, req.(*ListNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/DeleteNic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteNic(ctx, req.(*DeleteNicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportNicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportNics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportNics(ctx, req.(*ImportNicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ImportDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ImportDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unifiedfleet.api.v1.rpc.Fleet/ImportDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ImportDatacenters(ctx, req.(*ImportDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fleet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unifiedfleet.api.v1.rpc.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChromePlatform",
			Handler:    _Fleet_CreateChromePlatform_Handler,
		},
		{
			MethodName: "UpdateChromePlatform",
			Handler:    _Fleet_UpdateChromePlatform_Handler,
		},
		{
			MethodName: "GetChromePlatform",
			Handler:    _Fleet_GetChromePlatform_Handler,
		},
		{
			MethodName: "ListChromePlatforms",
			Handler:    _Fleet_ListChromePlatforms_Handler,
		},
		{
			MethodName: "DeleteChromePlatform",
			Handler:    _Fleet_DeleteChromePlatform_Handler,
		},
		{
			MethodName: "ImportChromePlatforms",
			Handler:    _Fleet_ImportChromePlatforms_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Fleet_CreateMachine_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Fleet_UpdateMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _Fleet_GetMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Fleet_ListMachines_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Fleet_DeleteMachine_Handler,
		},
		{
			MethodName: "ImportMachines",
			Handler:    _Fleet_ImportMachines_Handler,
		},
		{
			MethodName: "CreateRack",
			Handler:    _Fleet_CreateRack_Handler,
		},
		{
			MethodName: "UpdateRack",
			Handler:    _Fleet_UpdateRack_Handler,
		},
		{
			MethodName: "GetRack",
			Handler:    _Fleet_GetRack_Handler,
		},
		{
			MethodName: "ListRacks",
			Handler:    _Fleet_ListRacks_Handler,
		},
		{
			MethodName: "DeleteRack",
			Handler:    _Fleet_DeleteRack_Handler,
		},
		{
			MethodName: "CreateMachineLSE",
			Handler:    _Fleet_CreateMachineLSE_Handler,
		},
		{
			MethodName: "UpdateMachineLSE",
			Handler:    _Fleet_UpdateMachineLSE_Handler,
		},
		{
			MethodName: "GetMachineLSE",
			Handler:    _Fleet_GetMachineLSE_Handler,
		},
		{
			MethodName: "ListMachineLSEs",
			Handler:    _Fleet_ListMachineLSEs_Handler,
		},
		{
			MethodName: "DeleteMachineLSE",
			Handler:    _Fleet_DeleteMachineLSE_Handler,
		},
		{
			MethodName: "CreateRackLSE",
			Handler:    _Fleet_CreateRackLSE_Handler,
		},
		{
			MethodName: "UpdateRackLSE",
			Handler:    _Fleet_UpdateRackLSE_Handler,
		},
		{
			MethodName: "GetRackLSE",
			Handler:    _Fleet_GetRackLSE_Handler,
		},
		{
			MethodName: "ListRackLSEs",
			Handler:    _Fleet_ListRackLSEs_Handler,
		},
		{
			MethodName: "DeleteRackLSE",
			Handler:    _Fleet_DeleteRackLSE_Handler,
		},
		{
			MethodName: "CreateNic",
			Handler:    _Fleet_CreateNic_Handler,
		},
		{
			MethodName: "UpdateNic",
			Handler:    _Fleet_UpdateNic_Handler,
		},
		{
			MethodName: "GetNic",
			Handler:    _Fleet_GetNic_Handler,
		},
		{
			MethodName: "ListNics",
			Handler:    _Fleet_ListNics_Handler,
		},
		{
			MethodName: "DeleteNic",
			Handler:    _Fleet_DeleteNic_Handler,
		},
		{
			MethodName: "ImportNics",
			Handler:    _Fleet_ImportNics_Handler,
		},
		{
			MethodName: "ImportDatacenters",
			Handler:    _Fleet_ImportDatacenters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/unifiedfleet/api/v1/rpc/fleet.proto",
}
