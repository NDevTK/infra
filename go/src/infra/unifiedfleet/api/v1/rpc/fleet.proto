// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package unifiedfleet.api.v1.rpc;

option go_package = "infra/unifiedfleet/api/v1/rpc;ufspb";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "go.chromium.org/luci/grpc/proto/google/api/field_behavior.proto";
import "go.chromium.org/luci/grpc/proto/google/api/resource.proto";
import "go.chromium.org/luci/grpc/proto/google/rpc/status.proto";
import "infra/unifiedfleet/api/v1/proto/machine.proto";
import "infra/unifiedfleet/api/v1/proto/chrome_platform.proto";

service Fleet {
  // ImportChromePlatforms imports chrome platforms.
  rpc ImportChromePlatforms(ImportChromePlatformsRequest) returns (google.rpc.Status);

  // CreateMachine creates a new machine.
  rpc CreateMachine(CreateMachineRequest) returns (proto.Machine);

  // Update updates the machine
  rpc UpdateMachine(UpdateMachineRequest) returns (proto.Machine);

  // Get retrieves the details of the machine
  rpc GetMachine(GetMachineRequest) returns (proto.Machine);

  // List gets all the machines
  rpc ListMachines(ListMachinesRequest) returns (ListMachinesResponse);

  // Delete delete the machine
  rpc DeleteMachine(DeleteMachineRequest) returns (google.protobuf.Empty);

  // Import machines from sources
  //
  // This doesn't return google.longrunning.Operation as the corresponding
  // package is not imported into chops go package.
  rpc ImportMachines(ImportMachinesRequest) returns (google.rpc.Status);
}

message ImportChromePlatformsRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

message ImportChromePlatformsResponse {
  repeated ChromePlatformResult passed = 1;
  repeated ChromePlatformResult failed = 2;
}

message ChromePlatformResult {
  proto.ChromePlatform platform = 1;
  string error_msg = 2;
}

// Contains the required information for creating a Machine represented in
// the database.
message CreateMachineRequest {
  // The machine to create.
  proto.Machine machine = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the Machine, which will become the final component of
  // the Machine's resource name.
  //
  // This value should follow the regex "^[a-zA-Z0-9-_]{4,63}$" (4-63 characters,
  // contains only ASCII letters, numbers, dash and underscore.
   string machine_id = 2;
}

message UpdateMachineRequest {
  // The machine to update.
  proto.Machine machine = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;
}

message GetMachineRequest {
  // The name of the machine to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Machine" }
  ];
}

message ListMachinesRequest {
  // The maximum number of machines to return. The service may return fewer than
  // this value.
  // If unspecified, at most 100 machines will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListMachines` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListMachines` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListMachinesResponse {
  // The machines from datastore.
  repeated proto.Machine machines = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DeleteMachineRequest {
  // The name of the Machine to delete
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = { type: "unified-fleet-system.appspot.com/Machine" }
  ];
}

message ImportMachinesRequest {
  oneof source {
    MachineDBSource machine_db_source = 1;
    ConfigSource config_source = 2;
  }
}

message MachineDBSource {
  string host = 1;
}

message ConfigSource {
  // Empty config_service means it's local file.
  string config_service_name = 1;
  string file_name = 2;
}