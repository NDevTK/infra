// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/rts/presubmit/eval/proto/dataset.proto

package evalpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A rejection of a code change due to test failures.
//
// Normally these messages are in a directory where .jsonl.gz files are
// GZIP-compressed JSON Lines files, where each entry is a protojson-encoded
// Rejection message.
type Rejection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rejected patchsets.
	Patchsets []*GerritPatchset `protobuf:"bytes,1,rep,name=patchsets,proto3" json:"patchsets,omitempty"`
	// When the code change was rejected.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// List of test variants that caused the rejection.
	FailedTestVariants []*TestVariant `protobuf:"bytes,3,rep,name=failed_test_variants,json=failedTestVariants,proto3" json:"failed_test_variants,omitempty"`
}

func (x *Rejection) Reset() {
	*x = Rejection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rejection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rejection) ProtoMessage() {}

func (x *Rejection) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rejection.ProtoReflect.Descriptor instead.
func (*Rejection) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{0}
}

func (x *Rejection) GetPatchsets() []*GerritPatchset {
	if x != nil {
		return x.Patchsets
	}
	return nil
}

func (x *Rejection) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Rejection) GetFailedTestVariants() []*TestVariant {
	if x != nil {
		return x.FailedTestVariants
	}
	return nil
}

// Code changes and a sample of test runs with their durations.
//
// Normally these records are in a directory where .jsonl.gz files are
// GZIP-compressed JSON Lines files, where each entry is a protojson-encoded
// TestDurationRecord message.
type TestDurationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The patchset set that observed the test durations.
	Patchsets []*GerritPatchset `protobuf:"bytes,1,rep,name=patchsets,proto3" json:"patchsets,omitempty"`
	// A sample of test durations from results of the patchsets.
	TestDurations []*TestDuration `protobuf:"bytes,2,rep,name=test_durations,json=testDurations,proto3" json:"test_durations,omitempty"`
	// When the code change was rejected.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TestDurationRecord) Reset() {
	*x = TestDurationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDurationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDurationRecord) ProtoMessage() {}

func (x *TestDurationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDurationRecord.ProtoReflect.Descriptor instead.
func (*TestDurationRecord) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{1}
}

func (x *TestDurationRecord) GetPatchsets() []*GerritPatchset {
	if x != nil {
		return x.Patchsets
	}
	return nil
}

func (x *TestDurationRecord) GetTestDurations() []*TestDuration {
	if x != nil {
		return x.TestDurations
	}
	return nil
}

func (x *TestDurationRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// How long a test took.
type TestDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test variant that was measured.
	TestVariant *TestVariant `protobuf:"bytes,1,opt,name=test_variant,json=testVariant,proto3" json:"test_variant,omitempty"`
	// How long test execution took.
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *TestDuration) Reset() {
	*x = TestDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDuration) ProtoMessage() {}

func (x *TestDuration) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDuration.ProtoReflect.Descriptor instead.
func (*TestDuration) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{2}
}

func (x *TestDuration) GetTestVariant() *TestVariant {
	if x != nil {
		return x.TestVariant
	}
	return nil
}

func (x *TestDuration) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// A Gerrit CL.
type GerritChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gerrit host, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project, e.g. "chromium/src".
	// It is required.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Change number,
	// e.g. 123 for https://chromium.googlesource.com/c/123
	Number int64 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *GerritChange) Reset() {
	*x = GerritChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritChange) ProtoMessage() {}

func (x *GerritChange) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritChange.ProtoReflect.Descriptor instead.
func (*GerritChange) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{3}
}

func (x *GerritChange) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritChange) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritChange) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

// A Gerrit patchset.
type GerritPatchset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CL.
	Change *GerritChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	// The patchset number.
	Patchset int64 `protobuf:"varint,2,opt,name=patchset,proto3" json:"patchset,omitempty"`
	// The files changed in the patchset.
	ChangedFiles []*SourceFile `protobuf:"bytes,3,rep,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"`
}

func (x *GerritPatchset) Reset() {
	*x = GerritPatchset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritPatchset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritPatchset) ProtoMessage() {}

func (x *GerritPatchset) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritPatchset.ProtoReflect.Descriptor instead.
func (*GerritPatchset) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{4}
}

func (x *GerritPatchset) GetChange() *GerritChange {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *GerritPatchset) GetPatchset() int64 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

func (x *GerritPatchset) GetChangedFiles() []*SourceFile {
	if x != nil {
		return x.ChangedFiles
	}
	return nil
}

// Identifies a source file.
type SourceFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repository identifier.
	// For googlesource.com repositories, it is a canonical URL, e.g.
	// https://chromium.googlesource.com/chromium/src
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// The file relative to the repo root. Starts with "//".
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SourceFile) Reset() {
	*x = SourceFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceFile) ProtoMessage() {}

func (x *SourceFile) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceFile.ProtoReflect.Descriptor instead.
func (*SourceFile) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{5}
}

func (x *SourceFile) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *SourceFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// A single way to run a single test.
// For example, a particular test case on Windows 10.
type TestVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test identifier.
	// For Chromium, a ResultDB TestID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// One particular way to run this test, expressed as domain-specific key-value
	// pairs. Each element has format "<key>:<value>".
	// For Chromium, this is a ResultDB test variant.
	//
	// The keys must be unique. This is not a map for conveniency of extracting
	// from BigQuery which cannot convert tabular data to JSON objects with
	// dynamic keys.
	Variant []string `protobuf:"bytes,2,rep,name=variant,proto3" json:"variant,omitempty"`
	// Path of the file where the test is defined.
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TestVariant) Reset() {
	*x = TestVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariant) ProtoMessage() {}

func (x *TestVariant) ProtoReflect() protoreflect.Message {
	mi := &file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariant.ProtoReflect.Descriptor instead.
func (*TestVariant) Descriptor() ([]byte, []int) {
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP(), []int{6}
}

func (x *TestVariant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestVariant) GetVariant() []string {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariant) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

var File_infra_rts_presubmit_eval_proto_dataset_proto protoreflect.FileDescriptor

var file_infra_rts_presubmit_eval_proto_dataset_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x65, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x09, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x52, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x58, 0x0a, 0x14, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x09,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x52, 0x09, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x90, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e,
	0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76,
	0x61, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0b,
	0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2e, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x54, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x27, 0x5a, 0x25, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x3b, 0x65, 0x76, 0x61, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescOnce sync.Once
	file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescData = file_infra_rts_presubmit_eval_proto_dataset_proto_rawDesc
)

func file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescGZIP() []byte {
	file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescOnce.Do(func() {
		file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescData)
	})
	return file_infra_rts_presubmit_eval_proto_dataset_proto_rawDescData
}

var file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_infra_rts_presubmit_eval_proto_dataset_proto_goTypes = []interface{}{
	(*Rejection)(nil),             // 0: chrome.rts.presubmit.eval.Rejection
	(*TestDurationRecord)(nil),    // 1: chrome.rts.presubmit.eval.TestDurationRecord
	(*TestDuration)(nil),          // 2: chrome.rts.presubmit.eval.TestDuration
	(*GerritChange)(nil),          // 3: chrome.rts.presubmit.eval.GerritChange
	(*GerritPatchset)(nil),        // 4: chrome.rts.presubmit.eval.GerritPatchset
	(*SourceFile)(nil),            // 5: chrome.rts.presubmit.eval.SourceFile
	(*TestVariant)(nil),           // 6: chrome.rts.presubmit.eval.TestVariant
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 8: google.protobuf.Duration
}
var file_infra_rts_presubmit_eval_proto_dataset_proto_depIdxs = []int32{
	4,  // 0: chrome.rts.presubmit.eval.Rejection.patchsets:type_name -> chrome.rts.presubmit.eval.GerritPatchset
	7,  // 1: chrome.rts.presubmit.eval.Rejection.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 2: chrome.rts.presubmit.eval.Rejection.failed_test_variants:type_name -> chrome.rts.presubmit.eval.TestVariant
	4,  // 3: chrome.rts.presubmit.eval.TestDurationRecord.patchsets:type_name -> chrome.rts.presubmit.eval.GerritPatchset
	2,  // 4: chrome.rts.presubmit.eval.TestDurationRecord.test_durations:type_name -> chrome.rts.presubmit.eval.TestDuration
	7,  // 5: chrome.rts.presubmit.eval.TestDurationRecord.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 6: chrome.rts.presubmit.eval.TestDuration.test_variant:type_name -> chrome.rts.presubmit.eval.TestVariant
	8,  // 7: chrome.rts.presubmit.eval.TestDuration.duration:type_name -> google.protobuf.Duration
	3,  // 8: chrome.rts.presubmit.eval.GerritPatchset.change:type_name -> chrome.rts.presubmit.eval.GerritChange
	5,  // 9: chrome.rts.presubmit.eval.GerritPatchset.changed_files:type_name -> chrome.rts.presubmit.eval.SourceFile
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_infra_rts_presubmit_eval_proto_dataset_proto_init() }
func file_infra_rts_presubmit_eval_proto_dataset_proto_init() {
	if File_infra_rts_presubmit_eval_proto_dataset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rejection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDurationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritPatchset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_rts_presubmit_eval_proto_dataset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_rts_presubmit_eval_proto_dataset_proto_goTypes,
		DependencyIndexes: file_infra_rts_presubmit_eval_proto_dataset_proto_depIdxs,
		MessageInfos:      file_infra_rts_presubmit_eval_proto_dataset_proto_msgTypes,
	}.Build()
	File_infra_rts_presubmit_eval_proto_dataset_proto = out.File
	file_infra_rts_presubmit_eval_proto_dataset_proto_rawDesc = nil
	file_infra_rts_presubmit_eval_proto_dataset_proto_goTypes = nil
	file_infra_rts_presubmit_eval_proto_dataset_proto_depIdxs = nil
}
