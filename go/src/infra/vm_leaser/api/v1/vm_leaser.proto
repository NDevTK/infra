// Copyright 2022 The ChromiumOS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package vm_leaser.api.v1;

option go_package = "infra/vm_leaser/api/v1;vmleaserpb";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

service VMLeaserService {
  // Creates a lease record and returns a VM.
  rpc LeaseVM(LeaseVMRequest) returns (LeaseVMResponse) {};
  // Releases a lease for a VM.
  rpc ReleaseVM(ReleaseVMRequest) returns (ReleaseVMResponse) {};
  // Extends a lease for a VM.
  rpc ExtendLease(ExtendLeaseRequest) returns (ExtendLeaseResponse) {};
}

message LeaseVMRequest {
  // Generated on the client side, shared across retries but pseudo-unique
  // across different logical requests. Requests with the same key will be
  // treated as duplicate of original request, return the same response.
  string idempotency_key = 1;

  // This is the final end user (can be human or robot). Useful for both
  // debugging and analytics. For example for a tests triggered for a CL, this
  // field could indicate the CL author as they are the end user.
  //
  // For direct invocations like CLI, this is enforced at first entry point but
  // trusted from there.
  //
  // Not to be confused with LUCI auth which is done by the caller assuming the
  // appropriate identity from a permissions perspective â€” like LUCI project.
  string on_behalf_of = 2;

  // This is the quota the end user is requesting to use. One user can have
  // access to multiple quotas. For example, release, CQ, performance testing,
  // etc.
  string quota_id = 3;

  // Optional with a good default.
  // Important to configure a good max (e.g. 10 min). This will put a ceiling on
  // time wasted if the client dies.
  google.protobuf.Duration lease_duration = 4;

  // The populated requirements will specify the requirements for a VM host.
  VMRequirements host_reqs = 5;
}

message VMRequirements {
  string gce_image = 1;
  string gce_region = 2;
  string gce_project = 3;
  string gce_network = 4;
  string gce_subnet = 5;
  string gce_machine_type = 6;
  string gce_scope = 7;
  // Specified IP address for VM. If not, use ephemeral IP.
  string gce_ip_address = 8;
  VMType type = 9;
}

message VM {
  string id = 1;
  VMAddress address = 2;
  VMType type = 3;
}

message VMAddress {
  // IP address of the device.
  string host = 1;
  int32 port = 2;
}

// VMType specifies the type of VM that is requested and will be created.
enum VMType {
  VM_TYPE_UNSPECIFIED = 0;
  VM_TYPE_DUT = 1;
  VM_TYPE_DRONE = 2;
}

message LeaseVMResponse {
  // Relevant information for the lease.
  string lease_id = 1;
  VM vm = 2;

  // Client is responsible for extending the lease as needed.
  google.protobuf.Timestamp expiration_time = 3;

  // Eventually we will include authentication token to access device for the
  // duration of the lease. Shared and long lived secrets are not good security.
  // Today there is no such enforcement so this is not a regression.
}

message ExtendLeaseRequest {
  // Original lease_id obtained when the lease was created.
  string lease_id = 1;

  // Important to configure a good lifetime max for leases can not be extended
  // indefinitely. Ideally, long running tasks should not exists and failing
  // tasks should just fail without extension.
  //
  // It is also important to ensure same limits as those for
  // LeaseVMRequest.duration.
  google.protobuf.Duration extend_duration = 2;
}

message ExtendLeaseResponse {
  string lease_id = 1;
  google.protobuf.Timestamp expiration_time = 2;
}

message ReleaseVMRequest {
  string lease_id = 1;
}

message ReleaseVMResponse {
  string lease_id = 1;
}
