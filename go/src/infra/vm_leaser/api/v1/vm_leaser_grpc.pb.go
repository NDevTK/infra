// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: infra/vm_leaser/api/v1/vm_leaser.proto

package vmleaserpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMLeaserServiceClient is the client API for VMLeaserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMLeaserServiceClient interface {
	// Creates a lease record and returns a VM.
	LeaseVM(ctx context.Context, in *LeaseVMRequest, opts ...grpc.CallOption) (*LeaseVMResponse, error)
	// Releases a lease for a VM.
	ReleaseVM(ctx context.Context, in *ReleaseVMRequest, opts ...grpc.CallOption) (*ReleaseVMResponse, error)
	// Extends a lease for a VM.
	ExtendLease(ctx context.Context, in *ExtendLeaseRequest, opts ...grpc.CallOption) (*ExtendLeaseResponse, error)
}

type vMLeaserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMLeaserServiceClient(cc grpc.ClientConnInterface) VMLeaserServiceClient {
	return &vMLeaserServiceClient{cc}
}

func (c *vMLeaserServiceClient) LeaseVM(ctx context.Context, in *LeaseVMRequest, opts ...grpc.CallOption) (*LeaseVMResponse, error) {
	out := new(LeaseVMResponse)
	err := c.cc.Invoke(ctx, "/vm_leaser.api.v1.VMLeaserService/LeaseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMLeaserServiceClient) ReleaseVM(ctx context.Context, in *ReleaseVMRequest, opts ...grpc.CallOption) (*ReleaseVMResponse, error) {
	out := new(ReleaseVMResponse)
	err := c.cc.Invoke(ctx, "/vm_leaser.api.v1.VMLeaserService/ReleaseVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMLeaserServiceClient) ExtendLease(ctx context.Context, in *ExtendLeaseRequest, opts ...grpc.CallOption) (*ExtendLeaseResponse, error) {
	out := new(ExtendLeaseResponse)
	err := c.cc.Invoke(ctx, "/vm_leaser.api.v1.VMLeaserService/ExtendLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMLeaserServiceServer is the server API for VMLeaserService service.
// All implementations must embed UnimplementedVMLeaserServiceServer
// for forward compatibility
type VMLeaserServiceServer interface {
	// Creates a lease record and returns a VM.
	LeaseVM(context.Context, *LeaseVMRequest) (*LeaseVMResponse, error)
	// Releases a lease for a VM.
	ReleaseVM(context.Context, *ReleaseVMRequest) (*ReleaseVMResponse, error)
	// Extends a lease for a VM.
	ExtendLease(context.Context, *ExtendLeaseRequest) (*ExtendLeaseResponse, error)
	mustEmbedUnimplementedVMLeaserServiceServer()
}

// UnimplementedVMLeaserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVMLeaserServiceServer struct {
}

func (UnimplementedVMLeaserServiceServer) LeaseVM(context.Context, *LeaseVMRequest) (*LeaseVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseVM not implemented")
}
func (UnimplementedVMLeaserServiceServer) ReleaseVM(context.Context, *ReleaseVMRequest) (*ReleaseVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseVM not implemented")
}
func (UnimplementedVMLeaserServiceServer) ExtendLease(context.Context, *ExtendLeaseRequest) (*ExtendLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendLease not implemented")
}
func (UnimplementedVMLeaserServiceServer) mustEmbedUnimplementedVMLeaserServiceServer() {}

// UnsafeVMLeaserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMLeaserServiceServer will
// result in compilation errors.
type UnsafeVMLeaserServiceServer interface {
	mustEmbedUnimplementedVMLeaserServiceServer()
}

func RegisterVMLeaserServiceServer(s grpc.ServiceRegistrar, srv VMLeaserServiceServer) {
	s.RegisterService(&VMLeaserService_ServiceDesc, srv)
}

func _VMLeaserService_LeaseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMLeaserServiceServer).LeaseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_leaser.api.v1.VMLeaserService/LeaseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMLeaserServiceServer).LeaseVM(ctx, req.(*LeaseVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMLeaserService_ReleaseVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMLeaserServiceServer).ReleaseVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_leaser.api.v1.VMLeaserService/ReleaseVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMLeaserServiceServer).ReleaseVM(ctx, req.(*ReleaseVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMLeaserService_ExtendLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMLeaserServiceServer).ExtendLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_leaser.api.v1.VMLeaserService/ExtendLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMLeaserServiceServer).ExtendLease(ctx, req.(*ExtendLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VMLeaserService_ServiceDesc is the grpc.ServiceDesc for VMLeaserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMLeaserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vm_leaser.api.v1.VMLeaserService",
	HandlerType: (*VMLeaserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaseVM",
			Handler:    _VMLeaserService_LeaseVM_Handler,
		},
		{
			MethodName: "ReleaseVM",
			Handler:    _VMLeaserService_ReleaseVM_Handler,
		},
		{
			MethodName: "ExtendLease",
			Handler:    _VMLeaserService_ExtendLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/vm_leaser/api/v1/vm_leaser.proto",
}
