// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: infra/vm_leaser/api/service.proto

package vmleaserpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LeaseVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaseVmRequest) Reset() {
	*x = LeaseVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_vm_leaser_api_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseVmRequest) ProtoMessage() {}

func (x *LeaseVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_vm_leaser_api_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseVmRequest.ProtoReflect.Descriptor instead.
func (*LeaseVmRequest) Descriptor() ([]byte, []int) {
	return file_infra_vm_leaser_api_service_proto_rawDescGZIP(), []int{0}
}

type LeaseVmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *LeaseVmResponse) Reset() {
	*x = LeaseVmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_vm_leaser_api_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseVmResponse) ProtoMessage() {}

func (x *LeaseVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_vm_leaser_api_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseVmResponse.ProtoReflect.Descriptor instead.
func (*LeaseVmResponse) Descriptor() ([]byte, []int) {
	return file_infra_vm_leaser_api_service_proto_rawDescGZIP(), []int{1}
}

func (x *LeaseVmResponse) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type ExtendLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *ExtendLeaseRequest) Reset() {
	*x = ExtendLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_vm_leaser_api_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendLeaseRequest) ProtoMessage() {}

func (x *ExtendLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_vm_leaser_api_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendLeaseRequest.ProtoReflect.Descriptor instead.
func (*ExtendLeaseRequest) Descriptor() ([]byte, []int) {
	return file_infra_vm_leaser_api_service_proto_rawDescGZIP(), []int{2}
}

func (x *ExtendLeaseRequest) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type ExtendLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExtendLeaseResponse) Reset() {
	*x = ExtendLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_vm_leaser_api_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendLeaseResponse) ProtoMessage() {}

func (x *ExtendLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_vm_leaser_api_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendLeaseResponse.ProtoReflect.Descriptor instead.
func (*ExtendLeaseResponse) Descriptor() ([]byte, []int) {
	return file_infra_vm_leaser_api_service_proto_rawDescGZIP(), []int{3}
}

type ReleaseVmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *ReleaseVmRequest) Reset() {
	*x = ReleaseVmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_vm_leaser_api_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseVmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseVmRequest) ProtoMessage() {}

func (x *ReleaseVmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_vm_leaser_api_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseVmRequest.ProtoReflect.Descriptor instead.
func (*ReleaseVmRequest) Descriptor() ([]byte, []int) {
	return file_infra_vm_leaser_api_service_proto_rawDescGZIP(), []int{4}
}

func (x *ReleaseVmRequest) GetLeaseId() string {
	if x != nil {
		return x.LeaseId
	}
	return ""
}

type ReleaseVmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseVmResponse) Reset() {
	*x = ReleaseVmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_vm_leaser_api_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseVmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseVmResponse) ProtoMessage() {}

func (x *ReleaseVmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_vm_leaser_api_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseVmResponse.ProtoReflect.Descriptor instead.
func (*ReleaseVmResponse) Descriptor() ([]byte, []int) {
	return file_infra_vm_leaser_api_service_proto_rawDescGZIP(), []int{5}
}

var File_infra_vm_leaser_api_service_proto protoreflect.FileDescriptor

var file_infra_vm_leaser_api_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x22, 0x2f, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x87,
	0x02, 0x0a, 0x0f, 0x56, 0x6d, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x12, 0x1d, 0x2e,
	0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76,
	0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x21, 0x2e,
	0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x56, 0x6d, 0x12, 0x1f, 0x2e, 0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x76, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x3b,
	0x76, 0x6d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_infra_vm_leaser_api_service_proto_rawDescOnce sync.Once
	file_infra_vm_leaser_api_service_proto_rawDescData = file_infra_vm_leaser_api_service_proto_rawDesc
)

func file_infra_vm_leaser_api_service_proto_rawDescGZIP() []byte {
	file_infra_vm_leaser_api_service_proto_rawDescOnce.Do(func() {
		file_infra_vm_leaser_api_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_vm_leaser_api_service_proto_rawDescData)
	})
	return file_infra_vm_leaser_api_service_proto_rawDescData
}

var file_infra_vm_leaser_api_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_infra_vm_leaser_api_service_proto_goTypes = []interface{}{
	(*LeaseVmRequest)(nil),      // 0: vm_leaser.api.LeaseVmRequest
	(*LeaseVmResponse)(nil),     // 1: vm_leaser.api.LeaseVmResponse
	(*ExtendLeaseRequest)(nil),  // 2: vm_leaser.api.ExtendLeaseRequest
	(*ExtendLeaseResponse)(nil), // 3: vm_leaser.api.ExtendLeaseResponse
	(*ReleaseVmRequest)(nil),    // 4: vm_leaser.api.ReleaseVmRequest
	(*ReleaseVmResponse)(nil),   // 5: vm_leaser.api.ReleaseVmResponse
}
var file_infra_vm_leaser_api_service_proto_depIdxs = []int32{
	0, // 0: vm_leaser.api.VmLeaserService.LeaseVm:input_type -> vm_leaser.api.LeaseVmRequest
	2, // 1: vm_leaser.api.VmLeaserService.ExtendLease:input_type -> vm_leaser.api.ExtendLeaseRequest
	4, // 2: vm_leaser.api.VmLeaserService.ReleaseVm:input_type -> vm_leaser.api.ReleaseVmRequest
	1, // 3: vm_leaser.api.VmLeaserService.LeaseVm:output_type -> vm_leaser.api.LeaseVmResponse
	3, // 4: vm_leaser.api.VmLeaserService.ExtendLease:output_type -> vm_leaser.api.ExtendLeaseResponse
	5, // 5: vm_leaser.api.VmLeaserService.ReleaseVm:output_type -> vm_leaser.api.ReleaseVmResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_infra_vm_leaser_api_service_proto_init() }
func file_infra_vm_leaser_api_service_proto_init() {
	if File_infra_vm_leaser_api_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_vm_leaser_api_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_vm_leaser_api_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseVmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_vm_leaser_api_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_vm_leaser_api_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_vm_leaser_api_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseVmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_vm_leaser_api_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseVmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_vm_leaser_api_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_vm_leaser_api_service_proto_goTypes,
		DependencyIndexes: file_infra_vm_leaser_api_service_proto_depIdxs,
		MessageInfos:      file_infra_vm_leaser_api_service_proto_msgTypes,
	}.Build()
	File_infra_vm_leaser_api_service_proto = out.File
	file_infra_vm_leaser_api_service_proto_rawDesc = nil
	file_infra_vm_leaser_api_service_proto_goTypes = nil
	file_infra_vm_leaser_api_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VmLeaserServiceClient is the client API for VmLeaserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VmLeaserServiceClient interface {
	LeaseVm(ctx context.Context, in *LeaseVmRequest, opts ...grpc.CallOption) (*LeaseVmResponse, error)
	ExtendLease(ctx context.Context, in *ExtendLeaseRequest, opts ...grpc.CallOption) (*ExtendLeaseResponse, error)
	ReleaseVm(ctx context.Context, in *ReleaseVmRequest, opts ...grpc.CallOption) (*ReleaseVmResponse, error)
}
type vmLeaserServicePRPCClient struct {
	client *prpc.Client
}

func NewVmLeaserServicePRPCClient(client *prpc.Client) VmLeaserServiceClient {
	return &vmLeaserServicePRPCClient{client}
}

func (c *vmLeaserServicePRPCClient) LeaseVm(ctx context.Context, in *LeaseVmRequest, opts ...grpc.CallOption) (*LeaseVmResponse, error) {
	out := new(LeaseVmResponse)
	err := c.client.Call(ctx, "vm_leaser.api.VmLeaserService", "LeaseVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmLeaserServicePRPCClient) ExtendLease(ctx context.Context, in *ExtendLeaseRequest, opts ...grpc.CallOption) (*ExtendLeaseResponse, error) {
	out := new(ExtendLeaseResponse)
	err := c.client.Call(ctx, "vm_leaser.api.VmLeaserService", "ExtendLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmLeaserServicePRPCClient) ReleaseVm(ctx context.Context, in *ReleaseVmRequest, opts ...grpc.CallOption) (*ReleaseVmResponse, error) {
	out := new(ReleaseVmResponse)
	err := c.client.Call(ctx, "vm_leaser.api.VmLeaserService", "ReleaseVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type vmLeaserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmLeaserServiceClient(cc grpc.ClientConnInterface) VmLeaserServiceClient {
	return &vmLeaserServiceClient{cc}
}

func (c *vmLeaserServiceClient) LeaseVm(ctx context.Context, in *LeaseVmRequest, opts ...grpc.CallOption) (*LeaseVmResponse, error) {
	out := new(LeaseVmResponse)
	err := c.cc.Invoke(ctx, "/vm_leaser.api.VmLeaserService/LeaseVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmLeaserServiceClient) ExtendLease(ctx context.Context, in *ExtendLeaseRequest, opts ...grpc.CallOption) (*ExtendLeaseResponse, error) {
	out := new(ExtendLeaseResponse)
	err := c.cc.Invoke(ctx, "/vm_leaser.api.VmLeaserService/ExtendLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmLeaserServiceClient) ReleaseVm(ctx context.Context, in *ReleaseVmRequest, opts ...grpc.CallOption) (*ReleaseVmResponse, error) {
	out := new(ReleaseVmResponse)
	err := c.cc.Invoke(ctx, "/vm_leaser.api.VmLeaserService/ReleaseVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmLeaserServiceServer is the server API for VmLeaserService service.
type VmLeaserServiceServer interface {
	LeaseVm(context.Context, *LeaseVmRequest) (*LeaseVmResponse, error)
	ExtendLease(context.Context, *ExtendLeaseRequest) (*ExtendLeaseResponse, error)
	ReleaseVm(context.Context, *ReleaseVmRequest) (*ReleaseVmResponse, error)
}

// UnimplementedVmLeaserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVmLeaserServiceServer struct {
}

func (*UnimplementedVmLeaserServiceServer) LeaseVm(context.Context, *LeaseVmRequest) (*LeaseVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaseVm not implemented")
}
func (*UnimplementedVmLeaserServiceServer) ExtendLease(context.Context, *ExtendLeaseRequest) (*ExtendLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendLease not implemented")
}
func (*UnimplementedVmLeaserServiceServer) ReleaseVm(context.Context, *ReleaseVmRequest) (*ReleaseVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseVm not implemented")
}

func RegisterVmLeaserServiceServer(s prpc.Registrar, srv VmLeaserServiceServer) {
	s.RegisterService(&_VmLeaserService_serviceDesc, srv)
}

func _VmLeaserService_LeaseVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmLeaserServiceServer).LeaseVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_leaser.api.VmLeaserService/LeaseVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmLeaserServiceServer).LeaseVm(ctx, req.(*LeaseVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmLeaserService_ExtendLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmLeaserServiceServer).ExtendLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_leaser.api.VmLeaserService/ExtendLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmLeaserServiceServer).ExtendLease(ctx, req.(*ExtendLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmLeaserService_ReleaseVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmLeaserServiceServer).ReleaseVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vm_leaser.api.VmLeaserService/ReleaseVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmLeaserServiceServer).ReleaseVm(ctx, req.(*ReleaseVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VmLeaserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vm_leaser.api.VmLeaserService",
	HandlerType: (*VmLeaserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaseVm",
			Handler:    _VmLeaserService_LeaseVm_Handler,
		},
		{
			MethodName: "ExtendLease",
			Handler:    _VmLeaserService_ExtendLease_Handler,
		},
		{
			MethodName: "ReleaseVm",
			Handler:    _VmLeaserService_ReleaseVm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/vm_leaser/api/service.proto",
}
