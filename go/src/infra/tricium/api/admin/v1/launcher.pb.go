// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.1
// source: infra/tricium/api/admin/v1/launcher.proto

package admin

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "infra/tricium/api/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LaunchRequest contains the details needed to launch a workflow for an
// analysis request.
type LaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The run ID created by a Tricium.Analyze call.
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The name of the project in luci-config.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The full URL of the git repo used for this run.
	GitUrl string `protobuf:"bytes,3,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	// A git commit-ish, such as a Gerrit revision ref name like
	// "refs/changes/34/1234/1", or any other ref name or commit hash.
	// This is used in the GitFileDetails data type used to pull files.
	GitRef string `protobuf:"bytes,4,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	// File metadata from the root of the Git repository.
	Files []*v1.Data_File `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	// Commit message text from Gerrit if available.
	//
	// If this launch request is not for Gerrit, this could be an empty string.
	CommitMessage string `protobuf:"bytes,6,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
}

func (x *LaunchRequest) Reset() {
	*x = LaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_admin_v1_launcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchRequest) ProtoMessage() {}

func (x *LaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_admin_v1_launcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchRequest.ProtoReflect.Descriptor instead.
func (*LaunchRequest) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_admin_v1_launcher_proto_rawDescGZIP(), []int{0}
}

func (x *LaunchRequest) GetRunId() int64 {
	if x != nil {
		return x.RunId
	}
	return 0
}

func (x *LaunchRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *LaunchRequest) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *LaunchRequest) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

func (x *LaunchRequest) GetFiles() []*v1.Data_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *LaunchRequest) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

type LaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LaunchResponse) Reset() {
	*x = LaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_admin_v1_launcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchResponse) ProtoMessage() {}

func (x *LaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_admin_v1_launcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchResponse.ProtoReflect.Descriptor instead.
func (*LaunchResponse) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_admin_v1_launcher_proto_rawDescGZIP(), []int{1}
}

var File_infra_tricium_api_admin_v1_launcher_proto protoreflect.FileDescriptor

var file_infra_tricium_api_admin_v1_launcher_proto_rawDesc = []byte{
	0x0a, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x1a, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x69, 0x74, 0x52, 0x65, 0x66, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x41, 0x0a, 0x08, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x22,
	0x5a, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_tricium_api_admin_v1_launcher_proto_rawDescOnce sync.Once
	file_infra_tricium_api_admin_v1_launcher_proto_rawDescData = file_infra_tricium_api_admin_v1_launcher_proto_rawDesc
)

func file_infra_tricium_api_admin_v1_launcher_proto_rawDescGZIP() []byte {
	file_infra_tricium_api_admin_v1_launcher_proto_rawDescOnce.Do(func() {
		file_infra_tricium_api_admin_v1_launcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_tricium_api_admin_v1_launcher_proto_rawDescData)
	})
	return file_infra_tricium_api_admin_v1_launcher_proto_rawDescData
}

var file_infra_tricium_api_admin_v1_launcher_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_infra_tricium_api_admin_v1_launcher_proto_goTypes = []interface{}{
	(*LaunchRequest)(nil),  // 0: admin.LaunchRequest
	(*LaunchResponse)(nil), // 1: admin.LaunchResponse
	(*v1.Data_File)(nil),   // 2: tricium.Data.File
}
var file_infra_tricium_api_admin_v1_launcher_proto_depIdxs = []int32{
	2, // 0: admin.LaunchRequest.files:type_name -> tricium.Data.File
	0, // 1: admin.Launcher.Launch:input_type -> admin.LaunchRequest
	1, // 2: admin.Launcher.Launch:output_type -> admin.LaunchResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_infra_tricium_api_admin_v1_launcher_proto_init() }
func file_infra_tricium_api_admin_v1_launcher_proto_init() {
	if File_infra_tricium_api_admin_v1_launcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_tricium_api_admin_v1_launcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_admin_v1_launcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_tricium_api_admin_v1_launcher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_tricium_api_admin_v1_launcher_proto_goTypes,
		DependencyIndexes: file_infra_tricium_api_admin_v1_launcher_proto_depIdxs,
		MessageInfos:      file_infra_tricium_api_admin_v1_launcher_proto_msgTypes,
	}.Build()
	File_infra_tricium_api_admin_v1_launcher_proto = out.File
	file_infra_tricium_api_admin_v1_launcher_proto_rawDesc = nil
	file_infra_tricium_api_admin_v1_launcher_proto_goTypes = nil
	file_infra_tricium_api_admin_v1_launcher_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LauncherClient is the client API for Launcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LauncherClient interface {
	// Launch launches a workflow for provided request details.
	Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error)
}
type launcherPRPCClient struct {
	client *prpc.Client
}

func NewLauncherPRPCClient(client *prpc.Client) LauncherClient {
	return &launcherPRPCClient{client}
}

func (c *launcherPRPCClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.client.Call(ctx, "admin.Launcher", "Launch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type launcherClient struct {
	cc grpc.ClientConnInterface
}

func NewLauncherClient(cc grpc.ClientConnInterface) LauncherClient {
	return &launcherClient{cc}
}

func (c *launcherClient) Launch(ctx context.Context, in *LaunchRequest, opts ...grpc.CallOption) (*LaunchResponse, error) {
	out := new(LaunchResponse)
	err := c.cc.Invoke(ctx, "/admin.Launcher/Launch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LauncherServer is the server API for Launcher service.
type LauncherServer interface {
	// Launch launches a workflow for provided request details.
	Launch(context.Context, *LaunchRequest) (*LaunchResponse, error)
}

// UnimplementedLauncherServer can be embedded to have forward compatible implementations.
type UnimplementedLauncherServer struct {
}

func (*UnimplementedLauncherServer) Launch(context.Context, *LaunchRequest) (*LaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Launch not implemented")
}

func RegisterLauncherServer(s prpc.Registrar, srv LauncherServer) {
	s.RegisterService(&_Launcher_serviceDesc, srv)
}

func _Launcher_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LauncherServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Launcher/Launch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LauncherServer).Launch(ctx, req.(*LaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Launcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Launcher",
	HandlerType: (*LauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Launch",
			Handler:    _Launcher_Launch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/admin/v1/launcher.proto",
}
