// Copyright 2016 The Chromium Authors. All rights reserved. Use of this source
// code is governed by a BSD-style license that can be found in the LICENSE
// file.

syntax = "proto3";

package tricium;

import "infra/tricium/api/v1/data.proto";
import "infra/tricium/api/v1/platform.proto";

// Tricium implements the main API of the Tricium service.
service Tricium {
  // Analyze requests analysis of a list of paths.
  //
  // An analysis request for a list of paths in a project connected to Tricium
  // via the Tricium configuration. On success, the ID of the resulting run is
  // returned.
  rpc Analyze(AnalyzeRequest) returns (AnalyzeResponse);

  // Progress requests progress information for a run.
  //
  // A run corresponds to an analyze request and is identified with a run ID.
  rpc Progress(ProgressRequest) returns (ProgressResponse);

  // ProjectProgress requests progress information for a project.
  //
  // A list of runs, connected to the project, will be returned together with their status.
  // The provided project must be known to the queried Tricium instance.
  rpc ProjectProgress(ProjectProgressRequest) returns (ProjectProgressResponse);

  // Results requests analysis results from a run.
  //
  // A run corresponds to an analyze request and is identified with a run ID.
  rpc Results(ResultsRequest) returns (ResultsResponse);

  // Feedback requests feedback for an analyzer category.
  rpc Feedback(FeedbackRequest) returns (FeedbackResponse);

  // ReportNotUseful reports not useful feedback for a robot comment.
  //
  // NB! Issue reporting is currently not supported.
  rpc ReportNotUseful(ReportNotUsefulRequest) returns (ReportNotUsefulResponse);
}

// AnalyzeRequest contains the details needed for an analysis request.
message AnalyzeRequest {
  // Name of the project hosting the paths listed in the request. The name
  // should map to the project name as it is connected to Tricium.
  string project = 1;

  string git_ref = 2;

  // Paths to analyze in the project. Listed from the root of the Git
  // repository.
  // TODO(emso): document path separators or add listing of path segments.
  repeated string paths = 3;

  // Consumer to send progress updates and results to.
  //
  // This field is optional. If included it will push progress and result
  // updates to the provided consumer. The selected consumer must be
  // configured for the project of the request.
  //
  // Note that progress and results can be accessed via the Tricium
  // API regardless of whether a consumer has been included in the request.
  Consumer consumer = 4;

  // Gerrit details for a Gerrit consumer.
  GerritConsumerDetails gerrit_details = 5;
}

message AnalyzeResponse {
  // ID of the run started for this request.
  //
  // This ID can be used to track progress and request results.
  string run_id = 1;
}

message ProgressRequest {
  // Run ID returned by an analyze request.
  //
  // This field must be provided, unless a consumer is provided below.
  // If nothing else is provided, then all known progress for the run is returned.
  string run_id = 1;

  // An optional function name.
  //
  // If provided, only progress for the provided function will be returned.
  // The function name should match the name of the function in the Tricium
  // configuration.
  //
  // NB! Currently not supported.
  string function = 2;

  // Optional platform that may be provided together with an function name.
  //
  // If provided, only progress for the provided function and platform will be provided.
  //
  // NB! Currently not supported.
  Platform platform = 3;

  // Consumer of the progress information.
  //
  // This field is optional. If included, consumer-specific fields will be considered
  // when looking up progress information and the run ID can be excluded.
  //
  // Note that if a run ID is listed and a consumer. Then the run ID will be used.
  Consumer consumer = 4;

  // Gerrit details for the Gerrit consumer.
  GerritConsumerDetails gerrit_details = 5;
}

message ProgressResponse {
  // ID of the run progress is reported for.
  string run_id = 1;

  // Overall state for the run provided in the progress request.
  State state = 2;

  // Function progress matching the requested progress report.
  //
  // For a provided run ID this corresponds to all functions and platforms, and
  // for any selection of these, a subset is returned.
  //
  // NB! Selection of a subset is currently not supported.
  repeated FunctionProgress function_progress = 3;
}

message FunctionProgress {
  // The function name.
  string name = 1;

  // The platform for which the function progress is reported.
  Platform.Name platform = 2;

  // The state of the function.
  //
  // For an function on a specific platform this state corresponds to the state
  // of the worker, else it is the aggregated state of all workers for the function.
  State state = 3;

  // URL to the swarming server running tasks for the workers of the function.
  string swarming_url = 4;

  // The ID of the swarming task triggered for the function worker.
  string swarming_task_id = 5;

  // Number of comments.
  //
  // For analyzers that are done and produce comments.
  int32 num_comments = 6;
}

message ProjectProgressRequest {
  // Project to get progress for.
  //
  // The provided project name must be known to the queried Tricium instance.
  string project = 1;
}

message ProjectProgressResponse {
  // Progress of runs for the matching project in the progress request.
  //
  // The returned list is sorted based on state and detailed run progress
  // can be requested using the run ID of each listed run.
  repeated RunProgress run_progress = 1;
}

message RunProgress {
  string run_id = 1;
  State state = 2;
  int32 num_comments = 3;
}

message ResultsRequest {
  // Run ID returned by an analyze request.
  string run_id = 1;

  // An optional function name.
  //
  // If provided, only results for the provided function are returned.
  // If a function is being run on more than one platform then the merged
  // results of the function can be returned by exclusion of a specific platform.
  //
  // NB! Currently not supported.
  string function = 2;

  // Optional platform that can be provided together with an function name.
  //
  // If provided, only results for the provided platform and function are returned.
  //
  // NB! Currently not supported.
  Platform.Name platform = 3;
}

message ResultsResponse {
  // TODO(emso): Support paging of results to deal with large number of results.
  Data.Results results = 1;

  // Whether the returned results are merged.
  //
  // Results may be merged if a result request for an function running on multiple
  // platforms was made and the request did not include a specific platform.
  // Results for a run with no specific function selected will be marked as merged
  // if any included analyzer results were merged.
  bool is_merged = 2;
}

message FeedbackRequest {
  // Analyzer category to provide aggregated feedback for.
  //
  // This includes the analyzer name along with optional subcategories
  // separated with slash, e.g., "ClangTidy" or "ClangTidy/llvm-header-guard".
  //
  // Required field. Must include at least the analyzer name and should not
  // end with a slash.
  string category = 1;

  // Start of time period to report feedback for.
  //
  // Feedback for comments created from this time will be included.
  // Must be on the form "2006-01-02T08:04:05Z" (RFC 3339) and before end_time.
  //
  // Optional field. Defaults to epoch start of time (Jan 1, 1970).
  string start_time = 2;

  // End of time period to report feedback for.
  //
  // Feedback from comments created before this time will be included.
  // Must be on the form "2006-01-02T08:04:05Z" (RFC 3339) and after start_time.
  //
  // Optional field. Defaults to now.
  string end_time = 3;
}

message FeedbackResponse {
  // Number of returned comments.
  //
  // In any case where an analyzer was run on multiple platforms and the resulting
  // comments were merged, only merged comments are returned in this count. Note that
  // only merged comments are ever returned from the Tricium service.
  int32 comments = 1;

  // Number of collected ‘not useful’ reports.
  int32 not_useful_reports = 2;

  // List of URLs to ‘not useful’ bug reports.
  repeated string issues = 3;
}

message ReportNotUsefulRequest {
  // ID of comment as returned by the Results end point.
  string comment_id = 1;

  // More feedback information.
  //
  // Optional field.
  string more_details = 2;
}

message ReportNotUsefulResponse {
  // URL to issue if created.
  //
  // Only created if there were feedback details.
  string issue = 1;
}

enum State {
  // Pending is for when an analysis request has been received but the corresponding
  // workflow, function, or workers are not running yet.
  PENDING = 0;

  // Running is for when the workflow, function, or workers of a request have been launched
  // but have not finished.
  RUNNING = 1;

  // Success is for a workflow, function, or worker that successfully completed.
  //
  // Success of workflows and functions, is aggregated from underlying functions and workers,
  // where full success means success is aggregated.
  SUCCESS = 2;

  // Failure is for a workflow, function, or worker that completed with failure.
  //
  // Failure of workflows and functions, is aggregated from underlying functions and workers,
  // where any occurrence of failure means failure is aggregated.
  FAILURE = 3;

  // Canceled is for user canceled workflows, functions, and workers.
  // NB! Not supported yet.
  CANCELED = 4;

  // Timed out is for workers where the triggered swarming task timed out.
  // NB! Not supported yet.
  TIMED_OUT = 5;

  // Aborted is for workers aborted due to a failing worker dependency.
  //
  // For instance, the worker providing the data needed by a worker may have failed.
  ABORTED = 6;
}

enum Consumer {
  // No consumer means progress and results can be pulled from the Tricium service API.
  //
  // This is the default value used when no consumer is configured for a project.
  NONE = 0;

  // A Gerrit consumer means the Tricium service polls Gerrit for changes and reports
  // progress updates and results to Gerrit.
  //
  // Gerrit details need to be configured for a project before the Gerrit consumer
  // option is enabled.
  //
  // Gerrit consumer details must be provided with this option.
  GERRIT = 1;
}

// Gerrit consumer details to be provided if a Gerrit consumer is specified.
message GerritConsumerDetails {
  // Gerrit host.
  //
  // This value must not include protocol and is assumed to not include '##'.
  //
  // This field is required.
  string host = 1;

  // Gerrit project name.
  //
  // This value is assumed to not include '##'.
  //
  // This field is required.
  string project = 2;

  // Gerrit change ID.
  //
  // This value should be a fully qualified ID on the form "<project>~<branch>~<Change-Id>",
  // where <Change-Id> is a SHA and not a lecacy change ID number.
  // Note that refs/heads can be omitted from the branch.
  //
  // Example: "myProject~master~I8473b95934b5732ac55d26311a706c9c2bde9940"
  //
  // This field is required.
  string change = 3;

  // Gerrit change revision.
  //
  // This value should be the fetch URL for a revision of a change. Note that
  // the last number of a change revision ref maps to the corresponding patch set
  // number.
  //
  // Example: "refs/changes/97/97/1"
  //
  // This field is required.
  string revision = 4;
}
