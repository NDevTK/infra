// Code generated by protoc-gen-go.
// source: infra/tricium/api/v1/tricium.proto
// DO NOT EDIT!

package tricium

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TriciumRequest contains the details needed for an analysis request.
type TriciumRequest struct {
	// Name of the project hosting the paths listed in the request. The name
	// should map to the project name as it is connected to Tricium.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	GitRef  string `protobuf:"bytes,2,opt,name=git_ref,json=gitRef" json:"git_ref,omitempty"`
	// Paths to analyze in the project. Listed from the root of the Git
	// repository.
	Paths []string `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
}

func (m *TriciumRequest) Reset()                    { *m = TriciumRequest{} }
func (m *TriciumRequest) String() string            { return proto.CompactTextString(m) }
func (*TriciumRequest) ProtoMessage()               {}
func (*TriciumRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *TriciumRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *TriciumRequest) GetGitRef() string {
	if m != nil {
		return m.GitRef
	}
	return ""
}

func (m *TriciumRequest) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TriciumResponse struct {
	// ID of the run started for this request. This ID can be used to track
	// progress and find results.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *TriciumResponse) Reset()                    { *m = TriciumResponse{} }
func (m *TriciumResponse) String() string            { return proto.CompactTextString(m) }
func (*TriciumResponse) ProtoMessage()               {}
func (*TriciumResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TriciumResponse) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func init() {
	proto.RegisterType((*TriciumRequest)(nil), "tricium.TriciumRequest")
	proto.RegisterType((*TriciumResponse)(nil), "tricium.TriciumResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tricium service

type TriciumClient interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(ctx context.Context, in *TriciumRequest, opts ...grpc.CallOption) (*TriciumResponse, error)
}
type triciumPRPCClient struct {
	client *prpc.Client
}

func NewTriciumPRPCClient(client *prpc.Client) TriciumClient {
	return &triciumPRPCClient{client}
}

func (c *triciumPRPCClient) Analyze(ctx context.Context, in *TriciumRequest, opts ...grpc.CallOption) (*TriciumResponse, error) {
	out := new(TriciumResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type triciumClient struct {
	cc *grpc.ClientConn
}

func NewTriciumClient(cc *grpc.ClientConn) TriciumClient {
	return &triciumClient{cc}
}

func (c *triciumClient) Analyze(ctx context.Context, in *TriciumRequest, opts ...grpc.CallOption) (*TriciumResponse, error) {
	out := new(TriciumResponse)
	err := grpc.Invoke(ctx, "/tricium.Tricium/Analyze", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tricium service

type TriciumServer interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(context.Context, *TriciumRequest) (*TriciumResponse, error)
}

func RegisterTriciumServer(s prpc.Registrar, srv TriciumServer) {
	s.RegisterService(&_Tricium_serviceDesc, srv)
}

func _Tricium_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriciumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Analyze(ctx, req.(*TriciumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tricium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tricium.Tricium",
	HandlerType: (*TriciumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Tricium_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/v1/tricium.proto",
}

func init() { proto.RegisterFile("infra/tricium/api/v1/tricium.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0xca, 0xcc, 0x4b, 0x2b,
	0x4a, 0xd4, 0x2f, 0x29, 0xca, 0x4c, 0xce, 0x2c, 0xcd, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x2f, 0x33,
	0x84, 0x71, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8, 0xa1, 0x5c, 0xa5, 0x48, 0x2e, 0xbe,
	0x10, 0x08, 0x33, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x82, 0x8b, 0xbd, 0xa0, 0x28,
	0x3f, 0x2b, 0x35, 0xb9, 0x44, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x15, 0x12, 0xe7,
	0x62, 0x4f, 0xcf, 0x2c, 0x89, 0x2f, 0x4a, 0x4d, 0x93, 0x60, 0x02, 0xcb, 0xb0, 0xa5, 0x67, 0x96,
	0x04, 0xa5, 0xa6, 0x09, 0x89, 0x70, 0xb1, 0x16, 0x24, 0x96, 0x64, 0x14, 0x4b, 0x30, 0x2b, 0x30,
	0x6b, 0x70, 0x06, 0x41, 0x38, 0x4a, 0x1a, 0x5c, 0xfc, 0x70, 0xa3, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0x44, 0xb9, 0xd8, 0x8a, 0x4a, 0xf3, 0xe2, 0x33, 0x53, 0xa0, 0x46, 0xb3, 0x16, 0x95,
	0xe6, 0x79, 0xa6, 0x18, 0xb9, 0x73, 0xb1, 0x43, 0x55, 0x0a, 0xd9, 0x70, 0xb1, 0x3b, 0xe6, 0x25,
	0xe6, 0x54, 0x56, 0xa5, 0x0a, 0x89, 0xeb, 0xc1, 0xdc, 0x8c, 0xea, 0x42, 0x29, 0x09, 0x4c, 0x09,
	0x88, 0xf9, 0x49, 0x6c, 0x60, 0xdf, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x57, 0x82,
	0xba, 0x03, 0x01, 0x00, 0x00,
}
