// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/tricium/api/v1/tricium.proto

package tricium

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	// Pending is for when an analysis request has been received but the
	// corresponding workflow, function, or workers are not running yet.
	State_PENDING State = 0
	// Running is for when the workflow, function, or workers of a request have
	// been launched, but have not finished.
	State_RUNNING State = 1
	// Success is for a workflow, function, or worker that successfully completed.
	//
	// Success of workflows and functions is aggregated from underlying
	// functions and workers, where full success means success is aggregated.
	State_SUCCESS State = 2
	// Failure is for a workflow, function, or worker that completed with failure.
	//
	// Failure of workflows and functions is aggregated from underlying functions
	// and workers, where any occurrence of failure means failure is aggregated.
	State_FAILURE State = 3
	// Aborted is for workers aborted due to a failing worker dependency.
	//
	// For instance, the worker providing the data needed by a worker may have
	// failed.
	State_ABORTED State = 6
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "PENDING",
		1: "RUNNING",
		2: "SUCCESS",
		3: "FAILURE",
		6: "ABORTED",
	}
	State_value = map[string]int32{
		"PENDING": 0,
		"RUNNING": 1,
		"SUCCESS": 2,
		"FAILURE": 3,
		"ABORTED": 6,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_tricium_api_v1_tricium_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_infra_tricium_api_v1_tricium_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{0}
}

// AnalyzeRequest contains the details needed for an analysis request.
type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the project in luci-config, used to get the project config.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Files to analyze in the project, with metadata.
	Files []*Data_File `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	// Types that are assignable to Source:
	//	*AnalyzeRequest_GerritRevision
	//	*AnalyzeRequest_GitCommit
	Source isAnalyzeRequest_Source `protobuf_oneof:"source"`
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *AnalyzeRequest) GetFiles() []*Data_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (m *AnalyzeRequest) GetSource() isAnalyzeRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *AnalyzeRequest) GetGerritRevision() *GerritRevision {
	if x, ok := x.GetSource().(*AnalyzeRequest_GerritRevision); ok {
		return x.GerritRevision
	}
	return nil
}

func (x *AnalyzeRequest) GetGitCommit() *GitCommit {
	if x, ok := x.GetSource().(*AnalyzeRequest_GitCommit); ok {
		return x.GitCommit
	}
	return nil
}

type isAnalyzeRequest_Source interface {
	isAnalyzeRequest_Source()
}

type AnalyzeRequest_GerritRevision struct {
	GerritRevision *GerritRevision `protobuf:"bytes,7,opt,name=gerrit_revision,json=gerritRevision,proto3,oneof"`
}

type AnalyzeRequest_GitCommit struct {
	GitCommit *GitCommit `protobuf:"bytes,8,opt,name=git_commit,json=gitCommit,proto3,oneof"`
}

func (*AnalyzeRequest_GerritRevision) isAnalyzeRequest_Source() {}

func (*AnalyzeRequest_GitCommit) isAnalyzeRequest_Source() {}

// Information uniquely identifying a Gerrit patch set, including
// the git details needed to fetch from this patch set.
type GerritRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gerrit host.
	//
	// This value must not include the URL schema and is assumed to not include
	// literal string "##", since this string is used internally as a separator.
	// The schema is assumed to be "https".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project name.
	//
	// This value is assumed to not include "##".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Gerrit change ID.
	//
	// This value should be of the form "<project>~<branch>~<Change-Id>", where
	// <Change-Id> is a Change-Id footer string, and not a legacy change ID
	// number. Note that "refs/heads/" can be omitted from the branch.
	//
	// Example: "myProject~master~I8473b95934b5732ac55d26311a706c9c2bde9940"
	Change string `protobuf:"bytes,3,opt,name=change,proto3" json:"change,omitempty"`
	// The full URL to the Git repository for this project, e.g. on Gitiles.
	GitUrl string `protobuf:"bytes,4,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	// Gerrit change revision ref string.
	//
	// This value should be the fetch URL for a revision of a change. Note that
	// the last number of a change revision ref is the corresponding patch set.
	GitRef string `protobuf:"bytes,5,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	// Commit message text from Gerrit.
	CommitMessage string `protobuf:"bytes,6,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
}

func (x *GerritRevision) Reset() {
	*x = GerritRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritRevision) ProtoMessage() {}

func (x *GerritRevision) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritRevision.ProtoReflect.Descriptor instead.
func (*GerritRevision) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{1}
}

func (x *GerritRevision) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritRevision) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritRevision) GetChange() string {
	if x != nil {
		return x.Change
	}
	return ""
}

func (x *GerritRevision) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *GerritRevision) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

func (x *GerritRevision) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

type GitCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full repository URL, including schema, host and path.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// A git commit-ish, such as a refname like "refs/heads/master".
	// This can also be a tag or git commit hash.
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GitCommit) Reset() {
	*x = GitCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommit) ProtoMessage() {}

func (x *GitCommit) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommit.ProtoReflect.Descriptor instead.
func (*GitCommit) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{2}
}

func (x *GitCommit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitCommit) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type AnalyzeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run started for this request.
	//
	// This ID can be used to track progress and request results.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *AnalyzeResponse) Reset() {
	*x = AnalyzeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResponse) ProtoMessage() {}

func (x *AnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyzeResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional function name.
	//
	// If provided, only progress for the provided function will be returned.
	// The function name should match the name of the function in the Tricium
	// configuration.
	//
	// NB! Currently not supported.
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Optional platform that may be provided together with an function name.
	//
	// If provided, only progress for the provided function and platform will be provided.
	//
	// NB! Currently not supported.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// The information that's used to look up the run. If this request is for a
	// particular Gerrit revision, then that can be provided; otherwise the run
	// ID can be used.
	//
	// Types that are assignable to Source:
	//	*ProgressRequest_GerritRevision
	//	*ProgressRequest_RunId
	Source isProgressRequest_Source `protobuf_oneof:"source"`
}

func (x *ProgressRequest) Reset() {
	*x = ProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressRequest) ProtoMessage() {}

func (x *ProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressRequest.ProtoReflect.Descriptor instead.
func (*ProgressRequest) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{4}
}

func (x *ProgressRequest) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ProgressRequest) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (m *ProgressRequest) GetSource() isProgressRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ProgressRequest) GetGerritRevision() *GerritRevision {
	if x, ok := x.GetSource().(*ProgressRequest_GerritRevision); ok {
		return x.GerritRevision
	}
	return nil
}

func (x *ProgressRequest) GetRunId() string {
	if x, ok := x.GetSource().(*ProgressRequest_RunId); ok {
		return x.RunId
	}
	return ""
}

type isProgressRequest_Source interface {
	isProgressRequest_Source()
}

type ProgressRequest_GerritRevision struct {
	GerritRevision *GerritRevision `protobuf:"bytes,4,opt,name=gerrit_revision,json=gerritRevision,proto3,oneof"`
}

type ProgressRequest_RunId struct {
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3,oneof"`
}

func (*ProgressRequest_GerritRevision) isProgressRequest_Source() {}

func (*ProgressRequest_RunId) isProgressRequest_Source() {}

type ProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run progress is reported for.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Overall state for the run provided in the progress request.
	State State `protobuf:"varint,2,opt,name=state,proto3,enum=tricium.State" json:"state,omitempty"`
	// Function progress matching the requested progress report.
	//
	// For a provided run ID this corresponds to all functions and platforms, and
	// for any selection of these, a subset is returned.
	//
	// NB! Selection of a subset is currently not supported.
	FunctionProgress []*FunctionProgress `protobuf:"bytes,3,rep,name=function_progress,json=functionProgress,proto3" json:"function_progress,omitempty"`
}

func (x *ProgressResponse) Reset() {
	*x = ProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressResponse) ProtoMessage() {}

func (x *ProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressResponse.ProtoReflect.Descriptor instead.
func (*ProgressResponse) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{5}
}

func (x *ProgressResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ProgressResponse) GetState() State {
	if x != nil {
		return x.State
	}
	return State_PENDING
}

func (x *ProgressResponse) GetFunctionProgress() []*FunctionProgress {
	if x != nil {
		return x.FunctionProgress
	}
	return nil
}

type FunctionProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The platform for which the function progress is reported.
	Platform Platform_Name `protobuf:"varint,2,opt,name=platform,proto3,enum=tricium.Platform_Name" json:"platform,omitempty"`
	// The state of the function.
	//
	// For an function on a specific platform this state corresponds to the state
	// of the worker, else it is the aggregated state of all workers for the function.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=tricium.State" json:"state,omitempty"`
	// Number of comments.
	//
	// For analyzers that are done and produce comments.
	NumComments int32 `protobuf:"varint,6,opt,name=num_comments,json=numComments,proto3" json:"num_comments,omitempty"`
	// Host for the buildbucket server running tasks for the workers of the function.
	BuildbucketHost string `protobuf:"bytes,7,opt,name=buildbucket_host,json=buildbucketHost,proto3" json:"buildbucket_host,omitempty"`
	// The ID of the buildbucket build triggered for the function worker.
	BuildbucketBuildId int64 `protobuf:"varint,8,opt,name=buildbucket_build_id,json=buildbucketBuildId,proto3" json:"buildbucket_build_id,omitempty"`
}

func (x *FunctionProgress) Reset() {
	*x = FunctionProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionProgress) ProtoMessage() {}

func (x *FunctionProgress) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionProgress.ProtoReflect.Descriptor instead.
func (*FunctionProgress) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{6}
}

func (x *FunctionProgress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionProgress) GetPlatform() Platform_Name {
	if x != nil {
		return x.Platform
	}
	return Platform_ANY
}

func (x *FunctionProgress) GetState() State {
	if x != nil {
		return x.State
	}
	return State_PENDING
}

func (x *FunctionProgress) GetNumComments() int32 {
	if x != nil {
		return x.NumComments
	}
	return 0
}

func (x *FunctionProgress) GetBuildbucketHost() string {
	if x != nil {
		return x.BuildbucketHost
	}
	return ""
}

func (x *FunctionProgress) GetBuildbucketBuildId() int64 {
	if x != nil {
		return x.BuildbucketBuildId
	}
	return 0
}

type ResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run ID returned by an analyze request.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// An optional function name.
	//
	// If provided, only results for the provided function are returned.
	// If a function is being run on more than one platform then the merged
	// results of the function can be returned by exclusion of a specific platform.
	//
	// NB! Currently not supported.
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Optional platform that can be provided together with an function name.
	//
	// If provided, only results for the provided platform and function are returned.
	//
	// NB! Currently not supported.
	Platform Platform_Name `protobuf:"varint,3,opt,name=platform,proto3,enum=tricium.Platform_Name" json:"platform,omitempty"`
}

func (x *ResultsRequest) Reset() {
	*x = ResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsRequest) ProtoMessage() {}

func (x *ResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsRequest.ProtoReflect.Descriptor instead.
func (*ResultsRequest) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{7}
}

func (x *ResultsRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ResultsRequest) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ResultsRequest) GetPlatform() Platform_Name {
	if x != nil {
		return x.Platform
	}
	return Platform_ANY
}

type ResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *Data_Results `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
	// Whether the returned results are merged.
	//
	// Results may be merged if a result request for an function running on multiple
	// platforms was made and the request did not include a specific platform.
	// Results for a run with no specific function selected will be marked as merged
	// if any included analyzer results were merged.
	IsMerged bool `protobuf:"varint,2,opt,name=is_merged,json=isMerged,proto3" json:"is_merged,omitempty"`
}

func (x *ResultsResponse) Reset() {
	*x = ResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsResponse) ProtoMessage() {}

func (x *ResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsResponse.ProtoReflect.Descriptor instead.
func (*ResultsResponse) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{8}
}

func (x *ResultsResponse) GetResults() *Data_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ResultsResponse) GetIsMerged() bool {
	if x != nil {
		return x.IsMerged
	}
	return false
}

type FeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the project in luci-config to provide feedback for.
	//
	// In practice this was never required, although we had intended
	// to make it required. See crbug.com/905885.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	// Analyzer category to provide aggregated feedback for.
	//
	// This includes the analyzer name along with optional subcategories
	// separated with slash, e.g., "ClangTidy" or "ClangTidy/llvm-header-guard".
	//
	// Required field. Must include at least the analyzer name and should not
	// end with a slash.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// Start of time period to report feedback for.
	//
	// Feedback for comments created from this time (inclusive) will be included.
	// Must be before end_time.
	//
	// Optional field. If not specified, this means "go as far back as possible".
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of time period to report feedback for.
	//
	// Feedback for comments created up until this time (exclusive) will be included.
	// Must be after start_time.
	//
	// Optional field. Defaults to now.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *FeedbackRequest) Reset() {
	*x = FeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackRequest) ProtoMessage() {}

func (x *FeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackRequest.ProtoReflect.Descriptor instead.
func (*FeedbackRequest) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{9}
}

func (x *FeedbackRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *FeedbackRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *FeedbackRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *FeedbackRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type FeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of returned comments.
	//
	// In any case where an analyzer was run on multiple platforms and the
	// resulting comments were merged, only merged comments are returned in this
	// count. Note that only merged comments are ever returned from the Tricium
	// service.
	Comments int32 `protobuf:"varint,1,opt,name=comments,proto3" json:"comments,omitempty"`
	// Number of collected 'not useful' reports.
	NotUsefulReports int32 `protobuf:"varint,2,opt,name=not_useful_reports,json=notUsefulReports,proto3" json:"not_useful_reports,omitempty"`
}

func (x *FeedbackResponse) Reset() {
	*x = FeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackResponse) ProtoMessage() {}

func (x *FeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackResponse.ProtoReflect.Descriptor instead.
func (*FeedbackResponse) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{10}
}

func (x *FeedbackResponse) GetComments() int32 {
	if x != nil {
		return x.Comments
	}
	return 0
}

func (x *FeedbackResponse) GetNotUsefulReports() int32 {
	if x != nil {
		return x.NotUsefulReports
	}
	return 0
}

type ReportNotUsefulRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of comment as returned by the Results endpoint.
	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *ReportNotUsefulRequest) Reset() {
	*x = ReportNotUsefulRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportNotUsefulRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNotUsefulRequest) ProtoMessage() {}

func (x *ReportNotUsefulRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNotUsefulRequest.ProtoReflect.Descriptor instead.
func (*ReportNotUsefulRequest) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{11}
}

func (x *ReportNotUsefulRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

type ReportNotUsefulResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email address of the owner of the analyzer.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Monorail bug component of the analyzer being.
	MonorailComponent string `protobuf:"bytes,2,opt,name=monorail_component,json=monorailComponent,proto3" json:"monorail_component,omitempty"`
}

func (x *ReportNotUsefulResponse) Reset() {
	*x = ReportNotUsefulResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportNotUsefulResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNotUsefulResponse) ProtoMessage() {}

func (x *ReportNotUsefulResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_tricium_api_v1_tricium_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNotUsefulResponse.ProtoReflect.Descriptor instead.
func (*ReportNotUsefulResponse) Descriptor() ([]byte, []int) {
	return file_infra_tricium_api_v1_tricium_proto_rawDescGZIP(), []int{12}
}

func (x *ReportNotUsefulResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ReportNotUsefulResponse) GetMonorailComponent() string {
	if x != nil {
		return x.MonorailComponent
	}
	return ""
}

var File_infra_tricium_api_v1_tricium_proto protoreflect.FileDescriptor

var file_infra_tricium_api_v1_tricium_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x67,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x47,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xaf,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2f, 0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x22, 0x28, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x10,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x77, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0x5f, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75,
	0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5c, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x37,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x66, 0x75,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2a, 0x54, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x06, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x32, 0xdd, 0x02,
	0x0a, 0x07, 0x54, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x07, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x55, 0x73,
	0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1e, 0x5a,
	0x1c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x69, 0x63, 0x69, 0x75, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_tricium_api_v1_tricium_proto_rawDescOnce sync.Once
	file_infra_tricium_api_v1_tricium_proto_rawDescData = file_infra_tricium_api_v1_tricium_proto_rawDesc
)

func file_infra_tricium_api_v1_tricium_proto_rawDescGZIP() []byte {
	file_infra_tricium_api_v1_tricium_proto_rawDescOnce.Do(func() {
		file_infra_tricium_api_v1_tricium_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_tricium_api_v1_tricium_proto_rawDescData)
	})
	return file_infra_tricium_api_v1_tricium_proto_rawDescData
}

var file_infra_tricium_api_v1_tricium_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_infra_tricium_api_v1_tricium_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_infra_tricium_api_v1_tricium_proto_goTypes = []interface{}{
	(State)(0),                      // 0: tricium.State
	(*AnalyzeRequest)(nil),          // 1: tricium.AnalyzeRequest
	(*GerritRevision)(nil),          // 2: tricium.GerritRevision
	(*GitCommit)(nil),               // 3: tricium.GitCommit
	(*AnalyzeResponse)(nil),         // 4: tricium.AnalyzeResponse
	(*ProgressRequest)(nil),         // 5: tricium.ProgressRequest
	(*ProgressResponse)(nil),        // 6: tricium.ProgressResponse
	(*FunctionProgress)(nil),        // 7: tricium.FunctionProgress
	(*ResultsRequest)(nil),          // 8: tricium.ResultsRequest
	(*ResultsResponse)(nil),         // 9: tricium.ResultsResponse
	(*FeedbackRequest)(nil),         // 10: tricium.FeedbackRequest
	(*FeedbackResponse)(nil),        // 11: tricium.FeedbackResponse
	(*ReportNotUsefulRequest)(nil),  // 12: tricium.ReportNotUsefulRequest
	(*ReportNotUsefulResponse)(nil), // 13: tricium.ReportNotUsefulResponse
	(*Data_File)(nil),               // 14: tricium.Data.File
	(*Platform)(nil),                // 15: tricium.Platform
	(Platform_Name)(0),              // 16: tricium.Platform.Name
	(*Data_Results)(nil),            // 17: tricium.Data.Results
	(*timestamppb.Timestamp)(nil),   // 18: google.protobuf.Timestamp
}
var file_infra_tricium_api_v1_tricium_proto_depIdxs = []int32{
	14, // 0: tricium.AnalyzeRequest.files:type_name -> tricium.Data.File
	2,  // 1: tricium.AnalyzeRequest.gerrit_revision:type_name -> tricium.GerritRevision
	3,  // 2: tricium.AnalyzeRequest.git_commit:type_name -> tricium.GitCommit
	15, // 3: tricium.ProgressRequest.platform:type_name -> tricium.Platform
	2,  // 4: tricium.ProgressRequest.gerrit_revision:type_name -> tricium.GerritRevision
	0,  // 5: tricium.ProgressResponse.state:type_name -> tricium.State
	7,  // 6: tricium.ProgressResponse.function_progress:type_name -> tricium.FunctionProgress
	16, // 7: tricium.FunctionProgress.platform:type_name -> tricium.Platform.Name
	0,  // 8: tricium.FunctionProgress.state:type_name -> tricium.State
	16, // 9: tricium.ResultsRequest.platform:type_name -> tricium.Platform.Name
	17, // 10: tricium.ResultsResponse.results:type_name -> tricium.Data.Results
	18, // 11: tricium.FeedbackRequest.start_time:type_name -> google.protobuf.Timestamp
	18, // 12: tricium.FeedbackRequest.end_time:type_name -> google.protobuf.Timestamp
	1,  // 13: tricium.Tricium.Analyze:input_type -> tricium.AnalyzeRequest
	5,  // 14: tricium.Tricium.Progress:input_type -> tricium.ProgressRequest
	8,  // 15: tricium.Tricium.Results:input_type -> tricium.ResultsRequest
	10, // 16: tricium.Tricium.Feedback:input_type -> tricium.FeedbackRequest
	12, // 17: tricium.Tricium.ReportNotUseful:input_type -> tricium.ReportNotUsefulRequest
	4,  // 18: tricium.Tricium.Analyze:output_type -> tricium.AnalyzeResponse
	6,  // 19: tricium.Tricium.Progress:output_type -> tricium.ProgressResponse
	9,  // 20: tricium.Tricium.Results:output_type -> tricium.ResultsResponse
	11, // 21: tricium.Tricium.Feedback:output_type -> tricium.FeedbackResponse
	13, // 22: tricium.Tricium.ReportNotUseful:output_type -> tricium.ReportNotUsefulResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_infra_tricium_api_v1_tricium_proto_init() }
func file_infra_tricium_api_v1_tricium_proto_init() {
	if File_infra_tricium_api_v1_tricium_proto != nil {
		return
	}
	file_infra_tricium_api_v1_data_proto_init()
	file_infra_tricium_api_v1_platform_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_tricium_api_v1_tricium_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportNotUsefulRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_tricium_api_v1_tricium_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportNotUsefulResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_tricium_api_v1_tricium_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AnalyzeRequest_GerritRevision)(nil),
		(*AnalyzeRequest_GitCommit)(nil),
	}
	file_infra_tricium_api_v1_tricium_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ProgressRequest_GerritRevision)(nil),
		(*ProgressRequest_RunId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_tricium_api_v1_tricium_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_tricium_api_v1_tricium_proto_goTypes,
		DependencyIndexes: file_infra_tricium_api_v1_tricium_proto_depIdxs,
		EnumInfos:         file_infra_tricium_api_v1_tricium_proto_enumTypes,
		MessageInfos:      file_infra_tricium_api_v1_tricium_proto_msgTypes,
	}.Build()
	File_infra_tricium_api_v1_tricium_proto = out.File
	file_infra_tricium_api_v1_tricium_proto_rawDesc = nil
	file_infra_tricium_api_v1_tricium_proto_goTypes = nil
	file_infra_tricium_api_v1_tricium_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TriciumClient is the client API for Tricium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TriciumClient interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	// Progress requests progress information for a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
	// Results requests analysis results from a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
	// Feedback requests feedback for an analyzer category.
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	// ReportNotUseful reports not useful feedback for a robot comment.
	ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error)
}
type triciumPRPCClient struct {
	client *prpc.Client
}

func NewTriciumPRPCClient(client *prpc.Client) TriciumClient {
	return &triciumPRPCClient{client}
}

func (c *triciumPRPCClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "Feedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumPRPCClient) ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error) {
	out := new(ReportNotUsefulResponse)
	err := c.client.Call(ctx, "tricium.Tricium", "ReportNotUseful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type triciumClient struct {
	cc grpc.ClientConnInterface
}

func NewTriciumClient(cc grpc.ClientConnInterface) TriciumClient {
	return &triciumClient{cc}
}

func (c *triciumClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/Feedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triciumClient) ReportNotUseful(ctx context.Context, in *ReportNotUsefulRequest, opts ...grpc.CallOption) (*ReportNotUsefulResponse, error) {
	out := new(ReportNotUsefulResponse)
	err := c.cc.Invoke(ctx, "/tricium.Tricium/ReportNotUseful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriciumServer is the server API for Tricium service.
type TriciumServer interface {
	// Analyze requests analysis of a list of paths.
	//
	// An analysis request for a list of paths in a project connected to Tricium
	// via the Tricium configuration. On success, the ID of the resulting run is
	// returned.
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	// Progress requests progress information for a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Progress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	// Results requests analysis results from a run.
	//
	// A run corresponds to an analyze request and is identified with a run ID.
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
	// Feedback requests feedback for an analyzer category.
	Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	// ReportNotUseful reports not useful feedback for a robot comment.
	ReportNotUseful(context.Context, *ReportNotUsefulRequest) (*ReportNotUsefulResponse, error)
}

// UnimplementedTriciumServer can be embedded to have forward compatible implementations.
type UnimplementedTriciumServer struct {
}

func (*UnimplementedTriciumServer) Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (*UnimplementedTriciumServer) Progress(context.Context, *ProgressRequest) (*ProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (*UnimplementedTriciumServer) Results(context.Context, *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Results not implemented")
}
func (*UnimplementedTriciumServer) Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (*UnimplementedTriciumServer) ReportNotUseful(context.Context, *ReportNotUsefulRequest) (*ReportNotUsefulResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportNotUseful not implemented")
}

func RegisterTriciumServer(s prpc.Registrar, srv TriciumServer) {
	s.RegisterService(&_Tricium_serviceDesc, srv)
}

func _Tricium_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Progress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Progress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/Feedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tricium_ReportNotUseful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportNotUsefulRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriciumServer).ReportNotUseful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tricium.Tricium/ReportNotUseful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriciumServer).ReportNotUseful(ctx, req.(*ReportNotUsefulRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tricium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tricium.Tricium",
	HandlerType: (*TriciumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Tricium_Analyze_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _Tricium_Progress_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _Tricium_Results_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _Tricium_Feedback_Handler,
		},
		{
			MethodName: "ReportNotUseful",
			Handler:    _Tricium_ReportNotUseful_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/tricium/api/v1/tricium.proto",
}
