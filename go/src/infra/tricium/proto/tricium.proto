// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tricium;

import "infra/tricium/proto/data.proto";
import "infra/tricium/proto/common.proto";

// The Tricium service configuration.
//
// Listing supported platforms and analyzers shared between projects connected
// to Tricium.
message ServiceConfig {
  // Supported platforms.
  repeated Platform platform = 1;

  // List of shared analyzers.
  repeated Analyzer analyzer = 2;
}

// The Tricium project configuration.
//
// Specifies details needed to connect a project to Tricium, adds project
// specific analyzers and implementations, and selects analyzer
// implementations.
message ProjectConfig {
  // The project name,
  string name = 1;

  // Details of the repository connected to the project. This should be the
  // repository hosting the files that should be analyzed for this project.
  RepoDetails repo_details = 2;

  // Access control rules for the project.
  repeated Acl acls = 3;

  // Project-specific analyzer details. This includes project-specific analyzer
  // implementations and full project-specific analyzer specifications.
  repeated Analyzer analyzer = 4;

  // Selection of analyzer implementations to run for this project.
  repeated Selection selection = 5;
}

// Repository details for a project.
message RepoDetails {
  // Supported kinds of repositories.
  enum Kind {
    GIT = 0;
  }

  // The kind of repository.
  Kind kind = 1;

  // If repository kind is GIT then provide Git details.
  GitRepoDetails git_details = 2;
}

// Git repository details.
message GitRepoDetails {
  // URL to repository.
  string repository = 1;

  // Default ref to use to get files to analyze.
  string ref = 2;
}

// Access control rules.
message Acl {
  // Roles relevant to Tricium.
  enum Role {
   // Can read progress/results.
   READER = 0;
   // Can request analysis.
   REQUESTER = 1;
  }

  // Role of a group or identity.
  Role role = 1;

  // Name of group, as defined in the auth service. Specify either group or
  // identity, not both.
  string group = 2;

  // Identity, as defined by the auth service. Can be either an email address
  // or an indentity string, for instance, "anonymous:anonymous" for anonymous
  // users. Specify either group or identity, not both.
  string identity = 3;
}

// Specification of a platform configuration.
message Platform {
  // The name use to refer to this platform configuration.
  string name = 1;

 // Swarming dimensions of the form “key:value”, with keys and values mapping
 // to valid swarming keys/values.
 repeated string dimensions = 2;
}

// Selection of analyzer implementations to run for a project.
message Selection {
  // Name of analyzer to run.
  string analyzer = 1;

  // Name of platform configuration to run analyzer on.
  string platform = 2;

  // Analyzer configuration to use on this platform.
  repeated Config config = 3;
}

// Analyzer specification.
message Analyzer {
  // Name of analyzer. This name is used to select the analyzer and is used
  // when reporting results for the analyzer. This name should be unique among
  // Tricium analyzers.
  string name = 1;

  // Tricium data needed by this analyzer.
  Data.Type needs = 2;

  // Tricium data provided by this analyzer.
  Data.Type provides = 3;

  // Paths to run this analyzer on, defined as a glob.
  repeated string path_filter = 4; // Default: "*"

  // Email to the owner of this analyzer.
  string owner = 6;

   // Monorail bug component for bug filing.
  string component = 7;

  // Analyzer configuration. These configuration options enable projects to
  // customize how an analyzer implementation analyzes their files.  It's
  // common for analyzers to provide a list of possible checks which can be
  // configured via a command line flag or similar. This field provides a way
  // to expose such flags as configuration options.
  ConfigDef config_def = 8;

  // Analyzer implementations. An analyzer may run on many platforms and this
  // may require many different implementations of the analyzer. An
  // implementation may be shared between several platforms if possible.
  repeated Impl impl = 9;
}

// Definition of an analyzer configuration, e.g., ClangTidy is configured with
// a ‘checks’ flag.
message ConfigDef {
  // Name of configuration option.
  string name = 1;

  // Default value for the config, e.g., checks=”all”.
  string default = 2;
}

// Analyzer implementation for one or more platforms. Implementation can be
// recipe-based or binary-based.
message Impl {
  // The platforms this implementation applies to.
  repeated Platform platform = 1;

  // Cipd packages needed by this implementation.
  repeated CipdPackage cipd_package = 2;

  // Recipe for recipe-based implementation. Either recipe or cmd, not both.
  Recipe recipe = 3;

  // Command for binary-based implementation. Either recipe or cmd, not both.
  Cmd cmd = 4;

  // Deadline for execution of corresponding worker (in minutes). Note that
  // this deadline includes the launch of a swarming task for the corresponding
  // worker, and collection of results from that worker.
  int32 deadline = 5;
}

// Specification of how to find a recipe.
message Recipe {
  // Repository URL of the recipe package.
  string repository = 1;

  // Path to recipe in the repository.
  string path = 2;

  // Revision to use.
  string revision = 3;

  // A json string containing properties for the recipe.
  string properties = 4;
}

// Analyzer configuration used when selecting an analyzer implementation.
message Config {
  // The name of the configuration option.
  string name = 1;

  // Value of the configuration.
  string value = 2;
}
