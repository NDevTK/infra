// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/appengine/arquebus/app/config/config.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Oncall_Position int32

const (
	Oncall_UNSET     Oncall_Position = 0
	Oncall_PRIMARY   Oncall_Position = 1
	Oncall_SECONDARY Oncall_Position = 2
)

// Enum value maps for Oncall_Position.
var (
	Oncall_Position_name = map[int32]string{
		0: "UNSET",
		1: "PRIMARY",
		2: "SECONDARY",
	}
	Oncall_Position_value = map[string]int32{
		"UNSET":     0,
		"PRIMARY":   1,
		"SECONDARY": 2,
	}
)

func (x Oncall_Position) Enum() *Oncall_Position {
	p := new(Oncall_Position)
	*p = x
	return p
}

func (x Oncall_Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Oncall_Position) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_arquebus_app_config_config_proto_enumTypes[0].Descriptor()
}

func (Oncall_Position) Type() protoreflect.EnumType {
	return &file_infra_appengine_arquebus_app_config_config_proto_enumTypes[0]
}

func (x Oncall_Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Oncall_Position.Descriptor instead.
func (Oncall_Position) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP(), []int{2, 0}
}

// Config is the service-wide configuration data for Arquebus
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessGroup is the luci-auth group who has access to admin pages and
	// APIs.
	AccessGroup string `protobuf:"bytes,1,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	// The endpoint for Monorail APIs.
	MonorailHostname string `protobuf:"bytes,2,opt,name=monorail_hostname,json=monorailHostname,proto3" json:"monorail_hostname,omitempty"`
	// A list of Assigner config(s).
	Assigners []*Assigner `protobuf:"bytes,3,rep,name=assigners,proto3" json:"assigners,omitempty"`
	// The endpoint for RotaNG APIs.
	RotangHostname string `protobuf:"bytes,4,opt,name=rotang_hostname,json=rotangHostname,proto3" json:"rotang_hostname,omitempty"`
	// The endpoint for Rotation Proxy APIs.
	RotationProxyHostname string `protobuf:"bytes,5,opt,name=rotation_proxy_hostname,json=rotationProxyHostname,proto3" json:"rotation_proxy_hostname,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

func (x *Config) GetMonorailHostname() string {
	if x != nil {
		return x.MonorailHostname
	}
	return ""
}

func (x *Config) GetAssigners() []*Assigner {
	if x != nil {
		return x.Assigners
	}
	return nil
}

func (x *Config) GetRotangHostname() string {
	if x != nil {
		return x.RotangHostname
	}
	return ""
}

func (x *Config) GetRotationProxyHostname() string {
	if x != nil {
		return x.RotationProxyHostname
	}
	return ""
}

// IssueQuery describes the issue query to be used for searching unassigned
// issues in Monorail.
type IssueQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Free-form text query.
	Q string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// String name of the projects to search issues for, e.g. "chromium".
	ProjectNames []string `protobuf:"bytes,2,rep,name=project_names,json=projectNames,proto3" json:"project_names,omitempty"`
}

func (x *IssueQuery) Reset() {
	*x = IssueQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueQuery) ProtoMessage() {}

func (x *IssueQuery) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueQuery.ProtoReflect.Descriptor instead.
func (*IssueQuery) Descriptor() ([]byte, []int) {
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *IssueQuery) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *IssueQuery) GetProjectNames() []string {
	if x != nil {
		return x.ProjectNames
	}
	return nil
}

// Oncall represents a rotation shift modelled in Rotation Proxy.
type Oncall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Use Rotation.name instead.
	Rotation string `protobuf:"bytes,1,opt,name=rotation,proto3" json:"rotation,omitempty"`
	// The oncall position in the shift.
	Position Oncall_Position `protobuf:"varint,2,opt,name=position,proto3,enum=arquebus.config.Oncall_Position" json:"position,omitempty"`
	// The name of the rotation.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Oncall) Reset() {
	*x = Oncall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oncall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oncall) ProtoMessage() {}

func (x *Oncall) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oncall.ProtoReflect.Descriptor instead.
func (*Oncall) Descriptor() ([]byte, []int) {
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Oncall) GetRotation() string {
	if x != nil {
		return x.Rotation
	}
	return ""
}

func (x *Oncall) GetPosition() Oncall_Position {
	if x != nil {
		return x.Position
	}
	return Oncall_UNSET
}

func (x *Oncall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// UserSource represents a single source to find a valid Monorail user to whom
// Arquebus will assign or cc issues found.
type UserSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to From:
	//	*UserSource_Oncall
	//	*UserSource_Email
	//	*UserSource_Rotation
	From isUserSource_From `protobuf_oneof:"from"`
}

func (x *UserSource) Reset() {
	*x = UserSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSource) ProtoMessage() {}

func (x *UserSource) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSource.ProtoReflect.Descriptor instead.
func (*UserSource) Descriptor() ([]byte, []int) {
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP(), []int{3}
}

func (m *UserSource) GetFrom() isUserSource_From {
	if m != nil {
		return m.From
	}
	return nil
}

// Deprecated: Do not use.
func (x *UserSource) GetOncall() *Oncall {
	if x, ok := x.GetFrom().(*UserSource_Oncall); ok {
		return x.Oncall
	}
	return nil
}

func (x *UserSource) GetEmail() string {
	if x, ok := x.GetFrom().(*UserSource_Email); ok {
		return x.Email
	}
	return ""
}

func (x *UserSource) GetRotation() *Oncall {
	if x, ok := x.GetFrom().(*UserSource_Rotation); ok {
		return x.Rotation
	}
	return nil
}

type isUserSource_From interface {
	isUserSource_From()
}

type UserSource_Oncall struct {
	// Deprecated: Use UserSource.Rotation instead.
	//
	// Deprecated: Do not use.
	Oncall *Oncall `protobuf:"bytes,1,opt,name=oncall,proto3,oneof"`
}

type UserSource_Email struct {
	// The email address of a Monorail user account.
	Email string `protobuf:"bytes,2,opt,name=email,proto3,oneof"` // e.g., user@chromium.org
}

type UserSource_Rotation struct {
	// Represents a rotation shift modelled in rotation-proxy.
	Rotation *Oncall `protobuf:"bytes,3,opt,name=rotation,proto3,oneof"`
}

func (*UserSource_Oncall) isUserSource_From() {}

func (*UserSource_Email) isUserSource_From() {}

func (*UserSource_Rotation) isUserSource_From() {}

// Assigner contains specifications for an Assigner job.
type Assigner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the Assigner.
	//
	// This value will be used in URLs of UI, so keep it short. Note that
	// only lowercase alphabet letters and numbers are allowed. A hyphen may
	// be placed between letters and numbers.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An email list of the owners of the Assigner.
	Owners []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
	// The duration between the start of an Assigner run and the next one.
	//
	// This value should be at least a minute long.
	Interval *duration.Duration `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	// IssueQuery describes the search criteria to look for issues to assign.
	IssueQuery *IssueQuery `protobuf:"bytes,4,opt,name=issue_query,json=issueQuery,proto3" json:"issue_query,omitempty"`
	// If multiple values are specified in assignees, Arquebus iterates the list
	// in the order until it finds a currently available assignee. Note that
	// Monorail users are always assumed to be available.
	Assignees []*UserSource `protobuf:"bytes,6,rep,name=assignees,proto3" json:"assignees,omitempty"`
	// If multiple values are specified in ccs, all the available roations and
	// users are added to the CC of searched issues.
	Ccs []*UserSource `protobuf:"bytes,7,rep,name=ccs,proto3" json:"ccs,omitempty"`
	// If DryRun is set, Assigner doesn't update the found issues.
	DryRun bool `protobuf:"varint,8,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// The description shown on UI.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// Comment is an additional message that is added to the body of the issue
	// comment that is posted when an issue gets updated.
	Comment string `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Assigner) Reset() {
	*x = Assigner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assigner) ProtoMessage() {}

func (x *Assigner) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_arquebus_app_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assigner.ProtoReflect.Descriptor instead.
func (*Assigner) Descriptor() ([]byte, []int) {
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *Assigner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Assigner) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Assigner) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Assigner) GetIssueQuery() *IssueQuery {
	if x != nil {
		return x.IssueQuery
	}
	return nil
}

func (x *Assigner) GetAssignees() []*UserSource {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *Assigner) GetCcs() []*UserSource {
	if x != nil {
		return x.Ccs
	}
	return nil
}

func (x *Assigner) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *Assigner) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Assigner) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_infra_appengine_arquebus_app_config_config_proto protoreflect.FileDescriptor

var file_infra_appengine_arquebus_app_config_config_proto_rawDesc = []byte{
	0x0a, 0x30, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x6e,
	0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x06, 0x4f, 0x6e,
	0x63, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x31, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x22, 0xe6, 0x02, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c,
	0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x63, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x03, 0x63, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x25, 0x5a, 0x23, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x62, 0x75, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_arquebus_app_config_config_proto_rawDescOnce sync.Once
	file_infra_appengine_arquebus_app_config_config_proto_rawDescData = file_infra_appengine_arquebus_app_config_config_proto_rawDesc
)

func file_infra_appengine_arquebus_app_config_config_proto_rawDescGZIP() []byte {
	file_infra_appengine_arquebus_app_config_config_proto_rawDescOnce.Do(func() {
		file_infra_appengine_arquebus_app_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_arquebus_app_config_config_proto_rawDescData)
	})
	return file_infra_appengine_arquebus_app_config_config_proto_rawDescData
}

var file_infra_appengine_arquebus_app_config_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_infra_appengine_arquebus_app_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_infra_appengine_arquebus_app_config_config_proto_goTypes = []interface{}{
	(Oncall_Position)(0),      // 0: arquebus.config.Oncall.Position
	(*Config)(nil),            // 1: arquebus.config.Config
	(*IssueQuery)(nil),        // 2: arquebus.config.IssueQuery
	(*Oncall)(nil),            // 3: arquebus.config.Oncall
	(*UserSource)(nil),        // 4: arquebus.config.UserSource
	(*Assigner)(nil),          // 5: arquebus.config.Assigner
	(*duration.Duration)(nil), // 6: google.protobuf.Duration
}
var file_infra_appengine_arquebus_app_config_config_proto_depIdxs = []int32{
	5, // 0: arquebus.config.Config.assigners:type_name -> arquebus.config.Assigner
	0, // 1: arquebus.config.Oncall.position:type_name -> arquebus.config.Oncall.Position
	3, // 2: arquebus.config.UserSource.oncall:type_name -> arquebus.config.Oncall
	3, // 3: arquebus.config.UserSource.rotation:type_name -> arquebus.config.Oncall
	6, // 4: arquebus.config.Assigner.interval:type_name -> google.protobuf.Duration
	2, // 5: arquebus.config.Assigner.issue_query:type_name -> arquebus.config.IssueQuery
	4, // 6: arquebus.config.Assigner.assignees:type_name -> arquebus.config.UserSource
	4, // 7: arquebus.config.Assigner.ccs:type_name -> arquebus.config.UserSource
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_infra_appengine_arquebus_app_config_config_proto_init() }
func file_infra_appengine_arquebus_app_config_config_proto_init() {
	if File_infra_appengine_arquebus_app_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_arquebus_app_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_arquebus_app_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_arquebus_app_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oncall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_arquebus_app_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_arquebus_app_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assigner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_appengine_arquebus_app_config_config_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UserSource_Oncall)(nil),
		(*UserSource_Email)(nil),
		(*UserSource_Rotation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_arquebus_app_config_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_appengine_arquebus_app_config_config_proto_goTypes,
		DependencyIndexes: file_infra_appengine_arquebus_app_config_config_proto_depIdxs,
		EnumInfos:         file_infra_appengine_arquebus_app_config_config_proto_enumTypes,
		MessageInfos:      file_infra_appengine_arquebus_app_config_config_proto_msgTypes,
	}.Build()
	File_infra_appengine_arquebus_app_config_config_proto = out.File
	file_infra_appengine_arquebus_app_config_config_proto_rawDesc = nil
	file_infra_appengine_arquebus_app_config_config_proto_goTypes = nil
	file_infra_appengine_arquebus_app_config_config_proto_depIdxs = nil
}
