// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/drone-queen/api/service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportDroneResponse_Status int32

const (
	// UNKNOWN_ERROR should not be used normally.  It is the default
	// value if the status is missing or unknown.  For example, if the
	// service uses a new enum value that the client does not know
	// about yet, the client will use the default value.
	ReportDroneResponse_UNKNOWN_ERROR ReportDroneResponse_Status = 0
	ReportDroneResponse_OK            ReportDroneResponse_Status = 1
	ReportDroneResponse_UNKNOWN_UUID  ReportDroneResponse_Status = 2
)

var ReportDroneResponse_Status_name = map[int32]string{
	0: "UNKNOWN_ERROR",
	1: "OK",
	2: "UNKNOWN_UUID",
}

var ReportDroneResponse_Status_value = map[string]int32{
	"UNKNOWN_ERROR": 0,
	"OK":            1,
	"UNKNOWN_UUID":  2,
}

func (x ReportDroneResponse_Status) String() string {
	return proto.EnumName(ReportDroneResponse_Status_name, int32(x))
}

func (ReportDroneResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{1, 0}
}

type ReportDroneRequest struct {
	// drone_uuid is the UUID assigned to the drone.  New drones should
	// leave this empty; a new UUID will be assigned to the drone.
	DroneUuid string `protobuf:"bytes,1,opt,name=drone_uuid,json=droneUuid,proto3" json:"drone_uuid,omitempty"`
	// load_indicators are used for load balancing.
	LoadIndicators       *ReportDroneRequest_LoadIndicators `protobuf:"bytes,2,opt,name=load_indicators,json=loadIndicators,proto3" json:"load_indicators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ReportDroneRequest) Reset()         { *m = ReportDroneRequest{} }
func (m *ReportDroneRequest) String() string { return proto.CompactTextString(m) }
func (*ReportDroneRequest) ProtoMessage()    {}
func (*ReportDroneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{0}
}

func (m *ReportDroneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportDroneRequest.Unmarshal(m, b)
}
func (m *ReportDroneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportDroneRequest.Marshal(b, m, deterministic)
}
func (m *ReportDroneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportDroneRequest.Merge(m, src)
}
func (m *ReportDroneRequest) XXX_Size() int {
	return xxx_messageInfo_ReportDroneRequest.Size(m)
}
func (m *ReportDroneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportDroneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportDroneRequest proto.InternalMessageInfo

func (m *ReportDroneRequest) GetDroneUuid() string {
	if m != nil {
		return m.DroneUuid
	}
	return ""
}

func (m *ReportDroneRequest) GetLoadIndicators() *ReportDroneRequest_LoadIndicators {
	if m != nil {
		return m.LoadIndicators
	}
	return nil
}

type ReportDroneRequest_LoadIndicators struct {
	// dut_capacity is a simple load indicator that indicates how many
	// total DUTs the drone can support.
	DutCapacity          uint32   `protobuf:"varint,1,opt,name=dut_capacity,json=dutCapacity,proto3" json:"dut_capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportDroneRequest_LoadIndicators) Reset()         { *m = ReportDroneRequest_LoadIndicators{} }
func (m *ReportDroneRequest_LoadIndicators) String() string { return proto.CompactTextString(m) }
func (*ReportDroneRequest_LoadIndicators) ProtoMessage()    {}
func (*ReportDroneRequest_LoadIndicators) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{0, 0}
}

func (m *ReportDroneRequest_LoadIndicators) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportDroneRequest_LoadIndicators.Unmarshal(m, b)
}
func (m *ReportDroneRequest_LoadIndicators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportDroneRequest_LoadIndicators.Marshal(b, m, deterministic)
}
func (m *ReportDroneRequest_LoadIndicators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportDroneRequest_LoadIndicators.Merge(m, src)
}
func (m *ReportDroneRequest_LoadIndicators) XXX_Size() int {
	return xxx_messageInfo_ReportDroneRequest_LoadIndicators.Size(m)
}
func (m *ReportDroneRequest_LoadIndicators) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportDroneRequest_LoadIndicators.DiscardUnknown(m)
}

var xxx_messageInfo_ReportDroneRequest_LoadIndicators proto.InternalMessageInfo

func (m *ReportDroneRequest_LoadIndicators) GetDutCapacity() uint32 {
	if m != nil {
		return m.DutCapacity
	}
	return 0
}

type ReportDroneResponse struct {
	// status reports the status of the call.  It is important to check
	// this for errors.
	Status ReportDroneResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=drone_queen.ReportDroneResponse_Status" json:"status,omitempty"`
	// drone_uuid is the UUID assigned to the drone.  If drone_uuid was
	// set in the request, this field will either have the same value or
	// be omitted.
	DroneUuid string `protobuf:"bytes,2,opt,name=drone_uuid,json=droneUuid,proto3" json:"drone_uuid,omitempty"`
	// expiration_time is when the current assignment expires.
	ExpirationTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	// assigned_duts are the DUTs assigned to the drone.
	AssignedDuts []string `protobuf:"bytes,4,rep,name=assigned_duts,json=assignedDuts,proto3" json:"assigned_duts,omitempty"`
	// draining_duts are the DUTs that the drone should drain.  This is
	// always a subset of assigned_duts.
	DrainingDuts         []string `protobuf:"bytes,5,rep,name=draining_duts,json=drainingDuts,proto3" json:"draining_duts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportDroneResponse) Reset()         { *m = ReportDroneResponse{} }
func (m *ReportDroneResponse) String() string { return proto.CompactTextString(m) }
func (*ReportDroneResponse) ProtoMessage()    {}
func (*ReportDroneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{1}
}

func (m *ReportDroneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportDroneResponse.Unmarshal(m, b)
}
func (m *ReportDroneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportDroneResponse.Marshal(b, m, deterministic)
}
func (m *ReportDroneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportDroneResponse.Merge(m, src)
}
func (m *ReportDroneResponse) XXX_Size() int {
	return xxx_messageInfo_ReportDroneResponse.Size(m)
}
func (m *ReportDroneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportDroneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportDroneResponse proto.InternalMessageInfo

func (m *ReportDroneResponse) GetStatus() ReportDroneResponse_Status {
	if m != nil {
		return m.Status
	}
	return ReportDroneResponse_UNKNOWN_ERROR
}

func (m *ReportDroneResponse) GetDroneUuid() string {
	if m != nil {
		return m.DroneUuid
	}
	return ""
}

func (m *ReportDroneResponse) GetExpirationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *ReportDroneResponse) GetAssignedDuts() []string {
	if m != nil {
		return m.AssignedDuts
	}
	return nil
}

func (m *ReportDroneResponse) GetDrainingDuts() []string {
	if m != nil {
		return m.DrainingDuts
	}
	return nil
}

type ReleaseDutsRequest struct {
	// drone_uuid is the UUID assigned to the drone.
	DroneUuid string `protobuf:"bytes,1,opt,name=drone_uuid,json=droneUuid,proto3" json:"drone_uuid,omitempty"`
	// duts to release.  It is not an error if a DUT is not assigned to
	// the drone.
	Duts                 []string `protobuf:"bytes,2,rep,name=duts,proto3" json:"duts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseDutsRequest) Reset()         { *m = ReleaseDutsRequest{} }
func (m *ReleaseDutsRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseDutsRequest) ProtoMessage()    {}
func (*ReleaseDutsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{2}
}

func (m *ReleaseDutsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseDutsRequest.Unmarshal(m, b)
}
func (m *ReleaseDutsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseDutsRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseDutsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseDutsRequest.Merge(m, src)
}
func (m *ReleaseDutsRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseDutsRequest.Size(m)
}
func (m *ReleaseDutsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseDutsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseDutsRequest proto.InternalMessageInfo

func (m *ReleaseDutsRequest) GetDroneUuid() string {
	if m != nil {
		return m.DroneUuid
	}
	return ""
}

func (m *ReleaseDutsRequest) GetDuts() []string {
	if m != nil {
		return m.Duts
	}
	return nil
}

type ReleaseDutsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseDutsResponse) Reset()         { *m = ReleaseDutsResponse{} }
func (m *ReleaseDutsResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseDutsResponse) ProtoMessage()    {}
func (*ReleaseDutsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{3}
}

func (m *ReleaseDutsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseDutsResponse.Unmarshal(m, b)
}
func (m *ReleaseDutsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseDutsResponse.Marshal(b, m, deterministic)
}
func (m *ReleaseDutsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseDutsResponse.Merge(m, src)
}
func (m *ReleaseDutsResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseDutsResponse.Size(m)
}
func (m *ReleaseDutsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseDutsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseDutsResponse proto.InternalMessageInfo

type DeclareDutsRequest struct {
	// duts is all of the DUTs to be made available to drones.  DUTs
	// omitted from this list will be drained and deleted.
	Duts                 []string `protobuf:"bytes,1,rep,name=duts,proto3" json:"duts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeclareDutsRequest) Reset()         { *m = DeclareDutsRequest{} }
func (m *DeclareDutsRequest) String() string { return proto.CompactTextString(m) }
func (*DeclareDutsRequest) ProtoMessage()    {}
func (*DeclareDutsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{4}
}

func (m *DeclareDutsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeclareDutsRequest.Unmarshal(m, b)
}
func (m *DeclareDutsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeclareDutsRequest.Marshal(b, m, deterministic)
}
func (m *DeclareDutsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeclareDutsRequest.Merge(m, src)
}
func (m *DeclareDutsRequest) XXX_Size() int {
	return xxx_messageInfo_DeclareDutsRequest.Size(m)
}
func (m *DeclareDutsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeclareDutsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeclareDutsRequest proto.InternalMessageInfo

func (m *DeclareDutsRequest) GetDuts() []string {
	if m != nil {
		return m.Duts
	}
	return nil
}

type DeclareDutsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeclareDutsResponse) Reset()         { *m = DeclareDutsResponse{} }
func (m *DeclareDutsResponse) String() string { return proto.CompactTextString(m) }
func (*DeclareDutsResponse) ProtoMessage()    {}
func (*DeclareDutsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b300fc02d5a04059, []int{5}
}

func (m *DeclareDutsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeclareDutsResponse.Unmarshal(m, b)
}
func (m *DeclareDutsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeclareDutsResponse.Marshal(b, m, deterministic)
}
func (m *DeclareDutsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeclareDutsResponse.Merge(m, src)
}
func (m *DeclareDutsResponse) XXX_Size() int {
	return xxx_messageInfo_DeclareDutsResponse.Size(m)
}
func (m *DeclareDutsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeclareDutsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeclareDutsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("drone_queen.ReportDroneResponse_Status", ReportDroneResponse_Status_name, ReportDroneResponse_Status_value)
	proto.RegisterType((*ReportDroneRequest)(nil), "drone_queen.ReportDroneRequest")
	proto.RegisterType((*ReportDroneRequest_LoadIndicators)(nil), "drone_queen.ReportDroneRequest.LoadIndicators")
	proto.RegisterType((*ReportDroneResponse)(nil), "drone_queen.ReportDroneResponse")
	proto.RegisterType((*ReleaseDutsRequest)(nil), "drone_queen.ReleaseDutsRequest")
	proto.RegisterType((*ReleaseDutsResponse)(nil), "drone_queen.ReleaseDutsResponse")
	proto.RegisterType((*DeclareDutsRequest)(nil), "drone_queen.DeclareDutsRequest")
	proto.RegisterType((*DeclareDutsResponse)(nil), "drone_queen.DeclareDutsResponse")
}

func init() {
	proto.RegisterFile("infra/appengine/drone-queen/api/service.proto", fileDescriptor_b300fc02d5a04059)
}

var fileDescriptor_b300fc02d5a04059 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xdd, 0x6a, 0xdb, 0x4c,
	0x10, 0xfd, 0x24, 0xc7, 0x06, 0x8f, 0x7f, 0xe2, 0xec, 0x47, 0xc1, 0x18, 0x4a, 0x5c, 0xf5, 0xa2,
	0xbe, 0x89, 0x04, 0x0e, 0xbd, 0x2e, 0x34, 0x2e, 0xc5, 0xa4, 0xd8, 0x61, 0x5b, 0x13, 0xe8, 0x8d,
	0xd8, 0x78, 0x27, 0x66, 0xc1, 0xd9, 0x55, 0xf6, 0xc7, 0x34, 0xcf, 0xd4, 0x47, 0xe8, 0x55, 0xdf,
	0xac, 0x68, 0x15, 0xa5, 0x96, 0xd5, 0x92, 0xde, 0x49, 0x33, 0xe7, 0x9c, 0x39, 0x7b, 0x66, 0xe0,
	0x4c, 0xc8, 0x5b, 0xcd, 0x12, 0x96, 0x65, 0x28, 0x37, 0x42, 0x62, 0xc2, 0xb5, 0x92, 0x78, 0x76,
	0xef, 0x10, 0x65, 0xc2, 0x32, 0x91, 0x18, 0xd4, 0x3b, 0xb1, 0xc6, 0x38, 0xd3, 0xca, 0x2a, 0xd2,
	0xf1, 0xed, 0xd4, 0xb7, 0x47, 0xa7, 0x1b, 0xa5, 0x36, 0x5b, 0x4c, 0x7c, 0xeb, 0xc6, 0xdd, 0x26,
	0x56, 0xdc, 0xa1, 0xb1, 0xec, 0x2e, 0x2b, 0xd0, 0xd1, 0xcf, 0x00, 0x08, 0xc5, 0x4c, 0x69, 0x3b,
	0xcb, 0x69, 0x14, 0xef, 0x1d, 0x1a, 0x4b, 0x5e, 0x02, 0x14, 0x32, 0xce, 0x09, 0x3e, 0x0c, 0xc6,
	0xc1, 0xa4, 0x4d, 0xdb, 0xbe, 0xb2, 0x72, 0x82, 0x93, 0x6b, 0x38, 0xde, 0x2a, 0xc6, 0x53, 0x21,
	0xb9, 0x58, 0x33, 0xab, 0xb4, 0x19, 0x86, 0xe3, 0x60, 0xd2, 0x99, 0xc6, 0xf1, 0xde, 0xf4, 0xb8,
	0x2e, 0x1c, 0x7f, 0x52, 0x8c, 0xcf, 0x9f, 0x58, 0xb4, 0xbf, 0xad, 0xfc, 0x8f, 0xce, 0xa1, 0x5f,
	0x45, 0x90, 0x57, 0xd0, 0xe5, 0xce, 0xa6, 0x6b, 0x96, 0xb1, 0xb5, 0xb0, 0x0f, 0xde, 0x4b, 0x8f,
	0x76, 0xb8, 0xb3, 0x17, 0x8f, 0xa5, 0xe8, 0x47, 0x08, 0xff, 0x57, 0x46, 0x99, 0x4c, 0x49, 0x83,
	0xe4, 0x1d, 0xb4, 0x8c, 0x65, 0xd6, 0x19, 0x4f, 0xea, 0x4f, 0xdf, 0xfc, 0xdd, 0x5c, 0xc1, 0x88,
	0x3f, 0x7b, 0x38, 0x7d, 0xa4, 0x1d, 0xa4, 0x10, 0x1e, 0xa6, 0x70, 0x01, 0xc7, 0xf8, 0x2d, 0x13,
	0x9a, 0x59, 0xa1, 0x64, 0x9a, 0x27, 0x3b, 0x6c, 0xf8, 0x14, 0x46, 0x71, 0x11, 0x7b, 0x5c, 0xc6,
	0x1e, 0x7f, 0x29, 0x63, 0xa7, 0xfd, 0xdf, 0x94, 0xbc, 0x48, 0x5e, 0x43, 0x8f, 0x19, 0x23, 0x36,
	0x12, 0x79, 0xca, 0x9d, 0x35, 0xc3, 0xa3, 0x71, 0x63, 0xd2, 0xa6, 0xdd, 0xb2, 0x38, 0x73, 0xd6,
	0xe4, 0x20, 0xae, 0x99, 0x90, 0x42, 0x6e, 0x0a, 0x50, 0xb3, 0x00, 0x95, 0xc5, 0x1c, 0x14, 0xbd,
	0x85, 0x56, 0xe1, 0x9f, 0x9c, 0x40, 0x6f, 0xb5, 0xb8, 0x5c, 0x2c, 0xaf, 0x17, 0xe9, 0x07, 0x4a,
	0x97, 0x74, 0xf0, 0x1f, 0x69, 0x41, 0xb8, 0xbc, 0x1c, 0x04, 0x64, 0x00, 0xdd, 0xb2, 0xb5, 0x5a,
	0xcd, 0x67, 0x83, 0x30, 0xfa, 0x98, 0x1f, 0xc0, 0x16, 0x99, 0xc1, 0x5c, 0xe5, 0x1f, 0x0f, 0x80,
	0xc0, 0x91, 0xf7, 0x11, 0x7a, 0x1f, 0xfe, 0x3b, 0x7a, 0x91, 0x6f, 0x61, 0x4f, 0xa8, 0xc8, 0x34,
	0x9a, 0x00, 0x99, 0xe1, 0x7a, 0xcb, 0x74, 0x45, 0xbf, 0x14, 0x08, 0xaa, 0x02, 0x15, 0x64, 0x21,
	0x30, 0xfd, 0x1e, 0x40, 0xd3, 0xaf, 0x89, 0x5c, 0x41, 0x67, 0x6f, 0x6b, 0xe4, 0xf4, 0x99, 0x63,
	0x1b, 0x8d, 0x9f, 0x5b, 0x78, 0xa1, 0xf8, 0xe4, 0xb9, 0xa6, 0x78, 0x18, 0x4b, 0x4d, 0xb1, 0xf6,
	0xdc, 0x29, 0xc2, 0xc9, 0x5c, 0xee, 0x50, 0x5a, 0xa5, 0x1f, 0xae, 0xb4, 0xda, 0x09, 0x8e, 0x3a,
	0x1f, 0xb3, 0xf7, 0xb2, 0x83, 0x31, 0xf5, 0x74, 0x0e, 0xc6, 0xfc, 0x21, 0x94, 0xf7, 0xcd, 0xaf,
	0x0d, 0x96, 0x89, 0x9b, 0x96, 0xbf, 0xb0, 0xf3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0x33,
	0xc6, 0xa9, 0x24, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DroneClient is the client API for Drone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DroneClient interface {
	// ReportDrone is called by drones to report liveness and get DUT
	// assignments.
	//
	// See the README for details on the contract that the drone must
	// follow.
	ReportDrone(ctx context.Context, in *ReportDroneRequest, opts ...grpc.CallOption) (*ReportDroneResponse, error)
	// ReleaseDuts is called by drones to release ownership of DUTs.
	ReleaseDuts(ctx context.Context, in *ReleaseDutsRequest, opts ...grpc.CallOption) (*ReleaseDutsResponse, error)
}
type dronePRPCClient struct {
	client *prpc.Client
}

func NewDronePRPCClient(client *prpc.Client) DroneClient {
	return &dronePRPCClient{client}
}

func (c *dronePRPCClient) ReportDrone(ctx context.Context, in *ReportDroneRequest, opts ...grpc.CallOption) (*ReportDroneResponse, error) {
	out := new(ReportDroneResponse)
	err := c.client.Call(ctx, "drone_queen.Drone", "ReportDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dronePRPCClient) ReleaseDuts(ctx context.Context, in *ReleaseDutsRequest, opts ...grpc.CallOption) (*ReleaseDutsResponse, error) {
	out := new(ReleaseDutsResponse)
	err := c.client.Call(ctx, "drone_queen.Drone", "ReleaseDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type droneClient struct {
	cc *grpc.ClientConn
}

func NewDroneClient(cc *grpc.ClientConn) DroneClient {
	return &droneClient{cc}
}

func (c *droneClient) ReportDrone(ctx context.Context, in *ReportDroneRequest, opts ...grpc.CallOption) (*ReportDroneResponse, error) {
	out := new(ReportDroneResponse)
	err := c.cc.Invoke(ctx, "/drone_queen.Drone/ReportDrone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *droneClient) ReleaseDuts(ctx context.Context, in *ReleaseDutsRequest, opts ...grpc.CallOption) (*ReleaseDutsResponse, error) {
	out := new(ReleaseDutsResponse)
	err := c.cc.Invoke(ctx, "/drone_queen.Drone/ReleaseDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DroneServer is the server API for Drone service.
type DroneServer interface {
	// ReportDrone is called by drones to report liveness and get DUT
	// assignments.
	//
	// See the README for details on the contract that the drone must
	// follow.
	ReportDrone(context.Context, *ReportDroneRequest) (*ReportDroneResponse, error)
	// ReleaseDuts is called by drones to release ownership of DUTs.
	ReleaseDuts(context.Context, *ReleaseDutsRequest) (*ReleaseDutsResponse, error)
}

// UnimplementedDroneServer can be embedded to have forward compatible implementations.
type UnimplementedDroneServer struct {
}

func (*UnimplementedDroneServer) ReportDrone(ctx context.Context, req *ReportDroneRequest) (*ReportDroneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDrone not implemented")
}
func (*UnimplementedDroneServer) ReleaseDuts(ctx context.Context, req *ReleaseDutsRequest) (*ReleaseDutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDuts not implemented")
}

func RegisterDroneServer(s prpc.Registrar, srv DroneServer) {
	s.RegisterService(&_Drone_serviceDesc, srv)
}

func _Drone_ReportDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDroneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServer).ReportDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drone_queen.Drone/ReportDrone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServer).ReportDrone(ctx, req.(*ReportDroneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drone_ReleaseDuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseDutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServer).ReleaseDuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drone_queen.Drone/ReleaseDuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServer).ReleaseDuts(ctx, req.(*ReleaseDutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Drone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drone_queen.Drone",
	HandlerType: (*DroneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportDrone",
			Handler:    _Drone_ReportDrone_Handler,
		},
		{
			MethodName: "ReleaseDuts",
			Handler:    _Drone_ReleaseDuts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/drone-queen/api/service.proto",
}

// InventoryProviderClient is the client API for InventoryProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryProviderClient interface {
	// DeclareDuts tells the service about all of the DUTs available to
	// assign to drones.
	DeclareDuts(ctx context.Context, in *DeclareDutsRequest, opts ...grpc.CallOption) (*DeclareDutsResponse, error)
}
type inventoryProviderPRPCClient struct {
	client *prpc.Client
}

func NewInventoryProviderPRPCClient(client *prpc.Client) InventoryProviderClient {
	return &inventoryProviderPRPCClient{client}
}

func (c *inventoryProviderPRPCClient) DeclareDuts(ctx context.Context, in *DeclareDutsRequest, opts ...grpc.CallOption) (*DeclareDutsResponse, error) {
	out := new(DeclareDutsResponse)
	err := c.client.Call(ctx, "drone_queen.InventoryProvider", "DeclareDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryProviderClient struct {
	cc *grpc.ClientConn
}

func NewInventoryProviderClient(cc *grpc.ClientConn) InventoryProviderClient {
	return &inventoryProviderClient{cc}
}

func (c *inventoryProviderClient) DeclareDuts(ctx context.Context, in *DeclareDutsRequest, opts ...grpc.CallOption) (*DeclareDutsResponse, error) {
	out := new(DeclareDutsResponse)
	err := c.cc.Invoke(ctx, "/drone_queen.InventoryProvider/DeclareDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryProviderServer is the server API for InventoryProvider service.
type InventoryProviderServer interface {
	// DeclareDuts tells the service about all of the DUTs available to
	// assign to drones.
	DeclareDuts(context.Context, *DeclareDutsRequest) (*DeclareDutsResponse, error)
}

// UnimplementedInventoryProviderServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryProviderServer struct {
}

func (*UnimplementedInventoryProviderServer) DeclareDuts(ctx context.Context, req *DeclareDutsRequest) (*DeclareDutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclareDuts not implemented")
}

func RegisterInventoryProviderServer(s prpc.Registrar, srv InventoryProviderServer) {
	s.RegisterService(&_InventoryProvider_serviceDesc, srv)
}

func _InventoryProvider_DeclareDuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclareDutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryProviderServer).DeclareDuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drone_queen.InventoryProvider/DeclareDuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryProviderServer).DeclareDuts(ctx, req.(*DeclareDutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drone_queen.InventoryProvider",
	HandlerType: (*InventoryProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeclareDuts",
			Handler:    _InventoryProvider_DeclareDuts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/drone-queen/api/service.proto",
}
