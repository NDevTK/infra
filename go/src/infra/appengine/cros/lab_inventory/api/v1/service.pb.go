// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/appengine/cros/lab_inventory/api/v1/service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	device "go.chromium.org/chromiumos/infra/proto/go/device"
	lab "go.chromium.org/chromiumos/infra/proto/go/lab"
	manufacturing "go.chromium.org/chromiumos/infra/proto/go/manufacturing"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protos "infra/libs/fleet/protos"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListCrosDevicesLabConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCrosDevicesLabConfigRequest) Reset() {
	*x = ListCrosDevicesLabConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCrosDevicesLabConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrosDevicesLabConfigRequest) ProtoMessage() {}

func (x *ListCrosDevicesLabConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrosDevicesLabConfigRequest.ProtoReflect.Descriptor instead.
func (*ListCrosDevicesLabConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{0}
}

type ListCrosDevicesLabConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabConfigs []*ListCrosDevicesLabConfigResponse_LabConfig `protobuf:"bytes,1,rep,name=lab_configs,json=labConfigs,proto3" json:"lab_configs,omitempty"` // Omit the page tokens as it's only used internally by UFS.
}

func (x *ListCrosDevicesLabConfigResponse) Reset() {
	*x = ListCrosDevicesLabConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCrosDevicesLabConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrosDevicesLabConfigResponse) ProtoMessage() {}

func (x *ListCrosDevicesLabConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrosDevicesLabConfigResponse.ProtoReflect.Descriptor instead.
func (*ListCrosDevicesLabConfigResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListCrosDevicesLabConfigResponse) GetLabConfigs() []*ListCrosDevicesLabConfigResponse_LabConfig {
	if x != nil {
		return x.LabConfigs
	}
	return nil
}

type DeviceConfigsExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device_configs to check
	ConfigIds []*device.ConfigId `protobuf:"bytes,1,rep,name=configIds,proto3" json:"configIds,omitempty"`
}

func (x *DeviceConfigsExistsRequest) Reset() {
	*x = DeviceConfigsExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigsExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigsExistsRequest) ProtoMessage() {}

func (x *DeviceConfigsExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigsExistsRequest.ProtoReflect.Descriptor instead.
func (*DeviceConfigsExistsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceConfigsExistsRequest) GetConfigIds() []*device.ConfigId {
	if x != nil {
		return x.ConfigIds
	}
	return nil
}

type DeviceConfigsExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exists Map with true/false for the requested configIds
	// https://developers.google.com/protocol-buffers/docs/proto3#scalar
	// There is no int(Only int32 and others) scalar type for proto.
	// int32 maps to int32 in golang.
	// To iterate over map exists with int values(int i) - use exists[int32(i)]
	Exists map[int32]bool `protobuf:"bytes,1,rep,name=exists,proto3" json:"exists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeviceConfigsExistsResponse) Reset() {
	*x = DeviceConfigsExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceConfigsExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConfigsExistsResponse) ProtoMessage() {}

func (x *DeviceConfigsExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceConfigsExistsResponse.ProtoReflect.Descriptor instead.
func (*DeviceConfigsExistsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceConfigsExistsResponse) GetExists() map[int32]bool {
	if x != nil {
		return x.Exists
	}
	return nil
}

type DeviceOpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ErrorMsg string `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *DeviceOpResult) Reset() {
	*x = DeviceOpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOpResult) ProtoMessage() {}

func (x *DeviceOpResult) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOpResult.ProtoReflect.Descriptor instead.
func (*DeviceOpResult) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceOpResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceOpResult) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DeviceOpResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type DeviceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*DeviceID_Hostname
	//	*DeviceID_ChromeosDeviceId
	Id isDeviceID_Id `protobuf_oneof:"id"`
}

func (x *DeviceID) Reset() {
	*x = DeviceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceID) ProtoMessage() {}

func (x *DeviceID) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceID.ProtoReflect.Descriptor instead.
func (*DeviceID) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{5}
}

func (m *DeviceID) GetId() isDeviceID_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *DeviceID) GetHostname() string {
	if x, ok := x.GetId().(*DeviceID_Hostname); ok {
		return x.Hostname
	}
	return ""
}

func (x *DeviceID) GetChromeosDeviceId() string {
	if x, ok := x.GetId().(*DeviceID_ChromeosDeviceId); ok {
		return x.ChromeosDeviceId
	}
	return ""
}

type isDeviceID_Id interface {
	isDeviceID_Id()
}

type DeviceID_Hostname struct {
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3,oneof"`
}

type DeviceID_ChromeosDeviceId struct {
	ChromeosDeviceId string `protobuf:"bytes,2,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3,oneof"`
}

func (*DeviceID_Hostname) isDeviceID_Id() {}

func (*DeviceID_ChromeosDeviceId) isDeviceID_Id() {}

type AddCrosDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices       []*lab.ChromeOSDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	PickServoPort bool                  `protobuf:"varint,2,opt,name=pick_servo_port,json=pickServoPort,proto3" json:"pick_servo_port,omitempty"`
}

func (x *AddCrosDevicesRequest) Reset() {
	*x = AddCrosDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCrosDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCrosDevicesRequest) ProtoMessage() {}

func (x *AddCrosDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCrosDevicesRequest.ProtoReflect.Descriptor instead.
func (*AddCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *AddCrosDevicesRequest) GetDevices() []*lab.ChromeOSDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *AddCrosDevicesRequest) GetPickServoPort() bool {
	if x != nil {
		return x.PickServoPort
	}
	return false
}

type AddCrosDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassedDevices []*DeviceOpResult `protobuf:"bytes,1,rep,name=passed_devices,json=passedDevices,proto3" json:"passed_devices,omitempty"`
	FailedDevices []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *AddCrosDevicesResponse) Reset() {
	*x = AddCrosDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCrosDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCrosDevicesResponse) ProtoMessage() {}

func (x *AddCrosDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCrosDevicesResponse.ProtoReflect.Descriptor instead.
func (*AddCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *AddCrosDevicesResponse) GetPassedDevices() []*DeviceOpResult {
	if x != nil {
		return x.PassedDevices
	}
	return nil
}

func (x *AddCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

type GetCrosDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []*DeviceID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Models []string    `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *GetCrosDevicesRequest) Reset() {
	*x = GetCrosDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrosDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrosDevicesRequest) ProtoMessage() {}

func (x *GetCrosDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrosDevicesRequest.ProtoReflect.Descriptor instead.
func (*GetCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetCrosDevicesRequest) GetIds() []*DeviceID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetCrosDevicesRequest) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

type HwidData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sku     string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	Variant string `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
}

func (x *HwidData) Reset() {
	*x = HwidData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HwidData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HwidData) ProtoMessage() {}

func (x *HwidData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HwidData.ProtoReflect.Descriptor instead.
func (*HwidData) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *HwidData) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *HwidData) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

type ExtendedDeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabConfig           *lab.ChromeOSDevice   `protobuf:"bytes,1,opt,name=lab_config,json=labConfig,proto3" json:"lab_config,omitempty"`
	DeviceConfig        *device.Config        `protobuf:"bytes,2,opt,name=device_config,json=deviceConfig,proto3" json:"device_config,omitempty"`
	ManufacturingConfig *manufacturing.Config `protobuf:"bytes,3,opt,name=manufacturing_config,json=manufacturingConfig,proto3" json:"manufacturing_config,omitempty"`
	HwidData            *HwidData             `protobuf:"bytes,4,opt,name=hwid_data,json=hwidData,proto3" json:"hwid_data,omitempty"`
	DutState            *lab.DutState         `protobuf:"bytes,5,opt,name=dut_state,json=dutState,proto3" json:"dut_state,omitempty"`
}

func (x *ExtendedDeviceData) Reset() {
	*x = ExtendedDeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedDeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedDeviceData) ProtoMessage() {}

func (x *ExtendedDeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedDeviceData.ProtoReflect.Descriptor instead.
func (*ExtendedDeviceData) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *ExtendedDeviceData) GetLabConfig() *lab.ChromeOSDevice {
	if x != nil {
		return x.LabConfig
	}
	return nil
}

func (x *ExtendedDeviceData) GetDeviceConfig() *device.Config {
	if x != nil {
		return x.DeviceConfig
	}
	return nil
}

func (x *ExtendedDeviceData) GetManufacturingConfig() *manufacturing.Config {
	if x != nil {
		return x.ManufacturingConfig
	}
	return nil
}

func (x *ExtendedDeviceData) GetHwidData() *HwidData {
	if x != nil {
		return x.HwidData
	}
	return nil
}

func (x *ExtendedDeviceData) GetDutState() *lab.DutState {
	if x != nil {
		return x.DutState
	}
	return nil
}

type GetCrosDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          []*ExtendedDeviceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	FailedDevices []*DeviceOpResult     `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *GetCrosDevicesResponse) Reset() {
	*x = GetCrosDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrosDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrosDevicesResponse) ProtoMessage() {}

func (x *GetCrosDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrosDevicesResponse.ProtoReflect.Descriptor instead.
func (*GetCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetCrosDevicesResponse) GetData() []*ExtendedDeviceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

type UpdateLabstationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname      string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	DeletedServos []string `protobuf:"bytes,2,rep,name=deletedServos,proto3" json:"deletedServos,omitempty"`
	AddedDUTs     []string `protobuf:"bytes,3,rep,name=addedDUTs,proto3" json:"addedDUTs,omitempty"`
}

func (x *UpdateLabstationsRequest) Reset() {
	*x = UpdateLabstationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabstationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabstationsRequest) ProtoMessage() {}

func (x *UpdateLabstationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabstationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabstationsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateLabstationsRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *UpdateLabstationsRequest) GetDeletedServos() []string {
	if x != nil {
		return x.DeletedServos
	}
	return nil
}

func (x *UpdateLabstationsRequest) GetAddedDUTs() []string {
	if x != nil {
		return x.AddedDUTs
	}
	return nil
}

type UpdateLabstationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labstation *lab.ChromeOSDevice `protobuf:"bytes,1,opt,name=labstation,proto3" json:"labstation,omitempty"`
}

func (x *UpdateLabstationsResponse) Reset() {
	*x = UpdateLabstationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabstationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabstationsResponse) ProtoMessage() {}

func (x *UpdateLabstationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabstationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateLabstationsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateLabstationsResponse) GetLabstation() *lab.ChromeOSDevice {
	if x != nil {
		return x.Labstation
	}
	return nil
}

type UpdateDutsStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*lab.DutState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	Reason string          `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Currently there's no way to get such info before deployment. So temporarily set them
	// in the request via DutMeta to backfill hwID and serial number.
	// TODO: find a better way for these infos.
	DutMetas []*DutMeta `protobuf:"bytes,3,rep,name=dut_metas,json=dutMetas,proto3" json:"dut_metas,omitempty"`
	LabMetas []*LabMeta `protobuf:"bytes,4,rep,name=lab_metas,json=labMetas,proto3" json:"lab_metas,omitempty"`
}

func (x *UpdateDutsStatusRequest) Reset() {
	*x = UpdateDutsStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDutsStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDutsStatusRequest) ProtoMessage() {}

func (x *UpdateDutsStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDutsStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDutsStatusRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateDutsStatusRequest) GetStates() []*lab.DutState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *UpdateDutsStatusRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateDutsStatusRequest) GetDutMetas() []*DutMeta {
	if x != nil {
		return x.DutMetas
	}
	return nil
}

func (x *UpdateDutsStatusRequest) GetLabMetas() []*LabMeta {
	if x != nil {
		return x.LabMetas
	}
	return nil
}

type DutMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChromeosDeviceId string `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	SerialNumber     string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	HwID             string `protobuf:"bytes,3,opt,name=hwID,proto3" json:"hwID,omitempty"`
}

func (x *DutMeta) Reset() {
	*x = DutMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DutMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutMeta) ProtoMessage() {}

func (x *DutMeta) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutMeta.ProtoReflect.Descriptor instead.
func (*DutMeta) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *DutMeta) GetChromeosDeviceId() string {
	if x != nil {
		return x.ChromeosDeviceId
	}
	return ""
}

func (x *DutMeta) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DutMeta) GetHwID() string {
	if x != nil {
		return x.HwID
	}
	return ""
}

type LabMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChromeosDeviceId string `protobuf:"bytes,1,opt,name=chromeos_device_id,json=chromeosDeviceId,proto3" json:"chromeos_device_id,omitempty"`
	ServoType        string `protobuf:"bytes,2,opt,name=servo_type,json=servoType,proto3" json:"servo_type,omitempty"`
	SmartUsbhub      bool   `protobuf:"varint,3,opt,name=smart_usbhub,json=smartUsbhub,proto3" json:"smart_usbhub,omitempty"`
}

func (x *LabMeta) Reset() {
	*x = LabMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabMeta) ProtoMessage() {}

func (x *LabMeta) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabMeta.ProtoReflect.Descriptor instead.
func (*LabMeta) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *LabMeta) GetChromeosDeviceId() string {
	if x != nil {
		return x.ChromeosDeviceId
	}
	return ""
}

func (x *LabMeta) GetServoType() string {
	if x != nil {
		return x.ServoType
	}
	return ""
}

func (x *LabMeta) GetSmartUsbhub() bool {
	if x != nil {
		return x.SmartUsbhub
	}
	return false
}

type UpdateDutsStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedDevices []*DeviceOpResult `protobuf:"bytes,1,rep,name=updated_devices,json=updatedDevices,proto3" json:"updated_devices,omitempty"`
	FailedDevices  []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *UpdateDutsStatusResponse) Reset() {
	*x = UpdateDutsStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDutsStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDutsStatusResponse) ProtoMessage() {}

func (x *UpdateDutsStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDutsStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDutsStatusResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDutsStatusResponse) GetUpdatedDevices() []*DeviceOpResult {
	if x != nil {
		return x.UpdatedDevices
	}
	return nil
}

func (x *UpdateDutsStatusResponse) GetFailedDevices() []*DeviceOpResult {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

type UpdateCrosDevicesSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices       []*lab.ChromeOSDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	Reason        string                `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	PickServoPort bool                  `protobuf:"varint,3,opt,name=pick_servo_port,json=pickServoPort,proto3" json:"pick_servo_port,omitempty"`
}

func (x *UpdateCrosDevicesSetupRequest) Reset() {
	*x = UpdateCrosDevicesSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCrosDevicesSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrosDevicesSetupRequest) ProtoMessage() {}

func (x *UpdateCrosDevicesSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrosDevicesSetupRequest.ProtoReflect.Descriptor instead.
func (*UpdateCrosDevicesSetupRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateCrosDevicesSetupRequest) GetDevices() []*lab.ChromeOSDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *UpdateCrosDevicesSetupRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateCrosDevicesSetupRequest) GetPickServoPort() bool {
	if x != nil {
		return x.PickServoPort
	}
	return false
}

type UpdateCrosDevicesSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedDevices []*DeviceOpResult `protobuf:"bytes,1,rep,name=updated_devices,json=updatedDevices,proto3" json:"updated_devices,omitempty"`
	FailedDevices  []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *UpdateCrosDevicesSetupResponse) Reset() {
	*x = UpdateCrosDevicesSetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCrosDevicesSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCrosDevicesSetupResponse) ProtoMessage() {}

func (x *UpdateCrosDevicesSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCrosDevicesSetupResponse.ProtoReflect.Descriptor instead.
func (*UpdateCrosDevicesSetupResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateCrosDevicesSetupResponse) GetUpdatedDevices() []*DeviceOpResult {
	if x != nil {
		return x.UpdatedDevices
	}
	return nil
}

func (x *UpdateCrosDevicesSetupResponse) GetFailedDevices() []*DeviceOpResult {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

type DeleteCrosDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []*DeviceID                      `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Reason *DeleteCrosDevicesRequest_Reason `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeleteCrosDevicesRequest) Reset() {
	*x = DeleteCrosDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrosDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrosDevicesRequest) ProtoMessage() {}

func (x *DeleteCrosDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrosDevicesRequest.ProtoReflect.Descriptor instead.
func (*DeleteCrosDevicesRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCrosDevicesRequest) GetIds() []*DeviceID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteCrosDevicesRequest) GetReason() *DeleteCrosDevicesRequest_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

type DeleteCrosDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemovedDevices []*DeviceOpResult `protobuf:"bytes,1,rep,name=removed_devices,json=removedDevices,proto3" json:"removed_devices,omitempty"`
	// Devices cannot be removed for any reason.
	FailedDevices []*DeviceOpResult `protobuf:"bytes,2,rep,name=failed_devices,json=failedDevices,proto3" json:"failed_devices,omitempty"`
}

func (x *DeleteCrosDevicesResponse) Reset() {
	*x = DeleteCrosDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrosDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrosDevicesResponse) ProtoMessage() {}

func (x *DeleteCrosDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrosDevicesResponse.ProtoReflect.Descriptor instead.
func (*DeleteCrosDevicesResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCrosDevicesResponse) GetRemovedDevices() []*DeviceOpResult {
	if x != nil {
		return x.RemovedDevices
	}
	return nil
}

func (x *DeleteCrosDevicesResponse) GetFailedDevices() []*DeviceOpResult {
	if x != nil {
		return x.FailedDevices
	}
	return nil
}

type DeviceProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Pool     string              `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Rpm      *DeviceProperty_Rpm `protobuf:"bytes,3,opt,name=rpm,proto3" json:"rpm,omitempty"`
}

func (x *DeviceProperty) Reset() {
	*x = DeviceProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProperty) ProtoMessage() {}

func (x *DeviceProperty) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProperty.ProtoReflect.Descriptor instead.
func (*DeviceProperty) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceProperty) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DeviceProperty) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *DeviceProperty) GetRpm() *DeviceProperty_Rpm {
	if x != nil {
		return x.Rpm
	}
	return nil
}

type BatchUpdateDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceProperties []*DeviceProperty `protobuf:"bytes,1,rep,name=device_properties,json=deviceProperties,proto3" json:"device_properties,omitempty"`
}

func (x *BatchUpdateDevicesRequest) Reset() {
	*x = BatchUpdateDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDevicesRequest) ProtoMessage() {}

func (x *BatchUpdateDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDevicesRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateDevicesRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *BatchUpdateDevicesRequest) GetDeviceProperties() []*DeviceProperty {
	if x != nil {
		return x.DeviceProperties
	}
	return nil
}

type BatchUpdateDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchUpdateDevicesResponse) Reset() {
	*x = BatchUpdateDevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDevicesResponse) ProtoMessage() {}

func (x *BatchUpdateDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDevicesResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateDevicesResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{24}
}

type AssetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    *protos.ChopsAsset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	ErrorMsg string             `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *AssetResult) Reset() {
	*x = AssetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResult) ProtoMessage() {}

func (x *AssetResult) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResult.ProtoReflect.Descriptor instead.
func (*AssetResult) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *AssetResult) GetAsset() *protos.ChopsAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *AssetResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type AssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset []*protos.ChopsAsset `protobuf:"bytes,1,rep,name=asset,proto3" json:"asset,omitempty"`
}

func (x *AssetList) Reset() {
	*x = AssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetList) ProtoMessage() {}

func (x *AssetList) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetList.ProtoReflect.Descriptor instead.
func (*AssetList) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{26}
}

func (x *AssetList) GetAsset() []*protos.ChopsAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

type AssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed []*AssetResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed []*AssetResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *AssetResponse) Reset() {
	*x = AssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetResponse) ProtoMessage() {}

func (x *AssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetResponse.ProtoReflect.Descriptor instead.
func (*AssetResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{27}
}

func (x *AssetResponse) GetPassed() []*AssetResult {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *AssetResponse) GetFailed() []*AssetResult {
	if x != nil {
		return x.Failed
	}
	return nil
}

type AssetIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *AssetIDList) Reset() {
	*x = AssetIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetIDList) ProtoMessage() {}

func (x *AssetIDList) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetIDList.ProtoReflect.Descriptor instead.
func (*AssetIDList) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{28}
}

func (x *AssetIDList) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type AssetIDResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *AssetIDResult) Reset() {
	*x = AssetIDResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetIDResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetIDResult) ProtoMessage() {}

func (x *AssetIDResult) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetIDResult.ProtoReflect.Descriptor instead.
func (*AssetIDResult) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{29}
}

func (x *AssetIDResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssetIDResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type AssetIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed []*AssetIDResult `protobuf:"bytes,1,rep,name=passed,proto3" json:"passed,omitempty"`
	Failed []*AssetIDResult `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
}

func (x *AssetIDResponse) Reset() {
	*x = AssetIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetIDResponse) ProtoMessage() {}

func (x *AssetIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetIDResponse.ProtoReflect.Descriptor instead.
func (*AssetIDResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{30}
}

func (x *AssetIDResponse) GetPassed() []*AssetIDResult {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *AssetIDResponse) GetFailed() []*AssetIDResult {
	if x != nil {
		return x.Failed
	}
	return nil
}

type GetDeviceManualRepairRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname []string `protobuf:"bytes,1,rep,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetDeviceManualRepairRecordsRequest) Reset() {
	*x = GetDeviceManualRepairRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceManualRepairRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceManualRepairRecordsRequest) ProtoMessage() {}

func (x *GetDeviceManualRepairRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceManualRepairRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceManualRepairRecordsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetDeviceManualRepairRecordsRequest) GetHostname() []string {
	if x != nil {
		return x.Hostname
	}
	return nil
}

type GetDeviceManualRepairRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRepairRecord []*DeviceManualRepairRecord `protobuf:"bytes,1,rep,name=device_repair_record,json=deviceRepairRecord,proto3" json:"device_repair_record,omitempty"`
}

func (x *GetDeviceManualRepairRecordsResponse) Reset() {
	*x = GetDeviceManualRepairRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceManualRepairRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceManualRepairRecordsResponse) ProtoMessage() {}

func (x *GetDeviceManualRepairRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceManualRepairRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceManualRepairRecordsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetDeviceManualRepairRecordsResponse) GetDeviceRepairRecord() []*DeviceManualRepairRecord {
	if x != nil {
		return x.DeviceRepairRecord
	}
	return nil
}

type CreateDeviceManualRepairRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRepairRecord []*DeviceManualRepairRecord `protobuf:"bytes,1,rep,name=device_repair_record,json=deviceRepairRecord,proto3" json:"device_repair_record,omitempty"`
}

func (x *CreateDeviceManualRepairRecordsRequest) Reset() {
	*x = CreateDeviceManualRepairRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceManualRepairRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceManualRepairRecordsRequest) ProtoMessage() {}

func (x *CreateDeviceManualRepairRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceManualRepairRecordsRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceManualRepairRecordsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{33}
}

func (x *CreateDeviceManualRepairRecordsRequest) GetDeviceRepairRecord() []*DeviceManualRepairRecord {
	if x != nil {
		return x.DeviceRepairRecord
	}
	return nil
}

type CreateDeviceManualRepairRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDeviceManualRepairRecordsResponse) Reset() {
	*x = CreateDeviceManualRepairRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceManualRepairRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceManualRepairRecordsResponse) ProtoMessage() {}

func (x *CreateDeviceManualRepairRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceManualRepairRecordsResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceManualRepairRecordsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{34}
}

type UpdateDeviceManualRepairRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRepairRecord []*DeviceManualRepairRecord `protobuf:"bytes,1,rep,name=device_repair_record,json=deviceRepairRecord,proto3" json:"device_repair_record,omitempty"`
}

func (x *UpdateDeviceManualRepairRecordsRequest) Reset() {
	*x = UpdateDeviceManualRepairRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceManualRepairRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceManualRepairRecordsRequest) ProtoMessage() {}

func (x *UpdateDeviceManualRepairRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceManualRepairRecordsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceManualRepairRecordsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateDeviceManualRepairRecordsRequest) GetDeviceRepairRecord() []*DeviceManualRepairRecord {
	if x != nil {
		return x.DeviceRepairRecord
	}
	return nil
}

type UpdateDeviceManualRepairRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeviceManualRepairRecordsResponse) Reset() {
	*x = UpdateDeviceManualRepairRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceManualRepairRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceManualRepairRecordsResponse) ProtoMessage() {}

func (x *UpdateDeviceManualRepairRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceManualRepairRecordsResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceManualRepairRecordsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{36}
}

type ListCrosDevicesLabConfigResponse_LabConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *lab.ChromeOSDevice  `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	UpdatedTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *ListCrosDevicesLabConfigResponse_LabConfig) Reset() {
	*x = ListCrosDevicesLabConfigResponse_LabConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCrosDevicesLabConfigResponse_LabConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCrosDevicesLabConfigResponse_LabConfig) ProtoMessage() {}

func (x *ListCrosDevicesLabConfigResponse_LabConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCrosDevicesLabConfigResponse_LabConfig.ProtoReflect.Descriptor instead.
func (*ListCrosDevicesLabConfigResponse_LabConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListCrosDevicesLabConfigResponse_LabConfig) GetConfig() *lab.ChromeOSDevice {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ListCrosDevicesLabConfigResponse_LabConfig) GetUpdatedTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

type DeleteCrosDevicesRequest_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bug     string `protobuf:"bytes,1,opt,name=bug,proto3" json:"bug,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DeleteCrosDevicesRequest_Reason) Reset() {
	*x = DeleteCrosDevicesRequest_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCrosDevicesRequest_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCrosDevicesRequest_Reason) ProtoMessage() {}

func (x *DeleteCrosDevicesRequest_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCrosDevicesRequest_Reason.ProtoReflect.Descriptor instead.
func (*DeleteCrosDevicesRequest_Reason) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *DeleteCrosDevicesRequest_Reason) GetBug() string {
	if x != nil {
		return x.Bug
	}
	return ""
}

func (x *DeleteCrosDevicesRequest_Reason) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type DeviceProperty_Rpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerunitName   string `protobuf:"bytes,1,opt,name=powerunit_name,json=powerunitName,proto3" json:"powerunit_name,omitempty"`
	PowerunitOutlet string `protobuf:"bytes,2,opt,name=powerunit_outlet,json=powerunitOutlet,proto3" json:"powerunit_outlet,omitempty"`
}

func (x *DeviceProperty_Rpm) Reset() {
	*x = DeviceProperty_Rpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProperty_Rpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProperty_Rpm) ProtoMessage() {}

func (x *DeviceProperty_Rpm) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProperty_Rpm.ProtoReflect.Descriptor instead.
func (*DeviceProperty_Rpm) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP(), []int{22, 0}
}

func (x *DeviceProperty_Rpm) GetPowerunitName() string {
	if x != nil {
		return x.PowerunitName
	}
	return ""
}

func (x *DeviceProperty_Rpm) GetPowerunitOutlet() string {
	if x != nil {
		return x.PowerunitOutlet
	}
	return ""
}

var File_infra_appengine_cros_lab_inventory_api_v1_service_proto protoreflect.FileDescriptor

var file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6c, 0x61,
	0x62, 0x2f, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x45, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0b, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x61,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x77, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f,
	0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c,
	0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a,
	0x1b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x5e,
	0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x6e,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x9c,
	0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x56, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x36, 0x0a, 0x08, 0x48, 0x77, 0x69, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x6b, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xa5, 0x02,
	0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a,
	0x14, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x13, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x09, 0x68, 0x77, 0x69, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x48, 0x77, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x68, 0x77, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x09, 0x64, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c,
	0x61, 0x62, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x44, 0x55, 0x54, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x44, 0x55, 0x54,
	0x73, 0x22, 0x50, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f,
	0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x75,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x64, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x12,
	0x2f, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c,
	0x61, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x73,
	0x22, 0x70, 0x0a, 0x07, 0x44, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x77, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x77,
	0x49, 0x44, 0x22, 0x79, 0x0a, 0x07, 0x4c, 0x61, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x62, 0x68, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x55, 0x73, 0x62, 0x68, 0x75, 0x62, 0x22, 0xa0, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x42,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x2f, 0x0a, 0x03, 0x72, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x70, 0x6d, 0x52, 0x03, 0x72, 0x70, 0x6d,
	0x1a, 0x57, 0x0a, 0x03, 0x52, 0x70, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x6c,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75,
	0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x22, 0x63, 0x0a, 0x19, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x1c,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x0b,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x70, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x34, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x70, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x6f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x1d, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x75, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x7d, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x7f,
	0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x29, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x26, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x27, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9a, 0x0c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f,
	0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescOnce sync.Once
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescData = file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDesc
)

func file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescGZIP() []byte {
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescOnce.Do(func() {
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescData)
	})
	return file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDescData
}

var file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_infra_appengine_cros_lab_inventory_api_v1_service_proto_goTypes = []interface{}{
	(*ListCrosDevicesLabConfigRequest)(nil),            // 0: inventory.ListCrosDevicesLabConfigRequest
	(*ListCrosDevicesLabConfigResponse)(nil),           // 1: inventory.ListCrosDevicesLabConfigResponse
	(*DeviceConfigsExistsRequest)(nil),                 // 2: inventory.DeviceConfigsExistsRequest
	(*DeviceConfigsExistsResponse)(nil),                // 3: inventory.DeviceConfigsExistsResponse
	(*DeviceOpResult)(nil),                             // 4: inventory.DeviceOpResult
	(*DeviceID)(nil),                                   // 5: inventory.DeviceID
	(*AddCrosDevicesRequest)(nil),                      // 6: inventory.AddCrosDevicesRequest
	(*AddCrosDevicesResponse)(nil),                     // 7: inventory.AddCrosDevicesResponse
	(*GetCrosDevicesRequest)(nil),                      // 8: inventory.GetCrosDevicesRequest
	(*HwidData)(nil),                                   // 9: inventory.HwidData
	(*ExtendedDeviceData)(nil),                         // 10: inventory.ExtendedDeviceData
	(*GetCrosDevicesResponse)(nil),                     // 11: inventory.GetCrosDevicesResponse
	(*UpdateLabstationsRequest)(nil),                   // 12: inventory.UpdateLabstationsRequest
	(*UpdateLabstationsResponse)(nil),                  // 13: inventory.UpdateLabstationsResponse
	(*UpdateDutsStatusRequest)(nil),                    // 14: inventory.UpdateDutsStatusRequest
	(*DutMeta)(nil),                                    // 15: inventory.DutMeta
	(*LabMeta)(nil),                                    // 16: inventory.LabMeta
	(*UpdateDutsStatusResponse)(nil),                   // 17: inventory.UpdateDutsStatusResponse
	(*UpdateCrosDevicesSetupRequest)(nil),              // 18: inventory.UpdateCrosDevicesSetupRequest
	(*UpdateCrosDevicesSetupResponse)(nil),             // 19: inventory.UpdateCrosDevicesSetupResponse
	(*DeleteCrosDevicesRequest)(nil),                   // 20: inventory.DeleteCrosDevicesRequest
	(*DeleteCrosDevicesResponse)(nil),                  // 21: inventory.DeleteCrosDevicesResponse
	(*DeviceProperty)(nil),                             // 22: inventory.DeviceProperty
	(*BatchUpdateDevicesRequest)(nil),                  // 23: inventory.BatchUpdateDevicesRequest
	(*BatchUpdateDevicesResponse)(nil),                 // 24: inventory.BatchUpdateDevicesResponse
	(*AssetResult)(nil),                                // 25: inventory.AssetResult
	(*AssetList)(nil),                                  // 26: inventory.AssetList
	(*AssetResponse)(nil),                              // 27: inventory.AssetResponse
	(*AssetIDList)(nil),                                // 28: inventory.AssetIDList
	(*AssetIDResult)(nil),                              // 29: inventory.AssetIDResult
	(*AssetIDResponse)(nil),                            // 30: inventory.AssetIDResponse
	(*GetDeviceManualRepairRecordsRequest)(nil),        // 31: inventory.GetDeviceManualRepairRecordsRequest
	(*GetDeviceManualRepairRecordsResponse)(nil),       // 32: inventory.GetDeviceManualRepairRecordsResponse
	(*CreateDeviceManualRepairRecordsRequest)(nil),     // 33: inventory.CreateDeviceManualRepairRecordsRequest
	(*CreateDeviceManualRepairRecordsResponse)(nil),    // 34: inventory.CreateDeviceManualRepairRecordsResponse
	(*UpdateDeviceManualRepairRecordsRequest)(nil),     // 35: inventory.UpdateDeviceManualRepairRecordsRequest
	(*UpdateDeviceManualRepairRecordsResponse)(nil),    // 36: inventory.UpdateDeviceManualRepairRecordsResponse
	(*ListCrosDevicesLabConfigResponse_LabConfig)(nil), // 37: inventory.ListCrosDevicesLabConfigResponse.LabConfig
	nil,                                     // 38: inventory.DeviceConfigsExistsResponse.ExistsEntry
	(*DeleteCrosDevicesRequest_Reason)(nil), // 39: inventory.DeleteCrosDevicesRequest.Reason
	(*DeviceProperty_Rpm)(nil),              // 40: inventory.DeviceProperty.Rpm
	(*device.ConfigId)(nil),                 // 41: device.ConfigId
	(*lab.ChromeOSDevice)(nil),              // 42: lab.ChromeOSDevice
	(*device.Config)(nil),                   // 43: device.Config
	(*manufacturing.Config)(nil),            // 44: manufacturing.Config
	(*lab.DutState)(nil),                    // 45: lab.DutState
	(*protos.ChopsAsset)(nil),               // 46: fleet.ChopsAsset
	(*DeviceManualRepairRecord)(nil),        // 47: inventory.DeviceManualRepairRecord
	(*timestamp.Timestamp)(nil),             // 48: google.protobuf.Timestamp
}
var file_infra_appengine_cros_lab_inventory_api_v1_service_proto_depIdxs = []int32{
	37, // 0: inventory.ListCrosDevicesLabConfigResponse.lab_configs:type_name -> inventory.ListCrosDevicesLabConfigResponse.LabConfig
	41, // 1: inventory.DeviceConfigsExistsRequest.configIds:type_name -> device.ConfigId
	38, // 2: inventory.DeviceConfigsExistsResponse.exists:type_name -> inventory.DeviceConfigsExistsResponse.ExistsEntry
	42, // 3: inventory.AddCrosDevicesRequest.devices:type_name -> lab.ChromeOSDevice
	4,  // 4: inventory.AddCrosDevicesResponse.passed_devices:type_name -> inventory.DeviceOpResult
	4,  // 5: inventory.AddCrosDevicesResponse.failed_devices:type_name -> inventory.DeviceOpResult
	5,  // 6: inventory.GetCrosDevicesRequest.ids:type_name -> inventory.DeviceID
	42, // 7: inventory.ExtendedDeviceData.lab_config:type_name -> lab.ChromeOSDevice
	43, // 8: inventory.ExtendedDeviceData.device_config:type_name -> device.Config
	44, // 9: inventory.ExtendedDeviceData.manufacturing_config:type_name -> manufacturing.Config
	9,  // 10: inventory.ExtendedDeviceData.hwid_data:type_name -> inventory.HwidData
	45, // 11: inventory.ExtendedDeviceData.dut_state:type_name -> lab.DutState
	10, // 12: inventory.GetCrosDevicesResponse.data:type_name -> inventory.ExtendedDeviceData
	4,  // 13: inventory.GetCrosDevicesResponse.failed_devices:type_name -> inventory.DeviceOpResult
	42, // 14: inventory.UpdateLabstationsResponse.labstation:type_name -> lab.ChromeOSDevice
	45, // 15: inventory.UpdateDutsStatusRequest.states:type_name -> lab.DutState
	15, // 16: inventory.UpdateDutsStatusRequest.dut_metas:type_name -> inventory.DutMeta
	16, // 17: inventory.UpdateDutsStatusRequest.lab_metas:type_name -> inventory.LabMeta
	4,  // 18: inventory.UpdateDutsStatusResponse.updated_devices:type_name -> inventory.DeviceOpResult
	4,  // 19: inventory.UpdateDutsStatusResponse.failed_devices:type_name -> inventory.DeviceOpResult
	42, // 20: inventory.UpdateCrosDevicesSetupRequest.devices:type_name -> lab.ChromeOSDevice
	4,  // 21: inventory.UpdateCrosDevicesSetupResponse.updated_devices:type_name -> inventory.DeviceOpResult
	4,  // 22: inventory.UpdateCrosDevicesSetupResponse.failed_devices:type_name -> inventory.DeviceOpResult
	5,  // 23: inventory.DeleteCrosDevicesRequest.ids:type_name -> inventory.DeviceID
	39, // 24: inventory.DeleteCrosDevicesRequest.reason:type_name -> inventory.DeleteCrosDevicesRequest.Reason
	4,  // 25: inventory.DeleteCrosDevicesResponse.removed_devices:type_name -> inventory.DeviceOpResult
	4,  // 26: inventory.DeleteCrosDevicesResponse.failed_devices:type_name -> inventory.DeviceOpResult
	40, // 27: inventory.DeviceProperty.rpm:type_name -> inventory.DeviceProperty.Rpm
	22, // 28: inventory.BatchUpdateDevicesRequest.device_properties:type_name -> inventory.DeviceProperty
	46, // 29: inventory.AssetResult.asset:type_name -> fleet.ChopsAsset
	46, // 30: inventory.AssetList.asset:type_name -> fleet.ChopsAsset
	25, // 31: inventory.AssetResponse.passed:type_name -> inventory.AssetResult
	25, // 32: inventory.AssetResponse.failed:type_name -> inventory.AssetResult
	29, // 33: inventory.AssetIDResponse.passed:type_name -> inventory.AssetIDResult
	29, // 34: inventory.AssetIDResponse.failed:type_name -> inventory.AssetIDResult
	47, // 35: inventory.GetDeviceManualRepairRecordsResponse.device_repair_record:type_name -> inventory.DeviceManualRepairRecord
	47, // 36: inventory.CreateDeviceManualRepairRecordsRequest.device_repair_record:type_name -> inventory.DeviceManualRepairRecord
	47, // 37: inventory.UpdateDeviceManualRepairRecordsRequest.device_repair_record:type_name -> inventory.DeviceManualRepairRecord
	42, // 38: inventory.ListCrosDevicesLabConfigResponse.LabConfig.config:type_name -> lab.ChromeOSDevice
	48, // 39: inventory.ListCrosDevicesLabConfigResponse.LabConfig.updated_time:type_name -> google.protobuf.Timestamp
	6,  // 40: inventory.Inventory.AddCrosDevices:input_type -> inventory.AddCrosDevicesRequest
	8,  // 41: inventory.Inventory.GetCrosDevices:input_type -> inventory.GetCrosDevicesRequest
	14, // 42: inventory.Inventory.UpdateDutsStatus:input_type -> inventory.UpdateDutsStatusRequest
	18, // 43: inventory.Inventory.UpdateCrosDevicesSetup:input_type -> inventory.UpdateCrosDevicesSetupRequest
	12, // 44: inventory.Inventory.UpdateLabstations:input_type -> inventory.UpdateLabstationsRequest
	20, // 45: inventory.Inventory.DeleteCrosDevices:input_type -> inventory.DeleteCrosDevicesRequest
	23, // 46: inventory.Inventory.BatchUpdateDevices:input_type -> inventory.BatchUpdateDevicesRequest
	26, // 47: inventory.Inventory.AddAssets:input_type -> inventory.AssetList
	28, // 48: inventory.Inventory.GetAssets:input_type -> inventory.AssetIDList
	28, // 49: inventory.Inventory.DeleteAssets:input_type -> inventory.AssetIDList
	26, // 50: inventory.Inventory.UpdateAssets:input_type -> inventory.AssetList
	2,  // 51: inventory.Inventory.DeviceConfigsExists:input_type -> inventory.DeviceConfigsExistsRequest
	31, // 52: inventory.Inventory.GetDeviceManualRepairRecords:input_type -> inventory.GetDeviceManualRepairRecordsRequest
	33, // 53: inventory.Inventory.CreateDeviceManualRepairRecords:input_type -> inventory.CreateDeviceManualRepairRecordsRequest
	35, // 54: inventory.Inventory.UpdateDeviceManualRepairRecords:input_type -> inventory.UpdateDeviceManualRepairRecordsRequest
	0,  // 55: inventory.Inventory.ListCrosDevicesLabConfig:input_type -> inventory.ListCrosDevicesLabConfigRequest
	7,  // 56: inventory.Inventory.AddCrosDevices:output_type -> inventory.AddCrosDevicesResponse
	11, // 57: inventory.Inventory.GetCrosDevices:output_type -> inventory.GetCrosDevicesResponse
	17, // 58: inventory.Inventory.UpdateDutsStatus:output_type -> inventory.UpdateDutsStatusResponse
	19, // 59: inventory.Inventory.UpdateCrosDevicesSetup:output_type -> inventory.UpdateCrosDevicesSetupResponse
	13, // 60: inventory.Inventory.UpdateLabstations:output_type -> inventory.UpdateLabstationsResponse
	21, // 61: inventory.Inventory.DeleteCrosDevices:output_type -> inventory.DeleteCrosDevicesResponse
	24, // 62: inventory.Inventory.BatchUpdateDevices:output_type -> inventory.BatchUpdateDevicesResponse
	27, // 63: inventory.Inventory.AddAssets:output_type -> inventory.AssetResponse
	27, // 64: inventory.Inventory.GetAssets:output_type -> inventory.AssetResponse
	30, // 65: inventory.Inventory.DeleteAssets:output_type -> inventory.AssetIDResponse
	27, // 66: inventory.Inventory.UpdateAssets:output_type -> inventory.AssetResponse
	3,  // 67: inventory.Inventory.DeviceConfigsExists:output_type -> inventory.DeviceConfigsExistsResponse
	32, // 68: inventory.Inventory.GetDeviceManualRepairRecords:output_type -> inventory.GetDeviceManualRepairRecordsResponse
	34, // 69: inventory.Inventory.CreateDeviceManualRepairRecords:output_type -> inventory.CreateDeviceManualRepairRecordsResponse
	36, // 70: inventory.Inventory.UpdateDeviceManualRepairRecords:output_type -> inventory.UpdateDeviceManualRepairRecordsResponse
	1,  // 71: inventory.Inventory.ListCrosDevicesLabConfig:output_type -> inventory.ListCrosDevicesLabConfigResponse
	56, // [56:72] is the sub-list for method output_type
	40, // [40:56] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_infra_appengine_cros_lab_inventory_api_v1_service_proto_init() }
func file_infra_appengine_cros_lab_inventory_api_v1_service_proto_init() {
	if File_infra_appengine_cros_lab_inventory_api_v1_service_proto != nil {
		return
	}
	file_infra_appengine_cros_lab_inventory_api_v1_repair_record_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCrosDevicesLabConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCrosDevicesLabConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigsExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceConfigsExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCrosDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCrosDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrosDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HwidData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedDeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrosDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabstationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabstationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDutsStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DutMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDutsStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCrosDevicesSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCrosDevicesSetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrosDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrosDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateDevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetIDResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceManualRepairRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceManualRepairRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceManualRepairRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceManualRepairRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceManualRepairRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceManualRepairRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCrosDevicesLabConfigResponse_LabConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCrosDevicesRequest_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProperty_Rpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DeviceID_Hostname)(nil),
		(*DeviceID_ChromeosDeviceId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_cros_lab_inventory_api_v1_service_proto_goTypes,
		DependencyIndexes: file_infra_appengine_cros_lab_inventory_api_v1_service_proto_depIdxs,
		MessageInfos:      file_infra_appengine_cros_lab_inventory_api_v1_service_proto_msgTypes,
	}.Build()
	File_infra_appengine_cros_lab_inventory_api_v1_service_proto = out.File
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_rawDesc = nil
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_goTypes = nil
	file_infra_appengine_cros_lab_inventory_api_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// AddCrosDevices adds new Chrome OS devices to the inventory.
	AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error)
	// GetCrosDevices retrieves requested Chrome OS devices from the inventory.
	GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error)
	// UpdateDutsStatus updates selected Duts' status labels related to testing.
	UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error)
	// UpdateCrosDevicesSetup updates the selected Chrome OS devices setup data
	// in the inventory.
	UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error)
	// UpdateLabstations updates a selected ChromeOS labstations in lab.
	UpdateLabstations(ctx context.Context, in *UpdateLabstationsRequest, opts ...grpc.CallOption) (*UpdateLabstationsResponse, error)
	// DeleteCrosDevices delete the selelcted devices from the inventory.
	DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error)
	// BatchUpdateDevices updates some specific device properties in batch.
	BatchUpdateDevices(ctx context.Context, in *BatchUpdateDevicesRequest, opts ...grpc.CallOption) (*BatchUpdateDevicesResponse, error)
	// Add asset information
	AddAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error)
	// Get asset information
	GetAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetResponse, error)
	// Delete asset information
	DeleteAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetIDResponse, error)
	// Update asset information
	UpdateAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error)
	// DeviceConfigsExists checks if the device_configs exists in the datastore
	DeviceConfigsExists(ctx context.Context, in *DeviceConfigsExistsRequest, opts ...grpc.CallOption) (*DeviceConfigsExistsResponse, error)
	// Get devices info and combine with repair information if exists in datastore
	GetDeviceManualRepairRecords(ctx context.Context, in *GetDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*GetDeviceManualRepairRecordsResponse, error)
	// Add devices repair action and state in datastore
	CreateDeviceManualRepairRecords(ctx context.Context, in *CreateDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*CreateDeviceManualRepairRecordsResponse, error)
	// Update devices repair action and state in datastore
	UpdateDeviceManualRepairRecords(ctx context.Context, in *UpdateDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*UpdateDeviceManualRepairRecordsResponse, error)
	// ListCrosDevicesLabConfig lists the lab configs of all devices saved in Inventor v2.
	ListCrosDevicesLabConfig(ctx context.Context, in *ListCrosDevicesLabConfigRequest, opts ...grpc.CallOption) (*ListCrosDevicesLabConfigResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error) {
	out := new(AddCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "AddCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error) {
	out := new(GetCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "GetCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error) {
	out := new(UpdateDutsStatusResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateDutsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error) {
	out := new(UpdateCrosDevicesSetupResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateCrosDevicesSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateLabstations(ctx context.Context, in *UpdateLabstationsRequest, opts ...grpc.CallOption) (*UpdateLabstationsResponse, error) {
	out := new(UpdateLabstationsResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateLabstations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error) {
	out := new(DeleteCrosDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeleteCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) BatchUpdateDevices(ctx context.Context, in *BatchUpdateDevicesRequest, opts ...grpc.CallOption) (*BatchUpdateDevicesResponse, error) {
	out := new(BatchUpdateDevicesResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "BatchUpdateDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) AddAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "AddAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetIDResponse, error) {
	out := new(AssetIDResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeleteAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeviceConfigsExists(ctx context.Context, in *DeviceConfigsExistsRequest, opts ...grpc.CallOption) (*DeviceConfigsExistsResponse, error) {
	out := new(DeviceConfigsExistsResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "DeviceConfigsExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetDeviceManualRepairRecords(ctx context.Context, in *GetDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*GetDeviceManualRepairRecordsResponse, error) {
	out := new(GetDeviceManualRepairRecordsResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "GetDeviceManualRepairRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) CreateDeviceManualRepairRecords(ctx context.Context, in *CreateDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*CreateDeviceManualRepairRecordsResponse, error) {
	out := new(CreateDeviceManualRepairRecordsResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "CreateDeviceManualRepairRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDeviceManualRepairRecords(ctx context.Context, in *UpdateDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*UpdateDeviceManualRepairRecordsResponse, error) {
	out := new(UpdateDeviceManualRepairRecordsResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "UpdateDeviceManualRepairRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ListCrosDevicesLabConfig(ctx context.Context, in *ListCrosDevicesLabConfigRequest, opts ...grpc.CallOption) (*ListCrosDevicesLabConfigResponse, error) {
	out := new(ListCrosDevicesLabConfigResponse)
	err := c.client.Call(ctx, "inventory.Inventory", "ListCrosDevicesLabConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) AddCrosDevices(ctx context.Context, in *AddCrosDevicesRequest, opts ...grpc.CallOption) (*AddCrosDevicesResponse, error) {
	out := new(AddCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/AddCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetCrosDevices(ctx context.Context, in *GetCrosDevicesRequest, opts ...grpc.CallOption) (*GetCrosDevicesResponse, error) {
	out := new(GetCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/GetCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDutsStatus(ctx context.Context, in *UpdateDutsStatusRequest, opts ...grpc.CallOption) (*UpdateDutsStatusResponse, error) {
	out := new(UpdateDutsStatusResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateDutsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateCrosDevicesSetup(ctx context.Context, in *UpdateCrosDevicesSetupRequest, opts ...grpc.CallOption) (*UpdateCrosDevicesSetupResponse, error) {
	out := new(UpdateCrosDevicesSetupResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateCrosDevicesSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateLabstations(ctx context.Context, in *UpdateLabstationsRequest, opts ...grpc.CallOption) (*UpdateLabstationsResponse, error) {
	out := new(UpdateLabstationsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateLabstations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteCrosDevices(ctx context.Context, in *DeleteCrosDevicesRequest, opts ...grpc.CallOption) (*DeleteCrosDevicesResponse, error) {
	out := new(DeleteCrosDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeleteCrosDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) BatchUpdateDevices(ctx context.Context, in *BatchUpdateDevicesRequest, opts ...grpc.CallOption) (*BatchUpdateDevicesResponse, error) {
	out := new(BatchUpdateDevicesResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/BatchUpdateDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) AddAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/AddAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteAssets(ctx context.Context, in *AssetIDList, opts ...grpc.CallOption) (*AssetIDResponse, error) {
	out := new(AssetIDResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeleteAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateAssets(ctx context.Context, in *AssetList, opts ...grpc.CallOption) (*AssetResponse, error) {
	out := new(AssetResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeviceConfigsExists(ctx context.Context, in *DeviceConfigsExistsRequest, opts ...grpc.CallOption) (*DeviceConfigsExistsResponse, error) {
	out := new(DeviceConfigsExistsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/DeviceConfigsExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetDeviceManualRepairRecords(ctx context.Context, in *GetDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*GetDeviceManualRepairRecordsResponse, error) {
	out := new(GetDeviceManualRepairRecordsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/GetDeviceManualRepairRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) CreateDeviceManualRepairRecords(ctx context.Context, in *CreateDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*CreateDeviceManualRepairRecordsResponse, error) {
	out := new(CreateDeviceManualRepairRecordsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/CreateDeviceManualRepairRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDeviceManualRepairRecords(ctx context.Context, in *UpdateDeviceManualRepairRecordsRequest, opts ...grpc.CallOption) (*UpdateDeviceManualRepairRecordsResponse, error) {
	out := new(UpdateDeviceManualRepairRecordsResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/UpdateDeviceManualRepairRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ListCrosDevicesLabConfig(ctx context.Context, in *ListCrosDevicesLabConfigRequest, opts ...grpc.CallOption) (*ListCrosDevicesLabConfigResponse, error) {
	out := new(ListCrosDevicesLabConfigResponse)
	err := c.cc.Invoke(ctx, "/inventory.Inventory/ListCrosDevicesLabConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// AddCrosDevices adds new Chrome OS devices to the inventory.
	AddCrosDevices(context.Context, *AddCrosDevicesRequest) (*AddCrosDevicesResponse, error)
	// GetCrosDevices retrieves requested Chrome OS devices from the inventory.
	GetCrosDevices(context.Context, *GetCrosDevicesRequest) (*GetCrosDevicesResponse, error)
	// UpdateDutsStatus updates selected Duts' status labels related to testing.
	UpdateDutsStatus(context.Context, *UpdateDutsStatusRequest) (*UpdateDutsStatusResponse, error)
	// UpdateCrosDevicesSetup updates the selected Chrome OS devices setup data
	// in the inventory.
	UpdateCrosDevicesSetup(context.Context, *UpdateCrosDevicesSetupRequest) (*UpdateCrosDevicesSetupResponse, error)
	// UpdateLabstations updates a selected ChromeOS labstations in lab.
	UpdateLabstations(context.Context, *UpdateLabstationsRequest) (*UpdateLabstationsResponse, error)
	// DeleteCrosDevices delete the selelcted devices from the inventory.
	DeleteCrosDevices(context.Context, *DeleteCrosDevicesRequest) (*DeleteCrosDevicesResponse, error)
	// BatchUpdateDevices updates some specific device properties in batch.
	BatchUpdateDevices(context.Context, *BatchUpdateDevicesRequest) (*BatchUpdateDevicesResponse, error)
	// Add asset information
	AddAssets(context.Context, *AssetList) (*AssetResponse, error)
	// Get asset information
	GetAssets(context.Context, *AssetIDList) (*AssetResponse, error)
	// Delete asset information
	DeleteAssets(context.Context, *AssetIDList) (*AssetIDResponse, error)
	// Update asset information
	UpdateAssets(context.Context, *AssetList) (*AssetResponse, error)
	// DeviceConfigsExists checks if the device_configs exists in the datastore
	DeviceConfigsExists(context.Context, *DeviceConfigsExistsRequest) (*DeviceConfigsExistsResponse, error)
	// Get devices info and combine with repair information if exists in datastore
	GetDeviceManualRepairRecords(context.Context, *GetDeviceManualRepairRecordsRequest) (*GetDeviceManualRepairRecordsResponse, error)
	// Add devices repair action and state in datastore
	CreateDeviceManualRepairRecords(context.Context, *CreateDeviceManualRepairRecordsRequest) (*CreateDeviceManualRepairRecordsResponse, error)
	// Update devices repair action and state in datastore
	UpdateDeviceManualRepairRecords(context.Context, *UpdateDeviceManualRepairRecordsRequest) (*UpdateDeviceManualRepairRecordsResponse, error)
	// ListCrosDevicesLabConfig lists the lab configs of all devices saved in Inventor v2.
	ListCrosDevicesLabConfig(context.Context, *ListCrosDevicesLabConfigRequest) (*ListCrosDevicesLabConfigResponse, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) AddCrosDevices(context.Context, *AddCrosDevicesRequest) (*AddCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) GetCrosDevices(context.Context, *GetCrosDevicesRequest) (*GetCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) UpdateDutsStatus(context.Context, *UpdateDutsStatusRequest) (*UpdateDutsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDutsStatus not implemented")
}
func (*UnimplementedInventoryServer) UpdateCrosDevicesSetup(context.Context, *UpdateCrosDevicesSetupRequest) (*UpdateCrosDevicesSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrosDevicesSetup not implemented")
}
func (*UnimplementedInventoryServer) UpdateLabstations(context.Context, *UpdateLabstationsRequest) (*UpdateLabstationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabstations not implemented")
}
func (*UnimplementedInventoryServer) DeleteCrosDevices(context.Context, *DeleteCrosDevicesRequest) (*DeleteCrosDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrosDevices not implemented")
}
func (*UnimplementedInventoryServer) BatchUpdateDevices(context.Context, *BatchUpdateDevicesRequest) (*BatchUpdateDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateDevices not implemented")
}
func (*UnimplementedInventoryServer) AddAssets(context.Context, *AssetList) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssets not implemented")
}
func (*UnimplementedInventoryServer) GetAssets(context.Context, *AssetIDList) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (*UnimplementedInventoryServer) DeleteAssets(context.Context, *AssetIDList) (*AssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssets not implemented")
}
func (*UnimplementedInventoryServer) UpdateAssets(context.Context, *AssetList) (*AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssets not implemented")
}
func (*UnimplementedInventoryServer) DeviceConfigsExists(context.Context, *DeviceConfigsExistsRequest) (*DeviceConfigsExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceConfigsExists not implemented")
}
func (*UnimplementedInventoryServer) GetDeviceManualRepairRecords(context.Context, *GetDeviceManualRepairRecordsRequest) (*GetDeviceManualRepairRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceManualRepairRecords not implemented")
}
func (*UnimplementedInventoryServer) CreateDeviceManualRepairRecords(context.Context, *CreateDeviceManualRepairRecordsRequest) (*CreateDeviceManualRepairRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceManualRepairRecords not implemented")
}
func (*UnimplementedInventoryServer) UpdateDeviceManualRepairRecords(context.Context, *UpdateDeviceManualRepairRecordsRequest) (*UpdateDeviceManualRepairRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceManualRepairRecords not implemented")
}
func (*UnimplementedInventoryServer) ListCrosDevicesLabConfig(context.Context, *ListCrosDevicesLabConfigRequest) (*ListCrosDevicesLabConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrosDevicesLabConfig not implemented")
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_AddCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/AddCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddCrosDevices(ctx, req.(*AddCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/GetCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetCrosDevices(ctx, req.(*GetCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDutsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDutsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDutsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateDutsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDutsStatus(ctx, req.(*UpdateDutsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateCrosDevicesSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCrosDevicesSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateCrosDevicesSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateCrosDevicesSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateCrosDevicesSetup(ctx, req.(*UpdateCrosDevicesSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateLabstations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabstationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateLabstations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateLabstations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateLabstations(ctx, req.(*UpdateLabstationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteCrosDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCrosDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteCrosDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeleteCrosDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteCrosDevices(ctx, req.(*DeleteCrosDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_BatchUpdateDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).BatchUpdateDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/BatchUpdateDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).BatchUpdateDevices(ctx, req.(*BatchUpdateDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_AddAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/AddAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddAssets(ctx, req.(*AssetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetAssets(ctx, req.(*AssetIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeleteAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteAssets(ctx, req.(*AssetIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateAssets(ctx, req.(*AssetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeviceConfigsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceConfigsExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeviceConfigsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/DeviceConfigsExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeviceConfigsExists(ctx, req.(*DeviceConfigsExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetDeviceManualRepairRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceManualRepairRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetDeviceManualRepairRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/GetDeviceManualRepairRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetDeviceManualRepairRecords(ctx, req.(*GetDeviceManualRepairRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_CreateDeviceManualRepairRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceManualRepairRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).CreateDeviceManualRepairRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/CreateDeviceManualRepairRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).CreateDeviceManualRepairRecords(ctx, req.(*CreateDeviceManualRepairRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDeviceManualRepairRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceManualRepairRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDeviceManualRepairRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/UpdateDeviceManualRepairRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDeviceManualRepairRecords(ctx, req.(*UpdateDeviceManualRepairRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ListCrosDevicesLabConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCrosDevicesLabConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ListCrosDevicesLabConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Inventory/ListCrosDevicesLabConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ListCrosDevicesLabConfig(ctx, req.(*ListCrosDevicesLabConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCrosDevices",
			Handler:    _Inventory_AddCrosDevices_Handler,
		},
		{
			MethodName: "GetCrosDevices",
			Handler:    _Inventory_GetCrosDevices_Handler,
		},
		{
			MethodName: "UpdateDutsStatus",
			Handler:    _Inventory_UpdateDutsStatus_Handler,
		},
		{
			MethodName: "UpdateCrosDevicesSetup",
			Handler:    _Inventory_UpdateCrosDevicesSetup_Handler,
		},
		{
			MethodName: "UpdateLabstations",
			Handler:    _Inventory_UpdateLabstations_Handler,
		},
		{
			MethodName: "DeleteCrosDevices",
			Handler:    _Inventory_DeleteCrosDevices_Handler,
		},
		{
			MethodName: "BatchUpdateDevices",
			Handler:    _Inventory_BatchUpdateDevices_Handler,
		},
		{
			MethodName: "AddAssets",
			Handler:    _Inventory_AddAssets_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _Inventory_GetAssets_Handler,
		},
		{
			MethodName: "DeleteAssets",
			Handler:    _Inventory_DeleteAssets_Handler,
		},
		{
			MethodName: "UpdateAssets",
			Handler:    _Inventory_UpdateAssets_Handler,
		},
		{
			MethodName: "DeviceConfigsExists",
			Handler:    _Inventory_DeviceConfigsExists_Handler,
		},
		{
			MethodName: "GetDeviceManualRepairRecords",
			Handler:    _Inventory_GetDeviceManualRepairRecords_Handler,
		},
		{
			MethodName: "CreateDeviceManualRepairRecords",
			Handler:    _Inventory_CreateDeviceManualRepairRecords_Handler,
		},
		{
			MethodName: "UpdateDeviceManualRepairRecords",
			Handler:    _Inventory_UpdateDeviceManualRepairRecords_Handler,
		},
		{
			MethodName: "ListCrosDevicesLabConfig",
			Handler:    _Inventory_ListCrosDevicesLabConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/cros/lab_inventory/api/v1/service.proto",
}
