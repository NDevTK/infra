// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: poros/api/proto/assetresource_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetResourceClient is the client API for AssetResource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetResourceClient interface {
	// Creates the given AssetResource.
	Create(ctx context.Context, in *CreateAssetResourceRequest, opts ...grpc.CallOption) (*AssetResourceModel, error)
	// Retrieves a AssetResource for a given unique value.
	Get(ctx context.Context, in *GetAssetResourceRequest, opts ...grpc.CallOption) (*AssetResourceModel, error)
	// Update a single AssetResource in EnterpriseAsset.
	Update(ctx context.Context, in *UpdateAssetResourceRequest, opts ...grpc.CallOption) (*AssetResourceModel, error)
	// Deletes the given AssetResource.
	Delete(ctx context.Context, in *DeleteAssetResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all AssetResources.
	List(ctx context.Context, in *ListAssetResourcesRequest, opts ...grpc.CallOption) (*ListAssetResourcesResponse, error)
}

type assetResourceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetResourceClient(cc grpc.ClientConnInterface) AssetResourceClient {
	return &assetResourceClient{cc}
}

func (c *assetResourceClient) Create(ctx context.Context, in *CreateAssetResourceRequest, opts ...grpc.CallOption) (*AssetResourceModel, error) {
	out := new(AssetResourceModel)
	err := c.cc.Invoke(ctx, "/poros.AssetResource/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetResourceClient) Get(ctx context.Context, in *GetAssetResourceRequest, opts ...grpc.CallOption) (*AssetResourceModel, error) {
	out := new(AssetResourceModel)
	err := c.cc.Invoke(ctx, "/poros.AssetResource/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetResourceClient) Update(ctx context.Context, in *UpdateAssetResourceRequest, opts ...grpc.CallOption) (*AssetResourceModel, error) {
	out := new(AssetResourceModel)
	err := c.cc.Invoke(ctx, "/poros.AssetResource/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetResourceClient) Delete(ctx context.Context, in *DeleteAssetResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/poros.AssetResource/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetResourceClient) List(ctx context.Context, in *ListAssetResourcesRequest, opts ...grpc.CallOption) (*ListAssetResourcesResponse, error) {
	out := new(ListAssetResourcesResponse)
	err := c.cc.Invoke(ctx, "/poros.AssetResource/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetResourceServer is the server API for AssetResource service.
// All implementations must embed UnimplementedAssetResourceServer
// for forward compatibility
type AssetResourceServer interface {
	// Creates the given AssetResource.
	Create(context.Context, *CreateAssetResourceRequest) (*AssetResourceModel, error)
	// Retrieves a AssetResource for a given unique value.
	Get(context.Context, *GetAssetResourceRequest) (*AssetResourceModel, error)
	// Update a single AssetResource in EnterpriseAsset.
	Update(context.Context, *UpdateAssetResourceRequest) (*AssetResourceModel, error)
	// Deletes the given AssetResource.
	Delete(context.Context, *DeleteAssetResourceRequest) (*emptypb.Empty, error)
	// Lists all AssetResources.
	List(context.Context, *ListAssetResourcesRequest) (*ListAssetResourcesResponse, error)
	mustEmbedUnimplementedAssetResourceServer()
}

// UnimplementedAssetResourceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetResourceServer struct {
}

func (UnimplementedAssetResourceServer) Create(context.Context, *CreateAssetResourceRequest) (*AssetResourceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAssetResourceServer) Get(context.Context, *GetAssetResourceRequest) (*AssetResourceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAssetResourceServer) Update(context.Context, *UpdateAssetResourceRequest) (*AssetResourceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAssetResourceServer) Delete(context.Context, *DeleteAssetResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAssetResourceServer) List(context.Context, *ListAssetResourcesRequest) (*ListAssetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAssetResourceServer) mustEmbedUnimplementedAssetResourceServer() {}

// UnsafeAssetResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetResourceServer will
// result in compilation errors.
type UnsafeAssetResourceServer interface {
	mustEmbedUnimplementedAssetResourceServer()
}

func RegisterAssetResourceServer(s grpc.ServiceRegistrar, srv AssetResourceServer) {
	s.RegisterService(&AssetResource_ServiceDesc, srv)
}

func _AssetResource_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetResourceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetResource/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetResourceServer).Create(ctx, req.(*CreateAssetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetResource_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetResourceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetResource/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetResourceServer).Get(ctx, req.(*GetAssetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetResource_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetResourceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetResource/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetResourceServer).Update(ctx, req.(*UpdateAssetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetResource_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetResourceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetResource/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetResourceServer).Delete(ctx, req.(*DeleteAssetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetResource_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetResourceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetResource/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetResourceServer).List(ctx, req.(*ListAssetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetResource_ServiceDesc is the grpc.ServiceDesc for AssetResource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetResource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poros.AssetResource",
	HandlerType: (*AssetResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AssetResource_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AssetResource_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AssetResource_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AssetResource_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AssetResource_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poros/api/proto/assetresource_service.proto",
}
