// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: poros/api/proto/asset_instance_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetInstanceClient is the client API for AssetInstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetInstanceClient interface {
	// Creates the given AssetInstanceInstance.
	Create(ctx context.Context, in *CreateAssetInstanceRequest, opts ...grpc.CallOption) (*AssetInstanceModel, error)
	// Retrieves an AssetInstance for a given unique value.
	Get(ctx context.Context, in *GetAssetInstanceRequest, opts ...grpc.CallOption) (*AssetInstanceModel, error)
	// Update a single AssetInstance.
	Update(ctx context.Context, in *UpdateAssetInstanceRequest, opts ...grpc.CallOption) (*AssetInstanceModel, error)
	// Deletes the given AssetInstance.
	Delete(ctx context.Context, in *DeleteAssetInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all AssetInstances.
	List(ctx context.Context, in *ListAssetInstancesRequest, opts ...grpc.CallOption) (*ListAssetInstancesResponse, error)
	TriggerDeployment(ctx context.Context, in *TriggerDeploymentRequest, opts ...grpc.CallOption) (*TriggerDeploymentResponse, error)
}

type assetInstanceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetInstanceClient(cc grpc.ClientConnInterface) AssetInstanceClient {
	return &assetInstanceClient{cc}
}

func (c *assetInstanceClient) Create(ctx context.Context, in *CreateAssetInstanceRequest, opts ...grpc.CallOption) (*AssetInstanceModel, error) {
	out := new(AssetInstanceModel)
	err := c.cc.Invoke(ctx, "/poros.AssetInstance/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInstanceClient) Get(ctx context.Context, in *GetAssetInstanceRequest, opts ...grpc.CallOption) (*AssetInstanceModel, error) {
	out := new(AssetInstanceModel)
	err := c.cc.Invoke(ctx, "/poros.AssetInstance/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInstanceClient) Update(ctx context.Context, in *UpdateAssetInstanceRequest, opts ...grpc.CallOption) (*AssetInstanceModel, error) {
	out := new(AssetInstanceModel)
	err := c.cc.Invoke(ctx, "/poros.AssetInstance/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInstanceClient) Delete(ctx context.Context, in *DeleteAssetInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/poros.AssetInstance/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInstanceClient) List(ctx context.Context, in *ListAssetInstancesRequest, opts ...grpc.CallOption) (*ListAssetInstancesResponse, error) {
	out := new(ListAssetInstancesResponse)
	err := c.cc.Invoke(ctx, "/poros.AssetInstance/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInstanceClient) TriggerDeployment(ctx context.Context, in *TriggerDeploymentRequest, opts ...grpc.CallOption) (*TriggerDeploymentResponse, error) {
	out := new(TriggerDeploymentResponse)
	err := c.cc.Invoke(ctx, "/poros.AssetInstance/TriggerDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetInstanceServer is the server API for AssetInstance service.
// All implementations must embed UnimplementedAssetInstanceServer
// for forward compatibility
type AssetInstanceServer interface {
	// Creates the given AssetInstanceInstance.
	Create(context.Context, *CreateAssetInstanceRequest) (*AssetInstanceModel, error)
	// Retrieves an AssetInstance for a given unique value.
	Get(context.Context, *GetAssetInstanceRequest) (*AssetInstanceModel, error)
	// Update a single AssetInstance.
	Update(context.Context, *UpdateAssetInstanceRequest) (*AssetInstanceModel, error)
	// Deletes the given AssetInstance.
	Delete(context.Context, *DeleteAssetInstanceRequest) (*emptypb.Empty, error)
	// Lists all AssetInstances.
	List(context.Context, *ListAssetInstancesRequest) (*ListAssetInstancesResponse, error)
	TriggerDeployment(context.Context, *TriggerDeploymentRequest) (*TriggerDeploymentResponse, error)
	mustEmbedUnimplementedAssetInstanceServer()
}

// UnimplementedAssetInstanceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetInstanceServer struct {
}

func (UnimplementedAssetInstanceServer) Create(context.Context, *CreateAssetInstanceRequest) (*AssetInstanceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAssetInstanceServer) Get(context.Context, *GetAssetInstanceRequest) (*AssetInstanceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAssetInstanceServer) Update(context.Context, *UpdateAssetInstanceRequest) (*AssetInstanceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAssetInstanceServer) Delete(context.Context, *DeleteAssetInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAssetInstanceServer) List(context.Context, *ListAssetInstancesRequest) (*ListAssetInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAssetInstanceServer) TriggerDeployment(context.Context, *TriggerDeploymentRequest) (*TriggerDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerDeployment not implemented")
}
func (UnimplementedAssetInstanceServer) mustEmbedUnimplementedAssetInstanceServer() {}

// UnsafeAssetInstanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetInstanceServer will
// result in compilation errors.
type UnsafeAssetInstanceServer interface {
	mustEmbedUnimplementedAssetInstanceServer()
}

func RegisterAssetInstanceServer(s grpc.ServiceRegistrar, srv AssetInstanceServer) {
	s.RegisterService(&AssetInstance_ServiceDesc, srv)
}

func _AssetInstance_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInstanceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetInstance/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInstanceServer).Create(ctx, req.(*CreateAssetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInstance_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInstanceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetInstance/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInstanceServer).Get(ctx, req.(*GetAssetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInstance_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInstanceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetInstance/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInstanceServer).Update(ctx, req.(*UpdateAssetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInstance_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInstanceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetInstance/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInstanceServer).Delete(ctx, req.(*DeleteAssetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInstance_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInstanceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetInstance/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInstanceServer).List(ctx, req.(*ListAssetInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInstance_TriggerDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInstanceServer).TriggerDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poros.AssetInstance/TriggerDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInstanceServer).TriggerDeployment(ctx, req.(*TriggerDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetInstance_ServiceDesc is the grpc.ServiceDesc for AssetInstance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetInstance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poros.AssetInstance",
	HandlerType: (*AssetInstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AssetInstance_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AssetInstance_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AssetInstance_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AssetInstance_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AssetInstance_List_Handler,
		},
		{
			MethodName: "TriggerDeployment",
			Handler:    _AssetInstance_TriggerDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poros/api/proto/asset_instance_service.proto",
}
