// Copyright 2020 The Chromium Authors. All Rights Reserved.
// Use of this source code is governed by the Apache v2.0 license that can be
// found in the LICENSE file.

// Configuration for cr-rev.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/appengine/cr-rev/config/config.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the repository, for example "chromium/src" or "v8/v8".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indexing configuration for this repository.
	//
	// Types that are assignable to Indexing:
	//	*Repository_DoNotIndex
	//	*Repository_Priority
	Indexing isRepository_Indexing `protobuf_oneof:"indexing"`
	// A list of refs to be indexed, specified as a list of ref paths. If provided
	// path is not a leaf, it will include all its children.
	//
	// Examples:
	//   # All heads
	//   "refs/heads"
	//   # All branch-heads
	//   "refs/branch-heads"
	//   # main only
	//   "refs/heads/main"
	//
	// Defaults to ["refs/heads"]
	Refs []string `protobuf:"bytes,6,rep,name=refs,proto3" json:"refs,omitempty"`
	// A list of git refs to ignore even when they match a ref included above.
	// It is also specified as a list of regular expressions automatically wrapped
	// in ^ and $.
	ExcludeRefs []string `protobuf:"bytes,7,rep,name=exclude_refs,json=excludeRefs,proto3" json:"exclude_refs,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cr_rev_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cr_rev_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cr_rev_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Repository) GetIndexing() isRepository_Indexing {
	if m != nil {
		return m.Indexing
	}
	return nil
}

func (x *Repository) GetDoNotIndex() bool {
	if x, ok := x.GetIndexing().(*Repository_DoNotIndex); ok {
		return x.DoNotIndex
	}
	return false
}

func (x *Repository) GetPriority() bool {
	if x, ok := x.GetIndexing().(*Repository_Priority); ok {
		return x.Priority
	}
	return false
}

func (x *Repository) GetRefs() []string {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *Repository) GetExcludeRefs() []string {
	if x != nil {
		return x.ExcludeRefs
	}
	return nil
}

type isRepository_Indexing interface {
	isRepository_Indexing()
}

type Repository_DoNotIndex struct {
	// Ignore commits for this repository.
	DoNotIndex bool `protobuf:"varint,2,opt,name=do_not_index,json=doNotIndex,proto3,oneof"`
}

type Repository_Priority struct {
	// Whether git hashes that are also part of other repositories should refer
	// to this repository.
	//
	// For example, we set `priority = true` for "chromium/src", since all git
	// commit hashes in "chromium/src" will also exist in
	// "chromium/src/codesearch", but we want crrev to redirect to
	// "chromium/src" instead of "chromium/src/codesearch".
	Priority bool `protobuf:"varint,3,opt,name=priority,proto3,oneof"`
}

func (*Repository_DoNotIndex) isRepository_Indexing() {}

func (*Repository_Priority) isRepository_Indexing() {}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the host, for example "chromium" or "chrome-internal".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Should be specified only for repositories that need to override default
	// attributes.
	Repos []*Repository `protobuf:"bytes,2,rep,name=repos,proto3" json:"repos,omitempty"`
	// Name of pubsub topic for the host which is used to update individual
	// repositories. If not present, new commits won't be indexed.
	PubsubSubscription string `protobuf:"bytes,3,opt,name=pubsub_subscription,json=pubsubSubscription,proto3" json:"pubsub_subscription,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cr_rev_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cr_rev_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cr_rev_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetRepos() []*Repository {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *Host) GetPubsubSubscription() string {
	if x != nil {
		return x.PubsubSubscription
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of hosts to index.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_cr_rev_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_cr_rev_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_infra_appengine_cr_rev_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Config) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

var File_infra_appengine_cr_rev_config_config_proto protoreflect.FileDescriptor

var file_infra_appengine_cr_rev_config_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x2d, 0x72, 0x65, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x66, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x22, 0x75, 0x0a, 0x04,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x42, 0x1f, 0x5a, 0x1d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x2d, 0x72, 0x65, 0x76, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_cr_rev_config_config_proto_rawDescOnce sync.Once
	file_infra_appengine_cr_rev_config_config_proto_rawDescData = file_infra_appengine_cr_rev_config_config_proto_rawDesc
)

func file_infra_appengine_cr_rev_config_config_proto_rawDescGZIP() []byte {
	file_infra_appengine_cr_rev_config_config_proto_rawDescOnce.Do(func() {
		file_infra_appengine_cr_rev_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_cr_rev_config_config_proto_rawDescData)
	})
	return file_infra_appengine_cr_rev_config_config_proto_rawDescData
}

var file_infra_appengine_cr_rev_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_infra_appengine_cr_rev_config_config_proto_goTypes = []interface{}{
	(*Repository)(nil), // 0: config.Repository
	(*Host)(nil),       // 1: config.Host
	(*Config)(nil),     // 2: config.Config
}
var file_infra_appengine_cr_rev_config_config_proto_depIdxs = []int32{
	0, // 0: config.Host.repos:type_name -> config.Repository
	1, // 1: config.Config.hosts:type_name -> config.Host
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_infra_appengine_cr_rev_config_config_proto_init() }
func file_infra_appengine_cr_rev_config_config_proto_init() {
	if File_infra_appengine_cr_rev_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_cr_rev_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cr_rev_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_cr_rev_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_appengine_cr_rev_config_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Repository_DoNotIndex)(nil),
		(*Repository_Priority)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_cr_rev_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_appengine_cr_rev_config_config_proto_goTypes,
		DependencyIndexes: file_infra_appengine_cr_rev_config_config_proto_depIdxs,
		MessageInfos:      file_infra_appengine_cr_rev_config_config_proto_msgTypes,
	}.Build()
	File_infra_appengine_cr_rev_config_config_proto = out.File
	file_infra_appengine_cr_rev_config_config_proto_rawDesc = nil
	file_infra_appengine_cr_rev_config_config_proto_goTypes = nil
	file_infra_appengine_cr_rev_config_config_proto_depIdxs = nil
}
