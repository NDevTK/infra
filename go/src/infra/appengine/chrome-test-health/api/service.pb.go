// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: infra/appengine/chrome-test-health/api/service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Metrics that can by retrieved for any view
type MetricType int32

const (
	MetricType_UNKNOWN_METRIC MetricType = 0
	MetricType_NUM_RUNS       MetricType = 1
	MetricType_NUM_FAILURES   MetricType = 2
	MetricType_TOTAL_RUNTIME  MetricType = 3
	MetricType_AVG_CORES      MetricType = 4
	MetricType_AVG_RUNTIME    MetricType = 5
	MetricType_P50_RUNTIME    MetricType = 6
	MetricType_P90_RUNTIME    MetricType = 7
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "UNKNOWN_METRIC",
		1: "NUM_RUNS",
		2: "NUM_FAILURES",
		3: "TOTAL_RUNTIME",
		4: "AVG_CORES",
		5: "AVG_RUNTIME",
		6: "P50_RUNTIME",
		7: "P90_RUNTIME",
	}
	MetricType_value = map[string]int32{
		"UNKNOWN_METRIC": 0,
		"NUM_RUNS":       1,
		"NUM_FAILURES":   2,
		"TOTAL_RUNTIME":  3,
		"AVG_CORES":      4,
		"AVG_RUNTIME":    5,
		"P50_RUNTIME":    6,
		"P90_RUNTIME":    7,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{0}
}

// Sort types includes all metric types as well as the name (ie test name or
// directory name to sort)
type SortType int32

const (
	SortType_UNKNOWN_SORTTYPE   SortType = 0
	SortType_SORT_NAME          SortType = 1
	SortType_SORT_NUM_RUNS      SortType = 2
	SortType_SORT_NUM_FAILURES  SortType = 3
	SortType_SORT_TOTAL_RUNTIME SortType = 4
	SortType_SORT_AVG_CORES     SortType = 5
	SortType_SORT_AVG_RUNTIME   SortType = 6
	SortType_SORT_P50_RUNTIME   SortType = 7
	SortType_SORT_P90_RUNTIME   SortType = 8
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "UNKNOWN_SORTTYPE",
		1: "SORT_NAME",
		2: "SORT_NUM_RUNS",
		3: "SORT_NUM_FAILURES",
		4: "SORT_TOTAL_RUNTIME",
		5: "SORT_AVG_CORES",
		6: "SORT_AVG_RUNTIME",
		7: "SORT_P50_RUNTIME",
		8: "SORT_P90_RUNTIME",
	}
	SortType_value = map[string]int32{
		"UNKNOWN_SORTTYPE":   0,
		"SORT_NAME":          1,
		"SORT_NUM_RUNS":      2,
		"SORT_NUM_FAILURES":  3,
		"SORT_TOTAL_RUNTIME": 4,
		"SORT_AVG_CORES":     5,
		"SORT_AVG_RUNTIME":   6,
		"SORT_P50_RUNTIME":   7,
		"SORT_P90_RUNTIME":   8,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[1].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[1]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{1}
}

// Enumeration to specify the time period to fetch
type Period int32

const (
	Period_UNKNOWN_PERIOD Period = 0
	Period_DAY            Period = 1
	Period_WEEK           Period = 2
	Period_MONTH          Period = 3
)

// Enum value maps for Period.
var (
	Period_name = map[int32]string{
		0: "UNKNOWN_PERIOD",
		1: "DAY",
		2: "WEEK",
		3: "MONTH",
	}
	Period_value = map[string]int32{
		"UNKNOWN_PERIOD": 0,
		"DAY":            1,
		"WEEK":           2,
		"MONTH":          3,
	}
)

func (x Period) Enum() *Period {
	p := new(Period)
	*p = x
	return p
}

func (x Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Period) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[2].Descriptor()
}

func (Period) Type() protoreflect.EnumType {
	return &file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[2]
}

func (x Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Period.Descriptor instead.
func (Period) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{2}
}

type DirectoryNodeType int32

const (
	DirectoryNodeType_UNKNOWN_NODE_TYPE DirectoryNodeType = 0
	DirectoryNodeType_DIRECTORY         DirectoryNodeType = 1
	DirectoryNodeType_FILENAME          DirectoryNodeType = 2
)

// Enum value maps for DirectoryNodeType.
var (
	DirectoryNodeType_name = map[int32]string{
		0: "UNKNOWN_NODE_TYPE",
		1: "DIRECTORY",
		2: "FILENAME",
	}
	DirectoryNodeType_value = map[string]int32{
		"UNKNOWN_NODE_TYPE": 0,
		"DIRECTORY":         1,
		"FILENAME":          2,
	}
)

func (x DirectoryNodeType) Enum() *DirectoryNodeType {
	p := new(DirectoryNodeType)
	*p = x
	return p
}

func (x DirectoryNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectoryNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[3].Descriptor()
}

func (DirectoryNodeType) Type() protoreflect.EnumType {
	return &file_infra_appengine_chrome_test_health_api_service_proto_enumTypes[3]
}

func (x DirectoryNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectoryNodeType.Descriptor instead.
func (DirectoryNodeType) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{3}
}

type UpdateMetricsTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive start date to update
	// Dates should be specified in YYYY-MM-DD format.
	FromDate string `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	// Inclusive end date to update
	// Dates should be specified in YYYY-MM-DD format.
	ToDate string `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *UpdateMetricsTableRequest) Reset() {
	*x = UpdateMetricsTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetricsTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricsTableRequest) ProtoMessage() {}

func (x *UpdateMetricsTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricsTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateMetricsTableRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateMetricsTableRequest) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *UpdateMetricsTableRequest) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

type UpdateMetricsTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMetricsTableResponse) Reset() {
	*x = UpdateMetricsTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetricsTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetricsTableResponse) ProtoMessage() {}

func (x *UpdateMetricsTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetricsTableResponse.ProtoReflect.Descriptor instead.
func (*UpdateMetricsTableResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{1}
}

type ListComponentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListComponentsRequest) Reset() {
	*x = ListComponentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComponentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComponentsRequest) ProtoMessage() {}

func (x *ListComponentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComponentsRequest.ProtoReflect.Descriptor instead.
func (*ListComponentsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{2}
}

type ListComponentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of component names that can be passed into other services to get
	// test information about
	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// A list of components owned by the signed in user. For public or not
	// signed in googlers, returns an empty list
	OwnedComponents []string `protobuf:"bytes,2,rep,name=owned_components,json=ownedComponents,proto3" json:"owned_components,omitempty"`
}

func (x *ListComponentsResponse) Reset() {
	*x = ListComponentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComponentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComponentsResponse) ProtoMessage() {}

func (x *ListComponentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComponentsResponse.ProtoReflect.Descriptor instead.
func (*ListComponentsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListComponentsResponse) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *ListComponentsResponse) GetOwnedComponents() []string {
	if x != nil {
		return x.OwnedComponents
	}
	return nil
}

type SortBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What to sort by
	Metric SortType `protobuf:"varint,1,opt,name=metric,proto3,enum=test_resources.SortType" json:"metric,omitempty"`
	// Ascending or Descending
	Ascending bool `protobuf:"varint,2,opt,name=ascending,proto3" json:"ascending,omitempty"`
	// The day to do the sorting on. This day must be in the request as well
	// Defaults to the first date being requested
	SortDate string `protobuf:"bytes,3,opt,name=sort_date,json=sortDate,proto3" json:"sort_date,omitempty"`
}

func (x *SortBy) Reset() {
	*x = SortBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBy) ProtoMessage() {}

func (x *SortBy) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBy.ProtoReflect.Descriptor instead.
func (*SortBy) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{4}
}

func (x *SortBy) GetMetric() SortType {
	if x != nil {
		return x.Metric
	}
	return SortType_UNKNOWN_SORTTYPE
}

func (x *SortBy) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *SortBy) GetSortDate() string {
	if x != nil {
		return x.SortDate
	}
	return ""
}

type FetchTestMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The components to get metrics for. This is effectively a required filter.
	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Filter specific to the test file names.
	// An empty string will do no filtering
	FileNames []string `protobuf:"bytes,2,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	// Time period to fetch (e.g. DAY, WEEK)
	Period Period `protobuf:"varint,3,opt,name=period,proto3,enum=test_resources.Period" json:"period,omitempty"`
	// Dates to fetch.  This should align to the period.
	// Dates should be specified in YYYY-MM-DD format.
	Dates []string `protobuf:"bytes,4,rep,name=dates,proto3" json:"dates,omitempty"`
	// Metrics to fetch.
	// This is required.  If no metrics are specified an error is returned.
	Metrics []MetricType `protobuf:"varint,5,rep,packed,name=metrics,proto3,enum=test_resources.MetricType" json:"metrics,omitempty"`
	// A string filter. This will return metrics for tests that have parts
	// of the tokenized filter
	// An empty string will do no filtering
	Filter string `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	// The offset to start at for the next request
	PageOffset int64 `protobuf:"varint,7,opt,name=page_offset,json=pageOffset,proto3" json:"page_offset,omitempty"`
	// The maximum number of tests to retrieve for this request
	PageSize int64 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The order in which to return the results
	Sort *SortBy `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *FetchTestMetricsRequest) Reset() {
	*x = FetchTestMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTestMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTestMetricsRequest) ProtoMessage() {}

func (x *FetchTestMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTestMetricsRequest.ProtoReflect.Descriptor instead.
func (*FetchTestMetricsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{5}
}

func (x *FetchTestMetricsRequest) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *FetchTestMetricsRequest) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

func (x *FetchTestMetricsRequest) GetPeriod() Period {
	if x != nil {
		return x.Period
	}
	return Period_UNKNOWN_PERIOD
}

func (x *FetchTestMetricsRequest) GetDates() []string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *FetchTestMetricsRequest) GetMetrics() []MetricType {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *FetchTestMetricsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FetchTestMetricsRequest) GetPageOffset() int64 {
	if x != nil {
		return x.PageOffset
	}
	return 0
}

func (x *FetchTestMetricsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchTestMetricsRequest) GetSort() *SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

type FetchTestMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An array of information about each test for each of the requested days
	Tests []*TestDateMetricData `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	// Indicates whether this is the last page or another can be
	// requested
	LastPage bool `protobuf:"varint,2,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
}

func (x *FetchTestMetricsResponse) Reset() {
	*x = FetchTestMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTestMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTestMetricsResponse) ProtoMessage() {}

func (x *FetchTestMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTestMetricsResponse.ProtoReflect.Descriptor instead.
func (*FetchTestMetricsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{6}
}

func (x *FetchTestMetricsResponse) GetTests() []*TestDateMetricData {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *FetchTestMetricsResponse) GetLastPage() bool {
	if x != nil {
		return x.LastPage
	}
	return false
}

type TestDateMetricData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test's unique id
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The test's display name
	TestName string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	// The file in which the test is contained
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Rollup metrics for the test id (i.e. the rolled up variants). This is a map
	// of dates (in YYYY-MM-DD format) to an array of measured metrics.
	Metrics map[string]*TestMetricsArray `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Breakdown of the variants of this test
	Variants []*TestVariantData `protobuf:"bytes,5,rep,name=variants,proto3" json:"variants,omitempty"`
}

func (x *TestDateMetricData) Reset() {
	*x = TestDateMetricData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDateMetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDateMetricData) ProtoMessage() {}

func (x *TestDateMetricData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDateMetricData.ProtoReflect.Descriptor instead.
func (*TestDateMetricData) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{7}
}

func (x *TestDateMetricData) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestDateMetricData) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestDateMetricData) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TestDateMetricData) GetMetrics() map[string]*TestMetricsArray {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *TestDateMetricData) GetVariants() []*TestVariantData {
	if x != nil {
		return x.Variants
	}
	return nil
}

type TestVariantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The suite which this variant belongs to
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// The builder which this variant was run on
	Builder string `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	// The project the builder is in (i.e. chromium, chromium-m115, etc)
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// The bucket the builder is in (i.e. try, ci)
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Rollup metrics for the variant. This is a map of dates (in YYYY-MM-DD
	// format) to an array of measured metrics.
	Metrics map[string]*TestMetricsArray `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestVariantData) Reset() {
	*x = TestVariantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantData) ProtoMessage() {}

func (x *TestVariantData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantData.ProtoReflect.Descriptor instead.
func (*TestVariantData) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{8}
}

func (x *TestVariantData) GetSuite() string {
	if x != nil {
		return x.Suite
	}
	return ""
}

func (x *TestVariantData) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

func (x *TestVariantData) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVariantData) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TestVariantData) GetMetrics() map[string]*TestMetricsArray {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type TestMetricsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested metric mapped to the value of that metric
	Data []*TestMetricsData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TestMetricsArray) Reset() {
	*x = TestMetricsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMetricsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMetricsArray) ProtoMessage() {}

func (x *TestMetricsArray) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMetricsArray.ProtoReflect.Descriptor instead.
func (*TestMetricsArray) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{9}
}

func (x *TestMetricsArray) GetData() []*TestMetricsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TestMetricsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metric being measured
	MetricType MetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=test_resources.MetricType" json:"metric_type,omitempty"`
	// The value of the metric
	MetricValue float64 `protobuf:"fixed64,2,opt,name=metric_value,json=metricValue,proto3" json:"metric_value,omitempty"`
}

func (x *TestMetricsData) Reset() {
	*x = TestMetricsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMetricsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMetricsData) ProtoMessage() {}

func (x *TestMetricsData) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMetricsData.ProtoReflect.Descriptor instead.
func (*TestMetricsData) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{10}
}

func (x *TestMetricsData) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_UNKNOWN_METRIC
}

func (x *TestMetricsData) GetMetricValue() float64 {
	if x != nil {
		return x.MetricValue
	}
	return 0
}

type FetchDirectoryMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The components being rolled up for the given metrics
	Components []string `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty"`
	// Time period to fetch (e.g. DAY, WEEK)
	Period Period `protobuf:"varint,2,opt,name=period,proto3,enum=test_resources.Period" json:"period,omitempty"`
	// Dates to fetch.  This should align to the period.
	// Dates should be specified in YYYY-MM-DD format.
	Dates []string `protobuf:"bytes,3,rep,name=dates,proto3" json:"dates,omitempty"`
	// The optional parent node for this data (i.e. The directory to get the child
	// metrics for). The root parent_id is '/'.
	ParentIds []string `protobuf:"bytes,4,rep,name=parent_ids,json=parentIds,proto3" json:"parent_ids,omitempty"`
	// A string filter. This will return metrics for directories that have parts
	// of the tokenized filter. This does not change the metric values of the
	// rolled up parent (filtering a file out does not remove its runtime from
	// the directory)
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// The order in which to return the results
	Sort *SortBy `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	// Metrics to fetch.
	// This is required.  If no metrics are specified an error is returned.
	Metrics []MetricType `protobuf:"varint,7,rep,packed,name=metrics,proto3,enum=test_resources.MetricType" json:"metrics,omitempty"`
}

func (x *FetchDirectoryMetricsRequest) Reset() {
	*x = FetchDirectoryMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDirectoryMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDirectoryMetricsRequest) ProtoMessage() {}

func (x *FetchDirectoryMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDirectoryMetricsRequest.ProtoReflect.Descriptor instead.
func (*FetchDirectoryMetricsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{11}
}

func (x *FetchDirectoryMetricsRequest) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *FetchDirectoryMetricsRequest) GetPeriod() Period {
	if x != nil {
		return x.Period
	}
	return Period_UNKNOWN_PERIOD
}

func (x *FetchDirectoryMetricsRequest) GetDates() []string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *FetchDirectoryMetricsRequest) GetParentIds() []string {
	if x != nil {
		return x.ParentIds
	}
	return nil
}

func (x *FetchDirectoryMetricsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FetchDirectoryMetricsRequest) GetSort() *SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *FetchDirectoryMetricsRequest) GetMetrics() []MetricType {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type FetchDirectoryMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An array of directories and files belonging to the requested parent
	// directory
	Nodes []*DirectoryNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *FetchDirectoryMetricsResponse) Reset() {
	*x = FetchDirectoryMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDirectoryMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDirectoryMetricsResponse) ProtoMessage() {}

func (x *FetchDirectoryMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDirectoryMetricsResponse.ProtoReflect.Descriptor instead.
func (*FetchDirectoryMetricsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{12}
}

func (x *FetchDirectoryMetricsResponse) GetNodes() []*DirectoryNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type DirectoryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full path name of the directory or file
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the node is a file or directory
	Type DirectoryNodeType `protobuf:"varint,2,opt,name=type,proto3,enum=test_resources.DirectoryNodeType" json:"type,omitempty"`
	// The display name of the node
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Rollup metrics for the directory node. This is a map of dates
	// (in YYYY-MM-DD format) to an array of measured metrics.
	Metrics map[string]*TestMetricsArray `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DirectoryNode) Reset() {
	*x = DirectoryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryNode) ProtoMessage() {}

func (x *DirectoryNode) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryNode.ProtoReflect.Descriptor instead.
func (*DirectoryNode) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP(), []int{13}
}

func (x *DirectoryNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DirectoryNode) GetType() DirectoryNodeType {
	if x != nil {
		return x.Type
	}
	return DirectoryNodeType_UNKNOWN_NODE_TYPE
}

func (x *DirectoryNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirectoryNode) GetMetrics() map[string]*TestMetricsArray {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_infra_appengine_chrome_test_health_api_service_proto protoreflect.FileDescriptor

var file_infra_appengine_chrome_test_health_api_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x17, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0x71, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x47, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x0f, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1, 0x02, 0x0a,
	0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x54, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x5c, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x95, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x55,
	0x4d, 0x5f, 0x52, 0x55, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4d, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x56, 0x47, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x56, 0x47, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x35, 0x30, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x39, 0x30, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x2a,
	0xc7, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x55,
	0x4e, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x55, 0x4d,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x56, 0x47, 0x5f,
	0x43, 0x4f, 0x52, 0x45, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x56, 0x47, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x35, 0x30, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x39, 0x30, 0x5f,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x2a, 0x3a, 0x0a, 0x06, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x47, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x32, 0xb2,
	0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2d, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_chrome_test_health_api_service_proto_rawDescOnce sync.Once
	file_infra_appengine_chrome_test_health_api_service_proto_rawDescData = file_infra_appengine_chrome_test_health_api_service_proto_rawDesc
)

func file_infra_appengine_chrome_test_health_api_service_proto_rawDescGZIP() []byte {
	file_infra_appengine_chrome_test_health_api_service_proto_rawDescOnce.Do(func() {
		file_infra_appengine_chrome_test_health_api_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_chrome_test_health_api_service_proto_rawDescData)
	})
	return file_infra_appengine_chrome_test_health_api_service_proto_rawDescData
}

var file_infra_appengine_chrome_test_health_api_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_infra_appengine_chrome_test_health_api_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_infra_appengine_chrome_test_health_api_service_proto_goTypes = []interface{}{
	(MetricType)(0),                       // 0: test_resources.MetricType
	(SortType)(0),                         // 1: test_resources.SortType
	(Period)(0),                           // 2: test_resources.Period
	(DirectoryNodeType)(0),                // 3: test_resources.DirectoryNodeType
	(*UpdateMetricsTableRequest)(nil),     // 4: test_resources.UpdateMetricsTableRequest
	(*UpdateMetricsTableResponse)(nil),    // 5: test_resources.UpdateMetricsTableResponse
	(*ListComponentsRequest)(nil),         // 6: test_resources.ListComponentsRequest
	(*ListComponentsResponse)(nil),        // 7: test_resources.ListComponentsResponse
	(*SortBy)(nil),                        // 8: test_resources.SortBy
	(*FetchTestMetricsRequest)(nil),       // 9: test_resources.FetchTestMetricsRequest
	(*FetchTestMetricsResponse)(nil),      // 10: test_resources.FetchTestMetricsResponse
	(*TestDateMetricData)(nil),            // 11: test_resources.TestDateMetricData
	(*TestVariantData)(nil),               // 12: test_resources.TestVariantData
	(*TestMetricsArray)(nil),              // 13: test_resources.TestMetricsArray
	(*TestMetricsData)(nil),               // 14: test_resources.TestMetricsData
	(*FetchDirectoryMetricsRequest)(nil),  // 15: test_resources.FetchDirectoryMetricsRequest
	(*FetchDirectoryMetricsResponse)(nil), // 16: test_resources.FetchDirectoryMetricsResponse
	(*DirectoryNode)(nil),                 // 17: test_resources.DirectoryNode
	nil,                                   // 18: test_resources.TestDateMetricData.MetricsEntry
	nil,                                   // 19: test_resources.TestVariantData.MetricsEntry
	nil,                                   // 20: test_resources.DirectoryNode.MetricsEntry
}
var file_infra_appengine_chrome_test_health_api_service_proto_depIdxs = []int32{
	1,  // 0: test_resources.SortBy.metric:type_name -> test_resources.SortType
	2,  // 1: test_resources.FetchTestMetricsRequest.period:type_name -> test_resources.Period
	0,  // 2: test_resources.FetchTestMetricsRequest.metrics:type_name -> test_resources.MetricType
	8,  // 3: test_resources.FetchTestMetricsRequest.sort:type_name -> test_resources.SortBy
	11, // 4: test_resources.FetchTestMetricsResponse.tests:type_name -> test_resources.TestDateMetricData
	18, // 5: test_resources.TestDateMetricData.metrics:type_name -> test_resources.TestDateMetricData.MetricsEntry
	12, // 6: test_resources.TestDateMetricData.variants:type_name -> test_resources.TestVariantData
	19, // 7: test_resources.TestVariantData.metrics:type_name -> test_resources.TestVariantData.MetricsEntry
	14, // 8: test_resources.TestMetricsArray.data:type_name -> test_resources.TestMetricsData
	0,  // 9: test_resources.TestMetricsData.metric_type:type_name -> test_resources.MetricType
	2,  // 10: test_resources.FetchDirectoryMetricsRequest.period:type_name -> test_resources.Period
	8,  // 11: test_resources.FetchDirectoryMetricsRequest.sort:type_name -> test_resources.SortBy
	0,  // 12: test_resources.FetchDirectoryMetricsRequest.metrics:type_name -> test_resources.MetricType
	17, // 13: test_resources.FetchDirectoryMetricsResponse.nodes:type_name -> test_resources.DirectoryNode
	3,  // 14: test_resources.DirectoryNode.type:type_name -> test_resources.DirectoryNodeType
	20, // 15: test_resources.DirectoryNode.metrics:type_name -> test_resources.DirectoryNode.MetricsEntry
	13, // 16: test_resources.TestDateMetricData.MetricsEntry.value:type_name -> test_resources.TestMetricsArray
	13, // 17: test_resources.TestVariantData.MetricsEntry.value:type_name -> test_resources.TestMetricsArray
	13, // 18: test_resources.DirectoryNode.MetricsEntry.value:type_name -> test_resources.TestMetricsArray
	4,  // 19: test_resources.Stats.UpdateMetricsTable:input_type -> test_resources.UpdateMetricsTableRequest
	6,  // 20: test_resources.Stats.ListComponents:input_type -> test_resources.ListComponentsRequest
	9,  // 21: test_resources.Stats.FetchTestMetrics:input_type -> test_resources.FetchTestMetricsRequest
	15, // 22: test_resources.Stats.FetchDirectoryMetrics:input_type -> test_resources.FetchDirectoryMetricsRequest
	5,  // 23: test_resources.Stats.UpdateMetricsTable:output_type -> test_resources.UpdateMetricsTableResponse
	7,  // 24: test_resources.Stats.ListComponents:output_type -> test_resources.ListComponentsResponse
	10, // 25: test_resources.Stats.FetchTestMetrics:output_type -> test_resources.FetchTestMetricsResponse
	16, // 26: test_resources.Stats.FetchDirectoryMetrics:output_type -> test_resources.FetchDirectoryMetricsResponse
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_infra_appengine_chrome_test_health_api_service_proto_init() }
func file_infra_appengine_chrome_test_health_api_service_proto_init() {
	if File_infra_appengine_chrome_test_health_api_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetricsTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetricsTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComponentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComponentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTestMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTestMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDateMetricData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMetricsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMetricsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDirectoryMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDirectoryMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_chrome_test_health_api_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_chrome_test_health_api_service_proto_goTypes,
		DependencyIndexes: file_infra_appengine_chrome_test_health_api_service_proto_depIdxs,
		EnumInfos:         file_infra_appengine_chrome_test_health_api_service_proto_enumTypes,
		MessageInfos:      file_infra_appengine_chrome_test_health_api_service_proto_msgTypes,
	}.Build()
	File_infra_appengine_chrome_test_health_api_service_proto = out.File
	file_infra_appengine_chrome_test_health_api_service_proto_rawDesc = nil
	file_infra_appengine_chrome_test_health_api_service_proto_goTypes = nil
	file_infra_appengine_chrome_test_health_api_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatsClient interface {
	// Updates metrics for the given time period. This will be used for
	// backfilling when the cron job wasn't run
	UpdateMetricsTable(ctx context.Context, in *UpdateMetricsTableRequest, opts ...grpc.CallOption) (*UpdateMetricsTableResponse, error)
	// Gets all the components as well as a list of all the components the user's
	// team is responsible for
	ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error)
	// Gets information about a test. This includes all the variants of that test
	FetchTestMetrics(ctx context.Context, in *FetchTestMetricsRequest, opts ...grpc.CallOption) (*FetchTestMetricsResponse, error)
	// Gets information about a file or directory.
	FetchDirectoryMetrics(ctx context.Context, in *FetchDirectoryMetricsRequest, opts ...grpc.CallOption) (*FetchDirectoryMetricsResponse, error)
}
type statsPRPCClient struct {
	client *prpc.Client
}

func NewStatsPRPCClient(client *prpc.Client) StatsClient {
	return &statsPRPCClient{client}
}

func (c *statsPRPCClient) UpdateMetricsTable(ctx context.Context, in *UpdateMetricsTableRequest, opts ...grpc.CallOption) (*UpdateMetricsTableResponse, error) {
	out := new(UpdateMetricsTableResponse)
	err := c.client.Call(ctx, "test_resources.Stats", "UpdateMetricsTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsPRPCClient) ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error) {
	out := new(ListComponentsResponse)
	err := c.client.Call(ctx, "test_resources.Stats", "ListComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsPRPCClient) FetchTestMetrics(ctx context.Context, in *FetchTestMetricsRequest, opts ...grpc.CallOption) (*FetchTestMetricsResponse, error) {
	out := new(FetchTestMetricsResponse)
	err := c.client.Call(ctx, "test_resources.Stats", "FetchTestMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsPRPCClient) FetchDirectoryMetrics(ctx context.Context, in *FetchDirectoryMetricsRequest, opts ...grpc.CallOption) (*FetchDirectoryMetricsResponse, error) {
	out := new(FetchDirectoryMetricsResponse)
	err := c.client.Call(ctx, "test_resources.Stats", "FetchDirectoryMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) UpdateMetricsTable(ctx context.Context, in *UpdateMetricsTableRequest, opts ...grpc.CallOption) (*UpdateMetricsTableResponse, error) {
	out := new(UpdateMetricsTableResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Stats/UpdateMetricsTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ListComponents(ctx context.Context, in *ListComponentsRequest, opts ...grpc.CallOption) (*ListComponentsResponse, error) {
	out := new(ListComponentsResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Stats/ListComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) FetchTestMetrics(ctx context.Context, in *FetchTestMetricsRequest, opts ...grpc.CallOption) (*FetchTestMetricsResponse, error) {
	out := new(FetchTestMetricsResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Stats/FetchTestMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) FetchDirectoryMetrics(ctx context.Context, in *FetchDirectoryMetricsRequest, opts ...grpc.CallOption) (*FetchDirectoryMetricsResponse, error) {
	out := new(FetchDirectoryMetricsResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Stats/FetchDirectoryMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServer is the server API for Stats service.
type StatsServer interface {
	// Updates metrics for the given time period. This will be used for
	// backfilling when the cron job wasn't run
	UpdateMetricsTable(context.Context, *UpdateMetricsTableRequest) (*UpdateMetricsTableResponse, error)
	// Gets all the components as well as a list of all the components the user's
	// team is responsible for
	ListComponents(context.Context, *ListComponentsRequest) (*ListComponentsResponse, error)
	// Gets information about a test. This includes all the variants of that test
	FetchTestMetrics(context.Context, *FetchTestMetricsRequest) (*FetchTestMetricsResponse, error)
	// Gets information about a file or directory.
	FetchDirectoryMetrics(context.Context, *FetchDirectoryMetricsRequest) (*FetchDirectoryMetricsResponse, error)
}

// UnimplementedStatsServer can be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (*UnimplementedStatsServer) UpdateMetricsTable(context.Context, *UpdateMetricsTableRequest) (*UpdateMetricsTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsTable not implemented")
}
func (*UnimplementedStatsServer) ListComponents(context.Context, *ListComponentsRequest) (*ListComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponents not implemented")
}
func (*UnimplementedStatsServer) FetchTestMetrics(context.Context, *FetchTestMetricsRequest) (*FetchTestMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTestMetrics not implemented")
}
func (*UnimplementedStatsServer) FetchDirectoryMetrics(context.Context, *FetchDirectoryMetricsRequest) (*FetchDirectoryMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDirectoryMetrics not implemented")
}

func RegisterStatsServer(s prpc.Registrar, srv StatsServer) {
	s.RegisterService(&_Stats_serviceDesc, srv)
}

func _Stats_UpdateMetricsTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricsTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).UpdateMetricsTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Stats/UpdateMetricsTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).UpdateMetricsTable(ctx, req.(*UpdateMetricsTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ListComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ListComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Stats/ListComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ListComponents(ctx, req.(*ListComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_FetchTestMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTestMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).FetchTestMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Stats/FetchTestMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).FetchTestMetrics(ctx, req.(*FetchTestMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_FetchDirectoryMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDirectoryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).FetchDirectoryMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Stats/FetchDirectoryMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).FetchDirectoryMetrics(ctx, req.(*FetchDirectoryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test_resources.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetricsTable",
			Handler:    _Stats_UpdateMetricsTable_Handler,
		},
		{
			MethodName: "ListComponents",
			Handler:    _Stats_ListComponents_Handler,
		},
		{
			MethodName: "FetchTestMetrics",
			Handler:    _Stats_FetchTestMetrics_Handler,
		},
		{
			MethodName: "FetchDirectoryMetrics",
			Handler:    _Stats_FetchDirectoryMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/chrome-test-health/api/service.proto",
}
