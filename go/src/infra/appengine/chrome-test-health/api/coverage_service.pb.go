// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: infra/appengine/chrome-test-health/api/coverage_service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetProjectDefaultConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project for which the default configuration will be fetched.
	// For example: chromium. Each Project is unique within a LUCI deployment.
	// Project is equivalent to Buildbucket's concept of a project
	// and requires regex match ^[a-z0-9-_]+$
	// See go.chromium.org/luci/buildbucket/proto/builder_common.proto for additional details.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectDefaultConfigRequest) Reset() {
	*x = GetProjectDefaultConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectDefaultConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectDefaultConfigRequest) ProtoMessage() {}

func (x *GetProjectDefaultConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectDefaultConfigRequest.ProtoReflect.Descriptor instead.
func (*GetProjectDefaultConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetProjectDefaultConfigRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type GetProjectDefaultConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The website host where the repo resides.
	// E.g: chromium.googlesource.com
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Platform over which project is built.
	// E.g: linux
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// Project is the git repository. E.g: chromium/src.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Ref is the git branch within the project. E.g: refs/heads/main:
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GetProjectDefaultConfigResponse) Reset() {
	*x = GetProjectDefaultConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectDefaultConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectDefaultConfigResponse) ProtoMessage() {}

func (x *GetProjectDefaultConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectDefaultConfigResponse.ProtoReflect.Descriptor instead.
func (*GetProjectDefaultConfigResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetProjectDefaultConfigResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GetProjectDefaultConfigResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetProjectDefaultConfigResponse) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetProjectDefaultConfigResponse) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

var File_infra_appengine_chrome_test_health_api_coverage_service_proto protoreflect.FileDescriptor

var file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x7d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x32, 0x86, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescOnce sync.Once
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData = file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc
)

func file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP() []byte {
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescOnce.Do(func() {
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData)
	})
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData
}

var file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_infra_appengine_chrome_test_health_api_coverage_service_proto_goTypes = []interface{}{
	(*GetProjectDefaultConfigRequest)(nil),  // 0: test_resources.GetProjectDefaultConfigRequest
	(*GetProjectDefaultConfigResponse)(nil), // 1: test_resources.GetProjectDefaultConfigResponse
}
var file_infra_appengine_chrome_test_health_api_coverage_service_proto_depIdxs = []int32{
	0, // 0: test_resources.Coverage.GetProjectDefaultConfig:input_type -> test_resources.GetProjectDefaultConfigRequest
	1, // 1: test_resources.Coverage.GetProjectDefaultConfig:output_type -> test_resources.GetProjectDefaultConfigResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_infra_appengine_chrome_test_health_api_coverage_service_proto_init() }
func file_infra_appengine_chrome_test_health_api_coverage_service_proto_init() {
	if File_infra_appengine_chrome_test_health_api_coverage_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectDefaultConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectDefaultConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_chrome_test_health_api_coverage_service_proto_goTypes,
		DependencyIndexes: file_infra_appengine_chrome_test_health_api_coverage_service_proto_depIdxs,
		MessageInfos:      file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes,
	}.Build()
	File_infra_appengine_chrome_test_health_api_coverage_service_proto = out.File
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc = nil
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_goTypes = nil
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoverageClient is the client API for Coverage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoverageClient interface {
	// Gets the default configuration stored in the datastore
	// required to fetch Code Coverage statistics
	GetProjectDefaultConfig(ctx context.Context, in *GetProjectDefaultConfigRequest, opts ...grpc.CallOption) (*GetProjectDefaultConfigResponse, error)
}
type coveragePRPCClient struct {
	client *prpc.Client
}

func NewCoveragePRPCClient(client *prpc.Client) CoverageClient {
	return &coveragePRPCClient{client}
}

func (c *coveragePRPCClient) GetProjectDefaultConfig(ctx context.Context, in *GetProjectDefaultConfigRequest, opts ...grpc.CallOption) (*GetProjectDefaultConfigResponse, error) {
	out := new(GetProjectDefaultConfigResponse)
	err := c.client.Call(ctx, "test_resources.Coverage", "GetProjectDefaultConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type coverageClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverageClient(cc grpc.ClientConnInterface) CoverageClient {
	return &coverageClient{cc}
}

func (c *coverageClient) GetProjectDefaultConfig(ctx context.Context, in *GetProjectDefaultConfigRequest, opts ...grpc.CallOption) (*GetProjectDefaultConfigResponse, error) {
	out := new(GetProjectDefaultConfigResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Coverage/GetProjectDefaultConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoverageServer is the server API for Coverage service.
type CoverageServer interface {
	// Gets the default configuration stored in the datastore
	// required to fetch Code Coverage statistics
	GetProjectDefaultConfig(context.Context, *GetProjectDefaultConfigRequest) (*GetProjectDefaultConfigResponse, error)
}

// UnimplementedCoverageServer can be embedded to have forward compatible implementations.
type UnimplementedCoverageServer struct {
}

func (*UnimplementedCoverageServer) GetProjectDefaultConfig(context.Context, *GetProjectDefaultConfigRequest) (*GetProjectDefaultConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDefaultConfig not implemented")
}

func RegisterCoverageServer(s prpc.Registrar, srv CoverageServer) {
	s.RegisterService(&_Coverage_serviceDesc, srv)
}

func _Coverage_GetProjectDefaultConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDefaultConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServer).GetProjectDefaultConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Coverage/GetProjectDefaultConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServer).GetProjectDefaultConfig(ctx, req.(*GetProjectDefaultConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coverage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test_resources.Coverage",
	HandlerType: (*CoverageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectDefaultConfig",
			Handler:    _Coverage_GetProjectDefaultConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/chrome-test-health/api/coverage_service.proto",
}
