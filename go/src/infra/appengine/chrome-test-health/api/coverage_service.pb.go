// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: infra/appengine/chrome-test-health/api/coverage_service.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BuilderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Platform name. For eg: mac, linux, etc.
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Bucket name, e.g. "try". Unique within the project.
	// Regex: ^[a-z0-9\-_.]{1,100}$
	// Together with project, defines an ACL.
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Builder name, e.g. "linux-rel". Unique within the bucket.
	// Regex: ^[a-zA-Z0-9\-_.\(\) ]{1,128}$
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	Builder string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	// Display name for a platform. For eg: MacOS(C/C++/ObjC)
	// is the UI name for platform mac.
	UiName string `protobuf:"bytes,4,opt,name=ui_name,json=uiName,proto3" json:"ui_name,omitempty"`
	// Latest git commit available for which
	// a coverage report exists for the platform.
	LatestRevision string `protobuf:"bytes,5,opt,name=latest_revision,json=latestRevision,proto3" json:"latest_revision,omitempty"`
}

func (x *BuilderConfig) Reset() {
	*x = BuilderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuilderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuilderConfig) ProtoMessage() {}

func (x *BuilderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuilderConfig.ProtoReflect.Descriptor instead.
func (*BuilderConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{0}
}

func (x *BuilderConfig) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *BuilderConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BuilderConfig) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

func (x *BuilderConfig) GetUiName() string {
	if x != nil {
		return x.UiName
	}
	return ""
}

func (x *BuilderConfig) GetLatestRevision() string {
	if x != nil {
		return x.LatestRevision
	}
	return ""
}

type GetProjectDefaultConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Luci project for which the default configuration will be fetched.
	// For example: chromium. Each luci project is unique within a LUCI deployment.
	// Luci project is equivalent to Buildbucket's concept of a project
	// and requires regex match ^[a-z0-9-_]+$
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	LuciProject string `protobuf:"bytes,1,opt,name=luci_project,json=luciProject,proto3" json:"luci_project,omitempty"`
}

func (x *GetProjectDefaultConfigRequest) Reset() {
	*x = GetProjectDefaultConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectDefaultConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectDefaultConfigRequest) ProtoMessage() {}

func (x *GetProjectDefaultConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectDefaultConfigRequest.ProtoReflect.Descriptor instead.
func (*GetProjectDefaultConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetProjectDefaultConfigRequest) GetLuciProject() string {
	if x != nil {
		return x.LuciProject
	}
	return ""
}

// Default Configuration values for the specified project
// as stored in FinditConfig entity.
type GetProjectDefaultConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The website host where the repo resides.
	// E.g: chromium.googlesource.com
	GitilesHost string `protobuf:"bytes,1,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// Gitiles Project is the git repository. E.g: chromium/src.
	GitilesProject string `protobuf:"bytes,2,opt,name=gitiles_project,json=gitilesProject,proto3" json:"gitiles_project,omitempty"`
	// Gitiles Ref is the git branch within the project. E.g: refs/heads/main:
	GitilesRef string `protobuf:"bytes,3,opt,name=gitiles_ref,json=gitilesRef,proto3" json:"gitiles_ref,omitempty"`
	// List of builder configs for which a coverage repository
	// exists.
	BuilderConfig []*BuilderConfig `protobuf:"bytes,4,rep,name=builder_config,json=builderConfig,proto3" json:"builder_config,omitempty"`
}

func (x *GetProjectDefaultConfigResponse) Reset() {
	*x = GetProjectDefaultConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectDefaultConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectDefaultConfigResponse) ProtoMessage() {}

func (x *GetProjectDefaultConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectDefaultConfigResponse.ProtoReflect.Descriptor instead.
func (*GetProjectDefaultConfigResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectDefaultConfigResponse) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *GetProjectDefaultConfigResponse) GetGitilesProject() string {
	if x != nil {
		return x.GitilesProject
	}
	return ""
}

func (x *GetProjectDefaultConfigResponse) GetGitilesRef() string {
	if x != nil {
		return x.GitilesRef
	}
	return ""
}

func (x *GetProjectDefaultConfigResponse) GetBuilderConfig() []*BuilderConfig {
	if x != nil {
		return x.BuilderConfig
	}
	return nil
}

type GetCoverageSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Gitiles hostname, e.g. "chromium.googlesource.com"
	GitilesHost string `protobuf:"bytes,1,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// The Gitiles project name, e.g. "chromium/src"
	GitilesProject string `protobuf:"bytes,2,opt,name=gitiles_project,json=gitilesProject,proto3" json:"gitiles_project,omitempty"`
	// The Gitiles ref, e.g. "refs/heads/main"
	GitilesRef string `protobuf:"bytes,3,opt,name=gitiles_ref,json=gitilesRef,proto3" json:"gitiles_ref,omitempty"`
	// The commit hash of the revision
	GitilesRevision string `protobuf:"bytes,4,opt,name=gitiles_revision,json=gitilesRevision,proto3" json:"gitiles_revision,omitempty"`
	// Source path relative to the project root.
	// E.g: // or /media/cast/net/rtp/frame_buffer.cc.
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// List of monorail components to fetch the coverage summary
	// for.
	// Note that either path or components must be specified to
	// fetch the summary.
	Components []string `protobuf:"bytes,6,rep,name=components,proto3" json:"components,omitempty"`
	// Flag to fetch coverage results for unit tests only.
	// Defaults to False, which returns all coverage results.
	UnitTestsOnly bool `protobuf:"varint,7,opt,name=unit_tests_only,json=unitTestsOnly,proto3" json:"unit_tests_only,omitempty"`
	// Bucket name, e.g. "try". Unique within the project.
	// Regex: ^[a-z0-9\-_.]{1,100}$
	// Together with project, defines an ACL.
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	Bucket string `protobuf:"bytes,8,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Builder name, e.g. "linux-rel". Unique within the bucket.
	// Regex: ^[a-zA-Z0-9\-_.\(\) ]{1,128}$
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	Builder string `protobuf:"bytes,9,opt,name=builder,proto3" json:"builder,omitempty"`
}

func (x *GetCoverageSummaryRequest) Reset() {
	*x = GetCoverageSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoverageSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverageSummaryRequest) ProtoMessage() {}

func (x *GetCoverageSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverageSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetCoverageSummaryRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetCoverageSummaryRequest) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *GetCoverageSummaryRequest) GetGitilesProject() string {
	if x != nil {
		return x.GitilesProject
	}
	return ""
}

func (x *GetCoverageSummaryRequest) GetGitilesRef() string {
	if x != nil {
		return x.GitilesRef
	}
	return ""
}

func (x *GetCoverageSummaryRequest) GetGitilesRevision() string {
	if x != nil {
		return x.GitilesRevision
	}
	return ""
}

func (x *GetCoverageSummaryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetCoverageSummaryRequest) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *GetCoverageSummaryRequest) GetUnitTestsOnly() bool {
	if x != nil {
		return x.UnitTestsOnly
	}
	return false
}

func (x *GetCoverageSummaryRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GetCoverageSummaryRequest) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

// GetCoverageSummaryResponse returns the code coverage summary.
// Note that for this API if a dir path is specified through the path
// req param then the response will be an array of length one
// specifying coverage stats for that dir path.
// However, if a list of monorail components are specified through the
// components param them the summary will have an array with each entry
// having the summary stats for each component.
type GetCoverageSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code Coverage summary containing lines/percentage of code covered.
	Summary []*structpb.Struct `protobuf:"bytes,1,rep,name=summary,proto3" json:"summary,omitempty"`
}

func (x *GetCoverageSummaryResponse) Reset() {
	*x = GetCoverageSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoverageSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverageSummaryResponse) ProtoMessage() {}

func (x *GetCoverageSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverageSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetCoverageSummaryResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetCoverageSummaryResponse) GetSummary() []*structpb.Struct {
	if x != nil {
		return x.Summary
	}
	return nil
}

type GetAbsoluteCoverageDataOneYearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of source paths relative to the project root.
	// E.g: [//, /media/cast/net/rtp/frame_buffer.cc]
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	// List of Monorail components to fetch the coverage summary for.
	// Note that either path or components must be specified to fetch the summary.
	Components []string `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
	// Flag to fetch coverage results for unit tests only.
	// Defaults to False, which returns all coverage results.
	UnitTestsOnly bool `protobuf:"varint,3,opt,name=unit_tests_only,json=unitTestsOnly,proto3" json:"unit_tests_only,omitempty"`
	// Bucket name, e.g. "try". Unique within the project.
	// Regex: ^[a-z0-9\-_.]{1,100}$
	// Together with project, defines an ACL.
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Builder name, e.g. "linux-rel". Unique within the bucket.
	// Regex: ^[a-zA-Z0-9\-_.\(\) ]{1,128}$
	// See https://chromium.googlesource.com/infra/luci/luci-go/+/main/buildbucket/proto/builder_common.proto for additional details.
	Builder string `protobuf:"bytes,5,opt,name=builder,proto3" json:"builder,omitempty"`
}

func (x *GetAbsoluteCoverageDataOneYearRequest) Reset() {
	*x = GetAbsoluteCoverageDataOneYearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAbsoluteCoverageDataOneYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbsoluteCoverageDataOneYearRequest) ProtoMessage() {}

func (x *GetAbsoluteCoverageDataOneYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbsoluteCoverageDataOneYearRequest.ProtoReflect.Descriptor instead.
func (*GetAbsoluteCoverageDataOneYearRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetAbsoluteCoverageDataOneYearRequest) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *GetAbsoluteCoverageDataOneYearRequest) GetComponents() []string {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *GetAbsoluteCoverageDataOneYearRequest) GetUnitTestsOnly() bool {
	if x != nil {
		return x.UnitTestsOnly
	}
	return false
}

func (x *GetAbsoluteCoverageDataOneYearRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GetAbsoluteCoverageDataOneYearRequest) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

// AbsoluteCoverage signifies absolute coverage for a given date.
type AbsoluteCoverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date is of the format "YYYY-MM-DD"
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Number of lines that are covered
	LinesCovered int64 `protobuf:"varint,2,opt,name=lines_covered,json=linesCovered,proto3" json:"lines_covered,omitempty"`
	// Total number of lines
	TotalLines int64 `protobuf:"varint,3,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"`
}

func (x *AbsoluteCoverage) Reset() {
	*x = AbsoluteCoverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsoluteCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteCoverage) ProtoMessage() {}

func (x *AbsoluteCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteCoverage.ProtoReflect.Descriptor instead.
func (*AbsoluteCoverage) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{6}
}

func (x *AbsoluteCoverage) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AbsoluteCoverage) GetLinesCovered() int64 {
	if x != nil {
		return x.LinesCovered
	}
	return 0
}

func (x *AbsoluteCoverage) GetTotalLines() int64 {
	if x != nil {
		return x.TotalLines
	}
	return 0
}

// GetAbsoluteCoverageDataOneYearResponse returns the absolute coverage trends.
type GetAbsoluteCoverageDataOneYearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each item of this list signifies Absolute Coverage percentage for a
	// particular date.
	Reports []*AbsoluteCoverage `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *GetAbsoluteCoverageDataOneYearResponse) Reset() {
	*x = GetAbsoluteCoverageDataOneYearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAbsoluteCoverageDataOneYearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbsoluteCoverageDataOneYearResponse) ProtoMessage() {}

func (x *GetAbsoluteCoverageDataOneYearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbsoluteCoverageDataOneYearResponse.ProtoReflect.Descriptor instead.
func (*GetAbsoluteCoverageDataOneYearResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetAbsoluteCoverageDataOneYearResponse) GetReports() []*AbsoluteCoverage {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetIncrementalCoverageDataOneYearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of source paths relative to the project root.
	// E.g: [//, //media/cast/net/rtp/frame_buffer.cc]
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *GetIncrementalCoverageDataOneYearRequest) Reset() {
	*x = GetIncrementalCoverageDataOneYearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncrementalCoverageDataOneYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncrementalCoverageDataOneYearRequest) ProtoMessage() {}

func (x *GetIncrementalCoverageDataOneYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncrementalCoverageDataOneYearRequest.ProtoReflect.Descriptor instead.
func (*GetIncrementalCoverageDataOneYearRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetIncrementalCoverageDataOneYearRequest) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

// IncrementalCoverage captures the code coverage rate from CLs for a given set
// of paths. On a given day, multiple changes may edit the same file, resulting
// in several incremental reports for that file path. Each change may also
// generate multiple reports. IncrementalCoverage reports the sum of unique
// reports per CL per day. The latest report (and thus data from the latest patchset)
// is used per CL. For example, if we have a file //test.cc modified
// by CL1 and CL2, and CL2 has PS1, PS2 and PS3, IncrementalCoverage is the
// aggregate of the reports generated by CL1 PS1 + CL2 PS3.
type IncrementalCoverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date is of the format "YYYY-MM-DD"
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// file_changes_covered field signifies the number of file changes that are
	// incrementally covered on the date. In order for a file to be counted as
	// incrementally covered, the incremental coverage on it must cross a
	// threshold of 70%. This 70% number is what we officially use to block CLs
	// if below this threshold. Take a look here:
	// https://source.chromium.org/chromium/infra/infra/+/main:appengine/findit/handlers/code_coverage/process_coverage.py;l=47?q=appengine%2Ffindit%2Fhandlers%2Fcode_coverage%2Fprocess_coverage.py&ss=chromium%2Finfra%2Finfra
	FileChangesCovered int64 `protobuf:"varint,2,opt,name=file_changes_covered,json=fileChangesCovered,proto3" json:"file_changes_covered,omitempty"`
	// Total number of file changes made on the date
	TotalFileChanges int64 `protobuf:"varint,3,opt,name=total_file_changes,json=totalFileChanges,proto3" json:"total_file_changes,omitempty"`
}

func (x *IncrementalCoverage) Reset() {
	*x = IncrementalCoverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementalCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementalCoverage) ProtoMessage() {}

func (x *IncrementalCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementalCoverage.ProtoReflect.Descriptor instead.
func (*IncrementalCoverage) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{9}
}

func (x *IncrementalCoverage) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *IncrementalCoverage) GetFileChangesCovered() int64 {
	if x != nil {
		return x.FileChangesCovered
	}
	return 0
}

func (x *IncrementalCoverage) GetTotalFileChanges() int64 {
	if x != nil {
		return x.TotalFileChanges
	}
	return 0
}

// GetIncrementalCoverageDataOneYearResponse returns the incremental coverage data.
type GetIncrementalCoverageDataOneYearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each item of this list signifies percentage of file changes which are
	// incrementally covered for a particular date.
	Reports []*IncrementalCoverage `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *GetIncrementalCoverageDataOneYearResponse) Reset() {
	*x = GetIncrementalCoverageDataOneYearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncrementalCoverageDataOneYearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncrementalCoverageDataOneYearResponse) ProtoMessage() {}

func (x *GetIncrementalCoverageDataOneYearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncrementalCoverageDataOneYearResponse.ProtoReflect.Descriptor instead.
func (*GetIncrementalCoverageDataOneYearResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetIncrementalCoverageDataOneYearResponse) GetReports() []*IncrementalCoverage {
	if x != nil {
		return x.Reports
	}
	return nil
}

var File_infra_appengine_chrome_test_health_api_coverage_service_proto protoreflect.FileDescriptor

var file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x6c, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xd4, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x12, 0x44, 0x0a,
	0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x12, 0x29,
	0x0a, 0x10, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x22, 0x6c, 0x0a, 0x10, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x22, 0x64, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x32, 0xa0, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x7a, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x29, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x35, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x38,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x2d, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescOnce sync.Once
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData = file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc
)

func file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescGZIP() []byte {
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescOnce.Do(func() {
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData)
	})
	return file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDescData
}

var file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_infra_appengine_chrome_test_health_api_coverage_service_proto_goTypes = []interface{}{
	(*BuilderConfig)(nil),                             // 0: test_resources.BuilderConfig
	(*GetProjectDefaultConfigRequest)(nil),            // 1: test_resources.GetProjectDefaultConfigRequest
	(*GetProjectDefaultConfigResponse)(nil),           // 2: test_resources.GetProjectDefaultConfigResponse
	(*GetCoverageSummaryRequest)(nil),                 // 3: test_resources.GetCoverageSummaryRequest
	(*GetCoverageSummaryResponse)(nil),                // 4: test_resources.GetCoverageSummaryResponse
	(*GetAbsoluteCoverageDataOneYearRequest)(nil),     // 5: test_resources.GetAbsoluteCoverageDataOneYearRequest
	(*AbsoluteCoverage)(nil),                          // 6: test_resources.AbsoluteCoverage
	(*GetAbsoluteCoverageDataOneYearResponse)(nil),    // 7: test_resources.GetAbsoluteCoverageDataOneYearResponse
	(*GetIncrementalCoverageDataOneYearRequest)(nil),  // 8: test_resources.GetIncrementalCoverageDataOneYearRequest
	(*IncrementalCoverage)(nil),                       // 9: test_resources.IncrementalCoverage
	(*GetIncrementalCoverageDataOneYearResponse)(nil), // 10: test_resources.GetIncrementalCoverageDataOneYearResponse
	(*structpb.Struct)(nil),                           // 11: google.protobuf.Struct
}
var file_infra_appengine_chrome_test_health_api_coverage_service_proto_depIdxs = []int32{
	0,  // 0: test_resources.GetProjectDefaultConfigResponse.builder_config:type_name -> test_resources.BuilderConfig
	11, // 1: test_resources.GetCoverageSummaryResponse.summary:type_name -> google.protobuf.Struct
	6,  // 2: test_resources.GetAbsoluteCoverageDataOneYearResponse.reports:type_name -> test_resources.AbsoluteCoverage
	9,  // 3: test_resources.GetIncrementalCoverageDataOneYearResponse.reports:type_name -> test_resources.IncrementalCoverage
	1,  // 4: test_resources.Coverage.GetProjectDefaultConfig:input_type -> test_resources.GetProjectDefaultConfigRequest
	3,  // 5: test_resources.Coverage.GetCoverageSummary:input_type -> test_resources.GetCoverageSummaryRequest
	5,  // 6: test_resources.Coverage.GetAbsoluteCoverageDataOneYear:input_type -> test_resources.GetAbsoluteCoverageDataOneYearRequest
	8,  // 7: test_resources.Coverage.GetIncrementalCoverageDataOneYear:input_type -> test_resources.GetIncrementalCoverageDataOneYearRequest
	2,  // 8: test_resources.Coverage.GetProjectDefaultConfig:output_type -> test_resources.GetProjectDefaultConfigResponse
	4,  // 9: test_resources.Coverage.GetCoverageSummary:output_type -> test_resources.GetCoverageSummaryResponse
	7,  // 10: test_resources.Coverage.GetAbsoluteCoverageDataOneYear:output_type -> test_resources.GetAbsoluteCoverageDataOneYearResponse
	10, // 11: test_resources.Coverage.GetIncrementalCoverageDataOneYear:output_type -> test_resources.GetIncrementalCoverageDataOneYearResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_infra_appengine_chrome_test_health_api_coverage_service_proto_init() }
func file_infra_appengine_chrome_test_health_api_coverage_service_proto_init() {
	if File_infra_appengine_chrome_test_health_api_coverage_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuilderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectDefaultConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectDefaultConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoverageSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoverageSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAbsoluteCoverageDataOneYearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsoluteCoverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAbsoluteCoverageDataOneYearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIncrementalCoverageDataOneYearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementalCoverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIncrementalCoverageDataOneYearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_chrome_test_health_api_coverage_service_proto_goTypes,
		DependencyIndexes: file_infra_appengine_chrome_test_health_api_coverage_service_proto_depIdxs,
		MessageInfos:      file_infra_appengine_chrome_test_health_api_coverage_service_proto_msgTypes,
	}.Build()
	File_infra_appengine_chrome_test_health_api_coverage_service_proto = out.File
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_rawDesc = nil
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_goTypes = nil
	file_infra_appengine_chrome_test_health_api_coverage_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoverageClient is the client API for Coverage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoverageClient interface {
	// GetProjectDefaultConfig gets the default configuration stored in the datastore
	// required to fetch Code Coverage statistics.
	GetProjectDefaultConfig(ctx context.Context, in *GetProjectDefaultConfigRequest, opts ...grpc.CallOption) (*GetProjectDefaultConfigResponse, error)
	// GetCoverageSummary takes in the config fetched using the
	// GetProjectDefaultConfig rpc call to get the code coverage
	// lines/percentages along with the directory structure of the project.
	GetCoverageSummary(ctx context.Context, in *GetCoverageSummaryRequest, opts ...grpc.CallOption) (*GetCoverageSummaryResponse, error)
	// GetAbsoluteCoverageDataOneYear returns absolute coverage numbers for the last
	// 365 days.
	GetAbsoluteCoverageDataOneYear(ctx context.Context, in *GetAbsoluteCoverageDataOneYearRequest, opts ...grpc.CallOption) (*GetAbsoluteCoverageDataOneYearResponse, error)
	// GetIncrementalCoverageDataOneYear returns incremental coverage numbers for the last
	// 365 days.
	GetIncrementalCoverageDataOneYear(ctx context.Context, in *GetIncrementalCoverageDataOneYearRequest, opts ...grpc.CallOption) (*GetIncrementalCoverageDataOneYearResponse, error)
}
type coveragePRPCClient struct {
	client *prpc.Client
}

func NewCoveragePRPCClient(client *prpc.Client) CoverageClient {
	return &coveragePRPCClient{client}
}

func (c *coveragePRPCClient) GetProjectDefaultConfig(ctx context.Context, in *GetProjectDefaultConfigRequest, opts ...grpc.CallOption) (*GetProjectDefaultConfigResponse, error) {
	out := new(GetProjectDefaultConfigResponse)
	err := c.client.Call(ctx, "test_resources.Coverage", "GetProjectDefaultConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coveragePRPCClient) GetCoverageSummary(ctx context.Context, in *GetCoverageSummaryRequest, opts ...grpc.CallOption) (*GetCoverageSummaryResponse, error) {
	out := new(GetCoverageSummaryResponse)
	err := c.client.Call(ctx, "test_resources.Coverage", "GetCoverageSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coveragePRPCClient) GetAbsoluteCoverageDataOneYear(ctx context.Context, in *GetAbsoluteCoverageDataOneYearRequest, opts ...grpc.CallOption) (*GetAbsoluteCoverageDataOneYearResponse, error) {
	out := new(GetAbsoluteCoverageDataOneYearResponse)
	err := c.client.Call(ctx, "test_resources.Coverage", "GetAbsoluteCoverageDataOneYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coveragePRPCClient) GetIncrementalCoverageDataOneYear(ctx context.Context, in *GetIncrementalCoverageDataOneYearRequest, opts ...grpc.CallOption) (*GetIncrementalCoverageDataOneYearResponse, error) {
	out := new(GetIncrementalCoverageDataOneYearResponse)
	err := c.client.Call(ctx, "test_resources.Coverage", "GetIncrementalCoverageDataOneYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type coverageClient struct {
	cc grpc.ClientConnInterface
}

func NewCoverageClient(cc grpc.ClientConnInterface) CoverageClient {
	return &coverageClient{cc}
}

func (c *coverageClient) GetProjectDefaultConfig(ctx context.Context, in *GetProjectDefaultConfigRequest, opts ...grpc.CallOption) (*GetProjectDefaultConfigResponse, error) {
	out := new(GetProjectDefaultConfigResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Coverage/GetProjectDefaultConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverageClient) GetCoverageSummary(ctx context.Context, in *GetCoverageSummaryRequest, opts ...grpc.CallOption) (*GetCoverageSummaryResponse, error) {
	out := new(GetCoverageSummaryResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Coverage/GetCoverageSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverageClient) GetAbsoluteCoverageDataOneYear(ctx context.Context, in *GetAbsoluteCoverageDataOneYearRequest, opts ...grpc.CallOption) (*GetAbsoluteCoverageDataOneYearResponse, error) {
	out := new(GetAbsoluteCoverageDataOneYearResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Coverage/GetAbsoluteCoverageDataOneYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coverageClient) GetIncrementalCoverageDataOneYear(ctx context.Context, in *GetIncrementalCoverageDataOneYearRequest, opts ...grpc.CallOption) (*GetIncrementalCoverageDataOneYearResponse, error) {
	out := new(GetIncrementalCoverageDataOneYearResponse)
	err := c.cc.Invoke(ctx, "/test_resources.Coverage/GetIncrementalCoverageDataOneYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoverageServer is the server API for Coverage service.
type CoverageServer interface {
	// GetProjectDefaultConfig gets the default configuration stored in the datastore
	// required to fetch Code Coverage statistics.
	GetProjectDefaultConfig(context.Context, *GetProjectDefaultConfigRequest) (*GetProjectDefaultConfigResponse, error)
	// GetCoverageSummary takes in the config fetched using the
	// GetProjectDefaultConfig rpc call to get the code coverage
	// lines/percentages along with the directory structure of the project.
	GetCoverageSummary(context.Context, *GetCoverageSummaryRequest) (*GetCoverageSummaryResponse, error)
	// GetAbsoluteCoverageDataOneYear returns absolute coverage numbers for the last
	// 365 days.
	GetAbsoluteCoverageDataOneYear(context.Context, *GetAbsoluteCoverageDataOneYearRequest) (*GetAbsoluteCoverageDataOneYearResponse, error)
	// GetIncrementalCoverageDataOneYear returns incremental coverage numbers for the last
	// 365 days.
	GetIncrementalCoverageDataOneYear(context.Context, *GetIncrementalCoverageDataOneYearRequest) (*GetIncrementalCoverageDataOneYearResponse, error)
}

// UnimplementedCoverageServer can be embedded to have forward compatible implementations.
type UnimplementedCoverageServer struct {
}

func (*UnimplementedCoverageServer) GetProjectDefaultConfig(context.Context, *GetProjectDefaultConfigRequest) (*GetProjectDefaultConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDefaultConfig not implemented")
}
func (*UnimplementedCoverageServer) GetCoverageSummary(context.Context, *GetCoverageSummaryRequest) (*GetCoverageSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverageSummary not implemented")
}
func (*UnimplementedCoverageServer) GetAbsoluteCoverageDataOneYear(context.Context, *GetAbsoluteCoverageDataOneYearRequest) (*GetAbsoluteCoverageDataOneYearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbsoluteCoverageDataOneYear not implemented")
}
func (*UnimplementedCoverageServer) GetIncrementalCoverageDataOneYear(context.Context, *GetIncrementalCoverageDataOneYearRequest) (*GetIncrementalCoverageDataOneYearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncrementalCoverageDataOneYear not implemented")
}

func RegisterCoverageServer(s prpc.Registrar, srv CoverageServer) {
	s.RegisterService(&_Coverage_serviceDesc, srv)
}

func _Coverage_GetProjectDefaultConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDefaultConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServer).GetProjectDefaultConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Coverage/GetProjectDefaultConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServer).GetProjectDefaultConfig(ctx, req.(*GetProjectDefaultConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coverage_GetCoverageSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoverageSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServer).GetCoverageSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Coverage/GetCoverageSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServer).GetCoverageSummary(ctx, req.(*GetCoverageSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coverage_GetAbsoluteCoverageDataOneYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbsoluteCoverageDataOneYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServer).GetAbsoluteCoverageDataOneYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Coverage/GetAbsoluteCoverageDataOneYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServer).GetAbsoluteCoverageDataOneYear(ctx, req.(*GetAbsoluteCoverageDataOneYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coverage_GetIncrementalCoverageDataOneYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncrementalCoverageDataOneYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoverageServer).GetIncrementalCoverageDataOneYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_resources.Coverage/GetIncrementalCoverageDataOneYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoverageServer).GetIncrementalCoverageDataOneYear(ctx, req.(*GetIncrementalCoverageDataOneYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coverage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test_resources.Coverage",
	HandlerType: (*CoverageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectDefaultConfig",
			Handler:    _Coverage_GetProjectDefaultConfig_Handler,
		},
		{
			MethodName: "GetCoverageSummary",
			Handler:    _Coverage_GetCoverageSummary_Handler,
		},
		{
			MethodName: "GetAbsoluteCoverageDataOneYear",
			Handler:    _Coverage_GetAbsoluteCoverageDataOneYear_Handler,
		},
		{
			MethodName: "GetIncrementalCoverageDataOneYear",
			Handler:    _Coverage_GetIncrementalCoverageDataOneYear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/chrome-test-health/api/coverage_service.proto",
}
