// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/appengine/weetbix/proto/config/project_config.proto

package configpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProjectConfig is the project-specific configuration data for Weetbix.
type ProjectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The project metadata (eg. display name).
	ProjectMetadata *ProjectMetadata `protobuf:"bytes,6,opt,name=project_metadata,json=projectMetadata,proto3" json:"project_metadata,omitempty"`
	// The monorail configuration to use when filing bugs.
	Monorail *MonorailProject `protobuf:"bytes,1,opt,name=monorail,proto3" json:"monorail,omitempty"`
	// The threshold at which to file bugs.
	// If reason cluster's impact exceeds the given threshold,
	// a bug will be filed for it.
	// Alternatively, if test name cluster's impact exceeds 134% of the given
	// threshold, a bug will also be filed for it.
	//
	// Weetbix's bias towards reason clusters reflects the fact that bugs
	// filed for reasons should be better scoped and more actionable
	// (focus on one problem).
	BugFilingThreshold *ImpactThreshold `protobuf:"bytes,2,opt,name=bug_filing_threshold,json=bugFilingThreshold,proto3" json:"bug_filing_threshold,omitempty"`
	// Per realm configurations.
	Realms []*RealmConfig `protobuf:"bytes,3,rep,name=realms,proto3" json:"realms,omitempty"`
	// The last time this project configuration was updated.
	// Weetbix sets and stores this value internally. Do not set
	// in your project's configuration file, it will be ignored.
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Configuration for how to cluster test results.
	Clustering *Clustering `protobuf:"bytes,5,opt,name=clustering,proto3" json:"clustering,omitempty"`
}

func (x *ProjectConfig) Reset() {
	*x = ProjectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectConfig) ProtoMessage() {}

func (x *ProjectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectConfig.ProtoReflect.Descriptor instead.
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectConfig) GetProjectMetadata() *ProjectMetadata {
	if x != nil {
		return x.ProjectMetadata
	}
	return nil
}

func (x *ProjectConfig) GetMonorail() *MonorailProject {
	if x != nil {
		return x.Monorail
	}
	return nil
}

func (x *ProjectConfig) GetBugFilingThreshold() *ImpactThreshold {
	if x != nil {
		return x.BugFilingThreshold
	}
	return nil
}

func (x *ProjectConfig) GetRealms() []*RealmConfig {
	if x != nil {
		return x.Realms
	}
	return nil
}

func (x *ProjectConfig) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ProjectConfig) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

// ProjectMetadata provides data about the project that are mostly used in ui.
type ProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the preferred display name for the project in the UI.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ProjectMetadata) Reset() {
	*x = ProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMetadata) ProtoMessage() {}

func (x *ProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMetadata.ProtoReflect.Descriptor instead.
func (*ProjectMetadata) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectMetadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// MonorailProject describes the configuration to use when filing bugs
// into a given monorail project.
type MonorailProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The monorail project being described.
	// E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The field values to use when creating new bugs.
	// For example, on chromium issue tracker, there is a manadatory
	// issue type field (field 10), which must be set to "Bug".
	DefaultFieldValues []*MonorailFieldValue `protobuf:"bytes,2,rep,name=default_field_values,json=defaultFieldValues,proto3" json:"default_field_values,omitempty"`
	// The ID of the issue's priority field. You can find this by visiting
	// https://monorail-prod.appspot.com/p/<project>/adminLabels, scrolling
	// down to Custom fields and finding the ID of the field you wish to set.
	PriorityFieldId int64 `protobuf:"varint,3,opt,name=priority_field_id,json=priorityFieldId,proto3" json:"priority_field_id,omitempty"`
	// The possible bug priorities and their associated impact thresholds.
	// Priorities must be listed from highest (i.e. P0) to lowest (i.e. P3).
	// Higher priorities can only be reached if the thresholds for all lower
	// priorities are also met.
	// The impact thresholds for setting the lowest priority implicitly
	// identifies the bug closure threshold -- if no priority can be
	// matched, the bug is closed. Satisfying the threshold for filing bugs MUST
	// at least imply the threshold for the lowest priority, and MAY imply
	// the thresholds of higher priorities.
	Priorities []*MonorailPriority `protobuf:"bytes,4,rep,name=priorities,proto3" json:"priorities,omitempty"`
	// Controls the amount of hysteresis used in setting bug priorities.
	// Once a bug is assigned a given priority, its priority will only be
	// increased if it exceeds the next priority's thresholds by the
	// specified percentage margin, and decreased if the current priority's
	// thresholds exceed the bug's impact by the given percentage margin.
	//
	// A value of 100 indicates impact may be double the threshold for
	// the next highest priority value, (or half the threshold of the
	// current priority value,) before a bug's priority is increased
	// (or decreased).
	//
	// Valid values are from 0 (no hystersis) to 1,000 (10x hysteresis).
	PriorityHysteresisPercent int64 `protobuf:"varint,5,opt,name=priority_hysteresis_percent,json=priorityHysteresisPercent,proto3" json:"priority_hysteresis_percent,omitempty"`
	// The prefix that should appear when displaying bugs from the
	// given bug tracking system. E.g. "crbug.com" or "fxbug.dev".
	// If no prefix is specified, only the bug number will appear.
	// Otherwise, the supplifed prefix will appear, followed by a
	// forward slash ("/"), followed by the bug number.
	// Valid prefixes match `^[a-z0-9\-.]{0,64}$`.
	DisplayPrefix string `protobuf:"bytes,6,opt,name=display_prefix,json=displayPrefix,proto3" json:"display_prefix,omitempty"`
	// The preferred hostname to use in links to monorail. For example,
	// "bugs.chromium.org" or "bugs.fuchsia.dev".
	MonorailHostname string `protobuf:"bytes,7,opt,name=monorail_hostname,json=monorailHostname,proto3" json:"monorail_hostname,omitempty"`
}

func (x *MonorailProject) Reset() {
	*x = MonorailProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailProject) ProtoMessage() {}

func (x *MonorailProject) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailProject.ProtoReflect.Descriptor instead.
func (*MonorailProject) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{2}
}

func (x *MonorailProject) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MonorailProject) GetDefaultFieldValues() []*MonorailFieldValue {
	if x != nil {
		return x.DefaultFieldValues
	}
	return nil
}

func (x *MonorailProject) GetPriorityFieldId() int64 {
	if x != nil {
		return x.PriorityFieldId
	}
	return 0
}

func (x *MonorailProject) GetPriorities() []*MonorailPriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

func (x *MonorailProject) GetPriorityHysteresisPercent() int64 {
	if x != nil {
		return x.PriorityHysteresisPercent
	}
	return 0
}

func (x *MonorailProject) GetDisplayPrefix() string {
	if x != nil {
		return x.DisplayPrefix
	}
	return ""
}

func (x *MonorailProject) GetMonorailHostname() string {
	if x != nil {
		return x.MonorailHostname
	}
	return ""
}

// MonorailFieldValue describes a monorail field/value pair.
type MonorailFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the field to set. You can find this by visiting
	// https://monorail-prod.appspot.com/p/<project>/adminLabels, scrolling
	// down to Custom fields and finding the ID of the field you wish to set.
	FieldId int64 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// The field value. Values are encoded according to the field type:
	// - Enumeration types: the string enumeration value (e.g. "Bug").
	// - Integer types: the integer, converted to a string (e.g. "1052").
	// - String types: the value, included verbatim.
	// - User types: the user's resource name (e.g. "users/2627516260").
	//   User IDs can be identified by looking at the people listing for a
	//   project:  https://monorail-prod.appspot.com/p/<project>/people/list.
	//   The User ID is included in the URL as u=<number> when clicking into
	//   the page for a particular user. For example, "user/3816576959" is
	//   https://monorail-prod.appspot.com/p/chromium/people/detail?u=3816576959.
	// - Date types: the number of seconds since epoch, as a string
	//   (e.g. "1609459200" for 1 January 2021).
	// - URL type: the URL value, as a string (e.g. "https://www.google.com/").
	//
	// The source of truth for mapping of field types to values is as
	// defined in the Monorail v3 API, found here:
	// https://source.chromium.org/chromium/infra/infra/+/main:appengine/monorail/api/v3/api_proto/issue_objects.proto?q=%22message%20FieldValue%22
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MonorailFieldValue) Reset() {
	*x = MonorailFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailFieldValue) ProtoMessage() {}

func (x *MonorailFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailFieldValue.ProtoReflect.Descriptor instead.
func (*MonorailFieldValue) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{3}
}

func (x *MonorailFieldValue) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *MonorailFieldValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// MonorailPriority represents configuration for when to use a given
// priority value in a bug.
type MonorailPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The monorail priority value. For example, "0". This depends on the
	// valid priority field values you have defined in your monorail project.
	Priority string `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority,omitempty"`
	// The threshold at which to apply the priority.
	Threshold *ImpactThreshold `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *MonorailPriority) Reset() {
	*x = MonorailPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonorailPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailPriority) ProtoMessage() {}

func (x *MonorailPriority) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailPriority.ProtoReflect.Descriptor instead.
func (*MonorailPriority) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{4}
}

func (x *MonorailPriority) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *MonorailPriority) GetThreshold() *ImpactThreshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

// ImpactThreshold specifies a condition on a cluster's impact metrics.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set on any individual
// metric, the threshold as a whole is unsatisfiable.
type ImpactThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of test results that were unexpected failures.
	TestResultsFailed *MetricThreshold `protobuf:"bytes,4,opt,name=test_results_failed,json=testResultsFailed,proto3" json:"test_results_failed,omitempty"`
	// The number of test runs that failed.
	// A test run (also known as a 'shard' (chromium) or 'task' (Chrome OS))
	// is considered failed if all tries of test(s) in it unexpectedly failed.
	// The failed test run is attributed to the last failure of each of the
	// test(s) that failed on all tries.
	TestRunsFailed *MetricThreshold `protobuf:"bytes,5,opt,name=test_runs_failed,json=testRunsFailed,proto3" json:"test_runs_failed,omitempty"`
	// The number of presubmit runs that failed.
	PresubmitRunsFailed *MetricThreshold `protobuf:"bytes,6,opt,name=presubmit_runs_failed,json=presubmitRunsFailed,proto3" json:"presubmit_runs_failed,omitempty"`
	// The number of test failures on critical builders that were exonerated,
	// with an exoneration reason other than NOT_CRITICAL.
	CriticalFailuresExonerated *MetricThreshold `protobuf:"bytes,7,opt,name=critical_failures_exonerated,json=criticalFailuresExonerated,proto3" json:"critical_failures_exonerated,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only.
	UnexpectedFailures_1D *int64 `protobuf:"varint,1,opt,name=unexpected_failures_1d,json=unexpectedFailures1d,proto3,oneof" json:"unexpected_failures_1d,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only.
	UnexpectedFailures_3D *int64 `protobuf:"varint,2,opt,name=unexpected_failures_3d,json=unexpectedFailures3d,proto3,oneof" json:"unexpected_failures_3d,omitempty"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only.
	UnexpectedFailures_7D *int64 `protobuf:"varint,3,opt,name=unexpected_failures_7d,json=unexpectedFailures7d,proto3,oneof" json:"unexpected_failures_7d,omitempty"`
}

func (x *ImpactThreshold) Reset() {
	*x = ImpactThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpactThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactThreshold) ProtoMessage() {}

func (x *ImpactThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactThreshold.ProtoReflect.Descriptor instead.
func (*ImpactThreshold) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{5}
}

func (x *ImpactThreshold) GetTestResultsFailed() *MetricThreshold {
	if x != nil {
		return x.TestResultsFailed
	}
	return nil
}

func (x *ImpactThreshold) GetTestRunsFailed() *MetricThreshold {
	if x != nil {
		return x.TestRunsFailed
	}
	return nil
}

func (x *ImpactThreshold) GetPresubmitRunsFailed() *MetricThreshold {
	if x != nil {
		return x.PresubmitRunsFailed
	}
	return nil
}

func (x *ImpactThreshold) GetCriticalFailuresExonerated() *MetricThreshold {
	if x != nil {
		return x.CriticalFailuresExonerated
	}
	return nil
}

func (x *ImpactThreshold) GetUnexpectedFailures_1D() int64 {
	if x != nil && x.UnexpectedFailures_1D != nil {
		return *x.UnexpectedFailures_1D
	}
	return 0
}

func (x *ImpactThreshold) GetUnexpectedFailures_3D() int64 {
	if x != nil && x.UnexpectedFailures_3D != nil {
		return *x.UnexpectedFailures_3D
	}
	return 0
}

func (x *ImpactThreshold) GetUnexpectedFailures_7D() int64 {
	if x != nil && x.UnexpectedFailures_7D != nil {
		return *x.UnexpectedFailures_7D
	}
	return 0
}

// MetricThreshold specifies thresholds for a particular metric.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set, the threshold
// as a whole is unsatisfiable.
type MetricThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The threshold for one day.
	OneDay *int64 `protobuf:"varint,1,opt,name=one_day,json=oneDay,proto3,oneof" json:"one_day,omitempty"`
	// The threshold for three day.
	ThreeDay *int64 `protobuf:"varint,2,opt,name=three_day,json=threeDay,proto3,oneof" json:"three_day,omitempty"`
	// The threshold for seven days.
	SevenDay *int64 `protobuf:"varint,3,opt,name=seven_day,json=sevenDay,proto3,oneof" json:"seven_day,omitempty"`
}

func (x *MetricThreshold) Reset() {
	*x = MetricThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricThreshold) ProtoMessage() {}

func (x *MetricThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricThreshold.ProtoReflect.Descriptor instead.
func (*MetricThreshold) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{6}
}

func (x *MetricThreshold) GetOneDay() int64 {
	if x != nil && x.OneDay != nil {
		return *x.OneDay
	}
	return 0
}

func (x *MetricThreshold) GetThreeDay() int64 {
	if x != nil && x.ThreeDay != nil {
		return *x.ThreeDay
	}
	return 0
}

func (x *MetricThreshold) GetSevenDay() int64 {
	if x != nil && x.SevenDay != nil {
		return *x.SevenDay
	}
	return 0
}

// Configurations per realm.
type RealmConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the realm.
	//
	// Must match `^[a-z0-9_\.\-/]{1,400}$`.
	// Must not contain the project part. I.e. for "chromium:ci" realm the value
	// here must be "ci".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Test variant analysis configurations for the realm.
	TestVariantAnalysis *TestVariantAnalysisConfig `protobuf:"bytes,2,opt,name=test_variant_analysis,json=testVariantAnalysis,proto3" json:"test_variant_analysis,omitempty"`
}

func (x *RealmConfig) Reset() {
	*x = RealmConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealmConfig) ProtoMessage() {}

func (x *RealmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealmConfig.ProtoReflect.Descriptor instead.
func (*RealmConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{7}
}

func (x *RealmConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RealmConfig) GetTestVariantAnalysis() *TestVariantAnalysisConfig {
	if x != nil {
		return x.TestVariantAnalysis
	}
	return nil
}

// Configuration for how test results are clustered.
type Clustering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rules used to cluster test results by test name.
	// The order of rules matters; the first matching rule will be used
	// to cluster a given test result.
	//
	// If no rule matches, the test results will be clustered on the
	// full test name. This corresponds approximately to the rule:
	// {
	//   name: "Full test name"
	//   pattern: "^(?P<testname>.*)$"
	//   like_template: "${testname}"
	// }
	TestNameRules []*TestNameClusteringRule `protobuf:"bytes,1,rep,name=test_name_rules,json=testNameRules,proto3" json:"test_name_rules,omitempty"`
}

func (x *Clustering) Reset() {
	*x = Clustering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clustering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clustering) ProtoMessage() {}

func (x *Clustering) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clustering.ProtoReflect.Descriptor instead.
func (*Clustering) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{8}
}

func (x *Clustering) GetTestNameRules() []*TestNameClusteringRule {
	if x != nil {
		return x.TestNameRules
	}
	return nil
}

// A rule used to cluster a test result by test name.
type TestNameClusteringRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A human-readable name for the rule. This should be unique for each rule.
	// This may be used by Weetbix to explain why it chose to cluster the test
	// name in this way.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The regular expression describing which test names should be clustered
	// by this rule.
	//
	// Example.
	//   Assume our project uploads google test (gtest) results with the test
	//   name prefix "gtest://".
	//   If want to cluster value-parameterized google tests
	//   together based on the test suite and test case name (ignoring
	//   the value parameter), we may use a pattern like:
	//     "^gtest://(\w+/)?(?P<testcase>\w+\.\w+)/\w+$"
	//
	//   This will allow us to cluster test names like:
	//     "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/0"
	//     "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/1"
	//     "gtest://InstantiationTwo/ColorSpaceTest.testNullTransform/0"
	//   together.
	//
	//   See https://github.com/google/googletest/blob/main/docs/advanced.md#how-to-write-value-parameterized-tests
	//   to understand value-parameterised google tests.
	//
	// Use ?P<name> to name capture groups, so their values can be used in
	// like_template below.
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// The template used to generate a LIKE expression on test names
	// that defines the test name cluster identified by this rule.
	//
	// This like expression has two purposes:
	// (1) If the test name cluster is large enough to justify the
	//     creation of a bug cluster, the like expression is used to
	//     generate a failure association rule of the following form:
	//        test LIKE "<evaluated like_template>"
	// (2) A hash of the expression is used as the clustering key for the
	//     test name-based suggested cluster. This generally has the desired
	//     clustering behaviour, i.e. the parts of the test name which
	//     are important enough to included in the LIKE expression for (1)
	//     are also those on which clustering should occur.
	//
	// As is usual for LIKE expressions, the template can contain
	// the following operators to do wildcard matching:
	// * '%' for wildcard match of an arbitrary number of characters, and
	// * '_' for single character wildcard match.
	//
	// To match literal '%' or '_', escape the operator with a '\',
	// i.e. use "\%" or "\_" to match literal '%' and '_' respectively.
	// To match literal '\', you should use "\\".
	//
	// The template can refer to parts of the test name matched by
	// the rule pattern using ${name}, where name refers to the capture
	// group (see pattern). To insert the literal '$', the sequence '$$'
	// should be used.
	//
	// Example.
	//   Assume our project uploads google test (gtest) results with the test
	//   name prefix "gtest://". Further assume we used the pattern:
	//     "^gtest://(\w+/)?(?P<testcase>\w+\.\w+)/\w+$"
	//
	//   We might use the following like_template:
	//     "gtest://%${testcase}%"
	//
	//   When instantiated for a value-parameterised test, e.g.
	//   "gtest://InstantiationOne/ColorSpaceTest.testNullTransform/0",
	//   the result would be a failure association rule like:
	//     test LIKE "gtest://%ColorSpaceTest.testNullTransform%"
	//
	//   Note the use of ${testcase} to refer to the testname capture group
	//   specified in the pattern example.
	//
	//   See https://github.com/google/googletest/blob/main/docs/advanced.md#how-to-write-value-parameterized-tests
	//   to understand value-parameterised google tests.
	//
	// It is known that not all clusters can be precisely matched by
	// a LIKE expression. Nonetheless, Weetbix prefers LIKE expressions
	// as they are easier to comprehend and modify by users, and in
	// most cases, the added precision is not required.
	//
	// As such, your rule should try to ensure the generated LIKE statement
	// captures your clustering logic as best it can. Your LIKE expression
	// MUST match all test names matched by your regex pattern, and MAY
	// capture additional test names (though this is preferably minimised,
	// to reduce differences between the suggested clusters and eventual
	// bug clusters).
	//
	// Weetbix will automatically escape any '%' '_' and '\' in parts of
	// the matched test name before substitution to ensure captured parts
	// of the test name are matched literally and not interpreted.
	LikeTemplate string `protobuf:"bytes,3,opt,name=like_template,json=likeTemplate,proto3" json:"like_template,omitempty"`
}

func (x *TestNameClusteringRule) Reset() {
	*x = TestNameClusteringRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNameClusteringRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNameClusteringRule) ProtoMessage() {}

func (x *TestNameClusteringRule) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNameClusteringRule.ProtoReflect.Descriptor instead.
func (*TestNameClusteringRule) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP(), []int{9}
}

func (x *TestNameClusteringRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestNameClusteringRule) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *TestNameClusteringRule) GetLikeTemplate() string {
	if x != nil {
		return x.LikeTemplate
	}
	return ""
}

var File_infra_appengine_weetbix_proto_config_project_config_proto protoreflect.FileDescriptor

var file_infra_appengine_weetbix_proto_config_project_config_proto_rawDesc = []byte{
	0x0a, 0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77, 0x65, 0x65,
	0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65,
	0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x12, 0x51, 0x0a, 0x14, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x12, 0x62, 0x75, 0x67, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65,
	0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0f, 0x4d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x69, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x45, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74,
	0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xe7, 0x04, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x11, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x75, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x1c, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x1a, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x31, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x31, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x33, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x33, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x37, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x37, 0x64, 0x88, 0x01, 0x01, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x31, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x75, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x33, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x37, 0x64, 0x22,
	0x9b, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x65, 0x44, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x61,
	0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x22, 0x80, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5d, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x22, 0x5c, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e,
	0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69,
	0x78, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x6b,
	0x0a, 0x16, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x6b, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77,
	0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescOnce sync.Once
	file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescData = file_infra_appengine_weetbix_proto_config_project_config_proto_rawDesc
)

func file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescGZIP() []byte {
	file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescOnce.Do(func() {
		file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescData)
	})
	return file_infra_appengine_weetbix_proto_config_project_config_proto_rawDescData
}

var file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_infra_appengine_weetbix_proto_config_project_config_proto_goTypes = []interface{}{
	(*ProjectConfig)(nil),             // 0: weetbix.config.ProjectConfig
	(*ProjectMetadata)(nil),           // 1: weetbix.config.ProjectMetadata
	(*MonorailProject)(nil),           // 2: weetbix.config.MonorailProject
	(*MonorailFieldValue)(nil),        // 3: weetbix.config.MonorailFieldValue
	(*MonorailPriority)(nil),          // 4: weetbix.config.MonorailPriority
	(*ImpactThreshold)(nil),           // 5: weetbix.config.ImpactThreshold
	(*MetricThreshold)(nil),           // 6: weetbix.config.MetricThreshold
	(*RealmConfig)(nil),               // 7: weetbix.config.RealmConfig
	(*Clustering)(nil),                // 8: weetbix.config.Clustering
	(*TestNameClusteringRule)(nil),    // 9: weetbix.config.TestNameClusteringRule
	(*timestamppb.Timestamp)(nil),     // 10: google.protobuf.Timestamp
	(*TestVariantAnalysisConfig)(nil), // 11: weetbix.config.TestVariantAnalysisConfig
}
var file_infra_appengine_weetbix_proto_config_project_config_proto_depIdxs = []int32{
	1,  // 0: weetbix.config.ProjectConfig.project_metadata:type_name -> weetbix.config.ProjectMetadata
	2,  // 1: weetbix.config.ProjectConfig.monorail:type_name -> weetbix.config.MonorailProject
	5,  // 2: weetbix.config.ProjectConfig.bug_filing_threshold:type_name -> weetbix.config.ImpactThreshold
	7,  // 3: weetbix.config.ProjectConfig.realms:type_name -> weetbix.config.RealmConfig
	10, // 4: weetbix.config.ProjectConfig.last_updated:type_name -> google.protobuf.Timestamp
	8,  // 5: weetbix.config.ProjectConfig.clustering:type_name -> weetbix.config.Clustering
	3,  // 6: weetbix.config.MonorailProject.default_field_values:type_name -> weetbix.config.MonorailFieldValue
	4,  // 7: weetbix.config.MonorailProject.priorities:type_name -> weetbix.config.MonorailPriority
	5,  // 8: weetbix.config.MonorailPriority.threshold:type_name -> weetbix.config.ImpactThreshold
	6,  // 9: weetbix.config.ImpactThreshold.test_results_failed:type_name -> weetbix.config.MetricThreshold
	6,  // 10: weetbix.config.ImpactThreshold.test_runs_failed:type_name -> weetbix.config.MetricThreshold
	6,  // 11: weetbix.config.ImpactThreshold.presubmit_runs_failed:type_name -> weetbix.config.MetricThreshold
	6,  // 12: weetbix.config.ImpactThreshold.critical_failures_exonerated:type_name -> weetbix.config.MetricThreshold
	11, // 13: weetbix.config.RealmConfig.test_variant_analysis:type_name -> weetbix.config.TestVariantAnalysisConfig
	9,  // 14: weetbix.config.Clustering.test_name_rules:type_name -> weetbix.config.TestNameClusteringRule
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_infra_appengine_weetbix_proto_config_project_config_proto_init() }
func file_infra_appengine_weetbix_proto_config_project_config_proto_init() {
	if File_infra_appengine_weetbix_proto_config_project_config_proto != nil {
		return
	}
	file_infra_appengine_weetbix_proto_config_test_variant_analysis_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonorailPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpactThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealmConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clustering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNameClusteringRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_weetbix_proto_config_project_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_appengine_weetbix_proto_config_project_config_proto_goTypes,
		DependencyIndexes: file_infra_appengine_weetbix_proto_config_project_config_proto_depIdxs,
		MessageInfos:      file_infra_appengine_weetbix_proto_config_project_config_proto_msgTypes,
	}.Build()
	File_infra_appengine_weetbix_proto_config_project_config_proto = out.File
	file_infra_appengine_weetbix_proto_config_project_config_proto_rawDesc = nil
	file_infra_appengine_weetbix_proto_config_project_config_proto_goTypes = nil
	file_infra_appengine_weetbix_proto_config_project_config_proto_depIdxs = nil
}
