// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package weetbix.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

option go_package = "infra/appengine/weetbix/proto/v1;weetbixpb";

// A range of timestamps.
message TimeRange {
  // The oldest timestamp to include in the range.
  google.protobuf.Timestamp earliest = 1;

  // Include only timestamps that are strictly older than this.
  google.protobuf.Timestamp latest = 2;
}

// Identity of a test result.
message TestResultId {
  // The test results system.
  // Currently, the only valid value is "resultdb".
  string system = 1;

  // ID for the test result in the test results system.
  // For test results in ResultDB, the format is:
  // "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}"
  // Where INVOCATION_ID, URL_ESCAPED_TEST_ID and RESULT_ID are values defined
  // in ResultDB.
  string id = 2;
}

// Variant represents a way of running a test case.
//
// The same test case can be executed in different ways, for example on
// different OS, GPUs, with different compile options or runtime flags.
message Variant {
  // The definition of the variant. Each key-value pair represents a
  // parameter describing how the test was run (e.g. OS, GPU, etc.).
  map<string, string> def = 1;
}

message StringPair {
  // Regex: ^[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*$
  // Max length: 64.
  string key = 1;

  // Max length: 256.
  string value = 2;
}

// Identity of a bug tracking component in a bug tracking system.
message BugTrackingComponent {
  // The bug tracking system corresponding to this test case, as identified
  // by the test results system.
  // Currently, the only valid value is "monorail".
  string system = 1;

  // The bug tracking component corresponding to this test case, as identified
  // by the test results system.
  // If the bug tracking system is monorail, this is the component as the
  // user would see it, e.g. "Infra>Test>Flakiness". For monorail, the bug
  // tracking project (e.g. "chromium") is not encoded, but assumed to be
  // specified in the project's Weetbix configuration.
  string component = 2;
}

// Identity of a presubmit run (also known as a "CQ Run" or "CV Run").
message PresubmitRunId {
  // The system that was used to process the presubmit run.
  // Currently, the only valid value is "luci-cv" for LUCI Commit Verifier
  // (LUCI CV).
  string system = 1;

  // Identity of the presubmit run.
  // If the presubmit system is LUCI CV, the format of this value is:
  //   "{LUCI_PROJECT}/{LUCI_CV_ID}", e.g.
  //   "infra/8988819463854-1-f94732fe20056fd1".
  string id = 2;
}

// Identity of a bug in a bug-tracking system.
message AssociatedBug {
  // System is the bug tracking system of the bug. This is either
  // "monorail" or "buganizer".
  string system = 1;

  // Id is the bug tracking system-specific identity of the bug.
  // For monorail, the scheme is {project}/{numeric_id}, for
  // buganizer the scheme is {numeric_id}.
  string id = 2;

  // A human-readable name for the bug. This is typically the
  // bug shortlink (e.g. "crbug.com/1234567").
  string link_text = 3
    [(google.api.field_behavior) = OUTPUT_ONLY];

  // The resolved bug URL, e.g.
  // E.g. "https://bugs.chromium.org/p/chromium/issues/detail?id=123456".
  string url = 4
    [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ClusterId represents the identity of a cluster. The LUCI Project is
// omitted as it is assumed to be implicit from the context.
//
// This is often used in place of the resource name of the cluster
// (in the sense of https://google.aip.dev/122) as clients may need
// to access individual parts of the resource name (e.g. to determine
// the algorithm used) and it is not desirable to make clients parse
// the resource name.
message ClusterId {
  // Algorithm is the name of the clustering algorithm that identified
  // the cluster.
  string algorithm = 1;

  // Id is the cluster identifier returned by the algorithm. The underlying
  // identifier is at most 16 bytes, but is represented here as a hexadecimal
  // string of up to 32 lowercase hexadecimal characters.
  string id = 2;
}

// BuildStatus the result of the build in which the test verdict was produced.
// This can be used to detect if the test verdict is incomplete (e.g. because
// an infra failure or cancellation occurred), and whether the unexpected
// test verdict was also followed by a failing build.
enum BuildStatus {
  // A build must not have this status.
  BUILD_STATUS_UNSPECIFIED = 0;

  // The build succeeded.
  BUILD_STATUS_SUCCESS = 1;

  // The build failed.
  BUILD_STATUS_FAILURE = 2;

  // The build encountered an infrastructure failure.
  BUILD_STATUS_INFRA_FAILURE = 3;

  // The build was canceled.
  BUILD_STATUS_CANCELED = 4;
}

// ExonerationStatus explains if and why a test failure was
// exonerated. Exonerated means the failure was ignored and did not
// have further impact, in terms of causing the build to fail or
// rejecting the CL being tested in a presubmit run.
//
// If multiple reasons for exoneration exist, they are applied in
// the following order (later values take precedence over earlier values):
//
// IMPLICIT
// OCCURS_ON_OTHER_CLS
// OCCURS_ON_MAINLINE
// NOT_CRITICAL
// EXONERATED_GENERIC
//
// This ordering is so that an impact filter "before CQ exoneration"
// can re-include failures with status OCCURS_ON_MAINLINE and
// OCCURS_ON_OTHER_CLS without including failures also exonerated
// for other reasons.
//
// The implementation assumes higher values have higher precedence,
// so if inserting new values, please ensure an appropriate value is used.
// Gaps have been left in the enumeration for this reason.
enum ExonerationStatus {
  // A test failure must not have this status.
  EXONERATION_STATUS_UNSPECIFIED = 0;

  // The test was not exonerated.
  NOT_EXONERATED = 1;

  // Despite having an unexpected result, and no exoneration recorded
  // in ResultDB, the build did not end in the state "failed"
  // (e.g. the build status was succeeded, was cancelled or had an
  // infra failure).
  // The test result is implicitly exonerated.
  IMPLICIT = 2;

  // DEPRECATED. Use one of the other definitions.
  // The test was marked exonerated in ResultDB, for a reason
  // other than Weetbix or FindIt failure analysis.
  // If a test is exonerated in ResultDB for both reasons
  // other than Weetbix/FindIt and because of Weetbix/FindIt,
  // this status takes precedence.
  EXPLICIT = 3;

  // DEPRECATED. Use OCCURS_ON_OTHER_CLS instead.
  // The test was exonerated based on Weetbix cluster analysis.
  // This status is only set if Weetbix is the only explicit
  // reason(s) given for the exoneration in ResultDB.
  //
  // This status is provided to avoid feedback loops in the
  // cluster analysis performed by Weetbix, by allowing Weetbix to
  // filter out exoneration decisions based on such analysis from
  // feeding back into the input of the analysis.
  //
  // Example of a situation we want to avoid:
  // Weetbix detects an impactful cluster of failures
  // affecting multiple CLs and cause a recipe to exonerate it.
  // As a result, Weetbix no longer detects the cluster as impactful.
  // As a result, the cluster is no longer exonerated.
  // As a result, the impact resumes.
  //
  // During the transition from FindIt to Weetbix for failure
  // exoneration, exonerations caused by FindIt will be treated
  // the same as exonerations caused by Weetbix, to ensure Weetbix
  // behaves as if FindIt no longer exists.
  WEETBIX = 4;

  // Similar unexpected results were observed in presubmit run(s) for other,
  // unrelated CL(s). (This is suggestive of the issue being present
  // on mainline but is not confirmed as there are possible confounding
  // factors, like how tests are run on CLs vs how tests are run on
  // mainline branches.)
  // Applies to unexpected results in presubmit/CQ runs only.
  OCCURS_ON_OTHER_CLS = 10;

  // Similar unexpected results were observed on a mainline branch
  // (i.e. against a build without unsubmitted changes applied).
  // (For avoidance of doubt, this includes both flakily and
  // deterministically occurring unexpected results.)
  // Applies to unexpected results in presubmit/CQ runs only.
  OCCURS_ON_MAINLINE = 20;

  // The tests are not critical to the test subject (e.g. CL) passing.
  // This could be because more data is being collected to determine if
  // the tests are stable enough to be made critical (as is often the
  // case for experimental test suites).
  NOT_CRITICAL = 30;

  // The test was marked exonerated in ResultDB, but a machine-understandable
  // reason for the exoneration is not available or cannot be expressed
  // in terms of a current enumeration value.
  OTHER_EXPLICIT = 100;
}

// Information about a test.
//
// As of Oct 2021, it's an exact copy of luci.resultdb.v1.TestMetadata, but
// we'd like to keep a local definition of the proto to keep the possibility that
// we need to diverge down the track.
message TestMetadata {
  // The original test name.
  string name = 1;

  // Where the test is defined, e.g. the file name.
  // location.repo MUST be specified.
  TestLocation location = 2;
}

// Location of the test definition.
message TestLocation {
  // Gitiles URL as the identifier for a repo.
  // Format for Gitiles URL: https://<host>/<project>
  // For example "https://chromium.googlesource.com/chromium/src"
  // Must not end with ".git".
  // SHOULD be specified.
  string repo = 1;

  // Name of the file where the test is defined.
  // For files in a repository, must start with "//"
  // Example: "//components/payments/core/payment_request_data_util_unittest.cc"
  // Max length: 512.
  // MUST not use backslashes.
  // Required.
  string file_name = 2;

  // One-based line number where the test is defined.
  int32 line = 3;
}

// SubmittedFilter filters test verdicts based on whether they had unsubmitted
// changes.
enum SubmittedFilter {
  // Default value. Include all test verdicts.
  SUBMITTED_FILTER_UNSPECIFIED = 0;
  // Only include test verdicts that don't have unsubmitted changes.
  ONLY_SUBMITTED = 1;
  // Only include test verdicts that have unsubmitted changes.
  ONLY_UNSUBMITTED = 2;
}
