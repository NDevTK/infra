// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/appengine/weetbix/proto/v1/test_variants.proto

package weetbixpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryTestVariantFailureRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The LUCI Project for which test variants should be looked up.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The list of test variants to retrieve results for.
	// At most 100 test variants may be specified in one request.
	// It is an error to request the same test variant twice.
	TestVariants []*TestVariantIdentifier `protobuf:"bytes,2,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
}

func (x *QueryTestVariantFailureRateRequest) Reset() {
	*x = QueryTestVariantFailureRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestVariantFailureRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantFailureRateRequest) ProtoMessage() {}

func (x *QueryTestVariantFailureRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantFailureRateRequest.ProtoReflect.Descriptor instead.
func (*QueryTestVariantFailureRateRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTestVariantFailureRateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryTestVariantFailureRateRequest) GetTestVariants() []*TestVariantIdentifier {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

// The identity of a test variant.
type TestVariantIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of the test in a LUCI project.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
}

func (x *TestVariantIdentifier) Reset() {
	*x = TestVariantIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantIdentifier) ProtoMessage() {}

func (x *TestVariantIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantIdentifier.ProtoReflect.Descriptor instead.
func (*TestVariantIdentifier) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{1}
}

func (x *TestVariantIdentifier) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantIdentifier) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

type QueryTestVariantFailureRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test variant failure rate analysis requested.
	// Test variants are returned in the order they were requested.
	TestVariants []*TestVariantFailureRateAnalysis `protobuf:"bytes,1,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
}

func (x *QueryTestVariantFailureRateResponse) Reset() {
	*x = QueryTestVariantFailureRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestVariantFailureRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantFailureRateResponse) ProtoMessage() {}

func (x *QueryTestVariantFailureRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantFailureRateResponse.ProtoReflect.Descriptor instead.
func (*QueryTestVariantFailureRateResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{2}
}

func (x *QueryTestVariantFailureRateResponse) GetTestVariants() []*TestVariantFailureRateAnalysis {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

// Signals relevant to determining whether a test variant should be
// exonerated in presubmit.
type TestVariantFailureRateAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of the test in a LUCI project.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// A signal relevant to detecting deterministically or
	// very flaky tests, measured over the last 10 verdicts (or 24 hours
	// of weekday data (in UTC), whichever is less).
	//
	// See FailingRunRatio for more details about signal design, usage
	// and limitations.
	//
	// Example exoneration criteria:
	//  Exonerate if value >= 5 (i.e. at least 5 verdicts had
	//    the first test run fail).
	//  Do not exonerate if (denominator - value) >= 6. (I.E. at least 6
	//    verdicts had the first test run pass).
	//  Otherwise, if denominator < 10 verdicts, determine if you prefer to
	//    reject the CL by default (fail-closed) or exonerate by default
	//    (fail-open).
	//
	// See go/weetbix-failing-test-detection for more details about the
	// example exoneration criteria.
	FailingRunRatio *FailingRunRatio `protobuf:"bytes,3,opt,name=failing_run_ratio,json=failingRunRatio,proto3" json:"failing_run_ratio,omitempty"`
	// The failing runs included in the numerator of failing_run_ratio
	// (if any). Entries are returned in descending partition_time order.
	FailingRunExamples []*VerdictExample `protobuf:"bytes,4,rep,name=failing_run_examples,json=failingRunExamples,proto3" json:"failing_run_examples,omitempty"`
	// A signal relevant to detecting the low to moderately
	// flaky tests, over a period including the last 1000 verdicts, or
	// 24 hours worth of weekday data (in UTC), whichever is less.
	//
	// Definition of "the last 24 hours worth of weekday data":
	// If it is currently a weekend (in UTC), the returned data will cover all
	// of the weekend to-date and all of Friday (in UTC).
	// If it is currently Monday (in UTC), the returned data will cover all
	// of the weekend, and the hours since the current time on Friday.
	// Otherwise, if it is a Tuesday to Friday (in UTC), the returned data
	// will cover the last 24 hours.
	//
	// See FlakyVerdictRatio for more details about signal design, usage
	// and limitations.
	FlakyVerdictRatio *FlakyVerdictRatio `protobuf:"bytes,5,opt,name=flaky_verdict_ratio,json=flakyVerdictRatio,proto3" json:"flaky_verdict_ratio,omitempty"`
	// The flaky verdicts included in the numerator of flaky_verdict_ratio.
	// If there are more than 10, only the 10 most recent examples are
	// returned. Entries are returned in descending partition_time order.
	FlakyVerdictExamples []*VerdictExample `protobuf:"bytes,6,rep,name=flaky_verdict_examples,json=flakyVerdictExamples,proto3" json:"flaky_verdict_examples,omitempty"`
	// Describes the sample of verdicts used to generate the response.
	// For debug use only - do not access in your code. This field may be
	// modified or deleted in future.
	Sample *TestVariantFailureRateAnalysis_Sample `protobuf:"bytes,7,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *TestVariantFailureRateAnalysis) Reset() {
	*x = TestVariantFailureRateAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantFailureRateAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantFailureRateAnalysis) ProtoMessage() {}

func (x *TestVariantFailureRateAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantFailureRateAnalysis.ProtoReflect.Descriptor instead.
func (*TestVariantFailureRateAnalysis) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{3}
}

func (x *TestVariantFailureRateAnalysis) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantFailureRateAnalysis) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetFailingRunRatio() *FailingRunRatio {
	if x != nil {
		return x.FailingRunRatio
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetFailingRunExamples() []*VerdictExample {
	if x != nil {
		return x.FailingRunExamples
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetFlakyVerdictRatio() *FlakyVerdictRatio {
	if x != nil {
		return x.FlakyVerdictRatio
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetFlakyVerdictExamples() []*VerdictExample {
	if x != nil {
		return x.FlakyVerdictExamples
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetSample() *TestVariantFailureRateAnalysis_Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

// FlakyVerdictRatio counts the number of verdicts with both a failing
// AND a passing run, in proportion to the number of verdicts with passing
// runs.
//
// It is a signal for the detection of test variants
// whose test runs are failing in a less-flaky way, e.g. those with a
// run-level failure rate of between 0 and ~90%.
//
// A run captures all test results in one lowest-level ResultDB invocation,
// e.g. a single swarming task.
// For the purposes of this signal, a run with one or more EXPECTED test
// results is considered a pass, and a run with only UNEXPECTED test results
// is considered a fail.
//
// This signal is only suitable for detecting tests with low to
// moderate failure rates, as it only uses runs both with passes and
// failures to identify flakiness.
// This is to exclude the effect of bad CLs (CLs which break the test
// by making it deterministically fail with an UNEXPECTED result).
//
// If runs with passes are not occurring (e.g. because the test
// is broken and deterministically failing), there will be no signal.
// There will also be no signal if builders are not configured to
// retry failed test runs at least occasionally, so as to obtain
// some passes upon retry for test runs that failed initially.
// The absence of signal can be identified by the fact the denominator is
// zero.
type FlakyVerdictRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of verdicts in which the first test run
	// FAILED, and second test run PASSED. (See FlakyVerdictRatio
	// for meaning of a failed and passed test run.)
	//
	// This signal is designed not to be affected by bad CLs
	// (i.e. CLs which break the test such that is starts failing
	// deterministically) and as such, the criteria for detecting
	// flaky tests using this method can be made more sensitive than
	// for FailingRunRatio.
	Numerator int64 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// The number of verdicts in in which the first or second
	// test run PASSED.
	//
	// Dividing numerator by denominator will yield an estimate of
	// the likelihood a flake occurs in a run that is demonstrated
	// to be not affected by bad CL (CL that always causes test
	// runs to fail). This will be an understimate of the true
	// flakiness rate of the test.
	Denominator int64 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *FlakyVerdictRatio) Reset() {
	*x = FlakyVerdictRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlakyVerdictRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlakyVerdictRatio) ProtoMessage() {}

func (x *FlakyVerdictRatio) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlakyVerdictRatio.ProtoReflect.Descriptor instead.
func (*FlakyVerdictRatio) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{4}
}

func (x *FlakyVerdictRatio) GetNumerator() int64 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *FlakyVerdictRatio) GetDenominator() int64 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// FailingRunRatio counts the number of verdicts in which the first test run
// failed, in proportion to the total number of verdicts.
//
// It is a signal for the detection of test variants
// whose test runs are failing in a highly-flaky way, e.g. from
// ~80% up to 100% flaky (i.e. deterministically failing).
//
// A run captures all test results in one lowest-level ResultDB invocation,
// e.g. a single swarming task.
// For the purposes of this signal, a run with one or more EXPECTED test
// results is considered a pass, and a run with only UNEXPECTED test results
// is considered a fail.
//
// This signal is most appropriate for the detection of tests which are
// failing at higher rates, with a focus on deterministically and
// almost-deterministically failing tests.
//
// It is not suitable for detection of tests with lower levels of flakiness as
// the signal is affected by bad CLs (CLs which break the test),
// which means setting low thresholds could lead to falsely exonerating
// test failures caused by bad CLs and thereby falsely accepting those CLs.
// If no recent test verdicts are recorded for the requested test,
// there will be no signal. This can be identified by the fact the
// denominator is zero.
type FailingRunRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of verdicts in which the first run of the test failed.
	//
	// This signal is produced by both:
	// - test flakiness (including deterministic failures) on Good CLs
	//   (i.e. the signal we wish to measure), and
	// - bad CLs breaking the test (i.e. a confounding factor).
	//
	// As this signal is designed to detect highly-flaky and
	// deterministically failing tests, we cannot rely on only using runs
	// with passes to measure flakiness (like FlakyVerdictRatio can).
	// As such, the detection criteria for this signal should be more
	// onerous than for FlakyVerdictRatio to avoid falsely exonerating test
	// failures only caused by some bad CLs.
	Numerator int64 `protobuf:"varint,3,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// The total number of verdicts over the period that the signal was measured.
	// Dividing numerator by denominator will yield an estimate of the
	// likelihood ((the CL is bad) OR (the CL is good and the test failed in an
	//             independent test run)).
	// This will be an overestimate of the true flakiness rate of the test.
	Denominator int64 `protobuf:"varint,4,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *FailingRunRatio) Reset() {
	*x = FailingRunRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailingRunRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailingRunRatio) ProtoMessage() {}

func (x *FailingRunRatio) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailingRunRatio.ProtoReflect.Descriptor instead.
func (*FailingRunRatio) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{5}
}

func (x *FailingRunRatio) GetNumerator() int64 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *FailingRunRatio) GetDenominator() int64 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// VerdictExample describes a verdict is part of a signal.
type VerdictExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partition time of the verdict. This the time associated with the
	// test result for test history purposes, usually the build or presubmit
	// run start time.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// The identity of the ingested invocation.
	IngestedInvocationId string `protobuf:"bytes,2,opt,name=ingested_invocation_id,json=ingestedInvocationId,proto3" json:"ingested_invocation_id,omitempty"`
	// The changelist(s) tested, if any.
	Changelists []*Changelist `protobuf:"bytes,3,rep,name=changelists,proto3" json:"changelists,omitempty"`
}

func (x *VerdictExample) Reset() {
	*x = VerdictExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerdictExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerdictExample) ProtoMessage() {}

func (x *VerdictExample) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerdictExample.ProtoReflect.Descriptor instead.
func (*VerdictExample) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{6}
}

func (x *VerdictExample) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *VerdictExample) GetIngestedInvocationId() string {
	if x != nil {
		return x.IngestedInvocationId
	}
	return ""
}

func (x *VerdictExample) GetChangelists() []*Changelist {
	if x != nil {
		return x.Changelists
	}
	return nil
}

// Sample describes the sample of verdicts used to generate the response.
// For debug use only - do not access in your code. This field may be
// modified or deleted in future.
type TestVariantFailureRateAnalysis_Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of verdicts included in the sample of verdicts that
	// was used to calculate the statistics included in the response.
	// Each of these verdicts is guaranteed to be for a unique
	// changelist (if they tested a changelist) to avoid overrepresentation
	// of any single CL in the sample.
	// Verdicts which tested multiple CLs are excluded.
	// The implementation limits this to 1,000.
	Verdicts int64 `protobuf:"varint,1,opt,name=verdicts,proto3" json:"verdicts,omitempty"`
	// The number of verdicts processed to obtain the sample, including
	// verdicts that were excluded from the sample because they were
	// for the same changelist as another verdict.
	// The implementation limits this to 2,000.
	VerdictsPreDeduplication int64 `protobuf:"varint,2,opt,name=verdicts_pre_deduplication,json=verdictsPreDeduplication,proto3" json:"verdicts_pre_deduplication,omitempty"`
}

func (x *TestVariantFailureRateAnalysis_Sample) Reset() {
	*x = TestVariantFailureRateAnalysis_Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantFailureRateAnalysis_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantFailureRateAnalysis_Sample) ProtoMessage() {}

func (x *TestVariantFailureRateAnalysis_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantFailureRateAnalysis_Sample.ProtoReflect.Descriptor instead.
func (*TestVariantFailureRateAnalysis_Sample) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TestVariantFailureRateAnalysis_Sample) GetVerdicts() int64 {
	if x != nil {
		return x.Verdicts
	}
	return 0
}

func (x *TestVariantFailureRateAnalysis_Sample) GetVerdictsPreDeduplication() int64 {
	if x != nil {
		return x.VerdictsPreDeduplication
	}
	return 0
}

var File_infra_appengine_weetbix_proto_v1_test_variants_proto protoreflect.FileDescriptor

var file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc = []byte{
	0x0a, 0x34, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x5f,
	0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0x76, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xcf, 0x04, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x4c, 0x0a, 0x14, 0x66,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x65, 0x74,
	0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x66, 0x6c, 0x61,
	0x6b, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x11, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x50, 0x0a, 0x16, 0x66, 0x6c, 0x61, 0x6b,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62,
	0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x14, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65, 0x65,
	0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x62, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x76,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x50, 0x72, 0x65, 0x44, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x11, 0x46, 0x6c, 0x61,
	0x6b, 0x79, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x51,
	0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x32, 0x85, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x77,
	0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77,
	0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x2c, 0x5a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x3b, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescOnce sync.Once
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData = file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc
)

func file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP() []byte {
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescOnce.Do(func() {
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData)
	})
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData
}

var file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_infra_appengine_weetbix_proto_v1_test_variants_proto_goTypes = []interface{}{
	(*QueryTestVariantFailureRateRequest)(nil),    // 0: weetbix.v1.QueryTestVariantFailureRateRequest
	(*TestVariantIdentifier)(nil),                 // 1: weetbix.v1.TestVariantIdentifier
	(*QueryTestVariantFailureRateResponse)(nil),   // 2: weetbix.v1.QueryTestVariantFailureRateResponse
	(*TestVariantFailureRateAnalysis)(nil),        // 3: weetbix.v1.TestVariantFailureRateAnalysis
	(*FlakyVerdictRatio)(nil),                     // 4: weetbix.v1.FlakyVerdictRatio
	(*FailingRunRatio)(nil),                       // 5: weetbix.v1.FailingRunRatio
	(*VerdictExample)(nil),                        // 6: weetbix.v1.VerdictExample
	(*TestVariantFailureRateAnalysis_Sample)(nil), // 7: weetbix.v1.TestVariantFailureRateAnalysis.Sample
	(*Variant)(nil),                               // 8: weetbix.v1.Variant
	(*timestamppb.Timestamp)(nil),                 // 9: google.protobuf.Timestamp
	(*Changelist)(nil),                            // 10: weetbix.v1.Changelist
}
var file_infra_appengine_weetbix_proto_v1_test_variants_proto_depIdxs = []int32{
	1,  // 0: weetbix.v1.QueryTestVariantFailureRateRequest.test_variants:type_name -> weetbix.v1.TestVariantIdentifier
	8,  // 1: weetbix.v1.TestVariantIdentifier.variant:type_name -> weetbix.v1.Variant
	3,  // 2: weetbix.v1.QueryTestVariantFailureRateResponse.test_variants:type_name -> weetbix.v1.TestVariantFailureRateAnalysis
	8,  // 3: weetbix.v1.TestVariantFailureRateAnalysis.variant:type_name -> weetbix.v1.Variant
	5,  // 4: weetbix.v1.TestVariantFailureRateAnalysis.failing_run_ratio:type_name -> weetbix.v1.FailingRunRatio
	6,  // 5: weetbix.v1.TestVariantFailureRateAnalysis.failing_run_examples:type_name -> weetbix.v1.VerdictExample
	4,  // 6: weetbix.v1.TestVariantFailureRateAnalysis.flaky_verdict_ratio:type_name -> weetbix.v1.FlakyVerdictRatio
	6,  // 7: weetbix.v1.TestVariantFailureRateAnalysis.flaky_verdict_examples:type_name -> weetbix.v1.VerdictExample
	7,  // 8: weetbix.v1.TestVariantFailureRateAnalysis.sample:type_name -> weetbix.v1.TestVariantFailureRateAnalysis.Sample
	9,  // 9: weetbix.v1.VerdictExample.partition_time:type_name -> google.protobuf.Timestamp
	10, // 10: weetbix.v1.VerdictExample.changelists:type_name -> weetbix.v1.Changelist
	0,  // 11: weetbix.v1.TestVariants.QueryFailureRate:input_type -> weetbix.v1.QueryTestVariantFailureRateRequest
	2,  // 12: weetbix.v1.TestVariants.QueryFailureRate:output_type -> weetbix.v1.QueryTestVariantFailureRateResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_infra_appengine_weetbix_proto_v1_test_variants_proto_init() }
func file_infra_appengine_weetbix_proto_v1_test_variants_proto_init() {
	if File_infra_appengine_weetbix_proto_v1_test_variants_proto != nil {
		return
	}
	file_infra_appengine_weetbix_proto_v1_common_proto_init()
	file_infra_appengine_weetbix_proto_v1_changelist_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestVariantFailureRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestVariantFailureRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantFailureRateAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlakyVerdictRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailingRunRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerdictExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantFailureRateAnalysis_Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_weetbix_proto_v1_test_variants_proto_goTypes,
		DependencyIndexes: file_infra_appengine_weetbix_proto_v1_test_variants_proto_depIdxs,
		MessageInfos:      file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes,
	}.Build()
	File_infra_appengine_weetbix_proto_v1_test_variants_proto = out.File
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc = nil
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_goTypes = nil
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestVariantsClient is the client API for TestVariants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestVariantsClient interface {
	// Queries the failure rate of specified test variants, returning
	// signals indicating if the test variant is flaky and/or
	// deterministically failing. Intended for use by recipes to
	// inform exoneration decisions.
	//
	// TODO(crbug.com/1314194): This is an experimental RPC implemented for
	// Chrome CQ exoneration and is subject to change or removal.
	//
	// Changes to this RPC should comply with https://google.aip.dev/231.
	QueryFailureRate(ctx context.Context, in *QueryTestVariantFailureRateRequest, opts ...grpc.CallOption) (*QueryTestVariantFailureRateResponse, error)
}
type testVariantsPRPCClient struct {
	client *prpc.Client
}

func NewTestVariantsPRPCClient(client *prpc.Client) TestVariantsClient {
	return &testVariantsPRPCClient{client}
}

func (c *testVariantsPRPCClient) QueryFailureRate(ctx context.Context, in *QueryTestVariantFailureRateRequest, opts ...grpc.CallOption) (*QueryTestVariantFailureRateResponse, error) {
	out := new(QueryTestVariantFailureRateResponse)
	err := c.client.Call(ctx, "weetbix.v1.TestVariants", "QueryFailureRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type testVariantsClient struct {
	cc grpc.ClientConnInterface
}

func NewTestVariantsClient(cc grpc.ClientConnInterface) TestVariantsClient {
	return &testVariantsClient{cc}
}

func (c *testVariantsClient) QueryFailureRate(ctx context.Context, in *QueryTestVariantFailureRateRequest, opts ...grpc.CallOption) (*QueryTestVariantFailureRateResponse, error) {
	out := new(QueryTestVariantFailureRateResponse)
	err := c.cc.Invoke(ctx, "/weetbix.v1.TestVariants/QueryFailureRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestVariantsServer is the server API for TestVariants service.
type TestVariantsServer interface {
	// Queries the failure rate of specified test variants, returning
	// signals indicating if the test variant is flaky and/or
	// deterministically failing. Intended for use by recipes to
	// inform exoneration decisions.
	//
	// TODO(crbug.com/1314194): This is an experimental RPC implemented for
	// Chrome CQ exoneration and is subject to change or removal.
	//
	// Changes to this RPC should comply with https://google.aip.dev/231.
	QueryFailureRate(context.Context, *QueryTestVariantFailureRateRequest) (*QueryTestVariantFailureRateResponse, error)
}

// UnimplementedTestVariantsServer can be embedded to have forward compatible implementations.
type UnimplementedTestVariantsServer struct {
}

func (*UnimplementedTestVariantsServer) QueryFailureRate(context.Context, *QueryTestVariantFailureRateRequest) (*QueryTestVariantFailureRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFailureRate not implemented")
}

func RegisterTestVariantsServer(s prpc.Registrar, srv TestVariantsServer) {
	s.RegisterService(&_TestVariants_serviceDesc, srv)
}

func _TestVariants_QueryFailureRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestVariantFailureRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVariantsServer).QueryFailureRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weetbix.v1.TestVariants/QueryFailureRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVariantsServer).QueryFailureRate(ctx, req.(*QueryTestVariantFailureRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestVariants_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weetbix.v1.TestVariants",
	HandlerType: (*TestVariantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryFailureRate",
			Handler:    _TestVariants_QueryFailureRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/weetbix/proto/v1/test_variants.proto",
}
