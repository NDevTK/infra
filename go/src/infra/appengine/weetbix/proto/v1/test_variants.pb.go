// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/appengine/weetbix/proto/v1/test_variants.proto

package weetbixpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryTestVariantFailureRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The LUCI Project for which test variants should be looked up.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The list of test variants to retrieve results for.
	// At most 100 test variants may be specified in one request.
	// It is an error to request the same test variant twice.
	TestVariants []*TestVariantIdentifier `protobuf:"bytes,2,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
}

func (x *QueryTestVariantFailureRateRequest) Reset() {
	*x = QueryTestVariantFailureRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestVariantFailureRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantFailureRateRequest) ProtoMessage() {}

func (x *QueryTestVariantFailureRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantFailureRateRequest.ProtoReflect.Descriptor instead.
func (*QueryTestVariantFailureRateRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTestVariantFailureRateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryTestVariantFailureRateRequest) GetTestVariants() []*TestVariantIdentifier {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

// The identity of a test variant.
type TestVariantIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of the test in a LUCI project.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// The variant hash. Alternative to specifying the variant.
	// Prefer to specify the full variant (if available), as the
	// variant hashing implementation is an implementation detail
	// and may change.
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
}

func (x *TestVariantIdentifier) Reset() {
	*x = TestVariantIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantIdentifier) ProtoMessage() {}

func (x *TestVariantIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantIdentifier.ProtoReflect.Descriptor instead.
func (*TestVariantIdentifier) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{1}
}

func (x *TestVariantIdentifier) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantIdentifier) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariantIdentifier) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

type QueryTestVariantFailureRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time buckets used for time interval data.
	//
	// Currently each interval represents 24 weekday hours, including the
	// weekend contained in that range (if any). This is to compensate
	// for the typically reduced testing that is seen over weekends.
	// So interval with age=1 is the last 24 hours of weekday data
	// before the time the query is made, age=2 is the 24 hours of
	// weekday data before that, and so on.
	// In total, there will be 5 intervals, numbered 1 to 5.
	//
	// 24 hours of weekday data before X is defined to be
	// the smallest period ending at X which includes exactly 24
	// hours of a weekday in UTC. Therefore:
	// If X is on a weekend (in UTC), the returned data will
	// cover all of the weekend up to X and all of previous Friday (in UTC).
	// If X is on a Monday (in UTC), the returned data will cover all
	// of the weekend, up to a time on Friday that corresponds to
	// X's time on Monday (e.g. if X is Monday at 8am, the period goes
	// back to Friday at 8am).
	// Otherwise, X is on a Tuesday to Friday (in UTC), the period
	// will cover the last 24 hours.
	Intervals []*QueryTestVariantFailureRateResponse_Interval `protobuf:"bytes,1,rep,name=intervals,proto3" json:"intervals,omitempty"`
	// The test variant failure rate analysis requested.
	// Test variants are returned in the order they were requested.
	TestVariants []*TestVariantFailureRateAnalysis `protobuf:"bytes,2,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
}

func (x *QueryTestVariantFailureRateResponse) Reset() {
	*x = QueryTestVariantFailureRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestVariantFailureRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantFailureRateResponse) ProtoMessage() {}

func (x *QueryTestVariantFailureRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantFailureRateResponse.ProtoReflect.Descriptor instead.
func (*QueryTestVariantFailureRateResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{2}
}

func (x *QueryTestVariantFailureRateResponse) GetIntervals() []*QueryTestVariantFailureRateResponse_Interval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

func (x *QueryTestVariantFailureRateResponse) GetTestVariants() []*TestVariantFailureRateAnalysis {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

// Signals relevant to determining whether a test variant should be
// exonerated in presubmit.
type TestVariantFailureRateAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of the test in a LUCI project.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	// Only populated if populated on the request.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// The variant hash.
	// Only populated if populated on the request.
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Statistics broken down by time interval. Intervals will be ordered
	// by recency, starting at the most recent interval (age = 1).
	//
	// The following filtering applies to verdicts used in time interval data:
	// - Verdicts are filtered to at most one per unique CL under test,
	//   with verdicts for multi-CL tryjob runs excluded.
	IntervalStats []*TestVariantFailureRateAnalysis_IntervalStats `protobuf:"bytes,4,rep,name=interval_stats,json=intervalStats,proto3" json:"interval_stats,omitempty"`
	// Examples of verdicts which had both expected and unexpected runs.
	//
	// Ordered by recency, starting at the most recent example at offset 0.
	//
	// Limited to at most 10. Further limited to only verdicts produced
	// since 5 weekdays ago (this corresponds to the exact same time range
	// as for which interval data is provided).
	RunFlakyVerdictExamples []*TestVariantFailureRateAnalysis_VerdictExample `protobuf:"bytes,5,rep,name=run_flaky_verdict_examples,json=runFlakyVerdictExamples,proto3" json:"run_flaky_verdict_examples,omitempty"`
	// The most recent verdicts for the test variant.
	//
	// The following filtering applies to verdicts used in this field:
	// - Verdicts are filtered to at most one per unique CL under test,
	//   with verdicts for multi-CL tryjob runs excluded.
	// - Verdicts for CLs authored by automation are excluded, to avoid a
	//   single repeatedly failing automatic uprev process populating
	//   this list with 10 failures.
	// Ordered by recency, starting at the most recent verdict at offset 0.
	//
	// Limited to at most 10. Further limited to only verdicts produced
	// since 5 weekdays ago (this corresponds to the exact same time range
	// as for which interval data is provided).
	RecentVerdicts []*TestVariantFailureRateAnalysis_RecentVerdict `protobuf:"bytes,6,rep,name=recent_verdicts,json=recentVerdicts,proto3" json:"recent_verdicts,omitempty"`
}

func (x *TestVariantFailureRateAnalysis) Reset() {
	*x = TestVariantFailureRateAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantFailureRateAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantFailureRateAnalysis) ProtoMessage() {}

func (x *TestVariantFailureRateAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantFailureRateAnalysis.ProtoReflect.Descriptor instead.
func (*TestVariantFailureRateAnalysis) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{3}
}

func (x *TestVariantFailureRateAnalysis) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantFailureRateAnalysis) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVariantFailureRateAnalysis) GetIntervalStats() []*TestVariantFailureRateAnalysis_IntervalStats {
	if x != nil {
		return x.IntervalStats
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetRunFlakyVerdictExamples() []*TestVariantFailureRateAnalysis_VerdictExample {
	if x != nil {
		return x.RunFlakyVerdictExamples
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis) GetRecentVerdicts() []*TestVariantFailureRateAnalysis_RecentVerdict {
	if x != nil {
		return x.RecentVerdicts
	}
	return nil
}

// Interval defines the time buckets used for time interval
// data.
type QueryTestVariantFailureRateResponse_Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interval being defined. age=1 is the most recent
	// interval, age=2 is the interval immediately before that,
	// and so on.
	IntervalAge int32 `protobuf:"varint,1,opt,name=interval_age,json=intervalAge,proto3" json:"interval_age,omitempty"`
	// The start time of the interval (inclusive).
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the interval (exclusive).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *QueryTestVariantFailureRateResponse_Interval) Reset() {
	*x = QueryTestVariantFailureRateResponse_Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestVariantFailureRateResponse_Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantFailureRateResponse_Interval) ProtoMessage() {}

func (x *QueryTestVariantFailureRateResponse_Interval) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantFailureRateResponse_Interval.ProtoReflect.Descriptor instead.
func (*QueryTestVariantFailureRateResponse_Interval) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{2, 0}
}

func (x *QueryTestVariantFailureRateResponse_Interval) GetIntervalAge() int32 {
	if x != nil {
		return x.IntervalAge
	}
	return 0
}

func (x *QueryTestVariantFailureRateResponse_Interval) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryTestVariantFailureRateResponse_Interval) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type TestVariantFailureRateAnalysis_IntervalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The age of the interval. 1 is the most recent interval,
	// 2 is the interval immediately before that, and so on.
	// Cross reference with the intervals field on the
	// QueryTestVariantFailureRateResponse response to
	// identify the exact time interval this represents.
	IntervalAge int32 `protobuf:"varint,1,opt,name=interval_age,json=intervalAge,proto3" json:"interval_age,omitempty"`
	// The number of verdicts which had only expected runs.
	// An expected run is a run (e.g. swarming task) which has at least
	// one expected result, excluding skipped results.
	TotalRunExpectedVerdicts int32 `protobuf:"varint,2,opt,name=total_run_expected_verdicts,json=totalRunExpectedVerdicts,proto3" json:"total_run_expected_verdicts,omitempty"`
	// The number of verdicts which had both expected and
	// unexpected runs.
	// An expected run is a run (e.g. swarming task) which has at least
	// one expected result, excluding skips.
	// An unexpected run is a run which had only unexpected
	// results (and at least one unexpected result), excluding skips.
	TotalRunFlakyVerdicts int32 `protobuf:"varint,3,opt,name=total_run_flaky_verdicts,json=totalRunFlakyVerdicts,proto3" json:"total_run_flaky_verdicts,omitempty"`
	// The number of verdicts which had only unexpected runs.
	// An unexpected run is a run (e.g. swarming task) which had only
	// unexpected results (and at least one unexpected result),
	// excluding skips.
	TotalRunUnexpectedVerdicts int32 `protobuf:"varint,4,opt,name=total_run_unexpected_verdicts,json=totalRunUnexpectedVerdicts,proto3" json:"total_run_unexpected_verdicts,omitempty"`
}

func (x *TestVariantFailureRateAnalysis_IntervalStats) Reset() {
	*x = TestVariantFailureRateAnalysis_IntervalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantFailureRateAnalysis_IntervalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantFailureRateAnalysis_IntervalStats) ProtoMessage() {}

func (x *TestVariantFailureRateAnalysis_IntervalStats) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantFailureRateAnalysis_IntervalStats.ProtoReflect.Descriptor instead.
func (*TestVariantFailureRateAnalysis_IntervalStats) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TestVariantFailureRateAnalysis_IntervalStats) GetIntervalAge() int32 {
	if x != nil {
		return x.IntervalAge
	}
	return 0
}

func (x *TestVariantFailureRateAnalysis_IntervalStats) GetTotalRunExpectedVerdicts() int32 {
	if x != nil {
		return x.TotalRunExpectedVerdicts
	}
	return 0
}

func (x *TestVariantFailureRateAnalysis_IntervalStats) GetTotalRunFlakyVerdicts() int32 {
	if x != nil {
		return x.TotalRunFlakyVerdicts
	}
	return 0
}

func (x *TestVariantFailureRateAnalysis_IntervalStats) GetTotalRunUnexpectedVerdicts() int32 {
	if x != nil {
		return x.TotalRunUnexpectedVerdicts
	}
	return 0
}

// VerdictExample describes a verdict that is part of a statistic.
type TestVariantFailureRateAnalysis_VerdictExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partition time of the verdict. This the time associated with the
	// test result for test history purposes, usually the build or presubmit
	// run start time.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// The identity of the ingested invocation.
	IngestedInvocationId string `protobuf:"bytes,2,opt,name=ingested_invocation_id,json=ingestedInvocationId,proto3" json:"ingested_invocation_id,omitempty"`
	// The changelist(s) tested, if any.
	Changelists []*Changelist `protobuf:"bytes,3,rep,name=changelists,proto3" json:"changelists,omitempty"`
}

func (x *TestVariantFailureRateAnalysis_VerdictExample) Reset() {
	*x = TestVariantFailureRateAnalysis_VerdictExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantFailureRateAnalysis_VerdictExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantFailureRateAnalysis_VerdictExample) ProtoMessage() {}

func (x *TestVariantFailureRateAnalysis_VerdictExample) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantFailureRateAnalysis_VerdictExample.ProtoReflect.Descriptor instead.
func (*TestVariantFailureRateAnalysis_VerdictExample) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{3, 1}
}

func (x *TestVariantFailureRateAnalysis_VerdictExample) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis_VerdictExample) GetIngestedInvocationId() string {
	if x != nil {
		return x.IngestedInvocationId
	}
	return ""
}

func (x *TestVariantFailureRateAnalysis_VerdictExample) GetChangelists() []*Changelist {
	if x != nil {
		return x.Changelists
	}
	return nil
}

type TestVariantFailureRateAnalysis_RecentVerdict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partition time of the verdict. This the time associated with the
	// test result for test history purposes, usually the build or presubmit
	// run start time.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// The identity of the ingested invocation.
	IngestedInvocationId string `protobuf:"bytes,2,opt,name=ingested_invocation_id,json=ingestedInvocationId,proto3" json:"ingested_invocation_id,omitempty"`
	// The changelist(s) tested, if any.
	Changelists []*Changelist `protobuf:"bytes,3,rep,name=changelists,proto3" json:"changelists,omitempty"`
	// Whether the verdict had an unexpected run.
	// An unexpected run is a run (e.g. swarming task) which
	// had only unexpected results, after excluding skips.
	//
	// Example: a verdict includes the result of two
	// swarming tasks (i.e. two runs), which each contain two
	// test results.
	// One of the two test runs has two unexpected failures.
	// Therefore, the verdict has an unexpected run.
	HasUnexpectedRuns bool `protobuf:"varint,4,opt,name=has_unexpected_runs,json=hasUnexpectedRuns,proto3" json:"has_unexpected_runs,omitempty"`
}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) Reset() {
	*x = TestVariantFailureRateAnalysis_RecentVerdict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantFailureRateAnalysis_RecentVerdict) ProtoMessage() {}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantFailureRateAnalysis_RecentVerdict.ProtoReflect.Descriptor instead.
func (*TestVariantFailureRateAnalysis_RecentVerdict) Descriptor() ([]byte, []int) {
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP(), []int{3, 2}
}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) GetIngestedInvocationId() string {
	if x != nil {
		return x.IngestedInvocationId
	}
	return ""
}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) GetChangelists() []*Changelist {
	if x != nil {
		return x.Changelists
	}
	return nil
}

func (x *TestVariantFailureRateAnalysis_RecentVerdict) GetHasUnexpectedRuns() bool {
	if x != nil {
		return x.HasUnexpectedRuns
	}
	return false
}

var File_infra_appengine_weetbix_proto_v1_test_variants_proto protoreflect.FileDescriptor

var file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc = []byte{
	0x0a, 0x34, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xf0, 0x02, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x65,
	0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x1a, 0x9f, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x41, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x08, 0x0a, 0x1e, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x5f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77,
	0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x6b, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x77, 0x65, 0x65, 0x74,
	0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x46, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73,
	0x1a, 0xed, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x41, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e,
	0x46, 0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73,
	0x1a, 0xc3, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x68,
	0x61, 0x73, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x32, 0x85, 0x01, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x65, 0x65, 0x74, 0x62, 0x69, 0x78, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescOnce sync.Once
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData = file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc
)

func file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescGZIP() []byte {
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescOnce.Do(func() {
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData)
	})
	return file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDescData
}

var file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_infra_appengine_weetbix_proto_v1_test_variants_proto_goTypes = []interface{}{
	(*QueryTestVariantFailureRateRequest)(nil),            // 0: weetbix.v1.QueryTestVariantFailureRateRequest
	(*TestVariantIdentifier)(nil),                         // 1: weetbix.v1.TestVariantIdentifier
	(*QueryTestVariantFailureRateResponse)(nil),           // 2: weetbix.v1.QueryTestVariantFailureRateResponse
	(*TestVariantFailureRateAnalysis)(nil),                // 3: weetbix.v1.TestVariantFailureRateAnalysis
	(*QueryTestVariantFailureRateResponse_Interval)(nil),  // 4: weetbix.v1.QueryTestVariantFailureRateResponse.Interval
	(*TestVariantFailureRateAnalysis_IntervalStats)(nil),  // 5: weetbix.v1.TestVariantFailureRateAnalysis.IntervalStats
	(*TestVariantFailureRateAnalysis_VerdictExample)(nil), // 6: weetbix.v1.TestVariantFailureRateAnalysis.VerdictExample
	(*TestVariantFailureRateAnalysis_RecentVerdict)(nil),  // 7: weetbix.v1.TestVariantFailureRateAnalysis.RecentVerdict
	(*Variant)(nil),               // 8: weetbix.v1.Variant
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*Changelist)(nil),            // 10: weetbix.v1.Changelist
}
var file_infra_appengine_weetbix_proto_v1_test_variants_proto_depIdxs = []int32{
	1,  // 0: weetbix.v1.QueryTestVariantFailureRateRequest.test_variants:type_name -> weetbix.v1.TestVariantIdentifier
	8,  // 1: weetbix.v1.TestVariantIdentifier.variant:type_name -> weetbix.v1.Variant
	4,  // 2: weetbix.v1.QueryTestVariantFailureRateResponse.intervals:type_name -> weetbix.v1.QueryTestVariantFailureRateResponse.Interval
	3,  // 3: weetbix.v1.QueryTestVariantFailureRateResponse.test_variants:type_name -> weetbix.v1.TestVariantFailureRateAnalysis
	8,  // 4: weetbix.v1.TestVariantFailureRateAnalysis.variant:type_name -> weetbix.v1.Variant
	5,  // 5: weetbix.v1.TestVariantFailureRateAnalysis.interval_stats:type_name -> weetbix.v1.TestVariantFailureRateAnalysis.IntervalStats
	6,  // 6: weetbix.v1.TestVariantFailureRateAnalysis.run_flaky_verdict_examples:type_name -> weetbix.v1.TestVariantFailureRateAnalysis.VerdictExample
	7,  // 7: weetbix.v1.TestVariantFailureRateAnalysis.recent_verdicts:type_name -> weetbix.v1.TestVariantFailureRateAnalysis.RecentVerdict
	9,  // 8: weetbix.v1.QueryTestVariantFailureRateResponse.Interval.start_time:type_name -> google.protobuf.Timestamp
	9,  // 9: weetbix.v1.QueryTestVariantFailureRateResponse.Interval.end_time:type_name -> google.protobuf.Timestamp
	9,  // 10: weetbix.v1.TestVariantFailureRateAnalysis.VerdictExample.partition_time:type_name -> google.protobuf.Timestamp
	10, // 11: weetbix.v1.TestVariantFailureRateAnalysis.VerdictExample.changelists:type_name -> weetbix.v1.Changelist
	9,  // 12: weetbix.v1.TestVariantFailureRateAnalysis.RecentVerdict.partition_time:type_name -> google.protobuf.Timestamp
	10, // 13: weetbix.v1.TestVariantFailureRateAnalysis.RecentVerdict.changelists:type_name -> weetbix.v1.Changelist
	0,  // 14: weetbix.v1.TestVariants.QueryFailureRate:input_type -> weetbix.v1.QueryTestVariantFailureRateRequest
	2,  // 15: weetbix.v1.TestVariants.QueryFailureRate:output_type -> weetbix.v1.QueryTestVariantFailureRateResponse
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_infra_appengine_weetbix_proto_v1_test_variants_proto_init() }
func file_infra_appengine_weetbix_proto_v1_test_variants_proto_init() {
	if File_infra_appengine_weetbix_proto_v1_test_variants_proto != nil {
		return
	}
	file_infra_appengine_weetbix_proto_v1_common_proto_init()
	file_infra_appengine_weetbix_proto_v1_changelist_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestVariantFailureRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestVariantFailureRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantFailureRateAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestVariantFailureRateResponse_Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantFailureRateAnalysis_IntervalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantFailureRateAnalysis_VerdictExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestVariantFailureRateAnalysis_RecentVerdict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_weetbix_proto_v1_test_variants_proto_goTypes,
		DependencyIndexes: file_infra_appengine_weetbix_proto_v1_test_variants_proto_depIdxs,
		MessageInfos:      file_infra_appengine_weetbix_proto_v1_test_variants_proto_msgTypes,
	}.Build()
	File_infra_appengine_weetbix_proto_v1_test_variants_proto = out.File
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_rawDesc = nil
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_goTypes = nil
	file_infra_appengine_weetbix_proto_v1_test_variants_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestVariantsClient is the client API for TestVariants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestVariantsClient interface {
	// Queries the failure rate of specified test variants, returning
	// signals indicating if the test variant is flaky and/or
	// deterministically failing. Intended for use by recipes to
	// inform exoneration decisions.
	//
	// TODO(crbug.com/1314194): This is an experimental RPC implemented for
	// Chrome CQ exoneration and is subject to change or removal.
	//
	// Changes to this RPC should comply with https://google.aip.dev/231.
	QueryFailureRate(ctx context.Context, in *QueryTestVariantFailureRateRequest, opts ...grpc.CallOption) (*QueryTestVariantFailureRateResponse, error)
}
type testVariantsPRPCClient struct {
	client *prpc.Client
}

func NewTestVariantsPRPCClient(client *prpc.Client) TestVariantsClient {
	return &testVariantsPRPCClient{client}
}

func (c *testVariantsPRPCClient) QueryFailureRate(ctx context.Context, in *QueryTestVariantFailureRateRequest, opts ...grpc.CallOption) (*QueryTestVariantFailureRateResponse, error) {
	out := new(QueryTestVariantFailureRateResponse)
	err := c.client.Call(ctx, "weetbix.v1.TestVariants", "QueryFailureRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type testVariantsClient struct {
	cc grpc.ClientConnInterface
}

func NewTestVariantsClient(cc grpc.ClientConnInterface) TestVariantsClient {
	return &testVariantsClient{cc}
}

func (c *testVariantsClient) QueryFailureRate(ctx context.Context, in *QueryTestVariantFailureRateRequest, opts ...grpc.CallOption) (*QueryTestVariantFailureRateResponse, error) {
	out := new(QueryTestVariantFailureRateResponse)
	err := c.cc.Invoke(ctx, "/weetbix.v1.TestVariants/QueryFailureRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestVariantsServer is the server API for TestVariants service.
type TestVariantsServer interface {
	// Queries the failure rate of specified test variants, returning
	// signals indicating if the test variant is flaky and/or
	// deterministically failing. Intended for use by recipes to
	// inform exoneration decisions.
	//
	// TODO(crbug.com/1314194): This is an experimental RPC implemented for
	// Chrome CQ exoneration and is subject to change or removal.
	//
	// Changes to this RPC should comply with https://google.aip.dev/231.
	QueryFailureRate(context.Context, *QueryTestVariantFailureRateRequest) (*QueryTestVariantFailureRateResponse, error)
}

// UnimplementedTestVariantsServer can be embedded to have forward compatible implementations.
type UnimplementedTestVariantsServer struct {
}

func (*UnimplementedTestVariantsServer) QueryFailureRate(context.Context, *QueryTestVariantFailureRateRequest) (*QueryTestVariantFailureRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFailureRate not implemented")
}

func RegisterTestVariantsServer(s prpc.Registrar, srv TestVariantsServer) {
	s.RegisterService(&_TestVariants_serviceDesc, srv)
}

func _TestVariants_QueryFailureRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestVariantFailureRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestVariantsServer).QueryFailureRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weetbix.v1.TestVariants/QueryFailureRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestVariantsServer).QueryFailureRate(ctx, req.(*QueryTestVariantFailureRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestVariants_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weetbix.v1.TestVariants",
	HandlerType: (*TestVariantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryFailureRate",
			Handler:    _TestVariants_QueryFailureRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/weetbix/proto/v1/test_variants.proto",
}
