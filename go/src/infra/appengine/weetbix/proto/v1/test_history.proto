// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package weetbix.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/resultdb/proto/v1/common.proto";
import "infra/appengine/weetbix/proto/v1/common.proto";
import "infra/appengine/weetbix/proto/v1/predicate.proto";
import "infra/appengine/weetbix/proto/v1/test_verdict.proto";

option go_package = "infra/appengine/weetbix/proto/v1;weetbixpb";

// Provide methods to read test histories.
service TestHistory {
  // Retrieves test verdicts for a given test ID in a given project and in a
  // given range of time.
  // Accepts a test variant predicate to filter the verdicts.
  rpc Query(QueryTestHistoryRequest) returns (
    QueryTestHistoryResponse) {};

  // Retrieves a summary of test verdicts for a given test ID in a given project
  // and in a given range of dates.
  // Accepts a test variant predicate to filter the verdicts.
  rpc QueryStats(QueryTestHistoryStatsRequest) returns (
    QueryTestHistoryStatsResponse) {};

  // Reterives variants for a given test ID in a given project that were
  // recorded in the past 90 days.
  rpc QueryVariants(QueryVariantsRequest) returns (QueryVariantsResponse) {};
}

// A request message for `TestHistory.Query` RPC.
message QueryTestHistoryRequest {
  // Required. The LUCI Project of the test results.
  // I.e. For a result to be part of the history, it needs to be contained
  // transitively by an invocation in this project.
  string project = 1
    [(google.api.field_behavior) = REQUIRED];

  // Required. The test ID to query the history from.
  string test_id = 2
    [(google.api.field_behavior) = REQUIRED];

  // Optional. The project-scoped realm to query the history from.
  // This is the realm without the "<project>:" prefix.
  //
  // When specified, only the test history entries found in the matching realm
  // will be returned.
  string sub_realm = 3;

  // Optional. The subset of test variants to request history for.
  weetbix.v1.VariantPredicate variant_predicate = 4;

  // Optional. Whether test verdicts generated by code with unsubmitted changes
  // (e.g. Gerrit changes) should be included in the response.
  //
  // If no filter is specified, all verdicts are returned (regardless of
  // submitted status).
  weetbix.v1.SubmittedFilter submitted_filter = 5;

  // Optional. Specify a range of timestamps to query the test history from.
  //
  // Test history older than the configured TTL (90 days) will not be returned.
  // When omitted, return all available test history.
  TimeRange partition_time_range = 6;

  // The maximum number of entries to return.
  //
  // The service may return fewer than this value.
  // If unspecified, at most 100 variants will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int64 page_size = 7;

  // A page token, received from a previous call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to the next call MUST
  // match the call that provided the page token.
  string page_token = 8;
}

// A response message for `TestHistory.Query` RPC.
message QueryTestHistoryResponse {
  // The list of test verdicts.
  // Test verdicts will be ordered by `partition_time` DESC, `variant_hash` ASC,
  // `invocation_id` ASC.
  repeated weetbix.v1.TestVerdict verdicts = 1;

  // This field will be set if there are more results to return.
  // To get the next page of data, send the same request again, but include this
  // token.
  string next_page_token = 2;
}

// A request message for `TestHistory.QueryStats` RPC.
message QueryTestHistoryStatsRequest {
  // Required. The LUCI Project of the test results.
  // I.e. For a result to be part of the history, it needs to be contained
  // transitively by an invocation in this project.
  string project = 1
    [(google.api.field_behavior) = REQUIRED];

  // Required. The test ID to query the history from.
  string test_id = 2
    [(google.api.field_behavior) = REQUIRED];

  // Optional. The project-scoped realm to query the history from.
  // This is the realm without the "<project>:" prefix.
  //
  // When specified, only the test history entries found in the matching realm
  // will be returned.
  string sub_realm = 3;

  // Optional. Specify the subset of test variants to request history for.
  weetbix.v1.VariantPredicate variant_predicate = 4;

  // Optional. Whether test verdicts generated by code with unsubmitted changes
  // (e.g. Gerrit changes) should be included in the response.
  //
  // If no filter is specified, all verdicts are returned (regardless of
  // submitted status).
  SubmittedFilter include_unsubmitted = 5;

  // Optional. Specify a range of dates to query the test history from.
  //
  // Test history older than the configured TTL (90 days) will not be returned.
  // When omitted, returns all available test history.
  TimeRange partition_date_range = 6;

  // The maximum number of entries to return.
  //
  // The service may return fewer than this value.
  // If unspecified, at most 100 variants will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int64 page_size = 7;

  // A page token, received from a previous call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to the next call
  // MUST match the call that provided the page token.
  string page_token = 8;
}

// A response message for `TestHistory.QueryStats` RPC.
message QueryTestHistoryStatsResponse {
  message Group {
    // Start date of the presubmit run (for results that are part of a presubmit
    // run) or start date of the buildbucket build (otherwise).
    google.protobuf.Timestamp partition_date = 1;

    // The hash of the variant.
    string variant_hash = 2;

    // The number of unexpected test verdicts in the group.
    int32 unexpected_count = 3;

    // The number of unexpectedly skipped test verdicts in the group.
    int32 unexpectedly_skipped_count = 4;

    // The number of flaky test verdicts in the group.
    int32 flaky_count = 5;

    // The number of exonerated test verdicts in the group.
    int32 exonerated_count = 6;

    // The number of expected test verdicts in the group.
    int32 expected_count = 7;

    // The average duration of the PASSED test results included in the test
    // verdict.
    google.protobuf.Duration passed_avg_duration = 8;
  }

  // The list of test verdict groups. Test verdicts will be grouped and ordered
  // by `partition_date` DESC, `variant_hash` ASC.
  repeated Group groups = 1;

  // This field will be set if there are more results to return.
  // To get the next page of data, send the same request again, but include this
  // token.
  string next_page_token = 2;
}

// A request message for the `QueryVariants` RPC.
message QueryVariantsRequest {
  // Required. The LUCI project to query the variants from.
  string project = 1
    [(google.api.field_behavior) = REQUIRED];

  // Required. The test ID to query the variants from.
  string test_id = 2
    [(google.api.field_behavior) = REQUIRED];

  // Optional. The project-scoped realm to query the variants from.
  // This is the realm without the "<project>:" prefix.
  //
  // When specified, only the test variants found in the matching realm will be
  // returned.
  string sub_realm = 3;

  // The maximum number of variants to return.
  //
  // The service may return fewer than this value.
  // If unspecified, at most 100 variants will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 4;

  // A page token, received from a previous `QueryVariants` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `QueryVariants` MUST
  // match the call that provided the page token.
  string page_token = 5;
}

// A response message for the `QueryVariants` RPC.
message QueryVariantsResponse {
  // Contains the variant definition and its hash.
  message VariantInfo {
    // The hash of the variant.
    string variant_hash = 1;

    // The definition of the variant.
    luci.resultdb.v1.Variant variant = 2;
  }

  // A list of variants. Ordered by variant hash.
  repeated VariantInfo variants = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there were no subsequent pages at the time of
  // request.
  string next_page_token = 2;
}
