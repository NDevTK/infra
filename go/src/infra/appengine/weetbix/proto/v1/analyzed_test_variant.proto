// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package weetbix.v1;

import "google/api/field_behavior.proto";
import "infra/appengine/weetbix/proto/v1/common.proto";

option go_package = "infra/appengine/weetbix/proto/v1;weetbixpb";

// Status of a test variant.
enum AnalyzedTestVariantStatus {

  // Status was not specified.
  // Not to be used in actual test variants; serves as a default value for an unset field.
  STATUS_UNSPECIFIED = 0;

  // The test variant has unexpected results, but Weetbix cannot determine
  // If it is FLAKY or CONSISTENTLY_UNEXPECTED.
  // This status can be used when
  // * in in-build flakiness cases, a test variant with flaky results in a build
  //   is newly detected but the service has not been notified if the build
  //   contributes to a CL's submission or not.
  //   *  Note that this does not apply to Chromium flaky analysis because for
  //      Chromium Weetbix only ingests test results from builds contribute to
  //      CL submissions.
  // * in cross-build flakiness cases, a test variant is newly detected in a build
  //   where all of its results are unexpected.
  HAS_UNEXPECTED_RESULTS = 5;

  // The test variant is currently flaky.
  FLAKY = 10;

  // Results of the test variant have been consistently unexpected for
  // a period of time.
  CONSISTENTLY_UNEXPECTED = 20;


  // Results of the test variant have been consistently expected for
  // a period of time.
  // TODO(chanli@): mention the configuration that specifies the time range.
  CONSISTENTLY_EXPECTED = 30;

  // There are no new results of the test variant for a period of time.
  // It's likely that this test variant has been disabled or removed.
  NO_NEW_RESULTS = 40;

}

// Information about a test.
//
// As of Oct 2021, it's an exact copy of luci.resultdb.v1.TestMetadata, but
// we'd like to keep a local definition of the proto to keep the possibility that
// we need to diverge down the track.
message TestMetadata {
  // The original test name.
  string name = 1;

  // Where the test is defined, e.g. the file name.
  // location.repo MUST be specified.
  TestLocation location = 2;
}

// Location of the test definition.
message TestLocation {
  // Gitiles URL as the identifier for a repo.
  // Format for Gitiles URL: https://<host>/<project>
  // For example "https://chromium.googlesource.com/chromium/src"
  // Must not end with ".git".
  // SHOULD be specified.
  string repo = 1;

  // Name of the file where the test is defined.
  // For files in a repository, must start with "//"
  // Example: "//components/payments/core/payment_request_data_util_unittest.cc"
  // Max length: 512.
  // MUST not use backslashes.
  // Required.
  string file_name = 2;

  // One-based line number where the test is defined.
  int32 line = 3;
}

// Flake statistics of a test variant.
message FlakeStatistics {
  // Flake verdict rate calculated by the verdicts within the time range.
  float flaky_verdict_rate = 1;
  // Count of verdicts with flaky status.
  int64 flaky_verdict_count = 2;
  // Count of total verdicts.
  int64 total_verdict_count = 3;

  // Unexpected result rate calculated by the test results within the time range.
  float unexpected_result_rate = 4;
  // Count of unexpected results.
  int64 unexpected_result_count = 5;
  // Count of total results.
  int64 total_result_count = 6;
}

message AnalyzedTestVariant {
  // Can be used to refer to this test variant.
  // Format:
  // "realms/{REALM}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}"
  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Realm that the test variant exists under.
  // See https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/common/proto/realms/realms_config.proto
  string realm = 2;

  // Test id, identifier of the test. Unique in a LUCI realm.
  string test_id = 3;

  // Hash of the variant.
  string variant_hash = 4;

  // Description of one specific way of running the test,
  // e.g. a specific bucket, builder and a test suite.
  Variant variant = 5;

  // Information about the test at the time of its execution.
  TestMetadata test_metadata = 6;

  // Metadata for the test variant.
  // See luci.resultdb.v1.Tags for details.
  repeated StringPair tags = 7;

  // A range of time. Flake statistics are calculated using test results
  // within that range.
  TimeRange time_range = 8;

  // Status of the test valiant.
  AnalyzedTestVariantStatus status = 9;

  // Flakiness statistics of the test variant.
  FlakeStatistics flake_statistics = 10;

  // TODO(chanli@): Add Cluster and Bug information to the proto.
}
