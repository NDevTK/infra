// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/duration.proto";

package crosskylabadmin.config;

option go_package = "infra/appengine/crosskylabadmin/internal/app/config";

// Note: docstrings use generated go style variable names.

// Config is the configuration data served by luci-config for this app.
message Config {
  reserved 5, 6, 9;
  reserved "inventory_provider", "inventory", "endpoint";
  // AccessGroup is the luci-auth group controlling access to admin app APIs.
  string access_group = 1;

  // Swarming contains information about the Swarming instance that hosts the
  // bots managed by this app.
  Swarming swarming = 2;

  // Tasker contains configuration data specific to the Tasker API endpoints.
  Tasker tasker = 3;

  // Cron contains the configuration data specific to cron jobs on this app.
  Cron cron = 4;

  // RPCcontrol controls rpc traffic.
  RPCControl rpc_control = 7;

  // StableVersionConfig determines the location of stable version related
  // information
  StableVersionConfig stable_version_config = 8;

  // Paris is the configuration settings for paris (the new repair &c flow).
  Paris paris = 10;

  // UFS is the configuration settings for UFS.
  UFSConfig UFS = 11;

  // karte is the configuration settings for Karte.
  KarteConfig karte = 12;
}

// Swarming contains information about the Swarming instance that hosts the bots
// managed by this app.
message Swarming {
  // Host is the swarming instance hosting skylab bots.
  string host = 1;

  // BotPool is the swarming pool containing skylab bots.
  string bot_pool = 2;

  // FleetAdminTaskTag identifies all tasks created by the fleet admin app.
  string fleet_admin_task_tag = 3;

  // LuciProjectTag is the swarming tag that associates the task with a
  // luci project, allowing milo to work with the swarming UI.
  string luci_project_tag = 4;

  // PoolCfgs contains all configs required for the admin jobs of a particular pool.
  repeated PoolCfg pool_cfgs = 5;

  message PoolCfg {
    // The pool containing the skylab bots
    string pool_name = 1;
    // The builder bucket specifies the bucket to use to run swarming task.
    string builder_bucket = 2;
  }
}

// Tasker contains configuration data specific to the Tasker API endpoints.
message Tasker {
  // BackgroundTaskExecutionTimeoutSecs is the execution timeout (in
  // seconds) for background tasks created by tasker.
  int64 background_task_execution_timeout_secs = 1;

  // BackgroundTaskExpirationSecs is the expiration time (in seconds) for
  // background tasks created by tasker.
  int64 background_task_expiration_secs = 2;

  // LogdogHost is the Logdog host to use for logging from the created tasks.
  string logdog_host = 3;

  // AdminTaskServiceAccount is the name of the service account to use for admin
  // tasks.
  string admin_task_service_account = 4;

  // AdminTaskRealm is a LUCI realm name with ACLs for admin tasks.
  string admin_task_realm = 5;

  // EnableSmartScheduling is a kill switch for the smart-scheduling feature.
  // Setting it to false or not setting it prevents the smart-scheduling logic from
  // affecting the behavior of CrOSSkylabAdmin.
  bool enable_smart_scheduling = 6;
}

// Cron contains the configuration data specific to cron jobs on this app.
message Cron {
  reserved 5;
  reserved "pool_balancer";
  // FleetAdminTaskPriority is the swarming task priority of created tasks.
  //
  // This must be numerically smaller (i.e. more important) than Skylab's test
  // task priority range [49-255] and numerically larger than the minimum
  // allowed Swarming priority (20) for non administrator users.
  int64 fleet_admin_task_priority = 1;

  // EnsureTasksCount is the number of background tasks maintained against
  // each bot.
  int32 ensure_tasks_count = 2;

  // RepairIdleDuration is the duration for which a bot in the fleet must have
  // been idle for a repair task to be created against it.
  google.protobuf.Duration repair_idle_duration = 3;

  // RepairAttemptDelayDuration is the time between successive attempts at
  // repairing repair failed bots in the fleet.
  google.protobuf.Duration repair_attempt_delay_duration = 4;
}

// next tag: 11
message RPCControl {
  // Configuration of if disabling some rpc calls. It's used in experimental
  // stage. Once an RPC call is verified to be working/useless, it will be
  // added/deleted.
  bool disable_ensure_background_tasks = 1;
  bool disable_ensure_critical_pools_healthy = 2;
  bool disable_push_bots_for_admin_tasks = 3;
  bool disable_refresh_bots = 4;
  bool disable_refresh_inventory = 5;
  bool disable_trigger_repair_on_idle = 6;
  bool disable_trigger_repair_on_repair_failed = 7;
  bool disable_push_labstations_for_repair = 8;
  bool disable_dump_stable_version_to_datastore = 9;
  bool disable_push_duts_for_admin_audit = 10;
}

message StableVersionConfig {
  // The Gerrit Server for the stable version data file's repo
  // example: "chrome-internal-review.googlesource.com"
  string gerrit_host = 1;
  // The Gitiles Server for the stable version data file's repo
  // example: "chrome-internal.googlesource.com"
  string gitiles_host = 2;
  // The project name for the stable version data file's repo
  // example: "chromeos/infra/config"
  string project = 3;
  // The branch that the stable version data file is on
  // example: "main"
  string branch = 4;
  // The path, relative to the repo root, of the stable version data file
  // example: "lab_platform/stable_version_data/stable_versions.cfg"
  string stable_version_data_path = 5;
}

// Paris controls whether the Paris is enabled for tasks like repair and audit.
// It also supports slow rollouts.
//
// Note that there are a few levels of checks before we actually use the Paris
// flow. For example, if we are considering repairing a labstation with Paris,
// we will consult the configuration in the following way.
message Paris {
  reserved 1, 2, 3, 4, 7;
  reserved "enable_labstation_recovery", "optin_all_labstations",
      "optin_labstation_pool", "labstation_recovery_permille", "dut_audit";
  // DUT_repair controls the repair task for DUTs.
  // For expected state needs_repair.
  RolloutConfig dut_repair = 5;

  // DUT_repair controls the repair task for DUTs.
  // For expected state repair_failed.
  RolloutConfig dut_repair_on_repair_failed = 9;

  // DUT_repair controls the repair task for DUTs.
  // For expected state needs_manual_repair.
  RolloutConfig dut_repair_on_needs_manual_repair = 10;

  // AuditRPM controls the rollout settings for audit RPM tasks.
  RolloutConfig audit_rpm = 11;

  // AuditStorage controls the rollout settings for audit storage tasks.
  RolloutConfig audit_storage = 12;

  // AuditUSB controls the rollout settings for audit USB tasks.
  RolloutConfig audit_usb = 13;

  // DUT_verify controls the verify task for DUTs.
  RolloutConfig dut_verify = 6;

  // Labstation_repair controls the rollout of repair for labstations.
  RolloutConfig labstation_repair = 8;
}

// RolloutConfig controls the rollout of a new feature.
//
// For example, the following config rolls out a new feature at the 5% (50/1000)
// level for devices in the pools "a" and "b". Devices not in these pools are
// rolled out at the 0% level.
//
// {
//  "enable": True,
//  "optin_all_duts": False,
//  "optin_dut_pool": [ "a", "b" ],
//  "prod_permille": 50,
// }
message RolloutConfig {
  reserved 4, 5;
  reserved "ufs_error_policy", "rollout_permille";
  // Enable is set to true when recovery is enabled at all. If it is set to
  // false, the entire DUT recovery flow for PARIS is skipped and the legacy
  // flow is used instead.
  bool enable = 1;

  // Optin_all_duts opts in every DUT (regardless of optin_dut_prefix) if set to
  // true.
  bool optin_all_duts = 2;

  // Optin_dut_pool controls on a per-bool basis.
  repeated string optin_dut_pool = 3;

  // prod_permille is the probability (multiplied by 1000) that we use the new
  // flow for a DUT if we are permitted to repair the device in question by the
  // other settings in the config file.
  int32 prod_permille = 6;

  // latest_permille is the probability (multiplied by 1000) that we use the new
  // flow for a DUT at the "latest" label. The "latest" label is automatically
  // marched forward to the latest version of paris that has been build, as
  // opposed to "prod" which is manually updated after validation.
  //
  // Note that latest_permille and prod_permille are alternatives.
  // latest_permille + prod_permille is the chance of using Paris at all.
  // 1000 - latest_permille - prod_permille is the chance of using the legacy
  // flow.
  //
  // For example, if prod is 500 and latest is 200, then legacy is implicitly
  // 300. If prod is 20 and legacy is 1, then legacy is implicitly 979.
  int32 latest_permille = 7;

  // A Pattern associates a regex identifier to a prod_permille and
  // latest_permille.
  message Pattern {
    // A pattern is a regex like "^satlab-555555".
    string pattern = 1;

    // prod_permille is the probability multiplied by 1000 of using prod.
    int32 prod_permille = 2;

    // latest_permille is the probability multiplied by 1000 of using latest.
    //
    // In the event that latest + prod > 1000, latest is treated as if it were
    // (1000 - prod).
    int32 latest_permille = 3;
  };

  // pattern is a list of regex patterns that are associated with prod and
  // latest permilles.
  //
  // The patterns are tried LAST to FIRST.
  // The reason for this is to allow more general patterns to come first and
  // more specific overrides to come later.
  //
  // For example, the following is a reasonable sequence of patterns.
  //   - ^satlab
  //   - ^satlab-555555
  //   - ^satlab-555555-host1
  //
  // Organizing these patterns more specific to less specific reads better than
  // organizing them in another way.
  repeated Pattern pattern = 8;
};

// UFSConfig contains information about UFS, such as its hostname.
message UFSConfig {
  // Host is the host of the UFS service.
  //
  // Sample values:
  //  - "ufs.api.cr.dev"
  //  - "staging.ufs.api.cr.dev",
  string host = 1;
}

// KarteConfig contains information about Karte, such as its hostname.
message KarteConfig {
  // Host is the host of the Karte service.
  //
  // Sample values:
  //  - chrome-fleet-karte.appspot.com
  //  - chrome-fleet-karte-dev.appspot.com
  string host = 1;
}

// SmartSchedulingConfig controls whether the smart scheduling feature is enabled or disabled and controls its rollout.
message SmartSchedulingConfig {
  bool enabled = 1;

  // rollout permille is an amount out of 1000 that controls.
  int32 rollout_permille = 2;

  // maximum devices controls how many devices total can use the new flow to limit the rollout.
  int32 maximum_devices = 3;
}