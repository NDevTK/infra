// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/appengine/crosskylabadmin/internal/app/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config is the configuration data served by luci-config for this app.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessGroup is the luci-auth group controlling access to admin app APIs.
	AccessGroup string `protobuf:"bytes,1,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	// Swarming contains information about the Swarming instance that hosts the
	// bots managed by this app.
	Swarming *Swarming `protobuf:"bytes,2,opt,name=swarming,proto3" json:"swarming,omitempty"`
	// Tasker contains configuration data specific to the Tasker API endpoints.
	Tasker *Tasker `protobuf:"bytes,3,opt,name=tasker,proto3" json:"tasker,omitempty"`
	// Cron contains the configuration data specific to cron jobs on this app.
	Cron *Cron `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`
	// Inventory contains configuration information about skylab inventory
	// repo.
	Inventory *Inventory `protobuf:"bytes,5,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// endpoint contains configuration of specific API endpoints.
	Endpoint *Endpoint `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// RPCcontrol controls rpc traffic.
	RpcControl *RPCControl `protobuf:"bytes,7,opt,name=rpc_control,json=rpcControl,proto3" json:"rpc_control,omitempty"`
	// StableVersionConfig determines the location of stable version related information
	StableVersionConfig *StableVersionConfig `protobuf:"bytes,8,opt,name=stable_version_config,json=stableVersionConfig,proto3" json:"stable_version_config,omitempty"`
	// InventoryProvider contains configuration of inventory provider, e.g.
	// inventory v2 service.
	InventoryProvider *InventoryProvider `protobuf:"bytes,9,opt,name=inventory_provider,json=inventoryProvider,proto3" json:"inventory_provider,omitempty"`
	// Paris is the configuration settings for paris (the new repair &c flow).
	Paris *Paris `protobuf:"bytes,10,opt,name=paris,proto3" json:"paris,omitempty"`
	// UFS is the configuration settings for UFS.
	UFS *UFSConfig `protobuf:"bytes,11,opt,name=UFS,proto3" json:"UFS,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

func (x *Config) GetSwarming() *Swarming {
	if x != nil {
		return x.Swarming
	}
	return nil
}

func (x *Config) GetTasker() *Tasker {
	if x != nil {
		return x.Tasker
	}
	return nil
}

func (x *Config) GetCron() *Cron {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *Config) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *Config) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Config) GetRpcControl() *RPCControl {
	if x != nil {
		return x.RpcControl
	}
	return nil
}

func (x *Config) GetStableVersionConfig() *StableVersionConfig {
	if x != nil {
		return x.StableVersionConfig
	}
	return nil
}

func (x *Config) GetInventoryProvider() *InventoryProvider {
	if x != nil {
		return x.InventoryProvider
	}
	return nil
}

func (x *Config) GetParis() *Paris {
	if x != nil {
		return x.Paris
	}
	return nil
}

func (x *Config) GetUFS() *UFSConfig {
	if x != nil {
		return x.UFS
	}
	return nil
}

// Swarming contains information about the Swarming instance that hosts the bots
// managed by this app.
type Swarming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host is the swarming instance hosting skylab bots.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// BotPool is the swarming pool containing skylab bots.
	BotPool string `protobuf:"bytes,2,opt,name=bot_pool,json=botPool,proto3" json:"bot_pool,omitempty"`
	// FleetAdminTaskTag identifies all tasks created by the fleet admin app.
	FleetAdminTaskTag string `protobuf:"bytes,3,opt,name=fleet_admin_task_tag,json=fleetAdminTaskTag,proto3" json:"fleet_admin_task_tag,omitempty"`
	// LuciProjectTag is the swarming tag that associates the task with a
	// luci project, allowing milo to work with the swarming UI.
	LuciProjectTag string `protobuf:"bytes,4,opt,name=luci_project_tag,json=luciProjectTag,proto3" json:"luci_project_tag,omitempty"`
}

func (x *Swarming) Reset() {
	*x = Swarming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swarming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swarming) ProtoMessage() {}

func (x *Swarming) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swarming.ProtoReflect.Descriptor instead.
func (*Swarming) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Swarming) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Swarming) GetBotPool() string {
	if x != nil {
		return x.BotPool
	}
	return ""
}

func (x *Swarming) GetFleetAdminTaskTag() string {
	if x != nil {
		return x.FleetAdminTaskTag
	}
	return ""
}

func (x *Swarming) GetLuciProjectTag() string {
	if x != nil {
		return x.LuciProjectTag
	}
	return ""
}

// Tasker contains configuration data specific to the Tasker API endpoints.
type Tasker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BackgroundTaskExecutionTimeoutSecs is the execution timeout (in
	// seconds) for background tasks created by tasker.
	BackgroundTaskExecutionTimeoutSecs int64 `protobuf:"varint,1,opt,name=background_task_execution_timeout_secs,json=backgroundTaskExecutionTimeoutSecs,proto3" json:"background_task_execution_timeout_secs,omitempty"`
	// BackgroundTaskExpirationSecs is the expiration time (in seconds) for
	// background tasks created by tasker.
	BackgroundTaskExpirationSecs int64 `protobuf:"varint,2,opt,name=background_task_expiration_secs,json=backgroundTaskExpirationSecs,proto3" json:"background_task_expiration_secs,omitempty"`
	// LogdogHost is the Logdog host to use for logging from the created tasks.
	LogdogHost string `protobuf:"bytes,3,opt,name=logdog_host,json=logdogHost,proto3" json:"logdog_host,omitempty"`
	// AdminTaskServiceAccount is the name of the service account to use for admin
	// tasks.
	AdminTaskServiceAccount string `protobuf:"bytes,4,opt,name=admin_task_service_account,json=adminTaskServiceAccount,proto3" json:"admin_task_service_account,omitempty"`
	// AdminTaskRealm is a LUCI realm name with ACLs for admin tasks.
	AdminTaskRealm string `protobuf:"bytes,5,opt,name=admin_task_realm,json=adminTaskRealm,proto3" json:"admin_task_realm,omitempty"`
}

func (x *Tasker) Reset() {
	*x = Tasker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasker) ProtoMessage() {}

func (x *Tasker) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasker.ProtoReflect.Descriptor instead.
func (*Tasker) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Tasker) GetBackgroundTaskExecutionTimeoutSecs() int64 {
	if x != nil {
		return x.BackgroundTaskExecutionTimeoutSecs
	}
	return 0
}

func (x *Tasker) GetBackgroundTaskExpirationSecs() int64 {
	if x != nil {
		return x.BackgroundTaskExpirationSecs
	}
	return 0
}

func (x *Tasker) GetLogdogHost() string {
	if x != nil {
		return x.LogdogHost
	}
	return ""
}

func (x *Tasker) GetAdminTaskServiceAccount() string {
	if x != nil {
		return x.AdminTaskServiceAccount
	}
	return ""
}

func (x *Tasker) GetAdminTaskRealm() string {
	if x != nil {
		return x.AdminTaskRealm
	}
	return ""
}

// Cron contains the configuration data specific to cron jobs on this app.
type Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FleetAdminTaskPriority is the swarming task priority of created tasks.
	//
	// This must be numerically smaller (i.e. more important) than Skylab's test
	// task priority range [49-255] and numerically larger than the minimum
	// allowed Swarming priority (20) for non administrator users.
	FleetAdminTaskPriority int64 `protobuf:"varint,1,opt,name=fleet_admin_task_priority,json=fleetAdminTaskPriority,proto3" json:"fleet_admin_task_priority,omitempty"`
	// EnsureTasksCount is the number of background tasks maintained against
	// each bot.
	EnsureTasksCount int32 `protobuf:"varint,2,opt,name=ensure_tasks_count,json=ensureTasksCount,proto3" json:"ensure_tasks_count,omitempty"`
	// RepairIdleDuration is the duration for which a bot in the fleet must have
	// been idle for a repair task to be created against it.
	RepairIdleDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=repair_idle_duration,json=repairIdleDuration,proto3" json:"repair_idle_duration,omitempty"`
	// RepairAttemptDelayDuration is the time between successive attempts at
	// repairing repair failed bots in the fleet.
	RepairAttemptDelayDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=repair_attempt_delay_duration,json=repairAttemptDelayDuration,proto3" json:"repair_attempt_delay_duration,omitempty"`
	// Configuration of automatic pool balancing to keep critical pools healthy.
	PoolBalancer *PoolBalancer `protobuf:"bytes,5,opt,name=pool_balancer,json=poolBalancer,proto3" json:"pool_balancer,omitempty"`
}

func (x *Cron) Reset() {
	*x = Cron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cron) ProtoMessage() {}

func (x *Cron) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cron.ProtoReflect.Descriptor instead.
func (*Cron) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Cron) GetFleetAdminTaskPriority() int64 {
	if x != nil {
		return x.FleetAdminTaskPriority
	}
	return 0
}

func (x *Cron) GetEnsureTasksCount() int32 {
	if x != nil {
		return x.EnsureTasksCount
	}
	return 0
}

func (x *Cron) GetRepairIdleDuration() *durationpb.Duration {
	if x != nil {
		return x.RepairIdleDuration
	}
	return nil
}

func (x *Cron) GetRepairAttemptDelayDuration() *durationpb.Duration {
	if x != nil {
		return x.RepairAttemptDelayDuration
	}
	return nil
}

func (x *Cron) GetPoolBalancer() *PoolBalancer {
	if x != nil {
		return x.PoolBalancer
	}
	return nil
}

// next tag: 11
type RPCControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of if disabling some rpc calls. It's used in experimental stage.
	// Once an RPC call is verified to be working/useless, it will be added/deleted.
	DisableEnsureBackgroundTasks        bool `protobuf:"varint,1,opt,name=disable_ensure_background_tasks,json=disableEnsureBackgroundTasks,proto3" json:"disable_ensure_background_tasks,omitempty"`
	DisableEnsureCriticalPoolsHealthy   bool `protobuf:"varint,2,opt,name=disable_ensure_critical_pools_healthy,json=disableEnsureCriticalPoolsHealthy,proto3" json:"disable_ensure_critical_pools_healthy,omitempty"`
	DisablePushBotsForAdminTasks        bool `protobuf:"varint,3,opt,name=disable_push_bots_for_admin_tasks,json=disablePushBotsForAdminTasks,proto3" json:"disable_push_bots_for_admin_tasks,omitempty"`
	DisableRefreshBots                  bool `protobuf:"varint,4,opt,name=disable_refresh_bots,json=disableRefreshBots,proto3" json:"disable_refresh_bots,omitempty"`
	DisableRefreshInventory             bool `protobuf:"varint,5,opt,name=disable_refresh_inventory,json=disableRefreshInventory,proto3" json:"disable_refresh_inventory,omitempty"`
	DisableTriggerRepairOnIdle          bool `protobuf:"varint,6,opt,name=disable_trigger_repair_on_idle,json=disableTriggerRepairOnIdle,proto3" json:"disable_trigger_repair_on_idle,omitempty"`
	DisableTriggerRepairOnRepairFailed  bool `protobuf:"varint,7,opt,name=disable_trigger_repair_on_repair_failed,json=disableTriggerRepairOnRepairFailed,proto3" json:"disable_trigger_repair_on_repair_failed,omitempty"`
	DisablePushLabstationsForRepair     bool `protobuf:"varint,8,opt,name=disable_push_labstations_for_repair,json=disablePushLabstationsForRepair,proto3" json:"disable_push_labstations_for_repair,omitempty"`
	DisableDumpStableVersionToDatastore bool `protobuf:"varint,9,opt,name=disable_dump_stable_version_to_datastore,json=disableDumpStableVersionToDatastore,proto3" json:"disable_dump_stable_version_to_datastore,omitempty"`
	DisablePushDutsForAdminAudit        bool `protobuf:"varint,10,opt,name=disable_push_duts_for_admin_audit,json=disablePushDutsForAdminAudit,proto3" json:"disable_push_duts_for_admin_audit,omitempty"`
}

func (x *RPCControl) Reset() {
	*x = RPCControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCControl) ProtoMessage() {}

func (x *RPCControl) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCControl.ProtoReflect.Descriptor instead.
func (*RPCControl) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *RPCControl) GetDisableEnsureBackgroundTasks() bool {
	if x != nil {
		return x.DisableEnsureBackgroundTasks
	}
	return false
}

func (x *RPCControl) GetDisableEnsureCriticalPoolsHealthy() bool {
	if x != nil {
		return x.DisableEnsureCriticalPoolsHealthy
	}
	return false
}

func (x *RPCControl) GetDisablePushBotsForAdminTasks() bool {
	if x != nil {
		return x.DisablePushBotsForAdminTasks
	}
	return false
}

func (x *RPCControl) GetDisableRefreshBots() bool {
	if x != nil {
		return x.DisableRefreshBots
	}
	return false
}

func (x *RPCControl) GetDisableRefreshInventory() bool {
	if x != nil {
		return x.DisableRefreshInventory
	}
	return false
}

func (x *RPCControl) GetDisableTriggerRepairOnIdle() bool {
	if x != nil {
		return x.DisableTriggerRepairOnIdle
	}
	return false
}

func (x *RPCControl) GetDisableTriggerRepairOnRepairFailed() bool {
	if x != nil {
		return x.DisableTriggerRepairOnRepairFailed
	}
	return false
}

func (x *RPCControl) GetDisablePushLabstationsForRepair() bool {
	if x != nil {
		return x.DisablePushLabstationsForRepair
	}
	return false
}

func (x *RPCControl) GetDisableDumpStableVersionToDatastore() bool {
	if x != nil {
		return x.DisableDumpStableVersionToDatastore
	}
	return false
}

func (x *RPCControl) GetDisablePushDutsForAdminAudit() bool {
	if x != nil {
		return x.DisablePushDutsForAdminAudit
	}
	return false
}

// Skylab inventory is stored in a git project. A Gitiles server as well as
// Gerrit review server are used by this app to view and update the inventory
// data.
type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gitiles server hosting inventory project.
	// e.g. chromium.googlesource.com
	GitilesHost string `protobuf:"bytes,1,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// Gerrit code review server hosting inventory project.
	// e.g. chromium-review.googlesource.com
	GerritHost string `protobuf:"bytes,2,opt,name=gerrit_host,json=gerritHost,proto3" json:"gerrit_host,omitempty"`
	// Git project containing the inventory data.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Git branch from the inventory project to be used.
	Branch string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// Deprecated: Do not use.
	DataPath string `protobuf:"bytes,5,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	// Inventory environment managed by this instance of the app.
	// e.g. ENVIRONMENT_STAGING
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// Path to the infrastructure inventory data file within the git project.
	// e.g. data/skylab/server_db.textpb
	InfrastructureDataPath string `protobuf:"bytes,7,opt,name=infrastructure_data_path,json=infrastructureDataPath,proto3" json:"infrastructure_data_path,omitempty"`
	// Path to the lab inventory data file within the git project.
	// e.g. data/skylab/lab.textpb
	LabDataPath string `protobuf:"bytes,8,opt,name=lab_data_path,json=labDataPath,proto3" json:"lab_data_path,omitempty"`
	// dut_info_cache_validty is the amount of time cached inventory information
	// about a DUT is valid after being refreshed.
	//
	// This duration should be long enough to
	// (1) smooth over any refresh failures due to backing gitiles flake or quota
	//     issues.
	// (2) Allow a human to interfere and fix corrupt inventory data about (some)
	//     DUTs.
	//
	// A DUT will continue to live in the cache (and hence be served via various
	// RPCs) for dut_info_cache_validity after it has been deleted from the
	// inventory.
	DutInfoCacheValidity *durationpb.Duration `protobuf:"bytes,9,opt,name=dut_info_cache_validity,json=dutInfoCacheValidity,proto3" json:"dut_info_cache_validity,omitempty"`
	// update_limit_per_minute is used to rate limit some inventory updates.
	UpdateLimitPerMinute int32 `protobuf:"varint,10,opt,name=update_limit_per_minute,json=updateLimitPerMinute,proto3" json:"update_limit_per_minute,omitempty"`
	// Queen service to push inventory to.
	QueenService string `protobuf:"bytes,11,opt,name=queen_service,json=queenService,proto3" json:"queen_service,omitempty"`
	// Git project containing the device config.
	DeviceConfigProject string `protobuf:"bytes,12,opt,name=device_config_project,json=deviceConfigProject,proto3" json:"device_config_project,omitempty"`
	// Git branch from the device config project to be used.
	DeviceConfigBranch string `protobuf:"bytes,13,opt,name=device_config_branch,json=deviceConfigBranch,proto3" json:"device_config_branch,omitempty"`
	// The device config file path.
	// e.g. deviceconfig/generated/device_configs.cfg
	DeviceConfigPath string `protobuf:"bytes,14,opt,name=device_config_path,json=deviceConfigPath,proto3" json:"device_config_path,omitempty"`
	// If using multi files for inventory. See crbug.com/1008442 for details.
	Multifile bool `protobuf:"varint,15,opt,name=multifile,proto3" json:"multifile,omitempty"`
	// Git project containing the manufacturing config.
	ManufacturingConfigProject string `protobuf:"bytes,16,opt,name=manufacturing_config_project,json=manufacturingConfigProject,proto3" json:"manufacturing_config_project,omitempty"`
	// Git branch from the manufacturing config project to be used.
	ManufacturingConfigBranch string `protobuf:"bytes,17,opt,name=manufacturing_config_branch,json=manufacturingConfigBranch,proto3" json:"manufacturing_config_branch,omitempty"`
	// The device config file path.
	// e.g. manufacturingconfig/generated/manufacturing_configs.cfg
	ManufacturingConfigPath string `protobuf:"bytes,18,opt,name=manufacturing_config_path,json=manufacturingConfigPath,proto3" json:"manufacturing_config_path,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *Inventory) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *Inventory) GetGerritHost() string {
	if x != nil {
		return x.GerritHost
	}
	return ""
}

func (x *Inventory) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Inventory) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

// Deprecated: Do not use.
func (x *Inventory) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

func (x *Inventory) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Inventory) GetInfrastructureDataPath() string {
	if x != nil {
		return x.InfrastructureDataPath
	}
	return ""
}

func (x *Inventory) GetLabDataPath() string {
	if x != nil {
		return x.LabDataPath
	}
	return ""
}

func (x *Inventory) GetDutInfoCacheValidity() *durationpb.Duration {
	if x != nil {
		return x.DutInfoCacheValidity
	}
	return nil
}

func (x *Inventory) GetUpdateLimitPerMinute() int32 {
	if x != nil {
		return x.UpdateLimitPerMinute
	}
	return 0
}

func (x *Inventory) GetQueenService() string {
	if x != nil {
		return x.QueenService
	}
	return ""
}

func (x *Inventory) GetDeviceConfigProject() string {
	if x != nil {
		return x.DeviceConfigProject
	}
	return ""
}

func (x *Inventory) GetDeviceConfigBranch() string {
	if x != nil {
		return x.DeviceConfigBranch
	}
	return ""
}

func (x *Inventory) GetDeviceConfigPath() string {
	if x != nil {
		return x.DeviceConfigPath
	}
	return ""
}

func (x *Inventory) GetMultifile() bool {
	if x != nil {
		return x.Multifile
	}
	return false
}

func (x *Inventory) GetManufacturingConfigProject() string {
	if x != nil {
		return x.ManufacturingConfigProject
	}
	return ""
}

func (x *Inventory) GetManufacturingConfigBranch() string {
	if x != nil {
		return x.ManufacturingConfigBranch
	}
	return ""
}

func (x *Inventory) GetManufacturingConfigPath() string {
	if x != nil {
		return x.ManufacturingConfigPath
	}
	return ""
}

type PoolBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Names of the pools to keep healthy automatically via pool balancing.
	TargetPools []string `protobuf:"bytes,1,rep,name=target_pools,json=targetPools,proto3" json:"target_pools,omitempty"`
	// Name of the pool to use as the spare pool for pool balancing.
	SparePool string `protobuf:"bytes,2,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// Maximum number of unhealthy DUTs per model that can be balanced away from
	// a single target pool.
	MaxUnhealthyDuts int32 `protobuf:"varint,3,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
}

func (x *PoolBalancer) Reset() {
	*x = PoolBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolBalancer) ProtoMessage() {}

func (x *PoolBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolBalancer.ProtoReflect.Descriptor instead.
func (*PoolBalancer) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *PoolBalancer) GetTargetPools() []string {
	if x != nil {
		return x.TargetPools
	}
	return nil
}

func (x *PoolBalancer) GetSparePool() string {
	if x != nil {
		return x.SparePool
	}
	return ""
}

func (x *PoolBalancer) GetMaxUnhealthyDuts() int32 {
	if x != nil {
		return x.MaxUnhealthyDuts
	}
	return 0
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeployDut *DeployDut `protobuf:"bytes,1,opt,name=deploy_dut,json=deployDut,proto3" json:"deploy_dut,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *Endpoint) GetDeployDut() *DeployDut {
	if x != nil {
		return x.DeployDut
	}
	return nil
}

type DeployDut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of time the deploy Skylab task can be PENDING.
	//
	// This should be long enough for the newly updated inventory information to
	// propagate to the Swarming bots.
	TaskExpirationTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=task_expiration_timeout,json=taskExpirationTimeout,proto3" json:"task_expiration_timeout,omitempty"`
	// Amount of time the deploy Skylab task is allowed to run.
	//
	// This should be enough for possibly installing firmware and test image on
	// the DUT.
	TaskExecutionTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=task_execution_timeout,json=taskExecutionTimeout,proto3" json:"task_execution_timeout,omitempty"`
	// Priority of the deploy Skylab task.
	//
	// This should be the same as, or higher priority (i.e., numerically lower)
	// than other admin tasks.
	TaskPriority int64 `protobuf:"varint,3,opt,name=task_priority,json=taskPriority,proto3" json:"task_priority,omitempty"`
}

func (x *DeployDut) Reset() {
	*x = DeployDut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployDut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployDut) ProtoMessage() {}

func (x *DeployDut) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployDut.ProtoReflect.Descriptor instead.
func (*DeployDut) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *DeployDut) GetTaskExpirationTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskExpirationTimeout
	}
	return nil
}

func (x *DeployDut) GetTaskExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskExecutionTimeout
	}
	return nil
}

func (x *DeployDut) GetTaskPriority() int64 {
	if x != nil {
		return x.TaskPriority
	}
	return 0
}

type StableVersionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Gerrit Server for the stable version data file's repo
	// example: "chrome-internal-review.googlesource.com"
	GerritHost string `protobuf:"bytes,1,opt,name=gerrit_host,json=gerritHost,proto3" json:"gerrit_host,omitempty"`
	// The Gitiles Server for the stable version data file's repo
	// example: "chrome-internal.googlesource.com"
	GitilesHost string `protobuf:"bytes,2,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// The project name for the stable version data file's repo
	// example: "chromeos/infra/config"
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// The branch that the stable version data file is on
	// example: "main"
	Branch string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// The path, relative to the repo root, of the stable version data file
	// example: "lab_platform/stable_version_data/stable_versions.cfg"
	StableVersionDataPath string `protobuf:"bytes,5,opt,name=stable_version_data_path,json=stableVersionDataPath,proto3" json:"stable_version_data_path,omitempty"`
}

func (x *StableVersionConfig) Reset() {
	*x = StableVersionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableVersionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableVersionConfig) ProtoMessage() {}

func (x *StableVersionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableVersionConfig.ProtoReflect.Descriptor instead.
func (*StableVersionConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *StableVersionConfig) GetGerritHost() string {
	if x != nil {
		return x.GerritHost
	}
	return ""
}

func (x *StableVersionConfig) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *StableVersionConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *StableVersionConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *StableVersionConfig) GetStableVersionDataPath() string {
	if x != nil {
		return x.StableVersionDataPath
	}
	return ""
}

type InventoryProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The inventory service hostname, e.g. "cros-lab-inventory.appspot.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// TODO (guocb) Remove `traffic_ratio` `read_traffic_ratio` and
	// `write_traffic_ratio` after migration.
	//
	// Deprecated: Do not use.
	TrafficRatio uint32 `protobuf:"varint,2,opt,name=traffic_ratio,json=trafficRatio,proto3" json:"traffic_ratio,omitempty"`
	// The ratio (a number in [0, 100]) of reading traffic FAN OUT to inventory
	// service. Just for migrating purpose.
	ReadTrafficRatio uint32 `protobuf:"varint,3,opt,name=read_traffic_ratio,json=readTrafficRatio,proto3" json:"read_traffic_ratio,omitempty"`
	// The ratio (a number in [0, 100]) of reading traffic DUPLICATED to
	// inventory service. Just for migrating purpose.
	WriteTrafficRatio uint32 `protobuf:"varint,4,opt,name=write_traffic_ratio,json=writeTrafficRatio,proto3" json:"write_traffic_ratio,omitempty"`
	// The device uuids for migration testing.
	TestingDeviceUuids []string `protobuf:"bytes,5,rep,name=testing_device_uuids,json=testingDeviceUuids,proto3" json:"testing_device_uuids,omitempty"`
	// The device names for migration testing.
	TestingDeviceNames []string `protobuf:"bytes,6,rep,name=testing_device_names,json=testingDeviceNames,proto3" json:"testing_device_names,omitempty"`
	// The flag to control if we write to inventory v1.
	InventoryV2Only bool `protobuf:"varint,7,opt,name=inventory_v2_only,json=inventoryV2Only,proto3" json:"inventory_v2_only,omitempty"`
}

func (x *InventoryProvider) Reset() {
	*x = InventoryProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryProvider) ProtoMessage() {}

func (x *InventoryProvider) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryProvider.ProtoReflect.Descriptor instead.
func (*InventoryProvider) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *InventoryProvider) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Deprecated: Do not use.
func (x *InventoryProvider) GetTrafficRatio() uint32 {
	if x != nil {
		return x.TrafficRatio
	}
	return 0
}

func (x *InventoryProvider) GetReadTrafficRatio() uint32 {
	if x != nil {
		return x.ReadTrafficRatio
	}
	return 0
}

func (x *InventoryProvider) GetWriteTrafficRatio() uint32 {
	if x != nil {
		return x.WriteTrafficRatio
	}
	return 0
}

func (x *InventoryProvider) GetTestingDeviceUuids() []string {
	if x != nil {
		return x.TestingDeviceUuids
	}
	return nil
}

func (x *InventoryProvider) GetTestingDeviceNames() []string {
	if x != nil {
		return x.TestingDeviceNames
	}
	return nil
}

func (x *InventoryProvider) GetInventoryV2Only() bool {
	if x != nil {
		return x.InventoryV2Only
	}
	return false
}

// Paris controls whether the Paris is enabled for tasks like repair and audit.
// It also supports slow rollouts.
//
// Note that there are a few levels of checks before we actually use the Paris flow.
// For example, if we are considering repairing a labstation with Paris, we will consult
// the configuration in the following way.
//
// 1) Is recovery enabled for labstations in the first place? If not, use the old flow.
// 2) Did we opt the particular labstation in question in to the new flow? If not, use the old flow.
//        This step requires checking both `optin_all_labstations` and `optin_labstation_prefix`.
// 3) With probability p, use the new flow, where p is determined from the config file.
type Paris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable_labstation_recovery is set to true when recovery is enabled for labstations at all.
	// Merely setting this value to true does *not* use Paris to recover labstations by itself.
	// However, setting this value to false will *prevent* Paris from being used for this purpose.
	//
	// Deprecated: Do not use.
	EnableLabstationRecovery bool `protobuf:"varint,1,opt,name=enable_labstation_recovery,json=enableLabstationRecovery,proto3" json:"enable_labstation_recovery,omitempty"`
	// Optin_all_labstations opts in every labstation (regardless of optin_labstation_prefix) if set to true.
	//
	// Deprecated: Do not use.
	OptinAllLabstations bool `protobuf:"varint,2,opt,name=optin_all_labstations,json=optinAllLabstations,proto3" json:"optin_all_labstations,omitempty"`
	// Optin_labstation_pools are the pools that contain labstations that are allowed to run the new flow.
	//
	// Deprecated: Do not use.
	OptinLabstationPool []string `protobuf:"bytes,3,rep,name=optin_labstation_pool,json=optinLabstationPool,proto3" json:"optin_labstation_pool,omitempty"`
	// Labstation_recovery_permille is the probability (out of 1000) that we use the new flow for a labstation if
	// we are permitted to repair the labstation in question by the other settings in the config file.
	//
	// The smallest permissible value is 0. The largest is 1000.
	//
	// Deprecated: Do not use.
	LabstationRecoveryPermille int32 `protobuf:"varint,4,opt,name=labstation_recovery_permille,json=labstationRecoveryPermille,proto3" json:"labstation_recovery_permille,omitempty"`
	// DUT_repair controls the repair task for DUTs.
	DutRepair *RolloutConfig `protobuf:"bytes,5,opt,name=dut_repair,json=dutRepair,proto3" json:"dut_repair,omitempty"`
	// DUT_verify controls the verify task for DUTs.
	DutVerify *RolloutConfig `protobuf:"bytes,6,opt,name=dut_verify,json=dutVerify,proto3" json:"dut_verify,omitempty"`
	// DUT_audit controls the audit task for DUTs.
	DutAudit *RolloutConfig `protobuf:"bytes,7,opt,name=dut_audit,json=dutAudit,proto3" json:"dut_audit,omitempty"`
	// Labstation_repair controls the rollout of repair for labstations.
	LabstationRepair *RolloutConfig `protobuf:"bytes,8,opt,name=labstation_repair,json=labstationRepair,proto3" json:"labstation_repair,omitempty"`
}

func (x *Paris) Reset() {
	*x = Paris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paris) ProtoMessage() {}

func (x *Paris) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paris.ProtoReflect.Descriptor instead.
func (*Paris) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Do not use.
func (x *Paris) GetEnableLabstationRecovery() bool {
	if x != nil {
		return x.EnableLabstationRecovery
	}
	return false
}

// Deprecated: Do not use.
func (x *Paris) GetOptinAllLabstations() bool {
	if x != nil {
		return x.OptinAllLabstations
	}
	return false
}

// Deprecated: Do not use.
func (x *Paris) GetOptinLabstationPool() []string {
	if x != nil {
		return x.OptinLabstationPool
	}
	return nil
}

// Deprecated: Do not use.
func (x *Paris) GetLabstationRecoveryPermille() int32 {
	if x != nil {
		return x.LabstationRecoveryPermille
	}
	return 0
}

func (x *Paris) GetDutRepair() *RolloutConfig {
	if x != nil {
		return x.DutRepair
	}
	return nil
}

func (x *Paris) GetDutVerify() *RolloutConfig {
	if x != nil {
		return x.DutVerify
	}
	return nil
}

func (x *Paris) GetDutAudit() *RolloutConfig {
	if x != nil {
		return x.DutAudit
	}
	return nil
}

func (x *Paris) GetLabstationRepair() *RolloutConfig {
	if x != nil {
		return x.LabstationRepair
	}
	return nil
}

// RolloutConfig controls the rollout of a new feature.
//
// For example, the following config rolls out a new feature at the 5% (50/1000) level for
// devices in the pools "a" and "b". Devices not in these pools are rolled out at the 0% level.
//
// {
//  "enable": True,
//  "optin_all_duts": False,
//  "optin_dut_pool": [ "a", "b" ],
//  "rollout_permille": 50
// }
type RolloutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable is set to true when recovery is enabled at all. If it is set to false, the entire
	// DUT recovery flow for PARIS is skipped and the legacy flow is used instead.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Optin_all_duts opts in every DUT (regardless of optin_dut_prefix) if set to true.
	OptinAllDuts bool `protobuf:"varint,2,opt,name=optin_all_duts,json=optinAllDuts,proto3" json:"optin_all_duts,omitempty"`
	// Optin_dut_pool controls on a per-bool basis.
	OptinDutPool []string `protobuf:"bytes,3,rep,name=optin_dut_pool,json=optinDutPool,proto3" json:"optin_dut_pool,omitempty"`
	// Rollout_permille is the probability (multiplied by 1000) that we use the new flow for a DUT if
	// we are permitted to repair the device in question by the other settings in the config file.
	RolloutPermille int32 `protobuf:"varint,4,opt,name=rollout_permille,json=rolloutPermille,proto3" json:"rollout_permille,omitempty"`
}

func (x *RolloutConfig) Reset() {
	*x = RolloutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutConfig) ProtoMessage() {}

func (x *RolloutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutConfig.ProtoReflect.Descriptor instead.
func (*RolloutConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *RolloutConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *RolloutConfig) GetOptinAllDuts() bool {
	if x != nil {
		return x.OptinAllDuts
	}
	return false
}

func (x *RolloutConfig) GetOptinDutPool() []string {
	if x != nil {
		return x.OptinDutPool
	}
	return nil
}

func (x *RolloutConfig) GetRolloutPermille() int32 {
	if x != nil {
		return x.RolloutPermille
	}
	return 0
}

// UFSConfig contains information about UFS, such as its hostname.
type UFSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host is the host of the UFS service.
	//
	// Sample values:
	//  - "ufs.api.cr.dev"
	//  - "staging.ufs.api.cr.dev",
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *UFSConfig) Reset() {
	*x = UFSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UFSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UFSConfig) ProtoMessage() {}

func (x *UFSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UFSConfig.ProtoReflect.Descriptor instead.
func (*UFSConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *UFSConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

var File_infra_appengine_crosskylabadmin_internal_app_config_config_proto protoreflect.FileDescriptor

var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc = []byte{
	0x0a, 0x40, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x05, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x77,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x43, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61,
	0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x50,
	0x43, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5f, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x13, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x11, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x69, 0x73, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x55, 0x46, 0x53, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x46, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x55, 0x46, 0x53, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x53, 0x77,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67,
	0x22, 0xab, 0x02, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x26, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x45, 0x0a, 0x1f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x64, 0x6f, 0x67,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x64, 0x6f, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0xe5,
	0x02, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x49, 0x64, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a,
	0x1d, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1a, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x22, 0xe3, 0x05, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x50, 0x0a, 0x25,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x47,
	0x0a, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62,
	0x6f, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x4f, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x23, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6c,
	0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x55, 0x0a, 0x28,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x44, 0x75, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0xc0, 0x06, 0x0a,
	0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x50, 0x0a, 0x17, 0x64, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64,
	0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x1c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x7e, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x44, 0x75, 0x74, 0x73, 0x22,
	0x4c, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x64, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44,
	0x75, 0x74, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x22, 0xd4, 0x01,
	0x0a, 0x09, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4f,
	0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x22, 0xbe, 0x02, 0x0a, 0x11,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x13,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x32,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa3, 0x04, 0x0a,
	0x05, 0x50, 0x61, 0x72, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x15, 0x6f, 0x70, 0x74, 0x69,
	0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x6f, 0x70, 0x74,
	0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x1c, 0x6c, 0x61, 0x62, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x1a, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x44,
	0x0a, 0x0a, 0x64, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x75, 0x74, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x64, 0x75, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x75,
	0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x64, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6f, 0x70, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x44, 0x75,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69,
	0x6e, 0x44, 0x75, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x6c, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x55, 0x46, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x42, 0x35, 0x5a, 0x33, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescOnce sync.Once
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData = file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc
)

func file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP() []byte {
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescOnce.Do(func() {
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData)
	})
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData
}

var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_goTypes = []interface{}{
	(*Config)(nil),              // 0: crosskylabadmin.config.Config
	(*Swarming)(nil),            // 1: crosskylabadmin.config.Swarming
	(*Tasker)(nil),              // 2: crosskylabadmin.config.Tasker
	(*Cron)(nil),                // 3: crosskylabadmin.config.Cron
	(*RPCControl)(nil),          // 4: crosskylabadmin.config.RPCControl
	(*Inventory)(nil),           // 5: crosskylabadmin.config.Inventory
	(*PoolBalancer)(nil),        // 6: crosskylabadmin.config.PoolBalancer
	(*Endpoint)(nil),            // 7: crosskylabadmin.config.Endpoint
	(*DeployDut)(nil),           // 8: crosskylabadmin.config.DeployDut
	(*StableVersionConfig)(nil), // 9: crosskylabadmin.config.StableVersionConfig
	(*InventoryProvider)(nil),   // 10: crosskylabadmin.config.InventoryProvider
	(*Paris)(nil),               // 11: crosskylabadmin.config.Paris
	(*RolloutConfig)(nil),       // 12: crosskylabadmin.config.RolloutConfig
	(*UFSConfig)(nil),           // 13: crosskylabadmin.config.UFSConfig
	(*durationpb.Duration)(nil), // 14: google.protobuf.Duration
}
var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_depIdxs = []int32{
	1,  // 0: crosskylabadmin.config.Config.swarming:type_name -> crosskylabadmin.config.Swarming
	2,  // 1: crosskylabadmin.config.Config.tasker:type_name -> crosskylabadmin.config.Tasker
	3,  // 2: crosskylabadmin.config.Config.cron:type_name -> crosskylabadmin.config.Cron
	5,  // 3: crosskylabadmin.config.Config.inventory:type_name -> crosskylabadmin.config.Inventory
	7,  // 4: crosskylabadmin.config.Config.endpoint:type_name -> crosskylabadmin.config.Endpoint
	4,  // 5: crosskylabadmin.config.Config.rpc_control:type_name -> crosskylabadmin.config.RPCControl
	9,  // 6: crosskylabadmin.config.Config.stable_version_config:type_name -> crosskylabadmin.config.StableVersionConfig
	10, // 7: crosskylabadmin.config.Config.inventory_provider:type_name -> crosskylabadmin.config.InventoryProvider
	11, // 8: crosskylabadmin.config.Config.paris:type_name -> crosskylabadmin.config.Paris
	13, // 9: crosskylabadmin.config.Config.UFS:type_name -> crosskylabadmin.config.UFSConfig
	14, // 10: crosskylabadmin.config.Cron.repair_idle_duration:type_name -> google.protobuf.Duration
	14, // 11: crosskylabadmin.config.Cron.repair_attempt_delay_duration:type_name -> google.protobuf.Duration
	6,  // 12: crosskylabadmin.config.Cron.pool_balancer:type_name -> crosskylabadmin.config.PoolBalancer
	14, // 13: crosskylabadmin.config.Inventory.dut_info_cache_validity:type_name -> google.protobuf.Duration
	8,  // 14: crosskylabadmin.config.Endpoint.deploy_dut:type_name -> crosskylabadmin.config.DeployDut
	14, // 15: crosskylabadmin.config.DeployDut.task_expiration_timeout:type_name -> google.protobuf.Duration
	14, // 16: crosskylabadmin.config.DeployDut.task_execution_timeout:type_name -> google.protobuf.Duration
	12, // 17: crosskylabadmin.config.Paris.dut_repair:type_name -> crosskylabadmin.config.RolloutConfig
	12, // 18: crosskylabadmin.config.Paris.dut_verify:type_name -> crosskylabadmin.config.RolloutConfig
	12, // 19: crosskylabadmin.config.Paris.dut_audit:type_name -> crosskylabadmin.config.RolloutConfig
	12, // 20: crosskylabadmin.config.Paris.labstation_repair:type_name -> crosskylabadmin.config.RolloutConfig
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_init() }
func file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_init() {
	if File_infra_appengine_crosskylabadmin_internal_app_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swarming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployDut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StableVersionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UFSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_goTypes,
		DependencyIndexes: file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_depIdxs,
		MessageInfos:      file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes,
	}.Build()
	File_infra_appengine_crosskylabadmin_internal_app_config_config_proto = out.File
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc = nil
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_goTypes = nil
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_depIdxs = nil
}
