// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: infra/appengine/crosskylabadmin/internal/app/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config is the configuration data served by luci-config for this app.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessGroup is the luci-auth group controlling access to admin app APIs.
	AccessGroup string `protobuf:"bytes,1,opt,name=access_group,json=accessGroup,proto3" json:"access_group,omitempty"`
	// Swarming contains information about the Swarming instance that hosts the
	// bots managed by this app.
	Swarming *Swarming `protobuf:"bytes,2,opt,name=swarming,proto3" json:"swarming,omitempty"`
	// Tasker contains configuration data specific to the Tasker API endpoints.
	Tasker *Tasker `protobuf:"bytes,3,opt,name=tasker,proto3" json:"tasker,omitempty"`
	// Cron contains the configuration data specific to cron jobs on this app.
	Cron *Cron `protobuf:"bytes,4,opt,name=cron,proto3" json:"cron,omitempty"`
	// RPCcontrol controls rpc traffic.
	RpcControl *RPCControl `protobuf:"bytes,7,opt,name=rpc_control,json=rpcControl,proto3" json:"rpc_control,omitempty"`
	// StableVersionConfig determines the location of stable version related
	// information
	StableVersionConfig *StableVersionConfig `protobuf:"bytes,8,opt,name=stable_version_config,json=stableVersionConfig,proto3" json:"stable_version_config,omitempty"`
	// Paris is the configuration settings for paris (the new repair &c flow).
	Paris *Paris `protobuf:"bytes,10,opt,name=paris,proto3" json:"paris,omitempty"`
	// UFS is the configuration settings for UFS.
	UFS *UFSConfig `protobuf:"bytes,11,opt,name=UFS,proto3" json:"UFS,omitempty"`
	// karte is the configuration settings for Karte.
	Karte *KarteConfig `protobuf:"bytes,12,opt,name=karte,proto3" json:"karte,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetAccessGroup() string {
	if x != nil {
		return x.AccessGroup
	}
	return ""
}

func (x *Config) GetSwarming() *Swarming {
	if x != nil {
		return x.Swarming
	}
	return nil
}

func (x *Config) GetTasker() *Tasker {
	if x != nil {
		return x.Tasker
	}
	return nil
}

func (x *Config) GetCron() *Cron {
	if x != nil {
		return x.Cron
	}
	return nil
}

func (x *Config) GetRpcControl() *RPCControl {
	if x != nil {
		return x.RpcControl
	}
	return nil
}

func (x *Config) GetStableVersionConfig() *StableVersionConfig {
	if x != nil {
		return x.StableVersionConfig
	}
	return nil
}

func (x *Config) GetParis() *Paris {
	if x != nil {
		return x.Paris
	}
	return nil
}

func (x *Config) GetUFS() *UFSConfig {
	if x != nil {
		return x.UFS
	}
	return nil
}

func (x *Config) GetKarte() *KarteConfig {
	if x != nil {
		return x.Karte
	}
	return nil
}

// Swarming contains information about the Swarming instance that hosts the bots
// managed by this app.
type Swarming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host is the swarming instance hosting skylab bots.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// BotPool is the swarming pool containing skylab bots.
	BotPool string `protobuf:"bytes,2,opt,name=bot_pool,json=botPool,proto3" json:"bot_pool,omitempty"`
	// FleetAdminTaskTag identifies all tasks created by the fleet admin app.
	FleetAdminTaskTag string `protobuf:"bytes,3,opt,name=fleet_admin_task_tag,json=fleetAdminTaskTag,proto3" json:"fleet_admin_task_tag,omitempty"`
	// LuciProjectTag is the swarming tag that associates the task with a
	// luci project, allowing milo to work with the swarming UI.
	LuciProjectTag string `protobuf:"bytes,4,opt,name=luci_project_tag,json=luciProjectTag,proto3" json:"luci_project_tag,omitempty"`
	// PoolCfgs contains all configs required for the admin jobs of a particular pool.
	PoolCfgs []*Swarming_PoolCfg `protobuf:"bytes,5,rep,name=pool_cfgs,json=poolCfgs,proto3" json:"pool_cfgs,omitempty"`
}

func (x *Swarming) Reset() {
	*x = Swarming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swarming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swarming) ProtoMessage() {}

func (x *Swarming) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swarming.ProtoReflect.Descriptor instead.
func (*Swarming) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Swarming) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Swarming) GetBotPool() string {
	if x != nil {
		return x.BotPool
	}
	return ""
}

func (x *Swarming) GetFleetAdminTaskTag() string {
	if x != nil {
		return x.FleetAdminTaskTag
	}
	return ""
}

func (x *Swarming) GetLuciProjectTag() string {
	if x != nil {
		return x.LuciProjectTag
	}
	return ""
}

func (x *Swarming) GetPoolCfgs() []*Swarming_PoolCfg {
	if x != nil {
		return x.PoolCfgs
	}
	return nil
}

// Tasker contains configuration data specific to the Tasker API endpoints.
type Tasker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BackgroundTaskExecutionTimeoutSecs is the execution timeout (in
	// seconds) for background tasks created by tasker.
	BackgroundTaskExecutionTimeoutSecs int64 `protobuf:"varint,1,opt,name=background_task_execution_timeout_secs,json=backgroundTaskExecutionTimeoutSecs,proto3" json:"background_task_execution_timeout_secs,omitempty"`
	// BackgroundTaskExpirationSecs is the expiration time (in seconds) for
	// background tasks created by tasker.
	BackgroundTaskExpirationSecs int64 `protobuf:"varint,2,opt,name=background_task_expiration_secs,json=backgroundTaskExpirationSecs,proto3" json:"background_task_expiration_secs,omitempty"`
	// LogdogHost is the Logdog host to use for logging from the created tasks.
	LogdogHost string `protobuf:"bytes,3,opt,name=logdog_host,json=logdogHost,proto3" json:"logdog_host,omitempty"`
	// AdminTaskServiceAccount is the name of the service account to use for admin
	// tasks.
	AdminTaskServiceAccount string `protobuf:"bytes,4,opt,name=admin_task_service_account,json=adminTaskServiceAccount,proto3" json:"admin_task_service_account,omitempty"`
	// AdminTaskRealm is a LUCI realm name with ACLs for admin tasks.
	AdminTaskRealm string `protobuf:"bytes,5,opt,name=admin_task_realm,json=adminTaskRealm,proto3" json:"admin_task_realm,omitempty"`
	// EnableSmartScheduling is a kill switch for the smart-scheduling feature.
	// Setting it to false or not setting it prevents the smart-scheduling logic from
	// affecting the behavior of CrOSSkylabAdmin.
	EnableSmartScheduling bool `protobuf:"varint,6,opt,name=enable_smart_scheduling,json=enableSmartScheduling,proto3" json:"enable_smart_scheduling,omitempty"`
}

func (x *Tasker) Reset() {
	*x = Tasker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasker) ProtoMessage() {}

func (x *Tasker) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasker.ProtoReflect.Descriptor instead.
func (*Tasker) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Tasker) GetBackgroundTaskExecutionTimeoutSecs() int64 {
	if x != nil {
		return x.BackgroundTaskExecutionTimeoutSecs
	}
	return 0
}

func (x *Tasker) GetBackgroundTaskExpirationSecs() int64 {
	if x != nil {
		return x.BackgroundTaskExpirationSecs
	}
	return 0
}

func (x *Tasker) GetLogdogHost() string {
	if x != nil {
		return x.LogdogHost
	}
	return ""
}

func (x *Tasker) GetAdminTaskServiceAccount() string {
	if x != nil {
		return x.AdminTaskServiceAccount
	}
	return ""
}

func (x *Tasker) GetAdminTaskRealm() string {
	if x != nil {
		return x.AdminTaskRealm
	}
	return ""
}

func (x *Tasker) GetEnableSmartScheduling() bool {
	if x != nil {
		return x.EnableSmartScheduling
	}
	return false
}

// Cron contains the configuration data specific to cron jobs on this app.
type Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FleetAdminTaskPriority is the swarming task priority of created tasks.
	//
	// This must be numerically smaller (i.e. more important) than Skylab's test
	// task priority range [49-255] and numerically larger than the minimum
	// allowed Swarming priority (20) for non administrator users.
	FleetAdminTaskPriority int64 `protobuf:"varint,1,opt,name=fleet_admin_task_priority,json=fleetAdminTaskPriority,proto3" json:"fleet_admin_task_priority,omitempty"`
	// EnsureTasksCount is the number of background tasks maintained against
	// each bot.
	EnsureTasksCount int32 `protobuf:"varint,2,opt,name=ensure_tasks_count,json=ensureTasksCount,proto3" json:"ensure_tasks_count,omitempty"`
	// RepairIdleDuration is the duration for which a bot in the fleet must have
	// been idle for a repair task to be created against it.
	RepairIdleDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=repair_idle_duration,json=repairIdleDuration,proto3" json:"repair_idle_duration,omitempty"`
	// RepairAttemptDelayDuration is the time between successive attempts at
	// repairing repair failed bots in the fleet.
	RepairAttemptDelayDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=repair_attempt_delay_duration,json=repairAttemptDelayDuration,proto3" json:"repair_attempt_delay_duration,omitempty"`
}

func (x *Cron) Reset() {
	*x = Cron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cron) ProtoMessage() {}

func (x *Cron) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cron.ProtoReflect.Descriptor instead.
func (*Cron) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Cron) GetFleetAdminTaskPriority() int64 {
	if x != nil {
		return x.FleetAdminTaskPriority
	}
	return 0
}

func (x *Cron) GetEnsureTasksCount() int32 {
	if x != nil {
		return x.EnsureTasksCount
	}
	return 0
}

func (x *Cron) GetRepairIdleDuration() *durationpb.Duration {
	if x != nil {
		return x.RepairIdleDuration
	}
	return nil
}

func (x *Cron) GetRepairAttemptDelayDuration() *durationpb.Duration {
	if x != nil {
		return x.RepairAttemptDelayDuration
	}
	return nil
}

// next tag: 11
type RPCControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of if disabling some rpc calls. It's used in experimental
	// stage. Once an RPC call is verified to be working/useless, it will be
	// added/deleted.
	DisableEnsureBackgroundTasks        bool `protobuf:"varint,1,opt,name=disable_ensure_background_tasks,json=disableEnsureBackgroundTasks,proto3" json:"disable_ensure_background_tasks,omitempty"`
	DisableEnsureCriticalPoolsHealthy   bool `protobuf:"varint,2,opt,name=disable_ensure_critical_pools_healthy,json=disableEnsureCriticalPoolsHealthy,proto3" json:"disable_ensure_critical_pools_healthy,omitempty"`
	DisablePushBotsForAdminTasks        bool `protobuf:"varint,3,opt,name=disable_push_bots_for_admin_tasks,json=disablePushBotsForAdminTasks,proto3" json:"disable_push_bots_for_admin_tasks,omitempty"`
	DisableRefreshBots                  bool `protobuf:"varint,4,opt,name=disable_refresh_bots,json=disableRefreshBots,proto3" json:"disable_refresh_bots,omitempty"`
	DisableRefreshInventory             bool `protobuf:"varint,5,opt,name=disable_refresh_inventory,json=disableRefreshInventory,proto3" json:"disable_refresh_inventory,omitempty"`
	DisableTriggerRepairOnIdle          bool `protobuf:"varint,6,opt,name=disable_trigger_repair_on_idle,json=disableTriggerRepairOnIdle,proto3" json:"disable_trigger_repair_on_idle,omitempty"`
	DisableTriggerRepairOnRepairFailed  bool `protobuf:"varint,7,opt,name=disable_trigger_repair_on_repair_failed,json=disableTriggerRepairOnRepairFailed,proto3" json:"disable_trigger_repair_on_repair_failed,omitempty"`
	DisablePushLabstationsForRepair     bool `protobuf:"varint,8,opt,name=disable_push_labstations_for_repair,json=disablePushLabstationsForRepair,proto3" json:"disable_push_labstations_for_repair,omitempty"`
	DisableDumpStableVersionToDatastore bool `protobuf:"varint,9,opt,name=disable_dump_stable_version_to_datastore,json=disableDumpStableVersionToDatastore,proto3" json:"disable_dump_stable_version_to_datastore,omitempty"`
	DisablePushDutsForAdminAudit        bool `protobuf:"varint,10,opt,name=disable_push_duts_for_admin_audit,json=disablePushDutsForAdminAudit,proto3" json:"disable_push_duts_for_admin_audit,omitempty"`
}

func (x *RPCControl) Reset() {
	*x = RPCControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCControl) ProtoMessage() {}

func (x *RPCControl) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCControl.ProtoReflect.Descriptor instead.
func (*RPCControl) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *RPCControl) GetDisableEnsureBackgroundTasks() bool {
	if x != nil {
		return x.DisableEnsureBackgroundTasks
	}
	return false
}

func (x *RPCControl) GetDisableEnsureCriticalPoolsHealthy() bool {
	if x != nil {
		return x.DisableEnsureCriticalPoolsHealthy
	}
	return false
}

func (x *RPCControl) GetDisablePushBotsForAdminTasks() bool {
	if x != nil {
		return x.DisablePushBotsForAdminTasks
	}
	return false
}

func (x *RPCControl) GetDisableRefreshBots() bool {
	if x != nil {
		return x.DisableRefreshBots
	}
	return false
}

func (x *RPCControl) GetDisableRefreshInventory() bool {
	if x != nil {
		return x.DisableRefreshInventory
	}
	return false
}

func (x *RPCControl) GetDisableTriggerRepairOnIdle() bool {
	if x != nil {
		return x.DisableTriggerRepairOnIdle
	}
	return false
}

func (x *RPCControl) GetDisableTriggerRepairOnRepairFailed() bool {
	if x != nil {
		return x.DisableTriggerRepairOnRepairFailed
	}
	return false
}

func (x *RPCControl) GetDisablePushLabstationsForRepair() bool {
	if x != nil {
		return x.DisablePushLabstationsForRepair
	}
	return false
}

func (x *RPCControl) GetDisableDumpStableVersionToDatastore() bool {
	if x != nil {
		return x.DisableDumpStableVersionToDatastore
	}
	return false
}

func (x *RPCControl) GetDisablePushDutsForAdminAudit() bool {
	if x != nil {
		return x.DisablePushDutsForAdminAudit
	}
	return false
}

type StableVersionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Gerrit Server for the stable version data file's repo
	// example: "chrome-internal-review.googlesource.com"
	GerritHost string `protobuf:"bytes,1,opt,name=gerrit_host,json=gerritHost,proto3" json:"gerrit_host,omitempty"`
	// The Gitiles Server for the stable version data file's repo
	// example: "chrome-internal.googlesource.com"
	GitilesHost string `protobuf:"bytes,2,opt,name=gitiles_host,json=gitilesHost,proto3" json:"gitiles_host,omitempty"`
	// The project name for the stable version data file's repo
	// example: "chromeos/infra/config"
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// The branch that the stable version data file is on
	// example: "main"
	Branch string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// The path, relative to the repo root, of the stable version data file
	// example: "lab_platform/stable_version_data/stable_versions.cfg"
	StableVersionDataPath string `protobuf:"bytes,5,opt,name=stable_version_data_path,json=stableVersionDataPath,proto3" json:"stable_version_data_path,omitempty"`
}

func (x *StableVersionConfig) Reset() {
	*x = StableVersionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableVersionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableVersionConfig) ProtoMessage() {}

func (x *StableVersionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableVersionConfig.ProtoReflect.Descriptor instead.
func (*StableVersionConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *StableVersionConfig) GetGerritHost() string {
	if x != nil {
		return x.GerritHost
	}
	return ""
}

func (x *StableVersionConfig) GetGitilesHost() string {
	if x != nil {
		return x.GitilesHost
	}
	return ""
}

func (x *StableVersionConfig) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *StableVersionConfig) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *StableVersionConfig) GetStableVersionDataPath() string {
	if x != nil {
		return x.StableVersionDataPath
	}
	return ""
}

// Paris controls whether the Paris is enabled for tasks like repair and audit.
// It also supports slow rollouts.
//
// Note that there are a few levels of checks before we actually use the Paris
// flow. For example, if we are considering repairing a labstation with Paris,
// we will consult the configuration in the following way.
type Paris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DUT_repair controls the repair task for DUTs.
	// For expected state needs_repair.
	DutRepair *RolloutConfig `protobuf:"bytes,5,opt,name=dut_repair,json=dutRepair,proto3" json:"dut_repair,omitempty"`
	// DUT_repair controls the repair task for DUTs.
	// For expected state repair_failed.
	DutRepairOnRepairFailed *RolloutConfig `protobuf:"bytes,9,opt,name=dut_repair_on_repair_failed,json=dutRepairOnRepairFailed,proto3" json:"dut_repair_on_repair_failed,omitempty"`
	// DUT_repair controls the repair task for DUTs.
	// For expected state needs_manual_repair.
	DutRepairOnNeedsManualRepair *RolloutConfig `protobuf:"bytes,10,opt,name=dut_repair_on_needs_manual_repair,json=dutRepairOnNeedsManualRepair,proto3" json:"dut_repair_on_needs_manual_repair,omitempty"`
	// AuditRPM controls the rollout settings for audit RPM tasks.
	AuditRpm *RolloutConfig `protobuf:"bytes,11,opt,name=audit_rpm,json=auditRpm,proto3" json:"audit_rpm,omitempty"`
	// AuditStorage controls the rollout settings for audit storage tasks.
	AuditStorage *RolloutConfig `protobuf:"bytes,12,opt,name=audit_storage,json=auditStorage,proto3" json:"audit_storage,omitempty"`
	// AuditUSB controls the rollout settings for audit USB tasks.
	AuditUsb *RolloutConfig `protobuf:"bytes,13,opt,name=audit_usb,json=auditUsb,proto3" json:"audit_usb,omitempty"`
	// DUT_verify controls the verify task for DUTs.
	DutVerify *RolloutConfig `protobuf:"bytes,6,opt,name=dut_verify,json=dutVerify,proto3" json:"dut_verify,omitempty"`
	// Labstation_repair controls the rollout of repair for labstations.
	LabstationRepair *RolloutConfig `protobuf:"bytes,8,opt,name=labstation_repair,json=labstationRepair,proto3" json:"labstation_repair,omitempty"`
}

func (x *Paris) Reset() {
	*x = Paris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paris) ProtoMessage() {}

func (x *Paris) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paris.ProtoReflect.Descriptor instead.
func (*Paris) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *Paris) GetDutRepair() *RolloutConfig {
	if x != nil {
		return x.DutRepair
	}
	return nil
}

func (x *Paris) GetDutRepairOnRepairFailed() *RolloutConfig {
	if x != nil {
		return x.DutRepairOnRepairFailed
	}
	return nil
}

func (x *Paris) GetDutRepairOnNeedsManualRepair() *RolloutConfig {
	if x != nil {
		return x.DutRepairOnNeedsManualRepair
	}
	return nil
}

func (x *Paris) GetAuditRpm() *RolloutConfig {
	if x != nil {
		return x.AuditRpm
	}
	return nil
}

func (x *Paris) GetAuditStorage() *RolloutConfig {
	if x != nil {
		return x.AuditStorage
	}
	return nil
}

func (x *Paris) GetAuditUsb() *RolloutConfig {
	if x != nil {
		return x.AuditUsb
	}
	return nil
}

func (x *Paris) GetDutVerify() *RolloutConfig {
	if x != nil {
		return x.DutVerify
	}
	return nil
}

func (x *Paris) GetLabstationRepair() *RolloutConfig {
	if x != nil {
		return x.LabstationRepair
	}
	return nil
}

// RolloutConfig controls the rollout of a new feature.
//
// For example, the following config rolls out a new feature at the 5% (50/1000)
// level for devices in the pools "a" and "b". Devices not in these pools are
// rolled out at the 0% level.
//
//	{
//	 "enable": True,
//	 "optin_all_duts": False,
//	 "optin_dut_pool": [ "a", "b" ],
//	 "prod_permille": 50,
//	}
type RolloutConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable is set to true when recovery is enabled at all. If it is set to
	// false, the entire DUT recovery flow for PARIS is skipped and the legacy
	// flow is used instead.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Optin_all_duts opts in every DUT (regardless of optin_dut_prefix) if set to
	// true.
	OptinAllDuts bool `protobuf:"varint,2,opt,name=optin_all_duts,json=optinAllDuts,proto3" json:"optin_all_duts,omitempty"`
	// Optin_dut_pool controls on a per-bool basis.
	OptinDutPool []string `protobuf:"bytes,3,rep,name=optin_dut_pool,json=optinDutPool,proto3" json:"optin_dut_pool,omitempty"`
	// prod_permille is the probability (multiplied by 1000) that we use the new
	// flow for a DUT if we are permitted to repair the device in question by the
	// other settings in the config file.
	ProdPermille int32 `protobuf:"varint,6,opt,name=prod_permille,json=prodPermille,proto3" json:"prod_permille,omitempty"`
	// latest_permille is the probability (multiplied by 1000) that we use the new
	// flow for a DUT at the "latest" label. The "latest" label is automatically
	// marched forward to the latest version of paris that has been build, as
	// opposed to "prod" which is manually updated after validation.
	//
	// Note that latest_permille and prod_permille are alternatives.
	// latest_permille + prod_permille is the chance of using Paris at all.
	// 1000 - latest_permille - prod_permille is the chance of using the legacy
	// flow.
	//
	// For example, if prod is 500 and latest is 200, then legacy is implicitly
	// 300. If prod is 20 and legacy is 1, then legacy is implicitly 979.
	LatestPermille int32 `protobuf:"varint,7,opt,name=latest_permille,json=latestPermille,proto3" json:"latest_permille,omitempty"`
	// pattern is a list of regex patterns that are associated with prod and
	// latest permilles.
	//
	// The patterns are tried LAST to FIRST.
	// The reason for this is to allow more general patterns to come first and
	// more specific overrides to come later.
	//
	// For example, the following is a reasonable sequence of patterns.
	//   - ^satlab
	//   - ^satlab-555555
	//   - ^satlab-555555-host1
	//
	// Organizing these patterns more specific to less specific reads better than
	// organizing them in another way.
	Pattern []*RolloutConfig_Pattern `protobuf:"bytes,8,rep,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *RolloutConfig) Reset() {
	*x = RolloutConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutConfig) ProtoMessage() {}

func (x *RolloutConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutConfig.ProtoReflect.Descriptor instead.
func (*RolloutConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *RolloutConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *RolloutConfig) GetOptinAllDuts() bool {
	if x != nil {
		return x.OptinAllDuts
	}
	return false
}

func (x *RolloutConfig) GetOptinDutPool() []string {
	if x != nil {
		return x.OptinDutPool
	}
	return nil
}

func (x *RolloutConfig) GetProdPermille() int32 {
	if x != nil {
		return x.ProdPermille
	}
	return 0
}

func (x *RolloutConfig) GetLatestPermille() int32 {
	if x != nil {
		return x.LatestPermille
	}
	return 0
}

func (x *RolloutConfig) GetPattern() []*RolloutConfig_Pattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

// UFSConfig contains information about UFS, such as its hostname.
type UFSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host is the host of the UFS service.
	//
	// Sample values:
	//   - "ufs.api.cr.dev"
	//   - "staging.ufs.api.cr.dev",
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *UFSConfig) Reset() {
	*x = UFSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UFSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UFSConfig) ProtoMessage() {}

func (x *UFSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UFSConfig.ProtoReflect.Descriptor instead.
func (*UFSConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *UFSConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// KarteConfig contains information about Karte, such as its hostname.
type KarteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host is the host of the Karte service.
	//
	// Sample values:
	//   - chrome-fleet-karte.appspot.com
	//   - chrome-fleet-karte-dev.appspot.com
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *KarteConfig) Reset() {
	*x = KarteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KarteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KarteConfig) ProtoMessage() {}

func (x *KarteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KarteConfig.ProtoReflect.Descriptor instead.
func (*KarteConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *KarteConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// SmartSchedulingConfig controls whether the smart scheduling feature is enabled or disabled and controls its rollout.
type SmartSchedulingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// rollout permille is an amount out of 1000 that controls.
	RolloutPermille int32 `protobuf:"varint,2,opt,name=rollout_permille,json=rolloutPermille,proto3" json:"rollout_permille,omitempty"`
	// maximum devices controls how many devices total can use the new flow to limit the rollout.
	MaximumDevices int32 `protobuf:"varint,3,opt,name=maximum_devices,json=maximumDevices,proto3" json:"maximum_devices,omitempty"`
}

func (x *SmartSchedulingConfig) Reset() {
	*x = SmartSchedulingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartSchedulingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartSchedulingConfig) ProtoMessage() {}

func (x *SmartSchedulingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartSchedulingConfig.ProtoReflect.Descriptor instead.
func (*SmartSchedulingConfig) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *SmartSchedulingConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SmartSchedulingConfig) GetRolloutPermille() int32 {
	if x != nil {
		return x.RolloutPermille
	}
	return 0
}

func (x *SmartSchedulingConfig) GetMaximumDevices() int32 {
	if x != nil {
		return x.MaximumDevices
	}
	return 0
}

type Swarming_PoolCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pool containing the skylab bots
	PoolName string `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	// The builder bucket specifies the bucket to use to run swarming task.
	BuilderBucket string `protobuf:"bytes,2,opt,name=builder_bucket,json=builderBucket,proto3" json:"builder_bucket,omitempty"`
	// BotPrefix specified the prefix used or set for the swarming bots.
	// Please note, PoolName is used to get the list of all swarming bots
	// from the pool, and BotPrefix is the prefix used by each bot set in
	// the bot config.
	BotPrefix string `protobuf:"bytes,3,opt,name=bot_prefix,json=botPrefix,proto3" json:"bot_prefix,omitempty"`
	// UfsNamespace specifies the namespace to be used to fetch DUT information.
	UfsNamespace string `protobuf:"bytes,4,opt,name=ufs_namespace,json=ufsNamespace,proto3" json:"ufs_namespace,omitempty"`
	// Indicates whether the service should schedule USB drive audit tasks.
	ScheduleAuditUsb bool `protobuf:"varint,5,opt,name=schedule_audit_usb,json=scheduleAuditUsb,proto3" json:"schedule_audit_usb,omitempty"`
	// Indicates whether the service should schedule RPM audit tasks.
	ScheduleAuditRpm bool `protobuf:"varint,6,opt,name=schedule_audit_rpm,json=scheduleAuditRpm,proto3" json:"schedule_audit_rpm,omitempty"`
	// Indicates whether the service should schedule storage audit tasks.
	ScheduleAuditStorage bool `protobuf:"varint,7,opt,name=schedule_audit_storage,json=scheduleAuditStorage,proto3" json:"schedule_audit_storage,omitempty"`
}

func (x *Swarming_PoolCfg) Reset() {
	*x = Swarming_PoolCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swarming_PoolCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swarming_PoolCfg) ProtoMessage() {}

func (x *Swarming_PoolCfg) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swarming_PoolCfg.ProtoReflect.Descriptor instead.
func (*Swarming_PoolCfg) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Swarming_PoolCfg) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *Swarming_PoolCfg) GetBuilderBucket() string {
	if x != nil {
		return x.BuilderBucket
	}
	return ""
}

func (x *Swarming_PoolCfg) GetBotPrefix() string {
	if x != nil {
		return x.BotPrefix
	}
	return ""
}

func (x *Swarming_PoolCfg) GetUfsNamespace() string {
	if x != nil {
		return x.UfsNamespace
	}
	return ""
}

func (x *Swarming_PoolCfg) GetScheduleAuditUsb() bool {
	if x != nil {
		return x.ScheduleAuditUsb
	}
	return false
}

func (x *Swarming_PoolCfg) GetScheduleAuditRpm() bool {
	if x != nil {
		return x.ScheduleAuditRpm
	}
	return false
}

func (x *Swarming_PoolCfg) GetScheduleAuditStorage() bool {
	if x != nil {
		return x.ScheduleAuditStorage
	}
	return false
}

// A Pattern associates a regex identifier to a prod_permille and
// latest_permille.
type RolloutConfig_Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pattern is a regex like "^satlab-555555".
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// prod_permille is the probability multiplied by 1000 of using prod.
	ProdPermille int32 `protobuf:"varint,2,opt,name=prod_permille,json=prodPermille,proto3" json:"prod_permille,omitempty"`
	// latest_permille is the probability multiplied by 1000 of using latest.
	//
	// In the event that latest + prod > 1000, latest is treated as if it were
	// (1000 - prod).
	LatestPermille int32 `protobuf:"varint,3,opt,name=latest_permille,json=latestPermille,proto3" json:"latest_permille,omitempty"`
}

func (x *RolloutConfig_Pattern) Reset() {
	*x = RolloutConfig_Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutConfig_Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutConfig_Pattern) ProtoMessage() {}

func (x *RolloutConfig_Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutConfig_Pattern.ProtoReflect.Descriptor instead.
func (*RolloutConfig_Pattern) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RolloutConfig_Pattern) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RolloutConfig_Pattern) GetProdPermille() int32 {
	if x != nil {
		return x.ProdPermille
	}
	return 0
}

func (x *RolloutConfig_Pattern) GetLatestPermille() int32 {
	if x != nil {
		return x.LatestPermille
	}
	return 0
}

var File_infra_appengine_crosskylabadmin_internal_app_config_config_proto protoreflect.FileDescriptor

var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc = []byte{
	0x0a, 0x40, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x04, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x77,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x50, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5f, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61,
	0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x13, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x69, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x61, 0x72, 0x69, 0x73, 0x52, 0x05, 0x70, 0x61, 0x72, 0x69, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x55,
	0x46, 0x53, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x46, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x55, 0x46, 0x53,
	0x12, 0x39, 0x0a, 0x05, 0x6b, 0x61, 0x72, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x72, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6b, 0x61, 0x72, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x12, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x12, 0x45, 0x0a,
	0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x66, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x66, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x43, 0x66, 0x67, 0x73, 0x1a, 0xa3, 0x02, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x66, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x66, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x66, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x55, 0x73, 0x62, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x52, 0x70, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x26, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x64, 0x6f, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x64, 0x6f, 0x67, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x22, 0xaf, 0x02, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x52, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x22, 0xe3, 0x05, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x47, 0x0a, 0x21, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f,
	0x6e, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x6e, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x55, 0x0a, 0x28, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x47, 0x0a, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x64, 0x75, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x44, 0x75, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xa1, 0x06, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x69, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x75, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x63, 0x0a, 0x1b, 0x64, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61,
	0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x64, 0x75, 0x74,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x21, 0x64, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1c, 0x64, 0x75, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x4f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x70,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x52, 0x70, 0x6d, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73,
	0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x55, 0x73, 0x62, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x75, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x52,
	0x0a, 0x11, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x15, 0x6f, 0x70,
	0x74, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x15, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x1c, 0x6c, 0x61, 0x62, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x52, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x22, 0xad, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x44,
	0x75, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x74,
	0x69, 0x6e, 0x44, 0x75, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x1a, 0x71, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52,
	0x10, 0x75, 0x66, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x6c, 0x6c, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x55, 0x46, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x4b, 0x61, 0x72, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x35, 0x5a, 0x33, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescOnce sync.Once
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData = file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc
)

func file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescGZIP() []byte {
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescOnce.Do(func() {
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData)
	})
	return file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDescData
}

var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_goTypes = []interface{}{
	(*Config)(nil),                // 0: crosskylabadmin.config.Config
	(*Swarming)(nil),              // 1: crosskylabadmin.config.Swarming
	(*Tasker)(nil),                // 2: crosskylabadmin.config.Tasker
	(*Cron)(nil),                  // 3: crosskylabadmin.config.Cron
	(*RPCControl)(nil),            // 4: crosskylabadmin.config.RPCControl
	(*StableVersionConfig)(nil),   // 5: crosskylabadmin.config.StableVersionConfig
	(*Paris)(nil),                 // 6: crosskylabadmin.config.Paris
	(*RolloutConfig)(nil),         // 7: crosskylabadmin.config.RolloutConfig
	(*UFSConfig)(nil),             // 8: crosskylabadmin.config.UFSConfig
	(*KarteConfig)(nil),           // 9: crosskylabadmin.config.KarteConfig
	(*SmartSchedulingConfig)(nil), // 10: crosskylabadmin.config.SmartSchedulingConfig
	(*Swarming_PoolCfg)(nil),      // 11: crosskylabadmin.config.Swarming.PoolCfg
	(*RolloutConfig_Pattern)(nil), // 12: crosskylabadmin.config.RolloutConfig.Pattern
	(*durationpb.Duration)(nil),   // 13: google.protobuf.Duration
}
var file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_depIdxs = []int32{
	1,  // 0: crosskylabadmin.config.Config.swarming:type_name -> crosskylabadmin.config.Swarming
	2,  // 1: crosskylabadmin.config.Config.tasker:type_name -> crosskylabadmin.config.Tasker
	3,  // 2: crosskylabadmin.config.Config.cron:type_name -> crosskylabadmin.config.Cron
	4,  // 3: crosskylabadmin.config.Config.rpc_control:type_name -> crosskylabadmin.config.RPCControl
	5,  // 4: crosskylabadmin.config.Config.stable_version_config:type_name -> crosskylabadmin.config.StableVersionConfig
	6,  // 5: crosskylabadmin.config.Config.paris:type_name -> crosskylabadmin.config.Paris
	8,  // 6: crosskylabadmin.config.Config.UFS:type_name -> crosskylabadmin.config.UFSConfig
	9,  // 7: crosskylabadmin.config.Config.karte:type_name -> crosskylabadmin.config.KarteConfig
	11, // 8: crosskylabadmin.config.Swarming.pool_cfgs:type_name -> crosskylabadmin.config.Swarming.PoolCfg
	13, // 9: crosskylabadmin.config.Cron.repair_idle_duration:type_name -> google.protobuf.Duration
	13, // 10: crosskylabadmin.config.Cron.repair_attempt_delay_duration:type_name -> google.protobuf.Duration
	7,  // 11: crosskylabadmin.config.Paris.dut_repair:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 12: crosskylabadmin.config.Paris.dut_repair_on_repair_failed:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 13: crosskylabadmin.config.Paris.dut_repair_on_needs_manual_repair:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 14: crosskylabadmin.config.Paris.audit_rpm:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 15: crosskylabadmin.config.Paris.audit_storage:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 16: crosskylabadmin.config.Paris.audit_usb:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 17: crosskylabadmin.config.Paris.dut_verify:type_name -> crosskylabadmin.config.RolloutConfig
	7,  // 18: crosskylabadmin.config.Paris.labstation_repair:type_name -> crosskylabadmin.config.RolloutConfig
	12, // 19: crosskylabadmin.config.RolloutConfig.pattern:type_name -> crosskylabadmin.config.RolloutConfig.Pattern
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_init() }
func file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_init() {
	if File_infra_appengine_crosskylabadmin_internal_app_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swarming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StableVersionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UFSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KarteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartSchedulingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swarming_PoolCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutConfig_Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_goTypes,
		DependencyIndexes: file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_depIdxs,
		MessageInfos:      file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_msgTypes,
	}.Build()
	File_infra_appengine_crosskylabadmin_internal_app_config_config_proto = out.File
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_rawDesc = nil
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_goTypes = nil
	file_infra_appengine_crosskylabadmin_internal_app_config_config_proto_depIdxs = nil
}
