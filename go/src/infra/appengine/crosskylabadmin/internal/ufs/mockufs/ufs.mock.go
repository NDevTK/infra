// // Copyright 2023 The Chromium Authors
// // Use of this source code is governed by a BSD-style license that can be
// // found in the LICENSE file.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ufs.go

// Package mockufs is a generated GoMock package.
package mockufs

import (
	context "context"
	ufspb "infra/unifiedfleet/api/v1/models"
	ufspb0 "infra/unifiedfleet/api/v1/rpc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetDUTsForLabstation mocks base method.
func (m *MockClient) GetDUTsForLabstation(arg0 context.Context, arg1 *ufspb0.GetDUTsForLabstationRequest, arg2 ...grpc.CallOption) (*ufspb0.GetDUTsForLabstationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDUTsForLabstation", varargs...)
	ret0, _ := ret[0].(*ufspb0.GetDUTsForLabstationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDUTsForLabstation indicates an expected call of GetDUTsForLabstation.
func (mr *MockClientMockRecorder) GetDUTsForLabstation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDUTsForLabstation", reflect.TypeOf((*MockClient)(nil).GetDUTsForLabstation), varargs...)
}

// GetDeviceData mocks base method.
func (m *MockClient) GetDeviceData(arg0 context.Context, arg1 *ufspb0.GetDeviceDataRequest, arg2 ...grpc.CallOption) (*ufspb0.GetDeviceDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeviceData", varargs...)
	ret0, _ := ret[0].(*ufspb0.GetDeviceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceData indicates an expected call of GetDeviceData.
func (mr *MockClientMockRecorder) GetDeviceData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceData", reflect.TypeOf((*MockClient)(nil).GetDeviceData), varargs...)
}

// GetMachineLSE mocks base method.
func (m *MockClient) GetMachineLSE(arg0 context.Context, arg1 *ufspb0.GetMachineLSERequest, arg2 ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSE indicates an expected call of GetMachineLSE.
func (mr *MockClientMockRecorder) GetMachineLSE(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSE", reflect.TypeOf((*MockClient)(nil).GetMachineLSE), varargs...)
}

// MockGetPoolsClient is a mock of GetPoolsClient interface.
type MockGetPoolsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGetPoolsClientMockRecorder
}

// MockGetPoolsClientMockRecorder is the mock recorder for MockGetPoolsClient.
type MockGetPoolsClientMockRecorder struct {
	mock *MockGetPoolsClient
}

// NewMockGetPoolsClient creates a new mock instance.
func NewMockGetPoolsClient(ctrl *gomock.Controller) *MockGetPoolsClient {
	mock := &MockGetPoolsClient{ctrl: ctrl}
	mock.recorder = &MockGetPoolsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPoolsClient) EXPECT() *MockGetPoolsClientMockRecorder {
	return m.recorder
}

// GetMachineLSE mocks base method.
func (m *MockGetPoolsClient) GetMachineLSE(ctx context.Context, in *ufspb0.GetMachineLSERequest, opts ...grpc.CallOption) (*ufspb.MachineLSE, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMachineLSE", varargs...)
	ret0, _ := ret[0].(*ufspb.MachineLSE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineLSE indicates an expected call of GetMachineLSE.
func (mr *MockGetPoolsClientMockRecorder) GetMachineLSE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineLSE", reflect.TypeOf((*MockGetPoolsClient)(nil).GetMachineLSE), varargs...)
}
