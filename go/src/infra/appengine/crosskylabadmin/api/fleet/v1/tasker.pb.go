// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/crosskylabadmin/api/fleet/v1/tasker.proto

package fleet

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TaskType int32

const (
	TaskType_Invalid TaskType = 0
	TaskType_Reset   TaskType = 1
	TaskType_Cleanup TaskType = 2
	TaskType_Repair  TaskType = 3
)

var TaskType_name = map[int32]string{
	0: "Invalid",
	1: "Reset",
	2: "Cleanup",
	3: "Repair",
}

var TaskType_value = map[string]int32{
	"Invalid": 0,
	"Reset":   1,
	"Cleanup": 2,
	"Repair":  3,
}

func (x TaskType) String() string {
	return proto.EnumName(TaskType_name, int32(x))
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{0}
}

// TaskerTasksResponse is returned by various Tasker rpcs to report the tasks
// created to satisfy the rpc.
type TaskerTasksResponse struct {
	// bot_tasks lists the tasks scheduled by Tasker for the bots.
	//
	// RPC responses contain bot_tasks for each of the bots selected,
	// even if no tasks are currently scheduled for some of the bots.
	BotTasks             []*TaskerBotTasks `protobuf:"bytes,1,rep,name=bot_tasks,json=botTasks,proto3" json:"bot_tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskerTasksResponse) Reset()         { *m = TaskerTasksResponse{} }
func (m *TaskerTasksResponse) String() string { return proto.CompactTextString(m) }
func (*TaskerTasksResponse) ProtoMessage()    {}
func (*TaskerTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{0}
}

func (m *TaskerTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskerTasksResponse.Unmarshal(m, b)
}
func (m *TaskerTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskerTasksResponse.Marshal(b, m, deterministic)
}
func (m *TaskerTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskerTasksResponse.Merge(m, src)
}
func (m *TaskerTasksResponse) XXX_Size() int {
	return xxx_messageInfo_TaskerTasksResponse.Size(m)
}
func (m *TaskerTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskerTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskerTasksResponse proto.InternalMessageInfo

func (m *TaskerTasksResponse) GetBotTasks() []*TaskerBotTasks {
	if m != nil {
		return m.BotTasks
	}
	return nil
}

// TaskerBotTasks lists tasks scheduled by Tasker for a single bot.
type TaskerBotTasks struct {
	// dut_id specifies the dut_id dimension of the bot.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// tasks lists tasks scheduled by Tasker for this bot.
	//
	// If no tasks are currently scheduled for a bot selected in the RPC
	// request, tasks will be unset.
	Tasks                []*TaskerTask `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TaskerBotTasks) Reset()         { *m = TaskerBotTasks{} }
func (m *TaskerBotTasks) String() string { return proto.CompactTextString(m) }
func (*TaskerBotTasks) ProtoMessage()    {}
func (*TaskerBotTasks) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{1}
}

func (m *TaskerBotTasks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskerBotTasks.Unmarshal(m, b)
}
func (m *TaskerBotTasks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskerBotTasks.Marshal(b, m, deterministic)
}
func (m *TaskerBotTasks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskerBotTasks.Merge(m, src)
}
func (m *TaskerBotTasks) XXX_Size() int {
	return xxx_messageInfo_TaskerBotTasks.Size(m)
}
func (m *TaskerBotTasks) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskerBotTasks.DiscardUnknown(m)
}

var xxx_messageInfo_TaskerBotTasks proto.InternalMessageInfo

func (m *TaskerBotTasks) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *TaskerBotTasks) GetTasks() []*TaskerTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// TaskerTask contains information about a single task created by Tasker.
type TaskerTask struct {
	// type specifies what type of the task that was triggered.
	Type TaskType `protobuf:"varint,2,opt,name=type,proto3,enum=crosskylabadmin.fleet.TaskType" json:"type,omitempty"`
	// task_url lists the URL to the Swarming task triggered.
	TaskUrl              string   `protobuf:"bytes,3,opt,name=task_url,json=taskUrl,proto3" json:"task_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskerTask) Reset()         { *m = TaskerTask{} }
func (m *TaskerTask) String() string { return proto.CompactTextString(m) }
func (*TaskerTask) ProtoMessage()    {}
func (*TaskerTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{2}
}

func (m *TaskerTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskerTask.Unmarshal(m, b)
}
func (m *TaskerTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskerTask.Marshal(b, m, deterministic)
}
func (m *TaskerTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskerTask.Merge(m, src)
}
func (m *TaskerTask) XXX_Size() int {
	return xxx_messageInfo_TaskerTask.Size(m)
}
func (m *TaskerTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskerTask.DiscardUnknown(m)
}

var xxx_messageInfo_TaskerTask proto.InternalMessageInfo

func (m *TaskerTask) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_Invalid
}

func (m *TaskerTask) GetTaskUrl() string {
	if m != nil {
		return m.TaskUrl
	}
	return ""
}

// TriggerRepairOnIdleRequest is used to control the behaviour of
// TriggerRepairOnIdle rpc.
type TriggerRepairOnIdleRequest struct {
	// selectors whitelists the bots to trigger repair taks on.
	// Bots selected via repeated selectors are unioned together.
	//
	// If no selectors are provided, all bots are selected.
	Selectors []*BotSelector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// idle_duration specifies the duration for which a selected bot must have
	// been idle for a repair task to be created against it.
	IdleDuration *duration.Duration `protobuf:"bytes,2,opt,name=idle_duration,json=idleDuration,proto3" json:"idle_duration,omitempty"`
	// priority forces the tasks to be created at the given priority. Swarming
	// uses priorities in [0,255], where lower number means higher priority.
	//
	// priority should usually not be used by clients. Tasker creates tasks at
	// a constant priority controlled by Tasker config. priority may be used to
	// override the default priority in special cases (e.g., you need to
	// override some incorrectly created high-priority normal jobs).
	Priority             int64    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriggerRepairOnIdleRequest) Reset()         { *m = TriggerRepairOnIdleRequest{} }
func (m *TriggerRepairOnIdleRequest) String() string { return proto.CompactTextString(m) }
func (*TriggerRepairOnIdleRequest) ProtoMessage()    {}
func (*TriggerRepairOnIdleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{3}
}

func (m *TriggerRepairOnIdleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerRepairOnIdleRequest.Unmarshal(m, b)
}
func (m *TriggerRepairOnIdleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerRepairOnIdleRequest.Marshal(b, m, deterministic)
}
func (m *TriggerRepairOnIdleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerRepairOnIdleRequest.Merge(m, src)
}
func (m *TriggerRepairOnIdleRequest) XXX_Size() int {
	return xxx_messageInfo_TriggerRepairOnIdleRequest.Size(m)
}
func (m *TriggerRepairOnIdleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerRepairOnIdleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerRepairOnIdleRequest proto.InternalMessageInfo

func (m *TriggerRepairOnIdleRequest) GetSelectors() []*BotSelector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *TriggerRepairOnIdleRequest) GetIdleDuration() *duration.Duration {
	if m != nil {
		return m.IdleDuration
	}
	return nil
}

func (m *TriggerRepairOnIdleRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// TriggerRepairOnRepairFailedRquest is used to control the behaviour of
// TriggerRepairOnRepairFailed rpc.
type TriggerRepairOnRepairFailedRequest struct {
	// selectors whitelists the bots to trigger repair taks on.
	// Bots selected via repeated selectors are unioned together.
	//
	// If no selectors are provided, all bots are selected.
	Selectors []*BotSelector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// time_since_last_repair specifies the time since the last repair attempt.
	//
	// time_since_last_repair is capped at 7 days. If the last repair attempt
	// was more than 7 days ago, a new repair will be triggered.
	TimeSinceLastRepair *duration.Duration `protobuf:"bytes,2,opt,name=time_since_last_repair,json=timeSinceLastRepair,proto3" json:"time_since_last_repair,omitempty"`
	// priority forces the tasks to be created at the given priority. Swarming
	// uses priorities in [0,255], where lower number means higher priority.
	//
	// priority should usually not be used by clients. Tasker creates tasks at
	// a constant priority controlled by Tasker config. priority may be used to
	// override the default priority in special cases (e.g., you need to
	// override some incorrectly created high-priority normal jobs).
	Priority             int64    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriggerRepairOnRepairFailedRequest) Reset()         { *m = TriggerRepairOnRepairFailedRequest{} }
func (m *TriggerRepairOnRepairFailedRequest) String() string { return proto.CompactTextString(m) }
func (*TriggerRepairOnRepairFailedRequest) ProtoMessage()    {}
func (*TriggerRepairOnRepairFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{4}
}

func (m *TriggerRepairOnRepairFailedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriggerRepairOnRepairFailedRequest.Unmarshal(m, b)
}
func (m *TriggerRepairOnRepairFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriggerRepairOnRepairFailedRequest.Marshal(b, m, deterministic)
}
func (m *TriggerRepairOnRepairFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerRepairOnRepairFailedRequest.Merge(m, src)
}
func (m *TriggerRepairOnRepairFailedRequest) XXX_Size() int {
	return xxx_messageInfo_TriggerRepairOnRepairFailedRequest.Size(m)
}
func (m *TriggerRepairOnRepairFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerRepairOnRepairFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerRepairOnRepairFailedRequest proto.InternalMessageInfo

func (m *TriggerRepairOnRepairFailedRequest) GetSelectors() []*BotSelector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *TriggerRepairOnRepairFailedRequest) GetTimeSinceLastRepair() *duration.Duration {
	if m != nil {
		return m.TimeSinceLastRepair
	}
	return nil
}

func (m *TriggerRepairOnRepairFailedRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// EnsureBackgroundTasksRequest is used to specify background tasks to manage
// for the selected bots.
//
// Any existing tasks for a selected bot not included in this request are left
// unmodified. To cancel outstanding tasks of a given type, explicitly set
// task_count to 0.
type EnsureBackgroundTasksRequest struct {
	// type specifies what tasks to manage.
	Type TaskType `protobuf:"varint,1,opt,name=type,proto3,enum=crosskylabadmin.fleet.TaskType" json:"type,omitempty"`
	// selectors whitelists the bots to manage background tasks for.
	// Bots selected via repeated selectors are unioned together.
	//
	// If no selectors are provided, all bots are selected.
	Selectors []*BotSelector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// Number of tasks of the given type to maintain. If more than the given
	// number of tasks already exist, extra tasks will be canceled.
	TaskCount int32 `protobuf:"varint,3,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	// priority forces the tasks to be created at the given priority. Swarming
	// uses priorities in [0,255], where lower number means higher priority.
	//
	// priority should usually not be used by clients. Tasker creates tasks at
	// a constant priority controlled by Tasker config. priority may be used to
	// override the default priority in special cases (e.g., you need to
	// override some incorrectly created high-priority normal jobs).
	Priority             int64    `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnsureBackgroundTasksRequest) Reset()         { *m = EnsureBackgroundTasksRequest{} }
func (m *EnsureBackgroundTasksRequest) String() string { return proto.CompactTextString(m) }
func (*EnsureBackgroundTasksRequest) ProtoMessage()    {}
func (*EnsureBackgroundTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ad24d4c89dcdc49, []int{5}
}

func (m *EnsureBackgroundTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsureBackgroundTasksRequest.Unmarshal(m, b)
}
func (m *EnsureBackgroundTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsureBackgroundTasksRequest.Marshal(b, m, deterministic)
}
func (m *EnsureBackgroundTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsureBackgroundTasksRequest.Merge(m, src)
}
func (m *EnsureBackgroundTasksRequest) XXX_Size() int {
	return xxx_messageInfo_EnsureBackgroundTasksRequest.Size(m)
}
func (m *EnsureBackgroundTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsureBackgroundTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnsureBackgroundTasksRequest proto.InternalMessageInfo

func (m *EnsureBackgroundTasksRequest) GetType() TaskType {
	if m != nil {
		return m.Type
	}
	return TaskType_Invalid
}

func (m *EnsureBackgroundTasksRequest) GetSelectors() []*BotSelector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *EnsureBackgroundTasksRequest) GetTaskCount() int32 {
	if m != nil {
		return m.TaskCount
	}
	return 0
}

func (m *EnsureBackgroundTasksRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func init() {
	proto.RegisterEnum("crosskylabadmin.fleet.TaskType", TaskType_name, TaskType_value)
	proto.RegisterType((*TaskerTasksResponse)(nil), "crosskylabadmin.fleet.TaskerTasksResponse")
	proto.RegisterType((*TaskerBotTasks)(nil), "crosskylabadmin.fleet.TaskerBotTasks")
	proto.RegisterType((*TaskerTask)(nil), "crosskylabadmin.fleet.TaskerTask")
	proto.RegisterType((*TriggerRepairOnIdleRequest)(nil), "crosskylabadmin.fleet.TriggerRepairOnIdleRequest")
	proto.RegisterType((*TriggerRepairOnRepairFailedRequest)(nil), "crosskylabadmin.fleet.TriggerRepairOnRepairFailedRequest")
	proto.RegisterType((*EnsureBackgroundTasksRequest)(nil), "crosskylabadmin.fleet.EnsureBackgroundTasksRequest")
}

func init() {
	proto.RegisterFile("infra/appengine/crosskylabadmin/api/fleet/v1/tasker.proto", fileDescriptor_9ad24d4c89dcdc49)
}

var fileDescriptor_9ad24d4c89dcdc49 = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x6b, 0x13, 0x41,
	0x14, 0x75, 0x93, 0x26, 0x4d, 0x6e, 0xb5, 0x84, 0x29, 0x95, 0x34, 0x7e, 0xd5, 0x05, 0xa1, 0xf4,
	0x61, 0x97, 0x26, 0x0f, 0x52, 0x04, 0x91, 0x54, 0x85, 0x80, 0x28, 0x6c, 0xe3, 0x83, 0x22, 0xac,
	0x93, 0xdd, 0x9b, 0x65, 0xc8, 0x64, 0x66, 0x9d, 0x99, 0x2d, 0xe6, 0xdd, 0x5f, 0xe5, 0xaf, 0x10,
	0xff, 0x90, 0xb2, 0xb3, 0x59, 0x43, 0x4a, 0x92, 0x1a, 0xf1, 0x65, 0x92, 0xb9, 0x73, 0xee, 0x3d,
	0xe7, 0xde, 0x39, 0xb3, 0x70, 0xce, 0xc4, 0x58, 0x51, 0x9f, 0xa6, 0x29, 0x8a, 0x84, 0x09, 0xf4,
	0x23, 0x25, 0xb5, 0x9e, 0xcc, 0x38, 0x1d, 0xd1, 0x78, 0xca, 0x84, 0x4f, 0x53, 0xe6, 0x8f, 0x39,
	0xa2, 0xf1, 0xaf, 0xce, 0x7c, 0x43, 0xf5, 0x04, 0x95, 0x97, 0x2a, 0x69, 0x24, 0x39, 0xbc, 0x06,
	0xf5, 0x2c, 0xac, 0xf3, 0x30, 0x91, 0x32, 0xe1, 0xe8, 0x5b, 0xd0, 0x28, 0x1b, 0xfb, 0x71, 0xa6,
	0xa8, 0x61, 0x52, 0x14, 0x69, 0x9d, 0xed, 0x18, 0x23, 0x39, 0x9d, 0x96, 0xa9, 0xee, 0x07, 0x38,
	0x18, 0x5a, 0x05, 0xf9, 0xaa, 0x03, 0xd4, 0xa9, 0x14, 0x1a, 0x49, 0x1f, 0x9a, 0x23, 0x69, 0xc2,
	0x5c, 0x9c, 0x6e, 0x3b, 0xc7, 0xd5, 0x93, 0xbd, 0xee, 0x13, 0x6f, 0xa5, 0x38, 0xaf, 0x48, 0xef,
	0x4b, 0x53, 0x54, 0x68, 0x8c, 0xe6, 0xff, 0xdc, 0xcf, 0xb0, 0xbf, 0x7c, 0x46, 0x0e, 0xa1, 0x1e,
	0x67, 0x26, 0x64, 0x71, 0xdb, 0x39, 0x76, 0x4e, 0x9a, 0x41, 0x2d, 0xce, 0xcc, 0x20, 0x26, 0x4f,
	0xa1, 0x56, 0x10, 0x55, 0x2c, 0xd1, 0xe3, 0x8d, 0x44, 0xf9, 0x1a, 0x14, 0x78, 0xf7, 0x13, 0xc0,
	0x22, 0x48, 0x7a, 0xb0, 0x63, 0x66, 0x29, 0xb6, 0x2b, 0xc7, 0xce, 0xc9, 0x7e, 0xf7, 0xd1, 0x86,
	0x2a, 0xc3, 0x59, 0x8a, 0x81, 0x05, 0x93, 0x23, 0x68, 0xe4, 0xb5, 0xc2, 0x4c, 0xf1, 0x76, 0xd5,
	0x8a, 0xda, 0xcd, 0xf7, 0xef, 0x15, 0x77, 0xbf, 0x3b, 0xd0, 0x19, 0x2a, 0x96, 0x24, 0xa8, 0x02,
	0x4c, 0x29, 0x53, 0xef, 0xc4, 0x20, 0xe6, 0x18, 0xe0, 0x97, 0x0c, 0xb5, 0x21, 0x2f, 0xa0, 0xa9,
	0x91, 0x63, 0x64, 0xa4, 0x2a, 0x47, 0xe4, 0xae, 0xe1, 0xec, 0x4b, 0x73, 0x39, 0x87, 0x06, 0x8b,
	0x24, 0xf2, 0x1c, 0xee, 0xb0, 0x98, 0x63, 0x58, 0xde, 0xa6, 0x55, 0xbe, 0xd7, 0x3d, 0xf2, 0x8a,
	0xeb, 0xf6, 0xca, 0xeb, 0xf6, 0x5e, 0xce, 0x01, 0xc1, 0xed, 0x1c, 0x5f, 0xee, 0x48, 0x07, 0x1a,
	0xa9, 0x62, 0x52, 0x31, 0x33, 0xb3, 0xda, 0xab, 0xc1, 0x9f, 0xbd, 0xfb, 0xd3, 0x01, 0xf7, 0x9a,
	0xf8, 0xe2, 0xf7, 0x35, 0x65, 0x1c, 0xe3, 0xff, 0xd7, 0xc4, 0x5b, 0xb8, 0x6b, 0xd8, 0x14, 0x43,
	0xcd, 0x44, 0x84, 0x21, 0xa7, 0xda, 0x84, 0xca, 0x12, 0xdd, 0xdc, 0xcd, 0x41, 0x9e, 0x78, 0x99,
	0xe7, 0xbd, 0xa1, 0xda, 0x14, 0xf2, 0x36, 0x36, 0xf5, 0xc3, 0x81, 0xfb, 0xaf, 0x84, 0xce, 0x14,
	0xf6, 0x69, 0x34, 0x49, 0x94, 0xcc, 0x44, 0x3c, 0xf7, 0x6d, 0xd1, 0x4e, 0x69, 0x01, 0x67, 0x1b,
	0x0b, 0x2c, 0xcd, 0xa0, 0xf2, 0x2f, 0x33, 0x78, 0x00, 0x60, 0x4d, 0x14, 0xc9, 0x4c, 0x18, 0xab,
	0xba, 0x16, 0x34, 0xf3, 0xc8, 0x45, 0x1e, 0x58, 0x6a, 0x69, 0x67, 0xb9, 0xa5, 0xd3, 0x67, 0xd0,
	0x28, 0xe5, 0x90, 0x3d, 0xd8, 0x1d, 0x88, 0x2b, 0xca, 0x59, 0xdc, 0xba, 0x45, 0x9a, 0x50, 0x0b,
	0x50, 0xa3, 0x69, 0x39, 0x79, 0xfc, 0x82, 0x23, 0x15, 0x59, 0xda, 0xaa, 0x10, 0x80, 0x7a, 0x31,
	0xa9, 0x56, 0xb5, 0xfb, 0xab, 0x02, 0xf5, 0xe2, 0x01, 0x10, 0x03, 0x07, 0x2b, 0xbc, 0x4a, 0xce,
	0xd6, 0x8d, 0x60, 0xad, 0xaf, 0x3b, 0xa7, 0x37, 0x3e, 0xbf, 0xc5, 0x67, 0xe2, 0x9b, 0x03, 0xf7,
	0x36, 0xb8, 0x8c, 0x9c, 0xff, 0x1d, 0xfd, 0x0a, 0x67, 0x6e, 0x25, 0xe3, 0x2b, 0x1c, 0xae, 0xb4,
	0x05, 0xe9, 0xad, 0x29, 0xb2, 0xc9, 0x44, 0xdb, 0x30, 0xf7, 0x77, 0x3f, 0xd6, 0xec, 0xe1, 0xa8,
	0x6e, 0xed, 0xdd, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x09, 0xdd, 0xeb, 0xfd, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskerClient is the client API for Tasker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskerClient interface {
	// TriggerRepairOnIdle creates administrative tasks to repair the selected
	// Swarming bots if they are deemed to have been idle for too long. Returned
	// tasks may be a combination of newly created tasks and already existing
	// tasks that satisfy the request.
	//
	// TriggerRepairOnIdle stops at first error encountered. In case of an
	// error, some tasks may have already been created. It is safe to retry a
	// partially succeeded rpc call.
	TriggerRepairOnIdle(ctx context.Context, in *TriggerRepairOnIdleRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error)
	// TriggerRepairOnRepairFailed creates administrative tasks to repair the
	// selected Swarming bots if they are in the repair failed state, and the
	// last repair attempt is deemed to have been too long ago. Returned tasks
	// may be a combination of newly created tasks and already existing tasks
	// that satisfy the request.
	//
	// TriggerRepairOnRepairFailed stops at first error encountered. In case of
	// an error, some tasks may have already been created. It is safe to retry a
	// partially succeeded rpc call.
	TriggerRepairOnRepairFailed(ctx context.Context, in *TriggerRepairOnRepairFailedRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error)
	// EnsureBackgroundTasks ensures that the requested number of (usually high
	// priority) background tasks are enqueued against the requested DUTs.
	// Returned tasks may be a combination of newly created tasks and already
	// existing tasks that satisfy the request.
	//
	// EnsureBackgroundTasks stops at first error encountered. In case of an
	// error, some tasks may have already been created. It is safe to retry a
	// partially succeeded rpc call.
	EnsureBackgroundTasks(ctx context.Context, in *EnsureBackgroundTasksRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error)
}
type taskerPRPCClient struct {
	client *prpc.Client
}

func NewTaskerPRPCClient(client *prpc.Client) TaskerClient {
	return &taskerPRPCClient{client}
}

func (c *taskerPRPCClient) TriggerRepairOnIdle(ctx context.Context, in *TriggerRepairOnIdleRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error) {
	out := new(TaskerTasksResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tasker", "TriggerRepairOnIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerPRPCClient) TriggerRepairOnRepairFailed(ctx context.Context, in *TriggerRepairOnRepairFailedRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error) {
	out := new(TaskerTasksResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tasker", "TriggerRepairOnRepairFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerPRPCClient) EnsureBackgroundTasks(ctx context.Context, in *EnsureBackgroundTasksRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error) {
	out := new(TaskerTasksResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tasker", "EnsureBackgroundTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type taskerClient struct {
	cc *grpc.ClientConn
}

func NewTaskerClient(cc *grpc.ClientConn) TaskerClient {
	return &taskerClient{cc}
}

func (c *taskerClient) TriggerRepairOnIdle(ctx context.Context, in *TriggerRepairOnIdleRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error) {
	out := new(TaskerTasksResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tasker/TriggerRepairOnIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) TriggerRepairOnRepairFailed(ctx context.Context, in *TriggerRepairOnRepairFailedRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error) {
	out := new(TaskerTasksResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tasker/TriggerRepairOnRepairFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) EnsureBackgroundTasks(ctx context.Context, in *EnsureBackgroundTasksRequest, opts ...grpc.CallOption) (*TaskerTasksResponse, error) {
	out := new(TaskerTasksResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tasker/EnsureBackgroundTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskerServer is the server API for Tasker service.
type TaskerServer interface {
	// TriggerRepairOnIdle creates administrative tasks to repair the selected
	// Swarming bots if they are deemed to have been idle for too long. Returned
	// tasks may be a combination of newly created tasks and already existing
	// tasks that satisfy the request.
	//
	// TriggerRepairOnIdle stops at first error encountered. In case of an
	// error, some tasks may have already been created. It is safe to retry a
	// partially succeeded rpc call.
	TriggerRepairOnIdle(context.Context, *TriggerRepairOnIdleRequest) (*TaskerTasksResponse, error)
	// TriggerRepairOnRepairFailed creates administrative tasks to repair the
	// selected Swarming bots if they are in the repair failed state, and the
	// last repair attempt is deemed to have been too long ago. Returned tasks
	// may be a combination of newly created tasks and already existing tasks
	// that satisfy the request.
	//
	// TriggerRepairOnRepairFailed stops at first error encountered. In case of
	// an error, some tasks may have already been created. It is safe to retry a
	// partially succeeded rpc call.
	TriggerRepairOnRepairFailed(context.Context, *TriggerRepairOnRepairFailedRequest) (*TaskerTasksResponse, error)
	// EnsureBackgroundTasks ensures that the requested number of (usually high
	// priority) background tasks are enqueued against the requested DUTs.
	// Returned tasks may be a combination of newly created tasks and already
	// existing tasks that satisfy the request.
	//
	// EnsureBackgroundTasks stops at first error encountered. In case of an
	// error, some tasks may have already been created. It is safe to retry a
	// partially succeeded rpc call.
	EnsureBackgroundTasks(context.Context, *EnsureBackgroundTasksRequest) (*TaskerTasksResponse, error)
}

func RegisterTaskerServer(s prpc.Registrar, srv TaskerServer) {
	s.RegisterService(&_Tasker_serviceDesc, srv)
}

func _Tasker_TriggerRepairOnIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRepairOnIdleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).TriggerRepairOnIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tasker/TriggerRepairOnIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).TriggerRepairOnIdle(ctx, req.(*TriggerRepairOnIdleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_TriggerRepairOnRepairFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRepairOnRepairFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).TriggerRepairOnRepairFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tasker/TriggerRepairOnRepairFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).TriggerRepairOnRepairFailed(ctx, req.(*TriggerRepairOnRepairFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_EnsureBackgroundTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureBackgroundTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).EnsureBackgroundTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tasker/EnsureBackgroundTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).EnsureBackgroundTasks(ctx, req.(*EnsureBackgroundTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosskylabadmin.fleet.Tasker",
	HandlerType: (*TaskerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerRepairOnIdle",
			Handler:    _Tasker_TriggerRepairOnIdle_Handler,
		},
		{
			MethodName: "TriggerRepairOnRepairFailed",
			Handler:    _Tasker_TriggerRepairOnRepairFailed_Handler,
		},
		{
			MethodName: "EnsureBackgroundTasks",
			Handler:    _Tasker_EnsureBackgroundTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/crosskylabadmin/api/fleet/v1/tasker.proto",
}
