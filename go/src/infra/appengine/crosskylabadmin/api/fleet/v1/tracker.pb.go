// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/appengine/crosskylabadmin/api/fleet/v1/tracker.proto

package fleet

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DutState int32

const (
	DutState_DutStateInvalid   DutState = 0
	DutState_Ready             DutState = 1
	DutState_NeedsCleanup      DutState = 2
	DutState_NeedsRepair       DutState = 3
	DutState_NeedsReset        DutState = 4
	DutState_RepairFailed      DutState = 5
	DutState_NeedsReplacement  DutState = 6
	DutState_NeedsManualRepair DutState = 7
	DutState_NeedsDeploy       DutState = 8
)

// Enum value maps for DutState.
var (
	DutState_name = map[int32]string{
		0: "DutStateInvalid",
		1: "Ready",
		2: "NeedsCleanup",
		3: "NeedsRepair",
		4: "NeedsReset",
		5: "RepairFailed",
		6: "NeedsReplacement",
		7: "NeedsManualRepair",
		8: "NeedsDeploy",
	}
	DutState_value = map[string]int32{
		"DutStateInvalid":   0,
		"Ready":             1,
		"NeedsCleanup":      2,
		"NeedsRepair":       3,
		"NeedsReset":        4,
		"RepairFailed":      5,
		"NeedsReplacement":  6,
		"NeedsManualRepair": 7,
		"NeedsDeploy":       8,
	}
)

func (x DutState) Enum() *DutState {
	p := new(DutState)
	*p = x
	return p
}

func (x DutState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DutState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[0].Descriptor()
}

func (DutState) Type() protoreflect.EnumType {
	return &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[0]
}

func (x DutState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DutState.Descriptor instead.
func (DutState) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{0}
}

type AuditTask int32

const (
	AuditTask_TaskInvalid AuditTask = 0
	AuditTask_ServoUSBKey AuditTask = 1
	AuditTask_DUTStorage  AuditTask = 2
	AuditTask_RPMConfig   AuditTask = 3
)

// Enum value maps for AuditTask.
var (
	AuditTask_name = map[int32]string{
		0: "TaskInvalid",
		1: "ServoUSBKey",
		2: "DUTStorage",
		3: "RPMConfig",
	}
	AuditTask_value = map[string]int32{
		"TaskInvalid": 0,
		"ServoUSBKey": 1,
		"DUTStorage":  2,
		"RPMConfig":   3,
	}
)

func (x AuditTask) Enum() *AuditTask {
	p := new(AuditTask)
	*p = x
	return p
}

func (x AuditTask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditTask) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[1].Descriptor()
}

func (AuditTask) Type() protoreflect.EnumType {
	return &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[1]
}

func (x AuditTask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditTask.Descriptor instead.
func (AuditTask) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{1}
}

type Health int32

const (
	Health_HealthInvalid Health = 0
	// A Healthy bot may be used for external workload.
	Health_Healthy Health = 1
	// An Unhealthy bot is not usable for external workload.
	// Further classification of the problem is not available.
	Health_Unhealthy Health = 2
)

// Enum value maps for Health.
var (
	Health_name = map[int32]string{
		0: "HealthInvalid",
		1: "Healthy",
		2: "Unhealthy",
	}
	Health_value = map[string]int32{
		"HealthInvalid": 0,
		"Healthy":       1,
		"Unhealthy":     2,
	}
)

func (x Health) Enum() *Health {
	p := new(Health)
	*p = x
	return p
}

func (x Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Health) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[2].Descriptor()
}

func (Health) Type() protoreflect.EnumType {
	return &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[2]
}

func (x Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Health.Descriptor instead.
func (Health) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{2}
}

type TaskType int32

const (
	TaskType_Invalid TaskType = 0
	TaskType_Reset   TaskType = 1
	TaskType_Cleanup TaskType = 2
	TaskType_Repair  TaskType = 3
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "Invalid",
		1: "Reset",
		2: "Cleanup",
		3: "Repair",
	}
	TaskType_value = map[string]int32{
		"Invalid": 0,
		"Reset":   1,
		"Cleanup": 2,
		"Repair":  3,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[3].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes[3]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{3}
}

type PushBotsForAdminTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetDutState DutState `protobuf:"varint,1,opt,name=target_dut_state,json=targetDutState,proto3,enum=crosskylabadmin.fleet.DutState" json:"target_dut_state,omitempty"`
}

func (x *PushBotsForAdminTasksRequest) Reset() {
	*x = PushBotsForAdminTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushBotsForAdminTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotsForAdminTasksRequest) ProtoMessage() {}

func (x *PushBotsForAdminTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotsForAdminTasksRequest.ProtoReflect.Descriptor instead.
func (*PushBotsForAdminTasksRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{0}
}

func (x *PushBotsForAdminTasksRequest) GetTargetDutState() DutState {
	if x != nil {
		return x.TargetDutState
	}
	return DutState_DutStateInvalid
}

type PushBotsForAdminTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushBotsForAdminTasksResponse) Reset() {
	*x = PushBotsForAdminTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushBotsForAdminTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotsForAdminTasksResponse) ProtoMessage() {}

func (x *PushBotsForAdminTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotsForAdminTasksResponse.ProtoReflect.Descriptor instead.
func (*PushBotsForAdminTasksResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{1}
}

type PushRepairJobsForLabstationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushRepairJobsForLabstationsRequest) Reset() {
	*x = PushRepairJobsForLabstationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRepairJobsForLabstationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRepairJobsForLabstationsRequest) ProtoMessage() {}

func (x *PushRepairJobsForLabstationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRepairJobsForLabstationsRequest.ProtoReflect.Descriptor instead.
func (*PushRepairJobsForLabstationsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{2}
}

type PushRepairJobsForLabstationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushRepairJobsForLabstationsResponse) Reset() {
	*x = PushRepairJobsForLabstationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushRepairJobsForLabstationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRepairJobsForLabstationsResponse) ProtoMessage() {}

func (x *PushRepairJobsForLabstationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRepairJobsForLabstationsResponse.ProtoReflect.Descriptor instead.
func (*PushRepairJobsForLabstationsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{3}
}

type ReportBotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportBotsRequest) Reset() {
	*x = ReportBotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBotsRequest) ProtoMessage() {}

func (x *ReportBotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBotsRequest.ProtoReflect.Descriptor instead.
func (*ReportBotsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{4}
}

type ReportBotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportBotsResponse) Reset() {
	*x = ReportBotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBotsResponse) ProtoMessage() {}

func (x *ReportBotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBotsResponse.ProtoReflect.Descriptor instead.
func (*ReportBotsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{5}
}

type PushBotsForAdminAuditTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task AuditTask `protobuf:"varint,1,opt,name=task,proto3,enum=crosskylabadmin.fleet.AuditTask" json:"task,omitempty"`
}

func (x *PushBotsForAdminAuditTasksRequest) Reset() {
	*x = PushBotsForAdminAuditTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushBotsForAdminAuditTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotsForAdminAuditTasksRequest) ProtoMessage() {}

func (x *PushBotsForAdminAuditTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotsForAdminAuditTasksRequest.ProtoReflect.Descriptor instead.
func (*PushBotsForAdminAuditTasksRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{6}
}

func (x *PushBotsForAdminAuditTasksRequest) GetTask() AuditTask {
	if x != nil {
		return x.Task
	}
	return AuditTask_TaskInvalid
}

type PushBotsForAdminAuditTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushBotsForAdminAuditTasksResponse) Reset() {
	*x = PushBotsForAdminAuditTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushBotsForAdminAuditTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushBotsForAdminAuditTasksResponse) ProtoMessage() {}

func (x *PushBotsForAdminAuditTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushBotsForAdminAuditTasksResponse.ProtoReflect.Descriptor instead.
func (*PushBotsForAdminAuditTasksResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP(), []int{7}
}

var File_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto protoreflect.FileDescriptor

var file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x22, 0x69, 0x0a, 0x1c, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x75,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1f,
	0x0a, 0x1d, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x0a, 0x23, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4a, 0x6f, 0x62,
	0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x4a, 0x6f, 0x62, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x21, 0x50, 0x75, 0x73,
	0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x24, 0x0a, 0x22, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xad, 0x01, 0x0a, 0x08, 0x44,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x65, 0x65, 0x64, 0x73,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x10, 0x08, 0x2a, 0x4c, 0x0a, 0x09, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x6f, 0x55, 0x53, 0x42, 0x4b, 0x65, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x55, 0x54,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x50, 0x4d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10,
	0x02, 0x2a, 0x3b, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x03, 0x32, 0x9f,
	0x04, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x50,
	0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61,
	0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x97, 0x01, 0x0a, 0x1c, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4a, 0x6f,
	0x62, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x4a, 0x6f, 0x62, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4a,
	0x6f, 0x62, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a,
	0x1a, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x42, 0x6f, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x34, 0x5a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescOnce sync.Once
	file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescData = file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDesc
)

func file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescGZIP() []byte {
	file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescOnce.Do(func() {
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescData)
	})
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDescData
}

var file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_goTypes = []interface{}{
	(DutState)(0),                                // 0: crosskylabadmin.fleet.DutState
	(AuditTask)(0),                               // 1: crosskylabadmin.fleet.AuditTask
	(Health)(0),                                  // 2: crosskylabadmin.fleet.Health
	(TaskType)(0),                                // 3: crosskylabadmin.fleet.TaskType
	(*PushBotsForAdminTasksRequest)(nil),         // 4: crosskylabadmin.fleet.PushBotsForAdminTasksRequest
	(*PushBotsForAdminTasksResponse)(nil),        // 5: crosskylabadmin.fleet.PushBotsForAdminTasksResponse
	(*PushRepairJobsForLabstationsRequest)(nil),  // 6: crosskylabadmin.fleet.PushRepairJobsForLabstationsRequest
	(*PushRepairJobsForLabstationsResponse)(nil), // 7: crosskylabadmin.fleet.PushRepairJobsForLabstationsResponse
	(*ReportBotsRequest)(nil),                    // 8: crosskylabadmin.fleet.ReportBotsRequest
	(*ReportBotsResponse)(nil),                   // 9: crosskylabadmin.fleet.ReportBotsResponse
	(*PushBotsForAdminAuditTasksRequest)(nil),    // 10: crosskylabadmin.fleet.PushBotsForAdminAuditTasksRequest
	(*PushBotsForAdminAuditTasksResponse)(nil),   // 11: crosskylabadmin.fleet.PushBotsForAdminAuditTasksResponse
}
var file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_depIdxs = []int32{
	0,  // 0: crosskylabadmin.fleet.PushBotsForAdminTasksRequest.target_dut_state:type_name -> crosskylabadmin.fleet.DutState
	1,  // 1: crosskylabadmin.fleet.PushBotsForAdminAuditTasksRequest.task:type_name -> crosskylabadmin.fleet.AuditTask
	4,  // 2: crosskylabadmin.fleet.Tracker.PushBotsForAdminTasks:input_type -> crosskylabadmin.fleet.PushBotsForAdminTasksRequest
	6,  // 3: crosskylabadmin.fleet.Tracker.PushRepairJobsForLabstations:input_type -> crosskylabadmin.fleet.PushRepairJobsForLabstationsRequest
	8,  // 4: crosskylabadmin.fleet.Tracker.ReportBots:input_type -> crosskylabadmin.fleet.ReportBotsRequest
	10, // 5: crosskylabadmin.fleet.Tracker.PushBotsForAdminAuditTasks:input_type -> crosskylabadmin.fleet.PushBotsForAdminAuditTasksRequest
	5,  // 6: crosskylabadmin.fleet.Tracker.PushBotsForAdminTasks:output_type -> crosskylabadmin.fleet.PushBotsForAdminTasksResponse
	7,  // 7: crosskylabadmin.fleet.Tracker.PushRepairJobsForLabstations:output_type -> crosskylabadmin.fleet.PushRepairJobsForLabstationsResponse
	9,  // 8: crosskylabadmin.fleet.Tracker.ReportBots:output_type -> crosskylabadmin.fleet.ReportBotsResponse
	11, // 9: crosskylabadmin.fleet.Tracker.PushBotsForAdminAuditTasks:output_type -> crosskylabadmin.fleet.PushBotsForAdminAuditTasksResponse
	6,  // [6:10] is the sub-list for method output_type
	2,  // [2:6] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_init() }
func file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_init() {
	if File_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushBotsForAdminTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushBotsForAdminTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRepairJobsForLabstationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushRepairJobsForLabstationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushBotsForAdminAuditTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushBotsForAdminAuditTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_goTypes,
		DependencyIndexes: file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_depIdxs,
		EnumInfos:         file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_enumTypes,
		MessageInfos:      file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_msgTypes,
	}.Build()
	File_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto = out.File
	file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_rawDesc = nil
	file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_goTypes = nil
	file_infra_appengine_crosskylabadmin_api_fleet_v1_tracker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackerClient interface {
	// Filter out and queue the CrOS bots that require admin tasks Repair and Reset.
	PushBotsForAdminTasks(ctx context.Context, in *PushBotsForAdminTasksRequest, opts ...grpc.CallOption) (*PushBotsForAdminTasksResponse, error)
	// Filter out and queue the labstation bots that require admin tasks Repair.
	PushRepairJobsForLabstations(ctx context.Context, in *PushRepairJobsForLabstationsRequest, opts ...grpc.CallOption) (*PushRepairJobsForLabstationsResponse, error)
	// Report bots metrics.
	ReportBots(ctx context.Context, in *ReportBotsRequest, opts ...grpc.CallOption) (*ReportBotsResponse, error)
	// Filter out and queue the CrOS bots to run admin tasks Audit.
	PushBotsForAdminAuditTasks(ctx context.Context, in *PushBotsForAdminAuditTasksRequest, opts ...grpc.CallOption) (*PushBotsForAdminAuditTasksResponse, error)
}
type trackerPRPCClient struct {
	client *prpc.Client
}

func NewTrackerPRPCClient(client *prpc.Client) TrackerClient {
	return &trackerPRPCClient{client}
}

func (c *trackerPRPCClient) PushBotsForAdminTasks(ctx context.Context, in *PushBotsForAdminTasksRequest, opts ...grpc.CallOption) (*PushBotsForAdminTasksResponse, error) {
	out := new(PushBotsForAdminTasksResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tracker", "PushBotsForAdminTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerPRPCClient) PushRepairJobsForLabstations(ctx context.Context, in *PushRepairJobsForLabstationsRequest, opts ...grpc.CallOption) (*PushRepairJobsForLabstationsResponse, error) {
	out := new(PushRepairJobsForLabstationsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tracker", "PushRepairJobsForLabstations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerPRPCClient) ReportBots(ctx context.Context, in *ReportBotsRequest, opts ...grpc.CallOption) (*ReportBotsResponse, error) {
	out := new(ReportBotsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tracker", "ReportBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerPRPCClient) PushBotsForAdminAuditTasks(ctx context.Context, in *PushBotsForAdminAuditTasksRequest, opts ...grpc.CallOption) (*PushBotsForAdminAuditTasksResponse, error) {
	out := new(PushBotsForAdminAuditTasksResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Tracker", "PushBotsForAdminAuditTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type trackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerClient(cc grpc.ClientConnInterface) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) PushBotsForAdminTasks(ctx context.Context, in *PushBotsForAdminTasksRequest, opts ...grpc.CallOption) (*PushBotsForAdminTasksResponse, error) {
	out := new(PushBotsForAdminTasksResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tracker/PushBotsForAdminTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) PushRepairJobsForLabstations(ctx context.Context, in *PushRepairJobsForLabstationsRequest, opts ...grpc.CallOption) (*PushRepairJobsForLabstationsResponse, error) {
	out := new(PushRepairJobsForLabstationsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tracker/PushRepairJobsForLabstations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) ReportBots(ctx context.Context, in *ReportBotsRequest, opts ...grpc.CallOption) (*ReportBotsResponse, error) {
	out := new(ReportBotsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tracker/ReportBots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) PushBotsForAdminAuditTasks(ctx context.Context, in *PushBotsForAdminAuditTasksRequest, opts ...grpc.CallOption) (*PushBotsForAdminAuditTasksResponse, error) {
	out := new(PushBotsForAdminAuditTasksResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Tracker/PushBotsForAdminAuditTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServer is the server API for Tracker service.
type TrackerServer interface {
	// Filter out and queue the CrOS bots that require admin tasks Repair and Reset.
	PushBotsForAdminTasks(context.Context, *PushBotsForAdminTasksRequest) (*PushBotsForAdminTasksResponse, error)
	// Filter out and queue the labstation bots that require admin tasks Repair.
	PushRepairJobsForLabstations(context.Context, *PushRepairJobsForLabstationsRequest) (*PushRepairJobsForLabstationsResponse, error)
	// Report bots metrics.
	ReportBots(context.Context, *ReportBotsRequest) (*ReportBotsResponse, error)
	// Filter out and queue the CrOS bots to run admin tasks Audit.
	PushBotsForAdminAuditTasks(context.Context, *PushBotsForAdminAuditTasksRequest) (*PushBotsForAdminAuditTasksResponse, error)
}

// UnimplementedTrackerServer can be embedded to have forward compatible implementations.
type UnimplementedTrackerServer struct {
}

func (*UnimplementedTrackerServer) PushBotsForAdminTasks(context.Context, *PushBotsForAdminTasksRequest) (*PushBotsForAdminTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBotsForAdminTasks not implemented")
}
func (*UnimplementedTrackerServer) PushRepairJobsForLabstations(context.Context, *PushRepairJobsForLabstationsRequest) (*PushRepairJobsForLabstationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRepairJobsForLabstations not implemented")
}
func (*UnimplementedTrackerServer) ReportBots(context.Context, *ReportBotsRequest) (*ReportBotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBots not implemented")
}
func (*UnimplementedTrackerServer) PushBotsForAdminAuditTasks(context.Context, *PushBotsForAdminAuditTasksRequest) (*PushBotsForAdminAuditTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBotsForAdminAuditTasks not implemented")
}

func RegisterTrackerServer(s prpc.Registrar, srv TrackerServer) {
	s.RegisterService(&_Tracker_serviceDesc, srv)
}

func _Tracker_PushBotsForAdminTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushBotsForAdminTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).PushBotsForAdminTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tracker/PushBotsForAdminTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).PushBotsForAdminTasks(ctx, req.(*PushBotsForAdminTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_PushRepairJobsForLabstations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRepairJobsForLabstationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).PushRepairJobsForLabstations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tracker/PushRepairJobsForLabstations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).PushRepairJobsForLabstations(ctx, req.(*PushRepairJobsForLabstationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_ReportBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).ReportBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tracker/ReportBots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).ReportBots(ctx, req.(*ReportBotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_PushBotsForAdminAuditTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushBotsForAdminAuditTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).PushBotsForAdminAuditTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Tracker/PushBotsForAdminAuditTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).PushBotsForAdminAuditTasks(ctx, req.(*PushBotsForAdminAuditTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosskylabadmin.fleet.Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushBotsForAdminTasks",
			Handler:    _Tracker_PushBotsForAdminTasks_Handler,
		},
		{
			MethodName: "PushRepairJobsForLabstations",
			Handler:    _Tracker_PushRepairJobsForLabstations_Handler,
		},
		{
			MethodName: "ReportBots",
			Handler:    _Tracker_ReportBots_Handler,
		},
		{
			MethodName: "PushBotsForAdminAuditTasks",
			Handler:    _Tracker_PushBotsForAdminAuditTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/crosskylabadmin/api/fleet/v1/tracker.proto",
}
