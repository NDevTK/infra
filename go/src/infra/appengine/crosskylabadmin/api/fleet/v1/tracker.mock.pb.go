// Code generated by MockGen. DO NOT EDIT.
// Source: tracker.pb.go

// Package fleet is a generated GoMock package.
package fleet

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTrackerClient is a mock of TrackerClient interface
type MockTrackerClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerClientMockRecorder
}

// MockTrackerClientMockRecorder is the mock recorder for MockTrackerClient
type MockTrackerClientMockRecorder struct {
	mock *MockTrackerClient
}

// NewMockTrackerClient creates a new mock instance
func NewMockTrackerClient(ctrl *gomock.Controller) *MockTrackerClient {
	mock := &MockTrackerClient{ctrl: ctrl}
	mock.recorder = &MockTrackerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrackerClient) EXPECT() *MockTrackerClientMockRecorder {
	return m.recorder
}

// RefreshBots mocks base method
func (m *MockTrackerClient) RefreshBots(ctx context.Context, in *RefreshBotsRequest, opts ...grpc.CallOption) (*RefreshBotsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RefreshBots", varargs...)
	ret0, _ := ret[0].(*RefreshBotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshBots indicates an expected call of RefreshBots
func (mr *MockTrackerClientMockRecorder) RefreshBots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshBots", reflect.TypeOf((*MockTrackerClient)(nil).RefreshBots), varargs...)
}

// SummarizeBots mocks base method
func (m *MockTrackerClient) SummarizeBots(ctx context.Context, in *SummarizeBotsRequest, opts ...grpc.CallOption) (*SummarizeBotsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SummarizeBots", varargs...)
	ret0, _ := ret[0].(*SummarizeBotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeBots indicates an expected call of SummarizeBots
func (mr *MockTrackerClientMockRecorder) SummarizeBots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeBots", reflect.TypeOf((*MockTrackerClient)(nil).SummarizeBots), varargs...)
}

// MockTrackerServer is a mock of TrackerServer interface
type MockTrackerServer struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerServerMockRecorder
}

// MockTrackerServerMockRecorder is the mock recorder for MockTrackerServer
type MockTrackerServerMockRecorder struct {
	mock *MockTrackerServer
}

// NewMockTrackerServer creates a new mock instance
func NewMockTrackerServer(ctrl *gomock.Controller) *MockTrackerServer {
	mock := &MockTrackerServer{ctrl: ctrl}
	mock.recorder = &MockTrackerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrackerServer) EXPECT() *MockTrackerServerMockRecorder {
	return m.recorder
}

// RefreshBots mocks base method
func (m *MockTrackerServer) RefreshBots(arg0 context.Context, arg1 *RefreshBotsRequest) (*RefreshBotsResponse, error) {
	ret := m.ctrl.Call(m, "RefreshBots", arg0, arg1)
	ret0, _ := ret[0].(*RefreshBotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshBots indicates an expected call of RefreshBots
func (mr *MockTrackerServerMockRecorder) RefreshBots(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshBots", reflect.TypeOf((*MockTrackerServer)(nil).RefreshBots), arg0, arg1)
}

// SummarizeBots mocks base method
func (m *MockTrackerServer) SummarizeBots(arg0 context.Context, arg1 *SummarizeBotsRequest) (*SummarizeBotsResponse, error) {
	ret := m.ctrl.Call(m, "SummarizeBots", arg0, arg1)
	ret0, _ := ret[0].(*SummarizeBotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeBots indicates an expected call of SummarizeBots
func (mr *MockTrackerServerMockRecorder) SummarizeBots(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeBots", reflect.TypeOf((*MockTrackerServer)(nil).SummarizeBots), arg0, arg1)
}
