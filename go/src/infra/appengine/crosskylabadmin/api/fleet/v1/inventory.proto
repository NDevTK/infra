// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "infra/appengine/crosskylabadmin/api/fleet/v1/common.proto";

package crosskylabadmin.fleet;

option go_package = "infra/appengine/crosskylabadmin/api/fleet/v1;fleet";


// Inventory service helps manage ChromeOS DUTs.
service Inventory {
  // ///////////////////////////////////////////////////////////////////////////
  // Inventory ReadOnly RPCs

  // ListServers lists the servers in the current environment.
  rpc ListServers(ListServersRequest) returns (ListServersResponse);

  // GetDutInfo returns inventory information about a single DUT.
  //
  // This RPC returns possibly cached data about a single DUT. The cache is
  // updated asynchronously and guaranteed to be a relatively fresh snapshot of
  // the inventory data.
  rpc GetDutInfo(GetDutInfoRequest) returns (GetDutInfoResponse){
    option deprecated = true;
  };

  // GetDroneConfig returns the inventory configuration for a drone.
  //
  // This RPC returns possibly cached data.
  rpc GetDroneConfig(GetDroneConfigRequest) returns (GetDroneConfigResponse);

  // ///////////////////////////////////////////////////////////////////////////
  // RPCs used internally by the infrastructure. Not for end-user tools.

  // PushInventoryToQueen is called by a cron job.
  //
  // This RPC is deprecated. The cron job is moved to InventoryV2[pushToDroneQueenCronHandler].
  // https://source.corp.google.com/chromium_infra/go/src/infra/appengine/cros/lab_inventory/app/cron/cron.go;l=312
  rpc PushInventoryToQueen(PushInventoryToQueenRequest) returns (PushInventoryToQueenResponse);

  // UpdateDutLabels sets the SchedulableLabels of a DUT.
  //
  // This API should only be used by the Skylab infrastructure
  // internally.  It is used by repair tasks to update DUT labels.
  rpc UpdateDutLabels(UpdateDutLabelsRequest) returns (UpdateDutLabelsResponse);

  rpc BatchUpdateDuts(BatchUpdateDutsRequest) returns (BatchUpdateDutsResponse);

  // UpdateCachedInventory updates the cached inventory data.
  //
  // Cached inventory data is used to serve read-only inventory RPCs.
  // Cached inventory data is not used for inventory modification RPCs.
  rpc UpdateCachedInventory(UpdateCachedInventoryRequest)
      returns (UpdateCachedInventoryResponse);

  // Update device config to inventory and local datastore.
  //
  // Updating device config in inventory will be forbidden via repair jobs.
  // Instead, this cron job will sync up-to-date device config to inventory.
  //
  // It also caches device config to local datastore, which is used for filtering
  // out device config in future DUT label updating.
  rpc UpdateDeviceConfig(UpdateDeviceConfigRequest) returns (UpdateDeviceConfigResponse);

  // GetStableVersion reads the stable version for a particular DUT from datastore
  //
  // There is intentionally no RPC for overwriting the stable version with arbitrary content.
  rpc GetStableVersion(GetStableVersionRequest) returns (GetStableVersionResponse);

  // SetSatlabStableVersion sets the stable version value (for which CrOSSkylabAdmin is the source of truth),
  // for satlab devices only.
  rpc SetSatlabStableVersion(SetSatlabStableVersionRequest) returns (SetSatlabStableVersionResponse);

  // DeleteSatlabStableVersion deletes the satlab stable version value from CrOSSkylabAdmin which is the source of truth
  // for satlab devices only.
  rpc DeleteSatlabStableVersion(DeleteSatlabStableVersionRequest) returns (DeleteSatlabStableVersionResponse);

  // DumpStableVersionToDatastore reads the stable version from the LUCI config file
  // and writes it to datastore.
  rpc DumpStableVersionToDatastore(DumpStableVersionToDatastoreRequest) returns (DumpStableVersionToDatastoreResponse);

  // Report inventory metrics.
  rpc ReportInventory(ReportInventoryRequest) returns (ReportInventoryResponse);

  // Backfill (part of) manufacturing config.
  rpc UpdateManufacturingConfig(UpdateManufacturingConfigRequest) returns (UpdateManufacturingConfigResponse);
}

message UpdateManufacturingConfigRequest {
}

message UpdateManufacturingConfigResponse {
  string change_url = 1;
}

message ReportInventoryRequest {
  // Skip reporting inventory metrics after we migrate to inventory v2.
  bool skip_inventory_metrics = 1;
}
message ReportInventoryResponse {}

message PushInventoryToQueenRequest {}
message PushInventoryToQueenResponse {}

message UpdateDeviceConfigRequest {
}

message UpdateDeviceConfigResponse {
}

// NEXT TAG: 4
message DutSelector {
  string hostname = 2;

  // ID assigned to the DUT in the inventory.
  string id = 3;

  string model = 1;
}

message ListServersRequest {
  message Filter {
    // Role of servers to list; if absent, list servers of all roles.
    ServerRole role = 1;
  }

  Filter filter = 1;
}

message ListServersResponse {
  repeated Server servers = 1;
}

message GetDutInfoRequest {
  // id of the DUT to get info for.
  //
  // One of id or hostname is required.
  string id = 1;

  // hostname of the DUT to get info for.
  //
  // One of id or hostname is required.
  string hostname = 2;

  // Indicates if the request must be routed to v1. Otherwise the routing will
  // be determined by traffic control algorithm.
  // TODO(guocb) Remove this after inventory v2 migration.
  bool must_from_v1 = 3;
}

message GetDutInfoResponse {
  // spec is the device spec for the requested DUT.
  //
  // This is a serialized inventory.DeviceUnderTest protobuf.
  bytes spec = 1;

  // Timestamp of the latest update of the cached specs in this response.
  //
  // Returned specs are guaranteed to be up-to-date with the source of truth as
  // of this timestamp.
  google.protobuf.Timestamp updated = 2;
}

message GetDroneConfigRequest {
  // hostname of the drone, fully qualified.
  string hostname = 1;
}

message GetDroneConfigResponse {
  message Dut {
    // id of the DUT.
    string id = 1;
    // hostname of the DUT, unqualified.
    string hostname = 2;
  }
  // duts assigned to the drone.
  repeated Dut duts = 1;
}

message UpdateDutLabelsRequest {
  string dut_id = 1;
  // labels are the labels for the DUT that the client changed.  This
  // should be a serialized protobuf of inventory.SchedulableLabels.
  // Any labels that shouldn't be updated are ignored.
  bytes labels = 2;
  // reason is some string to provide context for the update.  This
  // should contain a URL to the task that triggered the change.  This
  // should not be capitalized since it will get formatted with other
  // information.
  string reason = 3;
  // old_labels are the old labels for the DUT before this update. Same
  // format with labels.
  bytes old_labels = 4;
}

message UpdateDutLabelsResponse {
  // url is a URL associated with the label update.
  //
  // It is usually a Gerrit or Gitiles URL.
  string url = 1;
}

message BatchUpdateDutsRequest {
  repeated string hostnames = 1 [deprecated=true];
  string pool = 2 [deprecated=true];
  repeated DutProperty dut_properties = 3;
}

message DutProperty {
  string hostname = 1;
  string pool = 2;

  message Rpm {
    string powerunit_hostname = 1;
    string powerunit_outlet = 2;
  }
  Rpm rpm = 3;
}

message BatchUpdateDutsResponse {
  // A Gerrit URL with the label update.
  string url = 1;
}

message UpdateCachedInventoryRequest {}
message UpdateCachedInventoryResponse {}

// next tag: 5
message GetStableVersionRequest {
    // TODO(gregorynisbet): remove support for looking up
    // stable version information by buildTarget + model
    string buildTarget = 1;
    string model = 2;
    // NOTE: {hostname} and {buildTarget, model} are alternatives
    string hostname = 3;
    //
    // SatlabInformationalQuery identifies whether this request is an information-only request coming
    // from the satlab CLI.
    //
    // Supporting `./satlab get-stable-version -model ... -board ...`, which is necessary for users to be
    // able to how the stable versions are configured for their devices, requires us to be able to identify
    // requests for board+model that are intended to be associated with satlab devices.
    //
    // In the normal flow, which looks at hostnames only, we distinguish a satlab or non-satlab request using
    // `heuristics.LooksLikeSatlabDevice(hostname)`.
    //
    bool satlabInformationalQuery = 4;
}

// next tag: 6
message GetStableVersionResponse {
    string crosVersion = 1;
    string firmwareVersion = 2;
    string faftVersion = 3;
    string servoCrosVersion = 4;
    // Reason is an explanation of *why* this particular stable version
    // was picked. Possible values are:
    //
    // 1) "host-specific"
    // 2) "board and model"
    //
    // This value is intended to be informational, and either logged or presented to an end user.
    string reason = 5;
}

// SatlabBoardAndModelStrategy is a combination of keys that define a stable version entry for Satlab
// devices. This kind of entry is scoped to a board and model.
// The satlab ID is requested but currently ignored.
message SatlabBoardAndModelStrategy {
  string satlabID = 1;
  string board = 2;
  string model = 3;
}

// SatlabHostnameStrategy is the key used for a Satlab stable version entry that is scoped to a specific host.
// We request the satlab ID in addition to the hostname for future-proofing reasons.
message SatlabHostnameStrategy {
  string satlabID = 1;
  string hostname = 2;
}

message SetSatlabStableVersionRequest {
  oneof strategy {
    SatlabBoardAndModelStrategy satlabBoardAndModelStrategy = 1;
    SatlabHostnameStrategy satlabHostnameStrategy = 2;
  }
  string crosVersion = 3;
  string firmwareVersion = 4;
  // This is the same thing as the "faftVersion", but it uses the newer terminology.
  string firmwareImage = 5;
}

message SetSatlabStableVersionResponse {
}

// SatlabBoardModelDeletionCriterion is similar to SatlabBoardAndModelStrategy,
// but
//     a) All the fields must be provided for the request to be well-formed.
//     b) We guarantee that there will be exactly one best match at all times.
//
message SatlabBoardModelDeletionCriterion {
  string satlabID = 1;
  string board = 2;
  string model = 3;
}

// SatlabHostnameDeletionCriterion is similar to SatlabHostnameStrategy,
// but
//     a) All the fields must be provided for the request to be well-formed.
//     b) We guarantee that there will be exactly one best match at all times.
//
message SatlabHostnameDeletionCriterion {
  string satlabID = 1;
  string hostname = 2;
}

message DeleteSatlabStableVersionRequest{
  oneof strategy {
    SatlabBoardModelDeletionCriterion satlabBoardModelDeletionCriterion = 1;
    SatlabHostnameDeletionCriterion satlabHostnameDeletionCriterion = 2;
  }
}

message DeleteSatlabStableVersionResponse {
  bool didDelete = 1;
  string reason = 2;
}

message DumpStableVersionToDatastoreRequest {}
message DumpStableVersionToDatastoreResponse {}
