// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto

package fleet

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// next tag: 5
type GetStableVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(gregorynisbet): remove support for looking up
	// stable version information by buildTarget + model
	BuildTarget string `protobuf:"bytes,1,opt,name=buildTarget,proto3" json:"buildTarget,omitempty"`
	Model       string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// NOTE: {hostname} and {buildTarget, model} are alternatives
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	//
	// SatlabInformationalQuery identifies whether this request is an information-only request coming
	// from the satlab CLI.
	//
	// Supporting `./satlab get-stable-version -model ... -board ...`, which is necessary for users to be
	// able to how the stable versions are configured for their devices, requires us to be able to identify
	// requests for board+model that are intended to be associated with satlab devices.
	//
	// In the normal flow, which looks at hostnames only, we distinguish a satlab or non-satlab request using
	// `heuristics.LooksLikeSatlabDevice(hostname)`.
	//
	SatlabInformationalQuery bool `protobuf:"varint,4,opt,name=satlabInformationalQuery,proto3" json:"satlabInformationalQuery,omitempty"`
}

func (x *GetStableVersionRequest) Reset() {
	*x = GetStableVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableVersionRequest) ProtoMessage() {}

func (x *GetStableVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableVersionRequest.ProtoReflect.Descriptor instead.
func (*GetStableVersionRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *GetStableVersionRequest) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *GetStableVersionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetStableVersionRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetStableVersionRequest) GetSatlabInformationalQuery() bool {
	if x != nil {
		return x.SatlabInformationalQuery
	}
	return false
}

// next tag: 6
type GetStableVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrosVersion      string `protobuf:"bytes,1,opt,name=crosVersion,proto3" json:"crosVersion,omitempty"`
	FirmwareVersion  string `protobuf:"bytes,2,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`
	FaftVersion      string `protobuf:"bytes,3,opt,name=faftVersion,proto3" json:"faftVersion,omitempty"`
	ServoCrosVersion string `protobuf:"bytes,4,opt,name=servoCrosVersion,proto3" json:"servoCrosVersion,omitempty"`
	// Reason is an explanation of *why* this particular stable version
	// was picked. Possible values are:
	//
	// 1) "host-specific"
	// 2) "board and model"
	//
	// This value is intended to be informational, and either logged or presented to an end user.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *GetStableVersionResponse) Reset() {
	*x = GetStableVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableVersionResponse) ProtoMessage() {}

func (x *GetStableVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableVersionResponse.ProtoReflect.Descriptor instead.
func (*GetStableVersionResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *GetStableVersionResponse) GetCrosVersion() string {
	if x != nil {
		return x.CrosVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetFaftVersion() string {
	if x != nil {
		return x.FaftVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetServoCrosVersion() string {
	if x != nil {
		return x.ServoCrosVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// SatlabBoardAndModelStrategy is a combination of keys that define a stable version entry for Satlab
// devices. This kind of entry is scoped to a board and model.
// The satlab ID is requested but currently ignored.
type SatlabBoardAndModelStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SatlabID string `protobuf:"bytes,1,opt,name=satlabID,proto3" json:"satlabID,omitempty"`
	Board    string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	Model    string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *SatlabBoardAndModelStrategy) Reset() {
	*x = SatlabBoardAndModelStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatlabBoardAndModelStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatlabBoardAndModelStrategy) ProtoMessage() {}

func (x *SatlabBoardAndModelStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatlabBoardAndModelStrategy.ProtoReflect.Descriptor instead.
func (*SatlabBoardAndModelStrategy) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *SatlabBoardAndModelStrategy) GetSatlabID() string {
	if x != nil {
		return x.SatlabID
	}
	return ""
}

func (x *SatlabBoardAndModelStrategy) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *SatlabBoardAndModelStrategy) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// SatlabHostnameStrategy is the key used for a Satlab stable version entry that is scoped to a specific host.
// We request the satlab ID in addition to the hostname for future-proofing reasons.
type SatlabHostnameStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SatlabID string `protobuf:"bytes,1,opt,name=satlabID,proto3" json:"satlabID,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *SatlabHostnameStrategy) Reset() {
	*x = SatlabHostnameStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatlabHostnameStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatlabHostnameStrategy) ProtoMessage() {}

func (x *SatlabHostnameStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatlabHostnameStrategy.ProtoReflect.Descriptor instead.
func (*SatlabHostnameStrategy) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *SatlabHostnameStrategy) GetSatlabID() string {
	if x != nil {
		return x.SatlabID
	}
	return ""
}

func (x *SatlabHostnameStrategy) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type SetSatlabStableVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//	*SetSatlabStableVersionRequest_SatlabBoardAndModelStrategy
	//	*SetSatlabStableVersionRequest_SatlabHostnameStrategy
	Strategy        isSetSatlabStableVersionRequest_Strategy `protobuf_oneof:"strategy"`
	CrosVersion     string                                   `protobuf:"bytes,3,opt,name=crosVersion,proto3" json:"crosVersion,omitempty"`
	FirmwareVersion string                                   `protobuf:"bytes,4,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`
	// This is the same thing as the "faftVersion", but it uses the newer terminology.
	FirmwareImage string `protobuf:"bytes,5,opt,name=firmwareImage,proto3" json:"firmwareImage,omitempty"`
}

func (x *SetSatlabStableVersionRequest) Reset() {
	*x = SetSatlabStableVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSatlabStableVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSatlabStableVersionRequest) ProtoMessage() {}

func (x *SetSatlabStableVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSatlabStableVersionRequest.ProtoReflect.Descriptor instead.
func (*SetSatlabStableVersionRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{4}
}

func (m *SetSatlabStableVersionRequest) GetStrategy() isSetSatlabStableVersionRequest_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *SetSatlabStableVersionRequest) GetSatlabBoardAndModelStrategy() *SatlabBoardAndModelStrategy {
	if x, ok := x.GetStrategy().(*SetSatlabStableVersionRequest_SatlabBoardAndModelStrategy); ok {
		return x.SatlabBoardAndModelStrategy
	}
	return nil
}

func (x *SetSatlabStableVersionRequest) GetSatlabHostnameStrategy() *SatlabHostnameStrategy {
	if x, ok := x.GetStrategy().(*SetSatlabStableVersionRequest_SatlabHostnameStrategy); ok {
		return x.SatlabHostnameStrategy
	}
	return nil
}

func (x *SetSatlabStableVersionRequest) GetCrosVersion() string {
	if x != nil {
		return x.CrosVersion
	}
	return ""
}

func (x *SetSatlabStableVersionRequest) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *SetSatlabStableVersionRequest) GetFirmwareImage() string {
	if x != nil {
		return x.FirmwareImage
	}
	return ""
}

type isSetSatlabStableVersionRequest_Strategy interface {
	isSetSatlabStableVersionRequest_Strategy()
}

type SetSatlabStableVersionRequest_SatlabBoardAndModelStrategy struct {
	SatlabBoardAndModelStrategy *SatlabBoardAndModelStrategy `protobuf:"bytes,1,opt,name=satlabBoardAndModelStrategy,proto3,oneof"`
}

type SetSatlabStableVersionRequest_SatlabHostnameStrategy struct {
	SatlabHostnameStrategy *SatlabHostnameStrategy `protobuf:"bytes,2,opt,name=satlabHostnameStrategy,proto3,oneof"`
}

func (*SetSatlabStableVersionRequest_SatlabBoardAndModelStrategy) isSetSatlabStableVersionRequest_Strategy() {
}

func (*SetSatlabStableVersionRequest_SatlabHostnameStrategy) isSetSatlabStableVersionRequest_Strategy() {
}

type SetSatlabStableVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSatlabStableVersionResponse) Reset() {
	*x = SetSatlabStableVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSatlabStableVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSatlabStableVersionResponse) ProtoMessage() {}

func (x *SetSatlabStableVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSatlabStableVersionResponse.ProtoReflect.Descriptor instead.
func (*SetSatlabStableVersionResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{5}
}

// SatlabBoardModelDeletionCriterion is similar to SatlabBoardAndModelStrategy,
// but
//     a) All the fields must be provided for the request to be well-formed.
//     b) We guarantee that there will be exactly one best match at all times.
//
type SatlabBoardModelDeletionCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SatlabID string `protobuf:"bytes,1,opt,name=satlabID,proto3" json:"satlabID,omitempty"`
	Board    string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	Model    string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *SatlabBoardModelDeletionCriterion) Reset() {
	*x = SatlabBoardModelDeletionCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatlabBoardModelDeletionCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatlabBoardModelDeletionCriterion) ProtoMessage() {}

func (x *SatlabBoardModelDeletionCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatlabBoardModelDeletionCriterion.ProtoReflect.Descriptor instead.
func (*SatlabBoardModelDeletionCriterion) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *SatlabBoardModelDeletionCriterion) GetSatlabID() string {
	if x != nil {
		return x.SatlabID
	}
	return ""
}

func (x *SatlabBoardModelDeletionCriterion) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *SatlabBoardModelDeletionCriterion) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// SatlabHostnameDeletionCriterion is similar to SatlabHostnameStrategy,
// but
//     a) All the fields must be provided for the request to be well-formed.
//     b) We guarantee that there will be exactly one best match at all times.
//
type SatlabHostnameDeletionCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SatlabID string `protobuf:"bytes,1,opt,name=satlabID,proto3" json:"satlabID,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *SatlabHostnameDeletionCriterion) Reset() {
	*x = SatlabHostnameDeletionCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatlabHostnameDeletionCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatlabHostnameDeletionCriterion) ProtoMessage() {}

func (x *SatlabHostnameDeletionCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatlabHostnameDeletionCriterion.ProtoReflect.Descriptor instead.
func (*SatlabHostnameDeletionCriterion) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *SatlabHostnameDeletionCriterion) GetSatlabID() string {
	if x != nil {
		return x.SatlabID
	}
	return ""
}

func (x *SatlabHostnameDeletionCriterion) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type DeleteSatlabStableVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//	*DeleteSatlabStableVersionRequest_SatlabBoardModelDeletionCriterion
	//	*DeleteSatlabStableVersionRequest_SatlabHostnameDeletionCriterion
	Strategy isDeleteSatlabStableVersionRequest_Strategy `protobuf_oneof:"strategy"`
}

func (x *DeleteSatlabStableVersionRequest) Reset() {
	*x = DeleteSatlabStableVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSatlabStableVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSatlabStableVersionRequest) ProtoMessage() {}

func (x *DeleteSatlabStableVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSatlabStableVersionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSatlabStableVersionRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{8}
}

func (m *DeleteSatlabStableVersionRequest) GetStrategy() isDeleteSatlabStableVersionRequest_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *DeleteSatlabStableVersionRequest) GetSatlabBoardModelDeletionCriterion() *SatlabBoardModelDeletionCriterion {
	if x, ok := x.GetStrategy().(*DeleteSatlabStableVersionRequest_SatlabBoardModelDeletionCriterion); ok {
		return x.SatlabBoardModelDeletionCriterion
	}
	return nil
}

func (x *DeleteSatlabStableVersionRequest) GetSatlabHostnameDeletionCriterion() *SatlabHostnameDeletionCriterion {
	if x, ok := x.GetStrategy().(*DeleteSatlabStableVersionRequest_SatlabHostnameDeletionCriterion); ok {
		return x.SatlabHostnameDeletionCriterion
	}
	return nil
}

type isDeleteSatlabStableVersionRequest_Strategy interface {
	isDeleteSatlabStableVersionRequest_Strategy()
}

type DeleteSatlabStableVersionRequest_SatlabBoardModelDeletionCriterion struct {
	SatlabBoardModelDeletionCriterion *SatlabBoardModelDeletionCriterion `protobuf:"bytes,1,opt,name=satlabBoardModelDeletionCriterion,proto3,oneof"`
}

type DeleteSatlabStableVersionRequest_SatlabHostnameDeletionCriterion struct {
	SatlabHostnameDeletionCriterion *SatlabHostnameDeletionCriterion `protobuf:"bytes,2,opt,name=satlabHostnameDeletionCriterion,proto3,oneof"`
}

func (*DeleteSatlabStableVersionRequest_SatlabBoardModelDeletionCriterion) isDeleteSatlabStableVersionRequest_Strategy() {
}

func (*DeleteSatlabStableVersionRequest_SatlabHostnameDeletionCriterion) isDeleteSatlabStableVersionRequest_Strategy() {
}

type DeleteSatlabStableVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidDelete bool   `protobuf:"varint,1,opt,name=didDelete,proto3" json:"didDelete,omitempty"`
	Reason    string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeleteSatlabStableVersionResponse) Reset() {
	*x = DeleteSatlabStableVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSatlabStableVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSatlabStableVersionResponse) ProtoMessage() {}

func (x *DeleteSatlabStableVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSatlabStableVersionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSatlabStableVersionResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSatlabStableVersionResponse) GetDidDelete() bool {
	if x != nil {
		return x.DidDelete
	}
	return false
}

func (x *DeleteSatlabStableVersionResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DumpStableVersionToDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpStableVersionToDatastoreRequest) Reset() {
	*x = DumpStableVersionToDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStableVersionToDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStableVersionToDatastoreRequest) ProtoMessage() {}

func (x *DumpStableVersionToDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStableVersionToDatastoreRequest.ProtoReflect.Descriptor instead.
func (*DumpStableVersionToDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{10}
}

type DumpStableVersionToDatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpStableVersionToDatastoreResponse) Reset() {
	*x = DumpStableVersionToDatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStableVersionToDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStableVersionToDatastoreResponse) ProtoMessage() {}

func (x *DumpStableVersionToDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStableVersionToDatastoreResponse.ProtoReflect.Descriptor instead.
func (*DumpStableVersionToDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{11}
}

var File_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto protoreflect.FileDescriptor

var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61,
	0x66, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x61, 0x66, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x6f, 0x43, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x43, 0x72, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x65, 0x0a, 0x1b, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41,
	0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x50, 0x0a, 0x16, 0x53, 0x61, 0x74, 0x6c, 0x61,
	0x62, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x1d, 0x53, 0x65,
	0x74, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x1b, 0x73,
	0x61, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x6c,
	0x61, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x48, 0x00, 0x52, 0x16, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65,
	0x74, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x21,
	0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x59, 0x0a, 0x1f, 0x53, 0x61, 0x74,
	0x6c, 0x61, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x21, 0x73, 0x61,
	0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x61,
	0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x21, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x62,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x59, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x25, 0x0a, 0x23, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x44, 0x75, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xb3, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x73, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x61, 0x74, 0x6c, 0x61, 0x62, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x1c,
	0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescOnce sync.Once
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData = file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc
)

func file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP() []byte {
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescOnce.Do(func() {
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData)
	})
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData
}

var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_goTypes = []interface{}{
	(*GetStableVersionRequest)(nil),              // 0: crosskylabadmin.fleet.GetStableVersionRequest
	(*GetStableVersionResponse)(nil),             // 1: crosskylabadmin.fleet.GetStableVersionResponse
	(*SatlabBoardAndModelStrategy)(nil),          // 2: crosskylabadmin.fleet.SatlabBoardAndModelStrategy
	(*SatlabHostnameStrategy)(nil),               // 3: crosskylabadmin.fleet.SatlabHostnameStrategy
	(*SetSatlabStableVersionRequest)(nil),        // 4: crosskylabadmin.fleet.SetSatlabStableVersionRequest
	(*SetSatlabStableVersionResponse)(nil),       // 5: crosskylabadmin.fleet.SetSatlabStableVersionResponse
	(*SatlabBoardModelDeletionCriterion)(nil),    // 6: crosskylabadmin.fleet.SatlabBoardModelDeletionCriterion
	(*SatlabHostnameDeletionCriterion)(nil),      // 7: crosskylabadmin.fleet.SatlabHostnameDeletionCriterion
	(*DeleteSatlabStableVersionRequest)(nil),     // 8: crosskylabadmin.fleet.DeleteSatlabStableVersionRequest
	(*DeleteSatlabStableVersionResponse)(nil),    // 9: crosskylabadmin.fleet.DeleteSatlabStableVersionResponse
	(*DumpStableVersionToDatastoreRequest)(nil),  // 10: crosskylabadmin.fleet.DumpStableVersionToDatastoreRequest
	(*DumpStableVersionToDatastoreResponse)(nil), // 11: crosskylabadmin.fleet.DumpStableVersionToDatastoreResponse
}
var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_depIdxs = []int32{
	2,  // 0: crosskylabadmin.fleet.SetSatlabStableVersionRequest.satlabBoardAndModelStrategy:type_name -> crosskylabadmin.fleet.SatlabBoardAndModelStrategy
	3,  // 1: crosskylabadmin.fleet.SetSatlabStableVersionRequest.satlabHostnameStrategy:type_name -> crosskylabadmin.fleet.SatlabHostnameStrategy
	6,  // 2: crosskylabadmin.fleet.DeleteSatlabStableVersionRequest.satlabBoardModelDeletionCriterion:type_name -> crosskylabadmin.fleet.SatlabBoardModelDeletionCriterion
	7,  // 3: crosskylabadmin.fleet.DeleteSatlabStableVersionRequest.satlabHostnameDeletionCriterion:type_name -> crosskylabadmin.fleet.SatlabHostnameDeletionCriterion
	0,  // 4: crosskylabadmin.fleet.Inventory.GetStableVersion:input_type -> crosskylabadmin.fleet.GetStableVersionRequest
	4,  // 5: crosskylabadmin.fleet.Inventory.SetSatlabStableVersion:input_type -> crosskylabadmin.fleet.SetSatlabStableVersionRequest
	8,  // 6: crosskylabadmin.fleet.Inventory.DeleteSatlabStableVersion:input_type -> crosskylabadmin.fleet.DeleteSatlabStableVersionRequest
	10, // 7: crosskylabadmin.fleet.Inventory.DumpStableVersionToDatastore:input_type -> crosskylabadmin.fleet.DumpStableVersionToDatastoreRequest
	1,  // 8: crosskylabadmin.fleet.Inventory.GetStableVersion:output_type -> crosskylabadmin.fleet.GetStableVersionResponse
	5,  // 9: crosskylabadmin.fleet.Inventory.SetSatlabStableVersion:output_type -> crosskylabadmin.fleet.SetSatlabStableVersionResponse
	9,  // 10: crosskylabadmin.fleet.Inventory.DeleteSatlabStableVersion:output_type -> crosskylabadmin.fleet.DeleteSatlabStableVersionResponse
	11, // 11: crosskylabadmin.fleet.Inventory.DumpStableVersionToDatastore:output_type -> crosskylabadmin.fleet.DumpStableVersionToDatastoreResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_init() }
func file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_init() {
	if File_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatlabBoardAndModelStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatlabHostnameStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSatlabStableVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSatlabStableVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatlabBoardModelDeletionCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatlabHostnameDeletionCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSatlabStableVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSatlabStableVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStableVersionToDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStableVersionToDatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SetSatlabStableVersionRequest_SatlabBoardAndModelStrategy)(nil),
		(*SetSatlabStableVersionRequest_SatlabHostnameStrategy)(nil),
	}
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DeleteSatlabStableVersionRequest_SatlabBoardModelDeletionCriterion)(nil),
		(*DeleteSatlabStableVersionRequest_SatlabHostnameDeletionCriterion)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_goTypes,
		DependencyIndexes: file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_depIdxs,
		MessageInfos:      file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes,
	}.Build()
	File_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto = out.File
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc = nil
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_goTypes = nil
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// GetStableVersion reads the stable version for a particular DUT from datastore
	//
	// There is intentionally no RPC for overwriting the stable version with arbitrary content.
	GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error)
	// SetSatlabStableVersion sets the stable version value (for which CrOSSkylabAdmin is the source of truth),
	// for satlab devices only.
	SetSatlabStableVersion(ctx context.Context, in *SetSatlabStableVersionRequest, opts ...grpc.CallOption) (*SetSatlabStableVersionResponse, error)
	// DeleteSatlabStableVersion deletes the satlab stable version value from CrOSSkylabAdmin which is the source of truth
	// for satlab devices only.
	DeleteSatlabStableVersion(ctx context.Context, in *DeleteSatlabStableVersionRequest, opts ...grpc.CallOption) (*DeleteSatlabStableVersionResponse, error)
	// DumpStableVersionToDatastore reads the stable version from the LUCI config file
	// and writes it to datastore.
	DumpStableVersionToDatastore(ctx context.Context, in *DumpStableVersionToDatastoreRequest, opts ...grpc.CallOption) (*DumpStableVersionToDatastoreResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error) {
	out := new(GetStableVersionResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "GetStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) SetSatlabStableVersion(ctx context.Context, in *SetSatlabStableVersionRequest, opts ...grpc.CallOption) (*SetSatlabStableVersionResponse, error) {
	out := new(SetSatlabStableVersionResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "SetSatlabStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteSatlabStableVersion(ctx context.Context, in *DeleteSatlabStableVersionRequest, opts ...grpc.CallOption) (*DeleteSatlabStableVersionResponse, error) {
	out := new(DeleteSatlabStableVersionResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DeleteSatlabStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DumpStableVersionToDatastore(ctx context.Context, in *DumpStableVersionToDatastoreRequest, opts ...grpc.CallOption) (*DumpStableVersionToDatastoreResponse, error) {
	out := new(DumpStableVersionToDatastoreResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DumpStableVersionToDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error) {
	out := new(GetStableVersionResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/GetStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) SetSatlabStableVersion(ctx context.Context, in *SetSatlabStableVersionRequest, opts ...grpc.CallOption) (*SetSatlabStableVersionResponse, error) {
	out := new(SetSatlabStableVersionResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/SetSatlabStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteSatlabStableVersion(ctx context.Context, in *DeleteSatlabStableVersionRequest, opts ...grpc.CallOption) (*DeleteSatlabStableVersionResponse, error) {
	out := new(DeleteSatlabStableVersionResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DeleteSatlabStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DumpStableVersionToDatastore(ctx context.Context, in *DumpStableVersionToDatastoreRequest, opts ...grpc.CallOption) (*DumpStableVersionToDatastoreResponse, error) {
	out := new(DumpStableVersionToDatastoreResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DumpStableVersionToDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// GetStableVersion reads the stable version for a particular DUT from datastore
	//
	// There is intentionally no RPC for overwriting the stable version with arbitrary content.
	GetStableVersion(context.Context, *GetStableVersionRequest) (*GetStableVersionResponse, error)
	// SetSatlabStableVersion sets the stable version value (for which CrOSSkylabAdmin is the source of truth),
	// for satlab devices only.
	SetSatlabStableVersion(context.Context, *SetSatlabStableVersionRequest) (*SetSatlabStableVersionResponse, error)
	// DeleteSatlabStableVersion deletes the satlab stable version value from CrOSSkylabAdmin which is the source of truth
	// for satlab devices only.
	DeleteSatlabStableVersion(context.Context, *DeleteSatlabStableVersionRequest) (*DeleteSatlabStableVersionResponse, error)
	// DumpStableVersionToDatastore reads the stable version from the LUCI config file
	// and writes it to datastore.
	DumpStableVersionToDatastore(context.Context, *DumpStableVersionToDatastoreRequest) (*DumpStableVersionToDatastoreResponse, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) GetStableVersion(context.Context, *GetStableVersionRequest) (*GetStableVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStableVersion not implemented")
}
func (*UnimplementedInventoryServer) SetSatlabStableVersion(context.Context, *SetSatlabStableVersionRequest) (*SetSatlabStableVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSatlabStableVersion not implemented")
}
func (*UnimplementedInventoryServer) DeleteSatlabStableVersion(context.Context, *DeleteSatlabStableVersionRequest) (*DeleteSatlabStableVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSatlabStableVersion not implemented")
}
func (*UnimplementedInventoryServer) DumpStableVersionToDatastore(context.Context, *DumpStableVersionToDatastoreRequest) (*DumpStableVersionToDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpStableVersionToDatastore not implemented")
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_GetStableVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStableVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetStableVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/GetStableVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetStableVersion(ctx, req.(*GetStableVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_SetSatlabStableVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSatlabStableVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SetSatlabStableVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/SetSatlabStableVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SetSatlabStableVersion(ctx, req.(*SetSatlabStableVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteSatlabStableVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSatlabStableVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteSatlabStableVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DeleteSatlabStableVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteSatlabStableVersion(ctx, req.(*DeleteSatlabStableVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DumpStableVersionToDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpStableVersionToDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DumpStableVersionToDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DumpStableVersionToDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DumpStableVersionToDatastore(ctx, req.(*DumpStableVersionToDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosskylabadmin.fleet.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStableVersion",
			Handler:    _Inventory_GetStableVersion_Handler,
		},
		{
			MethodName: "SetSatlabStableVersion",
			Handler:    _Inventory_SetSatlabStableVersion_Handler,
		},
		{
			MethodName: "DeleteSatlabStableVersion",
			Handler:    _Inventory_DeleteSatlabStableVersion_Handler,
		},
		{
			MethodName: "DumpStableVersionToDatastore",
			Handler:    _Inventory_DumpStableVersionToDatastore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto",
}
