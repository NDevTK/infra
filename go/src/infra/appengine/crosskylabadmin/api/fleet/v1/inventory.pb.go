// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto

package fleet

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDeploymentStatusResponse_Status int32

const (
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_INVALID     GetDeploymentStatusResponse_Status = 0
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_IN_PROGRESS GetDeploymentStatusResponse_Status = 1
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_SUCCEEDED   GetDeploymentStatusResponse_Status = 2
	GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_FAILED      GetDeploymentStatusResponse_Status = 3
)

// Enum value maps for GetDeploymentStatusResponse_Status.
var (
	GetDeploymentStatusResponse_Status_name = map[int32]string{
		0: "DUT_DEPLOYMENT_STATUS_INVALID",
		1: "DUT_DEPLOYMENT_STATUS_IN_PROGRESS",
		2: "DUT_DEPLOYMENT_STATUS_SUCCEEDED",
		3: "DUT_DEPLOYMENT_STATUS_FAILED",
	}
	GetDeploymentStatusResponse_Status_value = map[string]int32{
		"DUT_DEPLOYMENT_STATUS_INVALID":     0,
		"DUT_DEPLOYMENT_STATUS_IN_PROGRESS": 1,
		"DUT_DEPLOYMENT_STATUS_SUCCEEDED":   2,
		"DUT_DEPLOYMENT_STATUS_FAILED":      3,
	}
)

func (x GetDeploymentStatusResponse_Status) Enum() *GetDeploymentStatusResponse_Status {
	p := new(GetDeploymentStatusResponse_Status)
	*p = x
	return p
}

func (x GetDeploymentStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDeploymentStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_enumTypes[0].Descriptor()
}

func (GetDeploymentStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_enumTypes[0]
}

func (x GetDeploymentStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDeploymentStatusResponse_Status.Descriptor instead.
func (GetDeploymentStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{13, 0}
}

type EnsurePoolHealthyResponse_Failure int32

const (
	EnsurePoolHealthyResponse_FAILURE_INVALID EnsurePoolHealthyResponse_Failure = 0
	// Target pool had more than max_unhealthy_duts unhealthy duts before any
	// action was taken.
	EnsurePoolHealthyResponse_TOO_MANY_UNHEALTHY_DUTS EnsurePoolHealthyResponse_Failure = 1
	// Spare pool did not have enough healthy DUTs to make sure all DUTs in
	// target pool are healthy. In this failure mode, the available healthy
	// spare DUTs do get transferred to the target pool.
	EnsurePoolHealthyResponse_NOT_ENOUGH_HEALTHY_SPARES EnsurePoolHealthyResponse_Failure = 2
)

// Enum value maps for EnsurePoolHealthyResponse_Failure.
var (
	EnsurePoolHealthyResponse_Failure_name = map[int32]string{
		0: "FAILURE_INVALID",
		1: "TOO_MANY_UNHEALTHY_DUTS",
		2: "NOT_ENOUGH_HEALTHY_SPARES",
	}
	EnsurePoolHealthyResponse_Failure_value = map[string]int32{
		"FAILURE_INVALID":           0,
		"TOO_MANY_UNHEALTHY_DUTS":   1,
		"NOT_ENOUGH_HEALTHY_SPARES": 2,
	}
)

func (x EnsurePoolHealthyResponse_Failure) Enum() *EnsurePoolHealthyResponse_Failure {
	p := new(EnsurePoolHealthyResponse_Failure)
	*p = x
	return p
}

func (x EnsurePoolHealthyResponse_Failure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnsurePoolHealthyResponse_Failure) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_enumTypes[1].Descriptor()
}

func (EnsurePoolHealthyResponse_Failure) Type() protoreflect.EnumType {
	return &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_enumTypes[1]
}

func (x EnsurePoolHealthyResponse_Failure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnsurePoolHealthyResponse_Failure.Descriptor instead.
func (EnsurePoolHealthyResponse_Failure) EnumDescriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{19, 0}
}

type UpdateManufacturingConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateManufacturingConfigRequest) Reset() {
	*x = UpdateManufacturingConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateManufacturingConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateManufacturingConfigRequest) ProtoMessage() {}

func (x *UpdateManufacturingConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateManufacturingConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateManufacturingConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{0}
}

type UpdateManufacturingConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeUrl string `protobuf:"bytes,1,opt,name=change_url,json=changeUrl,proto3" json:"change_url,omitempty"`
}

func (x *UpdateManufacturingConfigResponse) Reset() {
	*x = UpdateManufacturingConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateManufacturingConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateManufacturingConfigResponse) ProtoMessage() {}

func (x *UpdateManufacturingConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateManufacturingConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateManufacturingConfigResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateManufacturingConfigResponse) GetChangeUrl() string {
	if x != nil {
		return x.ChangeUrl
	}
	return ""
}

type ReportInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skip reporting inventory metrics after we migrate to inventory v2.
	SkipInventoryMetrics bool `protobuf:"varint,1,opt,name=skip_inventory_metrics,json=skipInventoryMetrics,proto3" json:"skip_inventory_metrics,omitempty"`
}

func (x *ReportInventoryRequest) Reset() {
	*x = ReportInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInventoryRequest) ProtoMessage() {}

func (x *ReportInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInventoryRequest.ProtoReflect.Descriptor instead.
func (*ReportInventoryRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *ReportInventoryRequest) GetSkipInventoryMetrics() bool {
	if x != nil {
		return x.SkipInventoryMetrics
	}
	return false
}

type ReportInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportInventoryResponse) Reset() {
	*x = ReportInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInventoryResponse) ProtoMessage() {}

func (x *ReportInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInventoryResponse.ProtoReflect.Descriptor instead.
func (*ReportInventoryResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{3}
}

type PushInventoryToQueenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushInventoryToQueenRequest) Reset() {
	*x = PushInventoryToQueenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushInventoryToQueenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushInventoryToQueenRequest) ProtoMessage() {}

func (x *PushInventoryToQueenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushInventoryToQueenRequest.ProtoReflect.Descriptor instead.
func (*PushInventoryToQueenRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{4}
}

type PushInventoryToQueenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushInventoryToQueenResponse) Reset() {
	*x = PushInventoryToQueenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushInventoryToQueenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushInventoryToQueenResponse) ProtoMessage() {}

func (x *PushInventoryToQueenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushInventoryToQueenResponse.ProtoReflect.Descriptor instead.
func (*PushInventoryToQueenResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{5}
}

type UpdateDeviceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeviceConfigRequest) Reset() {
	*x = UpdateDeviceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceConfigRequest) ProtoMessage() {}

func (x *UpdateDeviceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{6}
}

type UpdateDeviceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeviceConfigResponse) Reset() {
	*x = UpdateDeviceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceConfigResponse) ProtoMessage() {}

func (x *UpdateDeviceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceConfigResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{7}
}

type DeployDutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// new_specs are the device specs this deployment effort should set.
	//
	// This should be a serialized inventory.CommonDeviceSpecs protobuf.
	//
	// Note that deploy will use new_specs to initialize the device specs for the
	// DUT, but the specs (in particular labels) may be updated further as a
	// result of the deployment process itself.
	//
	// new_specs must satisfy following sanity conditions:
	// - inventory.CommonDeviceSpecs.Id must be unset.
	NewSpecs [][]byte `protobuf:"bytes,1,rep,name=new_specs,json=newSpecs,proto3" json:"new_specs,omitempty"`
	// The deployment actions to take.
	//
	// Automated repair is always attempted at the end of deployment actions.
	Actions *DutDeploymentActions `protobuf:"bytes,2,opt,name=actions,proto3" json:"actions,omitempty"`
	Options *DutDeploymentOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DeployDutRequest) Reset() {
	*x = DeployDutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployDutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployDutRequest) ProtoMessage() {}

func (x *DeployDutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployDutRequest.ProtoReflect.Descriptor instead.
func (*DeployDutRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *DeployDutRequest) GetNewSpecs() [][]byte {
	if x != nil {
		return x.NewSpecs
	}
	return nil
}

func (x *DeployDutRequest) GetActions() *DutDeploymentActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *DeployDutRequest) GetOptions() *DutDeploymentOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type DeployDutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque ID to be used for future GetDeploymentStatus requests.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *DeployDutResponse) Reset() {
	*x = DeployDutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployDutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployDutResponse) ProtoMessage() {}

func (x *DeployDutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployDutResponse.ProtoReflect.Descriptor instead.
func (*DeployDutResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *DeployDutResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type RedeployDutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// old_specs are the old device specs for a DUT already in the inventory that
	// the client wants to re-deploy.
	//
	// This should be a serialized inventory.CommonDeviceSpecs protobuf.
	//
	// old_specs must satisfy following sanity conditions:
	// - inventory.CommonDeviceSpecs.Id must be set. It will be used to identify
	//   the dut to deploy.
	OldSpecs []byte `protobuf:"bytes,1,opt,name=old_specs,json=oldSpecs,proto3" json:"old_specs,omitempty"`
	// new_specs are the device specs this redeployment effort should set.
	//
	// This should be a serialized inventory.CommonDeviceSpecs protobuf.
	//
	// Note that deploy will use new_specs to initialize the device specs for the
	// DUT, but the specs (in particular labels) may be updated further as a
	// result of the deployment process itself.
	//
	// new_specs must satisfy following sanity conditions:
	// - inventory.CommonDeviceSpecs.Id must be set and be identical to the one in
	//   old_specs.
	NewSpecs []byte                `protobuf:"bytes,2,opt,name=new_specs,json=newSpecs,proto3" json:"new_specs,omitempty"`
	Actions  *DutDeploymentActions `protobuf:"bytes,3,opt,name=actions,proto3" json:"actions,omitempty"`
	Options  *DutDeploymentOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *RedeployDutRequest) Reset() {
	*x = RedeployDutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeployDutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeployDutRequest) ProtoMessage() {}

func (x *RedeployDutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeployDutRequest.ProtoReflect.Descriptor instead.
func (*RedeployDutRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *RedeployDutRequest) GetOldSpecs() []byte {
	if x != nil {
		return x.OldSpecs
	}
	return nil
}

func (x *RedeployDutRequest) GetNewSpecs() []byte {
	if x != nil {
		return x.NewSpecs
	}
	return nil
}

func (x *RedeployDutRequest) GetActions() *DutDeploymentActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RedeployDutRequest) GetOptions() *DutDeploymentOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type RedeployDutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque ID to be used for future GetDeploymentStatus requests.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *RedeployDutResponse) Reset() {
	*x = RedeployDutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeployDutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeployDutResponse) ProtoMessage() {}

func (x *RedeployDutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeployDutResponse.ProtoReflect.Descriptor instead.
func (*RedeployDutResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *RedeployDutResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An opaque ID returned by earlier deployment RPCs.
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *GetDeploymentStatusRequest) Reset() {
	*x = GetDeploymentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentStatusRequest) ProtoMessage() {}

func (x *GetDeploymentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentStatusRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *GetDeploymentStatusRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetDeploymentStatusResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=crosskylabadmin.fleet.GetDeploymentStatusResponse_Status" json:"status,omitempty"`
	// URL for the inventory change for this DUT deployment, if any.
	//
	// This change only includes any explicit inventory changes made for
	// deployment. Itj does not include any inventory changes that occur as a
	// consequence of the automated repair attempt at the end of deployment.
	ChangeUrl string `protobuf:"bytes,3,opt,name=change_url,json=changeUrl,proto3" json:"change_url,omitempty"`
	// The Skylab task created for the DUT deployment.
	TaskUrl string `protobuf:"bytes,4,opt,name=task_url,json=taskUrl,proto3" json:"task_url,omitempty"`
	// An explanatory message for the deployment status.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetDeploymentStatusResponse) Reset() {
	*x = GetDeploymentStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentStatusResponse) ProtoMessage() {}

func (x *GetDeploymentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentStatusResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *GetDeploymentStatusResponse) GetStatus() GetDeploymentStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetDeploymentStatusResponse_DUT_DEPLOYMENT_STATUS_INVALID
}

func (x *GetDeploymentStatusResponse) GetChangeUrl() string {
	if x != nil {
		return x.ChangeUrl
	}
	return ""
}

func (x *GetDeploymentStatusResponse) GetTaskUrl() string {
	if x != nil {
		return x.TaskUrl
	}
	return ""
}

func (x *GetDeploymentStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteDutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// inventory.CommonDeviceSpecs.Hostname for the DUT to delete.
	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *DeleteDutsRequest) Reset() {
	*x = DeleteDutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDutsRequest) ProtoMessage() {}

func (x *DeleteDutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDutsRequest.ProtoReflect.Descriptor instead.
func (*DeleteDutsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteDutsRequest) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

type DeleteDutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL for the inventory change that removed the requested DUTs.
	ChangeUrl string `protobuf:"bytes,1,opt,name=change_url,json=changeUrl,proto3" json:"change_url,omitempty"`
	// ids lists the inventory IDs of the DUTs deleted.
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteDutsResponse) Reset() {
	*x = DeleteDutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDutsResponse) ProtoMessage() {}

func (x *DeleteDutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDutsResponse.ProtoReflect.Descriptor instead.
func (*DeleteDutsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteDutsResponse) GetChangeUrl() string {
	if x != nil {
		return x.ChangeUrl
	}
	return ""
}

func (x *DeleteDutsResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DutDeploymentActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stage the requested Chrome OS image on the USB attached to servo and DUT.
	StageImageToUsb bool `protobuf:"varint,1,opt,name=stage_image_to_usb,json=stageImageToUsb,proto3" json:"stage_image_to_usb,omitempty"`
	// Install DUT firmware from the image staged on USB.
	InstallFirmware bool `protobuf:"varint,2,opt,name=install_firmware,json=installFirmware,proto3" json:"install_firmware,omitempty"`
	// Install ChromeOS test image from the image staged on USB.
	InstallTestImage bool `protobuf:"varint,3,opt,name=install_test_image,json=installTestImage,proto3" json:"install_test_image,omitempty"`
	// Skip deployment task.
	SkipDeployment bool `protobuf:"varint,4,opt,name=skip_deployment,json=skipDeployment,proto3" json:"skip_deployment,omitempty"`
	// Setup labstation for deployment.
	SetupLabstation bool `protobuf:"varint,5,opt,name=setup_labstation,json=setupLabstation,proto3" json:"setup_labstation,omitempty"`
	// Run pre-deploy verification.
	RunPreDeployVerification bool `protobuf:"varint,6,opt,name=run_pre_deploy_verification,json=runPreDeployVerification,proto3" json:"run_pre_deploy_verification,omitempty"`
}

func (x *DutDeploymentActions) Reset() {
	*x = DutDeploymentActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DutDeploymentActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutDeploymentActions) ProtoMessage() {}

func (x *DutDeploymentActions) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutDeploymentActions.ProtoReflect.Descriptor instead.
func (*DutDeploymentActions) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{16}
}

func (x *DutDeploymentActions) GetStageImageToUsb() bool {
	if x != nil {
		return x.StageImageToUsb
	}
	return false
}

func (x *DutDeploymentActions) GetInstallFirmware() bool {
	if x != nil {
		return x.InstallFirmware
	}
	return false
}

func (x *DutDeploymentActions) GetInstallTestImage() bool {
	if x != nil {
		return x.InstallTestImage
	}
	return false
}

func (x *DutDeploymentActions) GetSkipDeployment() bool {
	if x != nil {
		return x.SkipDeployment
	}
	return false
}

func (x *DutDeploymentActions) GetSetupLabstation() bool {
	if x != nil {
		return x.SetupLabstation
	}
	return false
}

func (x *DutDeploymentActions) GetRunPreDeployVerification() bool {
	if x != nil {
		return x.RunPreDeployVerification
	}
	return false
}

type DutDeploymentOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assign a valid servo port if none is provided in the included device specs.
	AssignServoPortIfMissing bool `protobuf:"varint,1,opt,name=assign_servo_port_if_missing,json=assignServoPortIfMissing,proto3" json:"assign_servo_port_if_missing,omitempty"`
}

func (x *DutDeploymentOptions) Reset() {
	*x = DutDeploymentOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DutDeploymentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutDeploymentOptions) ProtoMessage() {}

func (x *DutDeploymentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutDeploymentOptions.ProtoReflect.Descriptor instead.
func (*DutDeploymentOptions) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{17}
}

func (x *DutDeploymentOptions) GetAssignServoPortIfMissing() bool {
	if x != nil {
		return x.AssignServoPortIfMissing
	}
	return false
}

// Deprecated: Do not use.
type EnsurePoolHealthyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_selectors filters the set of DUTs considered by EnsurePoolHealthy.
	//
	// All pool changes occurs within this selected set of DUTs.
	// It is an error to omit dut_selector because that would allow
	// unconstrained DUT reallocation between pools, disregarding all other
	// labels.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// spare_pool is the pool from which healthy DUTs will be swapped into
	// target_pool.
	SparePool string `protobuf:"bytes,3,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
	// the target pool before any action is taken.
	//
	// max_unhealthy_duts is meaningful only when it has a positive value (> 0).
	//
	// If the total number of unhealthy DUTs is above this threshold,
	// EnsurePoolHealthy does not change DUT pools and returns a
	// NOT_ENOUGH_HEALTHY_SPARES failure.
	MaxUnhealthyDuts int32                             `protobuf:"varint,4,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
	Options          *EnsurePoolHealthyRequest_Options `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *EnsurePoolHealthyRequest) Reset() {
	*x = EnsurePoolHealthyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePoolHealthyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePoolHealthyRequest) ProtoMessage() {}

func (x *EnsurePoolHealthyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePoolHealthyRequest.ProtoReflect.Descriptor instead.
func (*EnsurePoolHealthyRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{18}
}

func (x *EnsurePoolHealthyRequest) GetDutSelector() *DutSelector {
	if x != nil {
		return x.DutSelector
	}
	return nil
}

func (x *EnsurePoolHealthyRequest) GetTargetPool() string {
	if x != nil {
		return x.TargetPool
	}
	return ""
}

func (x *EnsurePoolHealthyRequest) GetSparePool() string {
	if x != nil {
		return x.SparePool
	}
	return ""
}

func (x *EnsurePoolHealthyRequest) GetMaxUnhealthyDuts() int32 {
	if x != nil {
		return x.MaxUnhealthyDuts
	}
	return 0
}

func (x *EnsurePoolHealthyRequest) GetOptions() *EnsurePoolHealthyRequest_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type EnsurePoolHealthyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Failures encountered during pool balancing.
	//
	// All the remaining fields of the response are still valid in the presence of
	// failures.
	Failures []EnsurePoolHealthyResponse_Failure `protobuf:"varint,1,rep,packed,name=failures,proto3,enum=crosskylabadmin.fleet.EnsurePoolHealthyResponse_Failure" json:"failures,omitempty"`
	// target_pool_status summarizes the target pool after the required
	// inventory changes are executed.
	//
	// Within the pool, only DUTs selected via dut_selector are summarized.
	TargetPoolStatus *PoolStatus `protobuf:"bytes,2,opt,name=target_pool_status,json=targetPoolStatus,proto3" json:"target_pool_status,omitempty"`
	// spare_pool_status summarizes the spare pool after the required
	// inventory changes are executed.
	//
	// Within the pool, only DUTs selected via dut_selector are summarized.
	SparePoolStatus *PoolStatus `protobuf:"bytes,3,opt,name=spare_pool_status,json=sparePoolStatus,proto3" json:"spare_pool_status,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	//
	// url is empty in dryrun mode.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// changes correspond to the proposed or executed pool changes to ensure
	// inventory in response to various API methods calls.
	Changes []*PoolChange `protobuf:"bytes,5,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *EnsurePoolHealthyResponse) Reset() {
	*x = EnsurePoolHealthyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePoolHealthyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePoolHealthyResponse) ProtoMessage() {}

func (x *EnsurePoolHealthyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePoolHealthyResponse.ProtoReflect.Descriptor instead.
func (*EnsurePoolHealthyResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{19}
}

func (x *EnsurePoolHealthyResponse) GetFailures() []EnsurePoolHealthyResponse_Failure {
	if x != nil {
		return x.Failures
	}
	return nil
}

func (x *EnsurePoolHealthyResponse) GetTargetPoolStatus() *PoolStatus {
	if x != nil {
		return x.TargetPoolStatus
	}
	return nil
}

func (x *EnsurePoolHealthyResponse) GetSparePoolStatus() *PoolStatus {
	if x != nil {
		return x.SparePoolStatus
	}
	return nil
}

func (x *EnsurePoolHealthyResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EnsurePoolHealthyResponse) GetChanges() []*PoolChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Deprecated: Do not use.
type EnsurePoolHealthyForAllModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,1,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// spare_pool is the pool from which healthy DUTs will be swapped into
	// target_pool.
	SparePool string `protobuf:"bytes,2,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
	// the target pool before any action is taken.
	//
	// max_unhealthy_duts is meaningful only when it has a positive value (> 0).
	//
	// If the total number of unhealthy DUTs is above this threshold,
	// EnsurePoolHealthy does not change DUT pools and returns a
	// NOT_ENOUGH_HEALTHY_SPARES failure.
	MaxUnhealthyDuts int32 `protobuf:"varint,3,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
}

func (x *EnsurePoolHealthyForAllModelsRequest) Reset() {
	*x = EnsurePoolHealthyForAllModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePoolHealthyForAllModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePoolHealthyForAllModelsRequest) ProtoMessage() {}

func (x *EnsurePoolHealthyForAllModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePoolHealthyForAllModelsRequest.ProtoReflect.Descriptor instead.
func (*EnsurePoolHealthyForAllModelsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{20}
}

func (x *EnsurePoolHealthyForAllModelsRequest) GetTargetPool() string {
	if x != nil {
		return x.TargetPool
	}
	return ""
}

func (x *EnsurePoolHealthyForAllModelsRequest) GetSparePool() string {
	if x != nil {
		return x.SparePool
	}
	return ""
}

func (x *EnsurePoolHealthyForAllModelsRequest) GetMaxUnhealthyDuts() int32 {
	if x != nil {
		return x.MaxUnhealthyDuts
	}
	return 0
}

// Deprecated: Do not use.
type EnsurePoolHealthyForAllModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// model_result maps a model to the EnsurePoolHealthyResponse for that model.
	ModelResult map[string]*EnsurePoolHealthyResponse `protobuf:"bytes,1,rep,name=model_result,json=modelResult,proto3" json:"model_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnsurePoolHealthyForAllModelsResponse) Reset() {
	*x = EnsurePoolHealthyForAllModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePoolHealthyForAllModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePoolHealthyForAllModelsResponse) ProtoMessage() {}

func (x *EnsurePoolHealthyForAllModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePoolHealthyForAllModelsResponse.ProtoReflect.Descriptor instead.
func (*EnsurePoolHealthyForAllModelsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{21}
}

func (x *EnsurePoolHealthyForAllModelsResponse) GetModelResult() map[string]*EnsurePoolHealthyResponse {
	if x != nil {
		return x.ModelResult
	}
	return nil
}

type BalancePoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_selectors filters the set of DUTs considered by EnsurePoolHealthy.
	//
	// It can be empty, but it would allow DUT reallocation between pools
	// for all models.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// spare_pool is the pool from which healthy DUTs will be swapped into
	// target_pool.
	SparePool string `protobuf:"bytes,3,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
	// the target pool before any action is taken.
	//
	// max_unhealthy_duts is meaningful only when it has a positive value (> 0).
	//
	// If the total number of unhealthy DUTs is above this threshold,
	// EnsurePoolHealthy does not change DUT pools and returns a
	// NOT_ENOUGH_HEALTHY_SPARES failure.
	MaxUnhealthyDuts int32                        `protobuf:"varint,4,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
	Options          *BalancePoolsRequest_Options `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *BalancePoolsRequest) Reset() {
	*x = BalancePoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancePoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancePoolsRequest) ProtoMessage() {}

func (x *BalancePoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancePoolsRequest.ProtoReflect.Descriptor instead.
func (*BalancePoolsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{22}
}

func (x *BalancePoolsRequest) GetDutSelector() *DutSelector {
	if x != nil {
		return x.DutSelector
	}
	return nil
}

func (x *BalancePoolsRequest) GetTargetPool() string {
	if x != nil {
		return x.TargetPool
	}
	return ""
}

func (x *BalancePoolsRequest) GetSparePool() string {
	if x != nil {
		return x.SparePool
	}
	return ""
}

func (x *BalancePoolsRequest) GetMaxUnhealthyDuts() int32 {
	if x != nil {
		return x.MaxUnhealthyDuts
	}
	return 0
}

func (x *BalancePoolsRequest) GetOptions() *BalancePoolsRequest_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type BalancePoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// model_result maps a model to the EnsurePoolHealthyResponse for that model.
	ModelResult map[string]*EnsurePoolHealthyResponse `protobuf:"bytes,1,rep,name=model_result,json=modelResult,proto3" json:"model_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// generated_change_url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change. Example CL:
	// https://crrev.com/i/1814710
	//
	// generated_change_url is empty in dryrun mode.
	GeneratedChangeUrl string `protobuf:"bytes,2,opt,name=generated_change_url,json=generatedChangeUrl,proto3" json:"generated_change_url,omitempty"`
}

func (x *BalancePoolsResponse) Reset() {
	*x = BalancePoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancePoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancePoolsResponse) ProtoMessage() {}

func (x *BalancePoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancePoolsResponse.ProtoReflect.Descriptor instead.
func (*BalancePoolsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{23}
}

func (x *BalancePoolsResponse) GetModelResult() map[string]*EnsurePoolHealthyResponse {
	if x != nil {
		return x.ModelResult
	}
	return nil
}

func (x *BalancePoolsResponse) GetGeneratedChangeUrl() string {
	if x != nil {
		return x.GeneratedChangeUrl
	}
	return ""
}

type ResizePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_selectors filters the set of DUTs considered by ResizePool.
	//
	// All pool changes occurs within this selected set of DUTs.
	// It is an error to omit dut_selector because that would allow
	// unconstrained DUT reallocation between pools, disregarding all other
	// labels.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// target_pool_size is the requested size for the target_pool.
	TargetPoolSize int32 `protobuf:"varint,3,opt,name=target_pool_size,json=targetPoolSize,proto3" json:"target_pool_size,omitempty"`
	// spare_pool is the pool to borrow needed DUTs from and return extra DUTs to.
	SparePool string `protobuf:"bytes,4,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
}

func (x *ResizePoolRequest) Reset() {
	*x = ResizePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizePoolRequest) ProtoMessage() {}

func (x *ResizePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizePoolRequest.ProtoReflect.Descriptor instead.
func (*ResizePoolRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{24}
}

func (x *ResizePoolRequest) GetDutSelector() *DutSelector {
	if x != nil {
		return x.DutSelector
	}
	return nil
}

func (x *ResizePoolRequest) GetTargetPool() string {
	if x != nil {
		return x.TargetPool
	}
	return ""
}

func (x *ResizePoolRequest) GetTargetPoolSize() int32 {
	if x != nil {
		return x.TargetPoolSize
	}
	return 0
}

func (x *ResizePoolRequest) GetSparePool() string {
	if x != nil {
		return x.SparePool
	}
	return ""
}

type ResizePoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// changes correspond to the proposed or executed pool changes to inventory in
	// response to the ResizePool RPC.
	Changes []*PoolChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *ResizePoolResponse) Reset() {
	*x = ResizePoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizePoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizePoolResponse) ProtoMessage() {}

func (x *ResizePoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizePoolResponse.ProtoReflect.Descriptor instead.
func (*ResizePoolResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{25}
}

func (x *ResizePoolResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ResizePoolResponse) GetChanges() []*PoolChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

// NEXT TAG: 4
type DutSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// ID assigned to the DUT in the inventory.
	Id    string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *DutSelector) Reset() {
	*x = DutSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DutSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutSelector) ProtoMessage() {}

func (x *DutSelector) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutSelector.ProtoReflect.Descriptor instead.
func (*DutSelector) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{26}
}

func (x *DutSelector) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DutSelector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DutSelector) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type PoolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// size is the number of DUTs in this pool.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// healthy_count is the number of healthy DUTs in this pool.
	HealthyCount int32 `protobuf:"varint,2,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
}

func (x *PoolStatus) Reset() {
	*x = PoolStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStatus) ProtoMessage() {}

func (x *PoolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStatus.ProtoReflect.Descriptor instead.
func (*PoolStatus) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{27}
}

func (x *PoolStatus) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PoolStatus) GetHealthyCount() int32 {
	if x != nil {
		return x.HealthyCount
	}
	return 0
}

// PoolChange is a single change of DUT pools in the inventory.
type PoolChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_id is the inventory ID of the DUT whose pool was modified.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// old_pool is the pool the DUT was removed from.
	OldPool string `protobuf:"bytes,2,opt,name=old_pool,json=oldPool,proto3" json:"old_pool,omitempty"`
	// new_pool is the pool the DUT was moved to.
	NewPool string `protobuf:"bytes,3,opt,name=new_pool,json=newPool,proto3" json:"new_pool,omitempty"`
}

func (x *PoolChange) Reset() {
	*x = PoolChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolChange) ProtoMessage() {}

func (x *PoolChange) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolChange.ProtoReflect.Descriptor instead.
func (*PoolChange) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{28}
}

func (x *PoolChange) GetDutId() string {
	if x != nil {
		return x.DutId
	}
	return ""
}

func (x *PoolChange) GetOldPool() string {
	if x != nil {
		return x.OldPool
	}
	return ""
}

func (x *PoolChange) GetNewPool() string {
	if x != nil {
		return x.NewPool
	}
	return ""
}

type RemoveDutsFromDronesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// removals is the set of Duts to remove.
	Removals []*RemoveDutsFromDronesRequest_Item `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (x *RemoveDutsFromDronesRequest) Reset() {
	*x = RemoveDutsFromDronesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDutsFromDronesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDutsFromDronesRequest) ProtoMessage() {}

func (x *RemoveDutsFromDronesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDutsFromDronesRequest.ProtoReflect.Descriptor instead.
func (*RemoveDutsFromDronesRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveDutsFromDronesRequest) GetRemovals() []*RemoveDutsFromDronesRequest_Item {
	if x != nil {
		return x.Removals
	}
	return nil
}

type RemoveDutsFromDronesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// removed is the set of Duts that were removed.
	Removed []*RemoveDutsFromDronesResponse_Item `protobuf:"bytes,1,rep,name=removed,proto3" json:"removed,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RemoveDutsFromDronesResponse) Reset() {
	*x = RemoveDutsFromDronesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDutsFromDronesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDutsFromDronesResponse) ProtoMessage() {}

func (x *RemoveDutsFromDronesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDutsFromDronesResponse.ProtoReflect.Descriptor instead.
func (*RemoveDutsFromDronesResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{30}
}

func (x *RemoveDutsFromDronesResponse) GetRemoved() []*RemoveDutsFromDronesResponse_Item {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *RemoveDutsFromDronesResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AssignDutsToDronesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assignments is the set of Duts to assign.
	Assignments []*AssignDutsToDronesRequest_Item `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
}

func (x *AssignDutsToDronesRequest) Reset() {
	*x = AssignDutsToDronesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignDutsToDronesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDutsToDronesRequest) ProtoMessage() {}

func (x *AssignDutsToDronesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDutsToDronesRequest.ProtoReflect.Descriptor instead.
func (*AssignDutsToDronesRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{31}
}

func (x *AssignDutsToDronesRequest) GetAssignments() []*AssignDutsToDronesRequest_Item {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type AssignDutsToDronesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assigned is the set of Duts that were removed.
	Assigned []*AssignDutsToDronesResponse_Item `protobuf:"bytes,1,rep,name=assigned,proto3" json:"assigned,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AssignDutsToDronesResponse) Reset() {
	*x = AssignDutsToDronesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignDutsToDronesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDutsToDronesResponse) ProtoMessage() {}

func (x *AssignDutsToDronesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDutsToDronesResponse.ProtoReflect.Descriptor instead.
func (*AssignDutsToDronesResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{32}
}

func (x *AssignDutsToDronesResponse) GetAssigned() []*AssignDutsToDronesResponse_Item {
	if x != nil {
		return x.Assigned
	}
	return nil
}

func (x *AssignDutsToDronesResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *ListServersRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListServersRequest) Reset() {
	*x = ListServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersRequest) ProtoMessage() {}

func (x *ListServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersRequest.ProtoReflect.Descriptor instead.
func (*ListServersRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{33}
}

func (x *ListServersRequest) GetFilter() *ListServersRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListServersResponse) Reset() {
	*x = ListServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersResponse) ProtoMessage() {}

func (x *ListServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersResponse.ProtoReflect.Descriptor instead.
func (*ListServersResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{34}
}

func (x *ListServersResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type GetDutInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the DUT to get info for.
	//
	// One of id or hostname is required.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// hostname of the DUT to get info for.
	//
	// One of id or hostname is required.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Indicates if the request must be routed to v1. Otherwise the routing will
	// be determined by traffic control algorithm.
	// TODO(guocb) Remove this after inventory v2 migration.
	MustFromV1 bool `protobuf:"varint,3,opt,name=must_from_v1,json=mustFromV1,proto3" json:"must_from_v1,omitempty"`
}

func (x *GetDutInfoRequest) Reset() {
	*x = GetDutInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDutInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDutInfoRequest) ProtoMessage() {}

func (x *GetDutInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDutInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDutInfoRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{35}
}

func (x *GetDutInfoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDutInfoRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetDutInfoRequest) GetMustFromV1() bool {
	if x != nil {
		return x.MustFromV1
	}
	return false
}

type GetDutInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// spec is the device spec for the requested DUT.
	//
	// This is a serialized inventory.DeviceUnderTest protobuf.
	Spec []byte `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// Timestamp of the latest update of the cached specs in this response.
	//
	// Returned specs are guaranteed to be up-to-date with the source of truth as
	// of this timestamp.
	Updated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *GetDutInfoResponse) Reset() {
	*x = GetDutInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDutInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDutInfoResponse) ProtoMessage() {}

func (x *GetDutInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDutInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDutInfoResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{36}
}

func (x *GetDutInfoResponse) GetSpec() []byte {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetDutInfoResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

type GetDroneConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname of the drone, fully qualified.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetDroneConfigRequest) Reset() {
	*x = GetDroneConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDroneConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDroneConfigRequest) ProtoMessage() {}

func (x *GetDroneConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDroneConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDroneConfigRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{37}
}

func (x *GetDroneConfigRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type GetDroneConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// duts assigned to the drone.
	Duts []*GetDroneConfigResponse_Dut `protobuf:"bytes,1,rep,name=duts,proto3" json:"duts,omitempty"`
}

func (x *GetDroneConfigResponse) Reset() {
	*x = GetDroneConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDroneConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDroneConfigResponse) ProtoMessage() {}

func (x *GetDroneConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDroneConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDroneConfigResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{38}
}

func (x *GetDroneConfigResponse) GetDuts() []*GetDroneConfigResponse_Dut {
	if x != nil {
		return x.Duts
	}
	return nil
}

type ListRemovedDutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRemovedDutsRequest) Reset() {
	*x = ListRemovedDutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemovedDutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemovedDutsRequest) ProtoMessage() {}

func (x *ListRemovedDutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemovedDutsRequest.ProtoReflect.Descriptor instead.
func (*ListRemovedDutsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{39}
}

type ListRemovedDutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// duts that are removed.
	Duts []*ListRemovedDutsResponse_Dut `protobuf:"bytes,1,rep,name=duts,proto3" json:"duts,omitempty"`
}

func (x *ListRemovedDutsResponse) Reset() {
	*x = ListRemovedDutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemovedDutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemovedDutsResponse) ProtoMessage() {}

func (x *ListRemovedDutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemovedDutsResponse.ProtoReflect.Descriptor instead.
func (*ListRemovedDutsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{40}
}

func (x *ListRemovedDutsResponse) GetDuts() []*ListRemovedDutsResponse_Dut {
	if x != nil {
		return x.Duts
	}
	return nil
}

type UpdateDutLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// labels are the labels for the DUT that the client changed.  This
	// should be a serialized protobuf of inventory.SchedulableLabels.
	// Any labels that shouldn't be updated are ignored.
	Labels []byte `protobuf:"bytes,2,opt,name=labels,proto3" json:"labels,omitempty"`
	// reason is some string to provide context for the update.  This
	// should contain a URL to the task that triggered the change.  This
	// should not be capitalized since it will get formatted with other
	// information.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// old_labels are the old labels for the DUT before this update. Same
	// format with labels.
	OldLabels []byte `protobuf:"bytes,4,opt,name=old_labels,json=oldLabels,proto3" json:"old_labels,omitempty"`
}

func (x *UpdateDutLabelsRequest) Reset() {
	*x = UpdateDutLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDutLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDutLabelsRequest) ProtoMessage() {}

func (x *UpdateDutLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDutLabelsRequest.ProtoReflect.Descriptor instead.
func (*UpdateDutLabelsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateDutLabelsRequest) GetDutId() string {
	if x != nil {
		return x.DutId
	}
	return ""
}

func (x *UpdateDutLabelsRequest) GetLabels() []byte {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDutLabelsRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateDutLabelsRequest) GetOldLabels() []byte {
	if x != nil {
		return x.OldLabels
	}
	return nil
}

type UpdateDutLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is a URL associated with the label update.
	//
	// It is usually a Gerrit or Gitiles URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UpdateDutLabelsResponse) Reset() {
	*x = UpdateDutLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDutLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDutLabelsResponse) ProtoMessage() {}

func (x *UpdateDutLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDutLabelsResponse.ProtoReflect.Descriptor instead.
func (*UpdateDutLabelsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateDutLabelsResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type BatchUpdateDutsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Deprecated: Do not use.
	Pool          string         `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	DutProperties []*DutProperty `protobuf:"bytes,3,rep,name=dut_properties,json=dutProperties,proto3" json:"dut_properties,omitempty"`
}

func (x *BatchUpdateDutsRequest) Reset() {
	*x = BatchUpdateDutsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDutsRequest) ProtoMessage() {}

func (x *BatchUpdateDutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDutsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateDutsRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{43}
}

// Deprecated: Do not use.
func (x *BatchUpdateDutsRequest) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

// Deprecated: Do not use.
func (x *BatchUpdateDutsRequest) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *BatchUpdateDutsRequest) GetDutProperties() []*DutProperty {
	if x != nil {
		return x.DutProperties
	}
	return nil
}

type DutProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string           `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Pool     string           `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Rpm      *DutProperty_Rpm `protobuf:"bytes,3,opt,name=rpm,proto3" json:"rpm,omitempty"`
}

func (x *DutProperty) Reset() {
	*x = DutProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DutProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutProperty) ProtoMessage() {}

func (x *DutProperty) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutProperty.ProtoReflect.Descriptor instead.
func (*DutProperty) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{44}
}

func (x *DutProperty) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DutProperty) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *DutProperty) GetRpm() *DutProperty_Rpm {
	if x != nil {
		return x.Rpm
	}
	return nil
}

type BatchUpdateDutsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Gerrit URL with the label update.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BatchUpdateDutsResponse) Reset() {
	*x = BatchUpdateDutsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateDutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDutsResponse) ProtoMessage() {}

func (x *BatchUpdateDutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDutsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateDutsResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{45}
}

func (x *BatchUpdateDutsResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UpdateCachedInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCachedInventoryRequest) Reset() {
	*x = UpdateCachedInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCachedInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCachedInventoryRequest) ProtoMessage() {}

func (x *UpdateCachedInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCachedInventoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateCachedInventoryRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{46}
}

type UpdateCachedInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCachedInventoryResponse) Reset() {
	*x = UpdateCachedInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCachedInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCachedInventoryResponse) ProtoMessage() {}

func (x *UpdateCachedInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCachedInventoryResponse.ProtoReflect.Descriptor instead.
func (*UpdateCachedInventoryResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{47}
}

// next tag: 4
type GetStableVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(gregorynisbet): remove support for looking up
	// stable version information by buildTarget + model
	BuildTarget string `protobuf:"bytes,1,opt,name=buildTarget,proto3" json:"buildTarget,omitempty"`
	Model       string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// NOTE: {hostname} and {buildTarget, model} are alternatives
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetStableVersionRequest) Reset() {
	*x = GetStableVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableVersionRequest) ProtoMessage() {}

func (x *GetStableVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableVersionRequest.ProtoReflect.Descriptor instead.
func (*GetStableVersionRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{48}
}

func (x *GetStableVersionRequest) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *GetStableVersionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetStableVersionRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// next tag: 5
type GetStableVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrosVersion      string `protobuf:"bytes,1,opt,name=crosVersion,proto3" json:"crosVersion,omitempty"`
	FirmwareVersion  string `protobuf:"bytes,2,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`
	FaftVersion      string `protobuf:"bytes,3,opt,name=faftVersion,proto3" json:"faftVersion,omitempty"`
	ServoCrosVersion string `protobuf:"bytes,4,opt,name=servoCrosVersion,proto3" json:"servoCrosVersion,omitempty"`
}

func (x *GetStableVersionResponse) Reset() {
	*x = GetStableVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableVersionResponse) ProtoMessage() {}

func (x *GetStableVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableVersionResponse.ProtoReflect.Descriptor instead.
func (*GetStableVersionResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{49}
}

func (x *GetStableVersionResponse) GetCrosVersion() string {
	if x != nil {
		return x.CrosVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetFaftVersion() string {
	if x != nil {
		return x.FaftVersion
	}
	return ""
}

func (x *GetStableVersionResponse) GetServoCrosVersion() string {
	if x != nil {
		return x.ServoCrosVersion
	}
	return ""
}

type DumpStableVersionToDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpStableVersionToDatastoreRequest) Reset() {
	*x = DumpStableVersionToDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStableVersionToDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStableVersionToDatastoreRequest) ProtoMessage() {}

func (x *DumpStableVersionToDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStableVersionToDatastoreRequest.ProtoReflect.Descriptor instead.
func (*DumpStableVersionToDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{50}
}

type DumpStableVersionToDatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpStableVersionToDatastoreResponse) Reset() {
	*x = DumpStableVersionToDatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStableVersionToDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStableVersionToDatastoreResponse) ProtoMessage() {}

func (x *DumpStableVersionToDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStableVersionToDatastoreResponse.ProtoReflect.Descriptor instead.
func (*DumpStableVersionToDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{51}
}

type EnsurePoolHealthyRequest_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If dryrun is true, no inventory changes are made. Proposed changes are
	// returned.
	Dryrun bool `protobuf:"varint,1,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
}

func (x *EnsurePoolHealthyRequest_Options) Reset() {
	*x = EnsurePoolHealthyRequest_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsurePoolHealthyRequest_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsurePoolHealthyRequest_Options) ProtoMessage() {}

func (x *EnsurePoolHealthyRequest_Options) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsurePoolHealthyRequest_Options.ProtoReflect.Descriptor instead.
func (*EnsurePoolHealthyRequest_Options) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{18, 0}
}

func (x *EnsurePoolHealthyRequest_Options) GetDryrun() bool {
	if x != nil {
		return x.Dryrun
	}
	return false
}

type BalancePoolsRequest_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If dryrun is true, no inventory changes are made. Proposed changes are
	// returned.
	Dryrun bool `protobuf:"varint,1,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
}

func (x *BalancePoolsRequest_Options) Reset() {
	*x = BalancePoolsRequest_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancePoolsRequest_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancePoolsRequest_Options) ProtoMessage() {}

func (x *BalancePoolsRequest_Options) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancePoolsRequest_Options.ProtoReflect.Descriptor instead.
func (*BalancePoolsRequest_Options) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{22, 0}
}

func (x *BalancePoolsRequest_Options) GetDryrun() bool {
	if x != nil {
		return x.Dryrun
	}
	return false
}

// NEXT TAG: 5
type RemoveDutsFromDronesRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_id is the id of a DUT to be removed.
	//
	// Exactly one of dut_id or hostname must be provided.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// dut_hostname is the id of a DUT to be removed.
	//
	// Exactly one of dut_id or dut_hostname must be provided.
	DutHostname string `protobuf:"bytes,3,opt,name=dut_hostname,json=dutHostname,proto3" json:"dut_hostname,omitempty"`
	// drone_hostname is the drone to remove the dut from.
	//
	// If specified, the DUT must currently be assigned to the
	// specified drone.
	//
	// This is ignored if the DUT is assigned to a queen drone.
	DroneHostname string `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
	// removal_reason is the reason for removal.
	//
	// This is a serialized inventory.RemovalReason protobuf.
	RemovalReason []byte `protobuf:"bytes,4,opt,name=removal_reason,json=removalReason,proto3" json:"removal_reason,omitempty"`
}

func (x *RemoveDutsFromDronesRequest_Item) Reset() {
	*x = RemoveDutsFromDronesRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDutsFromDronesRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDutsFromDronesRequest_Item) ProtoMessage() {}

func (x *RemoveDutsFromDronesRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDutsFromDronesRequest_Item.ProtoReflect.Descriptor instead.
func (*RemoveDutsFromDronesRequest_Item) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{29, 0}
}

func (x *RemoveDutsFromDronesRequest_Item) GetDutId() string {
	if x != nil {
		return x.DutId
	}
	return ""
}

func (x *RemoveDutsFromDronesRequest_Item) GetDutHostname() string {
	if x != nil {
		return x.DutHostname
	}
	return ""
}

func (x *RemoveDutsFromDronesRequest_Item) GetDroneHostname() string {
	if x != nil {
		return x.DroneHostname
	}
	return ""
}

func (x *RemoveDutsFromDronesRequest_Item) GetRemovalReason() []byte {
	if x != nil {
		return x.RemovalReason
	}
	return nil
}

type RemoveDutsFromDronesResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_id is the id of a dut that was removed.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// drone_hostname is the hostname of the drone that it the Dut was removed
	// from.
	DroneHostname string `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
}

func (x *RemoveDutsFromDronesResponse_Item) Reset() {
	*x = RemoveDutsFromDronesResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDutsFromDronesResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDutsFromDronesResponse_Item) ProtoMessage() {}

func (x *RemoveDutsFromDronesResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDutsFromDronesResponse_Item.ProtoReflect.Descriptor instead.
func (*RemoveDutsFromDronesResponse_Item) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{30, 0}
}

func (x *RemoveDutsFromDronesResponse_Item) GetDutId() string {
	if x != nil {
		return x.DutId
	}
	return ""
}

func (x *RemoveDutsFromDronesResponse_Item) GetDroneHostname() string {
	if x != nil {
		return x.DroneHostname
	}
	return ""
}

// NEXT TAG: 4
type AssignDutsToDronesRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_id is the id of a DUT to assign to a drone.
	//
	// Exactly one of dut_id or hostname must be provided.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// dut_hostname is the hostname of the DUT to assign to the drone.
	//
	// Exactly one of dut_id or hostname must be provided.
	DutHostname string `protobuf:"bytes,3,opt,name=dut_hostname,json=dutHostname,proto3" json:"dut_hostname,omitempty"`
	// drone_hostname is deprecated and does nothing.
	//
	// Deprecated: Do not use.
	DroneHostname string `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
}

func (x *AssignDutsToDronesRequest_Item) Reset() {
	*x = AssignDutsToDronesRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignDutsToDronesRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDutsToDronesRequest_Item) ProtoMessage() {}

func (x *AssignDutsToDronesRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDutsToDronesRequest_Item.ProtoReflect.Descriptor instead.
func (*AssignDutsToDronesRequest_Item) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{31, 0}
}

func (x *AssignDutsToDronesRequest_Item) GetDutId() string {
	if x != nil {
		return x.DutId
	}
	return ""
}

func (x *AssignDutsToDronesRequest_Item) GetDutHostname() string {
	if x != nil {
		return x.DutHostname
	}
	return ""
}

// Deprecated: Do not use.
func (x *AssignDutsToDronesRequest_Item) GetDroneHostname() string {
	if x != nil {
		return x.DroneHostname
	}
	return ""
}

type AssignDutsToDronesResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dut_id is the id of a dut that was assigned to a drone.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// drone_hostname is the drone the dut was assigned to.
	DroneHostname string `protobuf:"bytes,2,opt,name=drone_hostname,json=droneHostname,proto3" json:"drone_hostname,omitempty"`
}

func (x *AssignDutsToDronesResponse_Item) Reset() {
	*x = AssignDutsToDronesResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignDutsToDronesResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDutsToDronesResponse_Item) ProtoMessage() {}

func (x *AssignDutsToDronesResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDutsToDronesResponse_Item.ProtoReflect.Descriptor instead.
func (*AssignDutsToDronesResponse_Item) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{32, 0}
}

func (x *AssignDutsToDronesResponse_Item) GetDutId() string {
	if x != nil {
		return x.DutId
	}
	return ""
}

func (x *AssignDutsToDronesResponse_Item) GetDroneHostname() string {
	if x != nil {
		return x.DroneHostname
	}
	return ""
}

type ListServersRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Role of servers to list; if absent, list servers of all roles.
	Role ServerRole `protobuf:"varint,1,opt,name=role,proto3,enum=crosskylabadmin.fleet.ServerRole" json:"role,omitempty"`
}

func (x *ListServersRequest_Filter) Reset() {
	*x = ListServersRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServersRequest_Filter) ProtoMessage() {}

func (x *ListServersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListServersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{33, 0}
}

func (x *ListServersRequest_Filter) GetRole() ServerRole {
	if x != nil {
		return x.Role
	}
	return ServerRole_ROLE_INVALID
}

type GetDroneConfigResponse_Dut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the DUT.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// hostname of the DUT, unqualified.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *GetDroneConfigResponse_Dut) Reset() {
	*x = GetDroneConfigResponse_Dut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDroneConfigResponse_Dut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDroneConfigResponse_Dut) ProtoMessage() {}

func (x *GetDroneConfigResponse_Dut) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDroneConfigResponse_Dut.ProtoReflect.Descriptor instead.
func (*GetDroneConfigResponse_Dut) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{38, 0}
}

func (x *GetDroneConfigResponse_Dut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDroneConfigResponse_Dut) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ListRemovedDutsResponse_Dut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the DUT.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// hostname of the DUT.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// bug is a link to a bug explaining why the DUT is removed.
	Bug string `protobuf:"bytes,3,opt,name=bug,proto3" json:"bug,omitempty"`
	// comment is a short comment explaining why the DUT is removed.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// expire_time indicates when the removal bug should be revisited
	// so the DUT is not forgotten.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// model of the DUT.
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *ListRemovedDutsResponse_Dut) Reset() {
	*x = ListRemovedDutsResponse_Dut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemovedDutsResponse_Dut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemovedDutsResponse_Dut) ProtoMessage() {}

func (x *ListRemovedDutsResponse_Dut) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemovedDutsResponse_Dut.ProtoReflect.Descriptor instead.
func (*ListRemovedDutsResponse_Dut) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{40, 0}
}

func (x *ListRemovedDutsResponse_Dut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListRemovedDutsResponse_Dut) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ListRemovedDutsResponse_Dut) GetBug() string {
	if x != nil {
		return x.Bug
	}
	return ""
}

func (x *ListRemovedDutsResponse_Dut) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ListRemovedDutsResponse_Dut) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *ListRemovedDutsResponse_Dut) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type DutProperty_Rpm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerunitHostname string `protobuf:"bytes,1,opt,name=powerunit_hostname,json=powerunitHostname,proto3" json:"powerunit_hostname,omitempty"`
	PowerunitOutlet   string `protobuf:"bytes,2,opt,name=powerunit_outlet,json=powerunitOutlet,proto3" json:"powerunit_outlet,omitempty"`
}

func (x *DutProperty_Rpm) Reset() {
	*x = DutProperty_Rpm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DutProperty_Rpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DutProperty_Rpm) ProtoMessage() {}

func (x *DutProperty_Rpm) ProtoReflect() protoreflect.Message {
	mi := &file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DutProperty_Rpm.ProtoReflect.Descriptor instead.
func (*DutProperty_Rpm) Descriptor() ([]byte, []int) {
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP(), []int{44, 0}
}

func (x *DutProperty_Rpm) GetPowerunitHostname() string {
	if x != nil {
		return x.PowerunitHostname
	}
	return ""
}

func (x *DutProperty_Rpm) GetPowerunitOutlet() string {
	if x != nil {
		return x.PowerunitOutlet
	}
	return ""
}

var File_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto protoreflect.FileDescriptor

var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x4e, 0x0a, 0x16, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x44, 0x75, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x38,
	0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x55, 0x54, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x44,
	0x55, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x55, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x55, 0x54, 0x5f, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x31, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x44, 0x75, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x62, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6b, 0x69,
	0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x75, 0x6e,
	0x50, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x14, 0x44, 0x75, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a,
	0x1c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x6f,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x66, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xc9, 0x02,
	0x0a, 0x18, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x64, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x44, 0x75, 0x74, 0x73, 0x12,
	0x51, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x21, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x72, 0x79, 0x72, 0x75, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xbc, 0x03, 0x0a, 0x19, 0x45, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d,
	0x0a, 0x11, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x07,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x59, 0x5f, 0x44, 0x55, 0x54, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f,
	0x53, 0x50, 0x41, 0x52, 0x45, 0x53, 0x10, 0x02, 0x22, 0x98, 0x01, 0x0a, 0x24, 0x45, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x46, 0x6f,
	0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x44, 0x75, 0x74, 0x73, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x25, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a,
	0x70, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61,
	0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x0c, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x64, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x64, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x44, 0x75,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x21, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x72, 0x79, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x1a,
	0x70, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61,
	0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x64, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x63, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x3b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x4f, 0x0a,
	0x0b, 0x44, 0x75, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x45,
	0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x6f, 0x6c,
	0x22, 0x83, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x53, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x75, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x74, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x44, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x75,
	0x74, 0x73, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x6b, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x74,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x75, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0e,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x72, 0x6f,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x44, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x3f, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x75, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x31, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x75,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x72,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x75, 0x74, 0x52, 0x04, 0x64, 0x75, 0x74, 0x73, 0x1a, 0x31,
	0x0a, 0x03, 0x44, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x75, 0x74, 0x52, 0x04, 0x64, 0x75, 0x74, 0x73, 0x1a,
	0xb0, 0x01, 0x0a, 0x03, 0x44, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x7e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x75,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x9d, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x0d, 0x64, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xd8, 0x01, 0x0a, 0x0b, 0x44, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x38, 0x0a, 0x03, 0x72, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x52, 0x70, 0x6d, 0x52, 0x03, 0x72, 0x70, 0x6d, 0x1a, 0x5f, 0x0a, 0x03, 0x52, 0x70, 0x6d,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x75, 0x6e, 0x69, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x75, 0x6e, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x22, 0x2b, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x66, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x66, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x43, 0x72, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x6f, 0x43, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x25,
	0x0a, 0x23, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xaa, 0x13,
	0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x09, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x44, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x52,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x65,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x12, 0x28, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x72, 0x6f,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x44,
	0x72, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12,
	0x64, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x75, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x6d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2c, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x75, 0x74, 0x73, 0x12,
	0x2d, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x44, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x12, 0x7f, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79,
	0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x33, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c,
	0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01,
	0x0a, 0x1c, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b,
	0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x6b, 0x79, 0x6c, 0x61, 0x62, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescOnce sync.Once
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData = file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc
)

func file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescGZIP() []byte {
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescOnce.Do(func() {
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData)
	})
	return file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDescData
}

var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_goTypes = []interface{}{
	(GetDeploymentStatusResponse_Status)(0),       // 0: crosskylabadmin.fleet.GetDeploymentStatusResponse.Status
	(EnsurePoolHealthyResponse_Failure)(0),        // 1: crosskylabadmin.fleet.EnsurePoolHealthyResponse.Failure
	(*UpdateManufacturingConfigRequest)(nil),      // 2: crosskylabadmin.fleet.UpdateManufacturingConfigRequest
	(*UpdateManufacturingConfigResponse)(nil),     // 3: crosskylabadmin.fleet.UpdateManufacturingConfigResponse
	(*ReportInventoryRequest)(nil),                // 4: crosskylabadmin.fleet.ReportInventoryRequest
	(*ReportInventoryResponse)(nil),               // 5: crosskylabadmin.fleet.ReportInventoryResponse
	(*PushInventoryToQueenRequest)(nil),           // 6: crosskylabadmin.fleet.PushInventoryToQueenRequest
	(*PushInventoryToQueenResponse)(nil),          // 7: crosskylabadmin.fleet.PushInventoryToQueenResponse
	(*UpdateDeviceConfigRequest)(nil),             // 8: crosskylabadmin.fleet.UpdateDeviceConfigRequest
	(*UpdateDeviceConfigResponse)(nil),            // 9: crosskylabadmin.fleet.UpdateDeviceConfigResponse
	(*DeployDutRequest)(nil),                      // 10: crosskylabadmin.fleet.DeployDutRequest
	(*DeployDutResponse)(nil),                     // 11: crosskylabadmin.fleet.DeployDutResponse
	(*RedeployDutRequest)(nil),                    // 12: crosskylabadmin.fleet.RedeployDutRequest
	(*RedeployDutResponse)(nil),                   // 13: crosskylabadmin.fleet.RedeployDutResponse
	(*GetDeploymentStatusRequest)(nil),            // 14: crosskylabadmin.fleet.GetDeploymentStatusRequest
	(*GetDeploymentStatusResponse)(nil),           // 15: crosskylabadmin.fleet.GetDeploymentStatusResponse
	(*DeleteDutsRequest)(nil),                     // 16: crosskylabadmin.fleet.DeleteDutsRequest
	(*DeleteDutsResponse)(nil),                    // 17: crosskylabadmin.fleet.DeleteDutsResponse
	(*DutDeploymentActions)(nil),                  // 18: crosskylabadmin.fleet.DutDeploymentActions
	(*DutDeploymentOptions)(nil),                  // 19: crosskylabadmin.fleet.DutDeploymentOptions
	(*EnsurePoolHealthyRequest)(nil),              // 20: crosskylabadmin.fleet.EnsurePoolHealthyRequest
	(*EnsurePoolHealthyResponse)(nil),             // 21: crosskylabadmin.fleet.EnsurePoolHealthyResponse
	(*EnsurePoolHealthyForAllModelsRequest)(nil),  // 22: crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsRequest
	(*EnsurePoolHealthyForAllModelsResponse)(nil), // 23: crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse
	(*BalancePoolsRequest)(nil),                   // 24: crosskylabadmin.fleet.BalancePoolsRequest
	(*BalancePoolsResponse)(nil),                  // 25: crosskylabadmin.fleet.BalancePoolsResponse
	(*ResizePoolRequest)(nil),                     // 26: crosskylabadmin.fleet.ResizePoolRequest
	(*ResizePoolResponse)(nil),                    // 27: crosskylabadmin.fleet.ResizePoolResponse
	(*DutSelector)(nil),                           // 28: crosskylabadmin.fleet.DutSelector
	(*PoolStatus)(nil),                            // 29: crosskylabadmin.fleet.PoolStatus
	(*PoolChange)(nil),                            // 30: crosskylabadmin.fleet.PoolChange
	(*RemoveDutsFromDronesRequest)(nil),           // 31: crosskylabadmin.fleet.RemoveDutsFromDronesRequest
	(*RemoveDutsFromDronesResponse)(nil),          // 32: crosskylabadmin.fleet.RemoveDutsFromDronesResponse
	(*AssignDutsToDronesRequest)(nil),             // 33: crosskylabadmin.fleet.AssignDutsToDronesRequest
	(*AssignDutsToDronesResponse)(nil),            // 34: crosskylabadmin.fleet.AssignDutsToDronesResponse
	(*ListServersRequest)(nil),                    // 35: crosskylabadmin.fleet.ListServersRequest
	(*ListServersResponse)(nil),                   // 36: crosskylabadmin.fleet.ListServersResponse
	(*GetDutInfoRequest)(nil),                     // 37: crosskylabadmin.fleet.GetDutInfoRequest
	(*GetDutInfoResponse)(nil),                    // 38: crosskylabadmin.fleet.GetDutInfoResponse
	(*GetDroneConfigRequest)(nil),                 // 39: crosskylabadmin.fleet.GetDroneConfigRequest
	(*GetDroneConfigResponse)(nil),                // 40: crosskylabadmin.fleet.GetDroneConfigResponse
	(*ListRemovedDutsRequest)(nil),                // 41: crosskylabadmin.fleet.ListRemovedDutsRequest
	(*ListRemovedDutsResponse)(nil),               // 42: crosskylabadmin.fleet.ListRemovedDutsResponse
	(*UpdateDutLabelsRequest)(nil),                // 43: crosskylabadmin.fleet.UpdateDutLabelsRequest
	(*UpdateDutLabelsResponse)(nil),               // 44: crosskylabadmin.fleet.UpdateDutLabelsResponse
	(*BatchUpdateDutsRequest)(nil),                // 45: crosskylabadmin.fleet.BatchUpdateDutsRequest
	(*DutProperty)(nil),                           // 46: crosskylabadmin.fleet.DutProperty
	(*BatchUpdateDutsResponse)(nil),               // 47: crosskylabadmin.fleet.BatchUpdateDutsResponse
	(*UpdateCachedInventoryRequest)(nil),          // 48: crosskylabadmin.fleet.UpdateCachedInventoryRequest
	(*UpdateCachedInventoryResponse)(nil),         // 49: crosskylabadmin.fleet.UpdateCachedInventoryResponse
	(*GetStableVersionRequest)(nil),               // 50: crosskylabadmin.fleet.GetStableVersionRequest
	(*GetStableVersionResponse)(nil),              // 51: crosskylabadmin.fleet.GetStableVersionResponse
	(*DumpStableVersionToDatastoreRequest)(nil),   // 52: crosskylabadmin.fleet.DumpStableVersionToDatastoreRequest
	(*DumpStableVersionToDatastoreResponse)(nil),  // 53: crosskylabadmin.fleet.DumpStableVersionToDatastoreResponse
	(*EnsurePoolHealthyRequest_Options)(nil),      // 54: crosskylabadmin.fleet.EnsurePoolHealthyRequest.Options
	nil,                                           // 55: crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse.ModelResultEntry
	(*BalancePoolsRequest_Options)(nil),           // 56: crosskylabadmin.fleet.BalancePoolsRequest.Options
	nil,                                           // 57: crosskylabadmin.fleet.BalancePoolsResponse.ModelResultEntry
	(*RemoveDutsFromDronesRequest_Item)(nil),      // 58: crosskylabadmin.fleet.RemoveDutsFromDronesRequest.Item
	(*RemoveDutsFromDronesResponse_Item)(nil),     // 59: crosskylabadmin.fleet.RemoveDutsFromDronesResponse.Item
	(*AssignDutsToDronesRequest_Item)(nil),        // 60: crosskylabadmin.fleet.AssignDutsToDronesRequest.Item
	(*AssignDutsToDronesResponse_Item)(nil),       // 61: crosskylabadmin.fleet.AssignDutsToDronesResponse.Item
	(*ListServersRequest_Filter)(nil),             // 62: crosskylabadmin.fleet.ListServersRequest.Filter
	(*GetDroneConfigResponse_Dut)(nil),            // 63: crosskylabadmin.fleet.GetDroneConfigResponse.Dut
	(*ListRemovedDutsResponse_Dut)(nil),           // 64: crosskylabadmin.fleet.ListRemovedDutsResponse.Dut
	(*DutProperty_Rpm)(nil),                       // 65: crosskylabadmin.fleet.DutProperty.Rpm
	(*Server)(nil),                                // 66: crosskylabadmin.fleet.Server
	(*timestamppb.Timestamp)(nil),                 // 67: google.protobuf.Timestamp
	(ServerRole)(0),                               // 68: crosskylabadmin.fleet.ServerRole
}
var file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_depIdxs = []int32{
	18, // 0: crosskylabadmin.fleet.DeployDutRequest.actions:type_name -> crosskylabadmin.fleet.DutDeploymentActions
	19, // 1: crosskylabadmin.fleet.DeployDutRequest.options:type_name -> crosskylabadmin.fleet.DutDeploymentOptions
	18, // 2: crosskylabadmin.fleet.RedeployDutRequest.actions:type_name -> crosskylabadmin.fleet.DutDeploymentActions
	19, // 3: crosskylabadmin.fleet.RedeployDutRequest.options:type_name -> crosskylabadmin.fleet.DutDeploymentOptions
	0,  // 4: crosskylabadmin.fleet.GetDeploymentStatusResponse.status:type_name -> crosskylabadmin.fleet.GetDeploymentStatusResponse.Status
	28, // 5: crosskylabadmin.fleet.EnsurePoolHealthyRequest.dut_selector:type_name -> crosskylabadmin.fleet.DutSelector
	54, // 6: crosskylabadmin.fleet.EnsurePoolHealthyRequest.options:type_name -> crosskylabadmin.fleet.EnsurePoolHealthyRequest.Options
	1,  // 7: crosskylabadmin.fleet.EnsurePoolHealthyResponse.failures:type_name -> crosskylabadmin.fleet.EnsurePoolHealthyResponse.Failure
	29, // 8: crosskylabadmin.fleet.EnsurePoolHealthyResponse.target_pool_status:type_name -> crosskylabadmin.fleet.PoolStatus
	29, // 9: crosskylabadmin.fleet.EnsurePoolHealthyResponse.spare_pool_status:type_name -> crosskylabadmin.fleet.PoolStatus
	30, // 10: crosskylabadmin.fleet.EnsurePoolHealthyResponse.changes:type_name -> crosskylabadmin.fleet.PoolChange
	55, // 11: crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse.model_result:type_name -> crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse.ModelResultEntry
	28, // 12: crosskylabadmin.fleet.BalancePoolsRequest.dut_selector:type_name -> crosskylabadmin.fleet.DutSelector
	56, // 13: crosskylabadmin.fleet.BalancePoolsRequest.options:type_name -> crosskylabadmin.fleet.BalancePoolsRequest.Options
	57, // 14: crosskylabadmin.fleet.BalancePoolsResponse.model_result:type_name -> crosskylabadmin.fleet.BalancePoolsResponse.ModelResultEntry
	28, // 15: crosskylabadmin.fleet.ResizePoolRequest.dut_selector:type_name -> crosskylabadmin.fleet.DutSelector
	30, // 16: crosskylabadmin.fleet.ResizePoolResponse.changes:type_name -> crosskylabadmin.fleet.PoolChange
	58, // 17: crosskylabadmin.fleet.RemoveDutsFromDronesRequest.removals:type_name -> crosskylabadmin.fleet.RemoveDutsFromDronesRequest.Item
	59, // 18: crosskylabadmin.fleet.RemoveDutsFromDronesResponse.removed:type_name -> crosskylabadmin.fleet.RemoveDutsFromDronesResponse.Item
	60, // 19: crosskylabadmin.fleet.AssignDutsToDronesRequest.assignments:type_name -> crosskylabadmin.fleet.AssignDutsToDronesRequest.Item
	61, // 20: crosskylabadmin.fleet.AssignDutsToDronesResponse.assigned:type_name -> crosskylabadmin.fleet.AssignDutsToDronesResponse.Item
	62, // 21: crosskylabadmin.fleet.ListServersRequest.filter:type_name -> crosskylabadmin.fleet.ListServersRequest.Filter
	66, // 22: crosskylabadmin.fleet.ListServersResponse.servers:type_name -> crosskylabadmin.fleet.Server
	67, // 23: crosskylabadmin.fleet.GetDutInfoResponse.updated:type_name -> google.protobuf.Timestamp
	63, // 24: crosskylabadmin.fleet.GetDroneConfigResponse.duts:type_name -> crosskylabadmin.fleet.GetDroneConfigResponse.Dut
	64, // 25: crosskylabadmin.fleet.ListRemovedDutsResponse.duts:type_name -> crosskylabadmin.fleet.ListRemovedDutsResponse.Dut
	46, // 26: crosskylabadmin.fleet.BatchUpdateDutsRequest.dut_properties:type_name -> crosskylabadmin.fleet.DutProperty
	65, // 27: crosskylabadmin.fleet.DutProperty.rpm:type_name -> crosskylabadmin.fleet.DutProperty.Rpm
	21, // 28: crosskylabadmin.fleet.EnsurePoolHealthyForAllModelsResponse.ModelResultEntry.value:type_name -> crosskylabadmin.fleet.EnsurePoolHealthyResponse
	21, // 29: crosskylabadmin.fleet.BalancePoolsResponse.ModelResultEntry.value:type_name -> crosskylabadmin.fleet.EnsurePoolHealthyResponse
	68, // 30: crosskylabadmin.fleet.ListServersRequest.Filter.role:type_name -> crosskylabadmin.fleet.ServerRole
	67, // 31: crosskylabadmin.fleet.ListRemovedDutsResponse.Dut.expire_time:type_name -> google.protobuf.Timestamp
	10, // 32: crosskylabadmin.fleet.Inventory.DeployDut:input_type -> crosskylabadmin.fleet.DeployDutRequest
	12, // 33: crosskylabadmin.fleet.Inventory.RedeployDut:input_type -> crosskylabadmin.fleet.RedeployDutRequest
	14, // 34: crosskylabadmin.fleet.Inventory.GetDeploymentStatus:input_type -> crosskylabadmin.fleet.GetDeploymentStatusRequest
	16, // 35: crosskylabadmin.fleet.Inventory.DeleteDuts:input_type -> crosskylabadmin.fleet.DeleteDutsRequest
	24, // 36: crosskylabadmin.fleet.Inventory.BalancePools:input_type -> crosskylabadmin.fleet.BalancePoolsRequest
	26, // 37: crosskylabadmin.fleet.Inventory.ResizePool:input_type -> crosskylabadmin.fleet.ResizePoolRequest
	31, // 38: crosskylabadmin.fleet.Inventory.RemoveDutsFromDrones:input_type -> crosskylabadmin.fleet.RemoveDutsFromDronesRequest
	33, // 39: crosskylabadmin.fleet.Inventory.AssignDutsToDrones:input_type -> crosskylabadmin.fleet.AssignDutsToDronesRequest
	35, // 40: crosskylabadmin.fleet.Inventory.ListServers:input_type -> crosskylabadmin.fleet.ListServersRequest
	37, // 41: crosskylabadmin.fleet.Inventory.GetDutInfo:input_type -> crosskylabadmin.fleet.GetDutInfoRequest
	39, // 42: crosskylabadmin.fleet.Inventory.GetDroneConfig:input_type -> crosskylabadmin.fleet.GetDroneConfigRequest
	41, // 43: crosskylabadmin.fleet.Inventory.ListRemovedDuts:input_type -> crosskylabadmin.fleet.ListRemovedDutsRequest
	6,  // 44: crosskylabadmin.fleet.Inventory.PushInventoryToQueen:input_type -> crosskylabadmin.fleet.PushInventoryToQueenRequest
	43, // 45: crosskylabadmin.fleet.Inventory.UpdateDutLabels:input_type -> crosskylabadmin.fleet.UpdateDutLabelsRequest
	45, // 46: crosskylabadmin.fleet.Inventory.BatchUpdateDuts:input_type -> crosskylabadmin.fleet.BatchUpdateDutsRequest
	48, // 47: crosskylabadmin.fleet.Inventory.UpdateCachedInventory:input_type -> crosskylabadmin.fleet.UpdateCachedInventoryRequest
	8,  // 48: crosskylabadmin.fleet.Inventory.UpdateDeviceConfig:input_type -> crosskylabadmin.fleet.UpdateDeviceConfigRequest
	50, // 49: crosskylabadmin.fleet.Inventory.GetStableVersion:input_type -> crosskylabadmin.fleet.GetStableVersionRequest
	52, // 50: crosskylabadmin.fleet.Inventory.DumpStableVersionToDatastore:input_type -> crosskylabadmin.fleet.DumpStableVersionToDatastoreRequest
	4,  // 51: crosskylabadmin.fleet.Inventory.ReportInventory:input_type -> crosskylabadmin.fleet.ReportInventoryRequest
	2,  // 52: crosskylabadmin.fleet.Inventory.UpdateManufacturingConfig:input_type -> crosskylabadmin.fleet.UpdateManufacturingConfigRequest
	11, // 53: crosskylabadmin.fleet.Inventory.DeployDut:output_type -> crosskylabadmin.fleet.DeployDutResponse
	13, // 54: crosskylabadmin.fleet.Inventory.RedeployDut:output_type -> crosskylabadmin.fleet.RedeployDutResponse
	15, // 55: crosskylabadmin.fleet.Inventory.GetDeploymentStatus:output_type -> crosskylabadmin.fleet.GetDeploymentStatusResponse
	17, // 56: crosskylabadmin.fleet.Inventory.DeleteDuts:output_type -> crosskylabadmin.fleet.DeleteDutsResponse
	25, // 57: crosskylabadmin.fleet.Inventory.BalancePools:output_type -> crosskylabadmin.fleet.BalancePoolsResponse
	27, // 58: crosskylabadmin.fleet.Inventory.ResizePool:output_type -> crosskylabadmin.fleet.ResizePoolResponse
	32, // 59: crosskylabadmin.fleet.Inventory.RemoveDutsFromDrones:output_type -> crosskylabadmin.fleet.RemoveDutsFromDronesResponse
	34, // 60: crosskylabadmin.fleet.Inventory.AssignDutsToDrones:output_type -> crosskylabadmin.fleet.AssignDutsToDronesResponse
	36, // 61: crosskylabadmin.fleet.Inventory.ListServers:output_type -> crosskylabadmin.fleet.ListServersResponse
	38, // 62: crosskylabadmin.fleet.Inventory.GetDutInfo:output_type -> crosskylabadmin.fleet.GetDutInfoResponse
	40, // 63: crosskylabadmin.fleet.Inventory.GetDroneConfig:output_type -> crosskylabadmin.fleet.GetDroneConfigResponse
	42, // 64: crosskylabadmin.fleet.Inventory.ListRemovedDuts:output_type -> crosskylabadmin.fleet.ListRemovedDutsResponse
	7,  // 65: crosskylabadmin.fleet.Inventory.PushInventoryToQueen:output_type -> crosskylabadmin.fleet.PushInventoryToQueenResponse
	44, // 66: crosskylabadmin.fleet.Inventory.UpdateDutLabels:output_type -> crosskylabadmin.fleet.UpdateDutLabelsResponse
	47, // 67: crosskylabadmin.fleet.Inventory.BatchUpdateDuts:output_type -> crosskylabadmin.fleet.BatchUpdateDutsResponse
	49, // 68: crosskylabadmin.fleet.Inventory.UpdateCachedInventory:output_type -> crosskylabadmin.fleet.UpdateCachedInventoryResponse
	9,  // 69: crosskylabadmin.fleet.Inventory.UpdateDeviceConfig:output_type -> crosskylabadmin.fleet.UpdateDeviceConfigResponse
	51, // 70: crosskylabadmin.fleet.Inventory.GetStableVersion:output_type -> crosskylabadmin.fleet.GetStableVersionResponse
	53, // 71: crosskylabadmin.fleet.Inventory.DumpStableVersionToDatastore:output_type -> crosskylabadmin.fleet.DumpStableVersionToDatastoreResponse
	5,  // 72: crosskylabadmin.fleet.Inventory.ReportInventory:output_type -> crosskylabadmin.fleet.ReportInventoryResponse
	3,  // 73: crosskylabadmin.fleet.Inventory.UpdateManufacturingConfig:output_type -> crosskylabadmin.fleet.UpdateManufacturingConfigResponse
	53, // [53:74] is the sub-list for method output_type
	32, // [32:53] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_init() }
func file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_init() {
	if File_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto != nil {
		return
	}
	file_infra_appengine_crosskylabadmin_api_fleet_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateManufacturingConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateManufacturingConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushInventoryToQueenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushInventoryToQueenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployDutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployDutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeployDutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedeployDutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DutDeploymentActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DutDeploymentOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePoolHealthyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePoolHealthyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePoolHealthyForAllModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePoolHealthyForAllModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancePoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancePoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizePoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DutSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDutsFromDronesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDutsFromDronesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignDutsToDronesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignDutsToDronesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDutInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDutInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDroneConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDroneConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemovedDutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemovedDutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDutLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDutLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateDutsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DutProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateDutsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCachedInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCachedInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStableVersionToDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStableVersionToDatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnsurePoolHealthyRequest_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancePoolsRequest_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDutsFromDronesRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDutsFromDronesResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignDutsToDronesRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignDutsToDronesResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServersRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDroneConfigResponse_Dut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemovedDutsResponse_Dut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DutProperty_Rpm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_goTypes,
		DependencyIndexes: file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_depIdxs,
		EnumInfos:         file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_enumTypes,
		MessageInfos:      file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_msgTypes,
	}.Build()
	File_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto = out.File
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_rawDesc = nil
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_goTypes = nil
	file_infra_appengine_crosskylabadmin_api_fleet_v1_inventory_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// Deploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	DeployDut(ctx context.Context, in *DeployDutRequest, opts ...grpc.CallOption) (*DeployDutResponse, error)
	// Redeploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	RedeployDut(ctx context.Context, in *RedeployDutRequest, opts ...grpc.CallOption) (*RedeployDutResponse, error)
	// Get the status of a DUT deployment initiated by DeployDut or RedeployDut.
	GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error)
	// Delete DUTs from inventory.
	DeleteDuts(ctx context.Context, in *DeleteDutsRequest, opts ...grpc.CallOption) (*DeleteDutsResponse, error)
	// BalancePools is the RPC used by balance pool efforts issued from
	// automatic balance pool cron job or users (skylab ensure-pool-healthy).
	// The above 2 RPCs will be deprecated.
	BalancePools(ctx context.Context, in *BalancePoolsRequest, opts ...grpc.CallOption) (*BalancePoolsResponse, error)
	// ResizePool changes the size of the target DUT pool.
	//
	// ResizePool borrows or returns extra DUTs from the spare pool.
	//
	// ResizePool does not consider DUT health. Clients should usually call
	// EnsurePoolHealthy following a ResizePool operation.
	//
	// ResizePool never makes partial changes. In case of an error, no inventory
	// changes are made.
	ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error)
	// RemoveDutsFromDrones removes the given duts from drones.
	RemoveDutsFromDrones(ctx context.Context, in *RemoveDutsFromDronesRequest, opts ...grpc.CallOption) (*RemoveDutsFromDronesResponse, error)
	// Deprecated: Do not use.
	// AssignDutsToDrones assigns the given duts to drones.
	AssignDutsToDrones(ctx context.Context, in *AssignDutsToDronesRequest, opts ...grpc.CallOption) (*AssignDutsToDronesResponse, error)
	// ListServers lists the servers in the current environment.
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	// Deprecated: Do not use.
	// GetDutInfo returns inventory information about a single DUT.
	//
	// This RPC returns possibly cached data about a single DUT. The cache is
	// updated asynchronously and guaranteed to be a relatively fresh snapshot of
	// the inventory data.
	GetDutInfo(ctx context.Context, in *GetDutInfoRequest, opts ...grpc.CallOption) (*GetDutInfoResponse, error)
	// GetDroneConfig returns the inventory configuration for a drone.
	//
	// This RPC returns possibly cached data.
	GetDroneConfig(ctx context.Context, in *GetDroneConfigRequest, opts ...grpc.CallOption) (*GetDroneConfigResponse, error)
	// Deprecated: Do not use.
	// ListRemovedDuts lists removed DUTs (DUTs not assigned to any drone).
	ListRemovedDuts(ctx context.Context, in *ListRemovedDutsRequest, opts ...grpc.CallOption) (*ListRemovedDutsResponse, error)
	// PushInventoryToQueen is called by a cron job.
	PushInventoryToQueen(ctx context.Context, in *PushInventoryToQueenRequest, opts ...grpc.CallOption) (*PushInventoryToQueenResponse, error)
	// UpdateDutLabels sets the SchedulableLabels of a DUT.
	//
	// This API should only be used by the Skylab infrastructure
	// internally.  It is used by repair tasks to update DUT labels.
	UpdateDutLabels(ctx context.Context, in *UpdateDutLabelsRequest, opts ...grpc.CallOption) (*UpdateDutLabelsResponse, error)
	BatchUpdateDuts(ctx context.Context, in *BatchUpdateDutsRequest, opts ...grpc.CallOption) (*BatchUpdateDutsResponse, error)
	// UpdateCachedInventory updates the cached inventory data.
	//
	// Cached inventory data is used to serve read-only inventory RPCs.
	// Cached inventory data is not used for inventory modification RPCs.
	UpdateCachedInventory(ctx context.Context, in *UpdateCachedInventoryRequest, opts ...grpc.CallOption) (*UpdateCachedInventoryResponse, error)
	// Update device config to inventory and local datastore.
	//
	// Updating device config in inventory will be forbidden via repair jobs.
	// Instead, this cron job will sync up-to-date device config to inventory.
	//
	// It also caches device config to local datastore, which is used for filtering
	// out device config in future DUT label updating.
	UpdateDeviceConfig(ctx context.Context, in *UpdateDeviceConfigRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigResponse, error)
	// GetStableVersion reads the stable version for a particular DUT from datastore
	//
	// There is intentionally no RPC for overwtiting the stable version with arbitrary content.
	GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error)
	// DumpStableVersionToDatastore reads the stable version from the LUCI config file
	// and writes it to datastore.
	DumpStableVersionToDatastore(ctx context.Context, in *DumpStableVersionToDatastoreRequest, opts ...grpc.CallOption) (*DumpStableVersionToDatastoreResponse, error)
	// Report inventory metrics.
	ReportInventory(ctx context.Context, in *ReportInventoryRequest, opts ...grpc.CallOption) (*ReportInventoryResponse, error)
	// Backfill (part of) manufacturing config.
	UpdateManufacturingConfig(ctx context.Context, in *UpdateManufacturingConfigRequest, opts ...grpc.CallOption) (*UpdateManufacturingConfigResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) DeployDut(ctx context.Context, in *DeployDutRequest, opts ...grpc.CallOption) (*DeployDutResponse, error) {
	out := new(DeployDutResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) RedeployDut(ctx context.Context, in *RedeployDutRequest, opts ...grpc.CallOption) (*RedeployDutResponse, error) {
	out := new(RedeployDutResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "RedeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "GetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DeleteDuts(ctx context.Context, in *DeleteDutsRequest, opts ...grpc.CallOption) (*DeleteDutsResponse, error) {
	out := new(DeleteDutsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DeleteDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) BalancePools(ctx context.Context, in *BalancePoolsRequest, opts ...grpc.CallOption) (*BalancePoolsResponse, error) {
	out := new(BalancePoolsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "BalancePools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error) {
	out := new(ResizePoolResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ResizePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) RemoveDutsFromDrones(ctx context.Context, in *RemoveDutsFromDronesRequest, opts ...grpc.CallOption) (*RemoveDutsFromDronesResponse, error) {
	out := new(RemoveDutsFromDronesResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "RemoveDutsFromDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) AssignDutsToDrones(ctx context.Context, in *AssignDutsToDronesRequest, opts ...grpc.CallOption) (*AssignDutsToDronesResponse, error) {
	out := new(AssignDutsToDronesResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "AssignDutsToDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetDutInfo(ctx context.Context, in *GetDutInfoRequest, opts ...grpc.CallOption) (*GetDutInfoResponse, error) {
	out := new(GetDutInfoResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "GetDutInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetDroneConfig(ctx context.Context, in *GetDroneConfigRequest, opts ...grpc.CallOption) (*GetDroneConfigResponse, error) {
	out := new(GetDroneConfigResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "GetDroneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ListRemovedDuts(ctx context.Context, in *ListRemovedDutsRequest, opts ...grpc.CallOption) (*ListRemovedDutsResponse, error) {
	out := new(ListRemovedDutsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ListRemovedDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) PushInventoryToQueen(ctx context.Context, in *PushInventoryToQueenRequest, opts ...grpc.CallOption) (*PushInventoryToQueenResponse, error) {
	out := new(PushInventoryToQueenResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "PushInventoryToQueen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDutLabels(ctx context.Context, in *UpdateDutLabelsRequest, opts ...grpc.CallOption) (*UpdateDutLabelsResponse, error) {
	out := new(UpdateDutLabelsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "UpdateDutLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) BatchUpdateDuts(ctx context.Context, in *BatchUpdateDutsRequest, opts ...grpc.CallOption) (*BatchUpdateDutsResponse, error) {
	out := new(BatchUpdateDutsResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "BatchUpdateDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateCachedInventory(ctx context.Context, in *UpdateCachedInventoryRequest, opts ...grpc.CallOption) (*UpdateCachedInventoryResponse, error) {
	out := new(UpdateCachedInventoryResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "UpdateCachedInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateDeviceConfig(ctx context.Context, in *UpdateDeviceConfigRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigResponse, error) {
	out := new(UpdateDeviceConfigResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "UpdateDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error) {
	out := new(GetStableVersionResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "GetStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) DumpStableVersionToDatastore(ctx context.Context, in *DumpStableVersionToDatastoreRequest, opts ...grpc.CallOption) (*DumpStableVersionToDatastoreResponse, error) {
	out := new(DumpStableVersionToDatastoreResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "DumpStableVersionToDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ReportInventory(ctx context.Context, in *ReportInventoryRequest, opts ...grpc.CallOption) (*ReportInventoryResponse, error) {
	out := new(ReportInventoryResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ReportInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) UpdateManufacturingConfig(ctx context.Context, in *UpdateManufacturingConfigRequest, opts ...grpc.CallOption) (*UpdateManufacturingConfigResponse, error) {
	out := new(UpdateManufacturingConfigResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "UpdateManufacturingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) DeployDut(ctx context.Context, in *DeployDutRequest, opts ...grpc.CallOption) (*DeployDutResponse, error) {
	out := new(DeployDutResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) RedeployDut(ctx context.Context, in *RedeployDutRequest, opts ...grpc.CallOption) (*RedeployDutResponse, error) {
	out := new(RedeployDutResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/RedeployDut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetDeploymentStatus(ctx context.Context, in *GetDeploymentStatusRequest, opts ...grpc.CallOption) (*GetDeploymentStatusResponse, error) {
	out := new(GetDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/GetDeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DeleteDuts(ctx context.Context, in *DeleteDutsRequest, opts ...grpc.CallOption) (*DeleteDutsResponse, error) {
	out := new(DeleteDutsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DeleteDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) BalancePools(ctx context.Context, in *BalancePoolsRequest, opts ...grpc.CallOption) (*BalancePoolsResponse, error) {
	out := new(BalancePoolsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/BalancePools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error) {
	out := new(ResizePoolResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ResizePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) RemoveDutsFromDrones(ctx context.Context, in *RemoveDutsFromDronesRequest, opts ...grpc.CallOption) (*RemoveDutsFromDronesResponse, error) {
	out := new(RemoveDutsFromDronesResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/RemoveDutsFromDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryClient) AssignDutsToDrones(ctx context.Context, in *AssignDutsToDronesRequest, opts ...grpc.CallOption) (*AssignDutsToDronesResponse, error) {
	out := new(AssignDutsToDronesResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/AssignDutsToDrones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryClient) GetDutInfo(ctx context.Context, in *GetDutInfoRequest, opts ...grpc.CallOption) (*GetDutInfoResponse, error) {
	out := new(GetDutInfoResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/GetDutInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetDroneConfig(ctx context.Context, in *GetDroneConfigRequest, opts ...grpc.CallOption) (*GetDroneConfigResponse, error) {
	out := new(GetDroneConfigResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/GetDroneConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *inventoryClient) ListRemovedDuts(ctx context.Context, in *ListRemovedDutsRequest, opts ...grpc.CallOption) (*ListRemovedDutsResponse, error) {
	out := new(ListRemovedDutsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ListRemovedDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) PushInventoryToQueen(ctx context.Context, in *PushInventoryToQueenRequest, opts ...grpc.CallOption) (*PushInventoryToQueenResponse, error) {
	out := new(PushInventoryToQueenResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/PushInventoryToQueen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDutLabels(ctx context.Context, in *UpdateDutLabelsRequest, opts ...grpc.CallOption) (*UpdateDutLabelsResponse, error) {
	out := new(UpdateDutLabelsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/UpdateDutLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) BatchUpdateDuts(ctx context.Context, in *BatchUpdateDutsRequest, opts ...grpc.CallOption) (*BatchUpdateDutsResponse, error) {
	out := new(BatchUpdateDutsResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/BatchUpdateDuts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateCachedInventory(ctx context.Context, in *UpdateCachedInventoryRequest, opts ...grpc.CallOption) (*UpdateCachedInventoryResponse, error) {
	out := new(UpdateCachedInventoryResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/UpdateCachedInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateDeviceConfig(ctx context.Context, in *UpdateDeviceConfigRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigResponse, error) {
	out := new(UpdateDeviceConfigResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/UpdateDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetStableVersion(ctx context.Context, in *GetStableVersionRequest, opts ...grpc.CallOption) (*GetStableVersionResponse, error) {
	out := new(GetStableVersionResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/GetStableVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) DumpStableVersionToDatastore(ctx context.Context, in *DumpStableVersionToDatastoreRequest, opts ...grpc.CallOption) (*DumpStableVersionToDatastoreResponse, error) {
	out := new(DumpStableVersionToDatastoreResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/DumpStableVersionToDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ReportInventory(ctx context.Context, in *ReportInventoryRequest, opts ...grpc.CallOption) (*ReportInventoryResponse, error) {
	out := new(ReportInventoryResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ReportInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) UpdateManufacturingConfig(ctx context.Context, in *UpdateManufacturingConfigRequest, opts ...grpc.CallOption) (*UpdateManufacturingConfigResponse, error) {
	out := new(UpdateManufacturingConfigResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/UpdateManufacturingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// Deploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	DeployDut(context.Context, *DeployDutRequest) (*DeployDutResponse, error)
	// Redeploy a DUT.
	//
	// This RPC must be used to deploy a DUT that does not already exist in the
	// inventory. See RedeployDutStart for redeploying an existing DUT.
	//
	// This RPC does not wait for the DUT deployment to finish. Clients may use
	// GetDutDeploymentStatus to track progress.
	//
	// Request options allow control over the exact DUT preparation steps
	// executed, but automated repair is always attempted as part of the
	// deployment process.
	RedeployDut(context.Context, *RedeployDutRequest) (*RedeployDutResponse, error)
	// Get the status of a DUT deployment initiated by DeployDut or RedeployDut.
	GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error)
	// Delete DUTs from inventory.
	DeleteDuts(context.Context, *DeleteDutsRequest) (*DeleteDutsResponse, error)
	// BalancePools is the RPC used by balance pool efforts issued from
	// automatic balance pool cron job or users (skylab ensure-pool-healthy).
	// The above 2 RPCs will be deprecated.
	BalancePools(context.Context, *BalancePoolsRequest) (*BalancePoolsResponse, error)
	// ResizePool changes the size of the target DUT pool.
	//
	// ResizePool borrows or returns extra DUTs from the spare pool.
	//
	// ResizePool does not consider DUT health. Clients should usually call
	// EnsurePoolHealthy following a ResizePool operation.
	//
	// ResizePool never makes partial changes. In case of an error, no inventory
	// changes are made.
	ResizePool(context.Context, *ResizePoolRequest) (*ResizePoolResponse, error)
	// RemoveDutsFromDrones removes the given duts from drones.
	RemoveDutsFromDrones(context.Context, *RemoveDutsFromDronesRequest) (*RemoveDutsFromDronesResponse, error)
	// Deprecated: Do not use.
	// AssignDutsToDrones assigns the given duts to drones.
	AssignDutsToDrones(context.Context, *AssignDutsToDronesRequest) (*AssignDutsToDronesResponse, error)
	// ListServers lists the servers in the current environment.
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	// Deprecated: Do not use.
	// GetDutInfo returns inventory information about a single DUT.
	//
	// This RPC returns possibly cached data about a single DUT. The cache is
	// updated asynchronously and guaranteed to be a relatively fresh snapshot of
	// the inventory data.
	GetDutInfo(context.Context, *GetDutInfoRequest) (*GetDutInfoResponse, error)
	// GetDroneConfig returns the inventory configuration for a drone.
	//
	// This RPC returns possibly cached data.
	GetDroneConfig(context.Context, *GetDroneConfigRequest) (*GetDroneConfigResponse, error)
	// Deprecated: Do not use.
	// ListRemovedDuts lists removed DUTs (DUTs not assigned to any drone).
	ListRemovedDuts(context.Context, *ListRemovedDutsRequest) (*ListRemovedDutsResponse, error)
	// PushInventoryToQueen is called by a cron job.
	PushInventoryToQueen(context.Context, *PushInventoryToQueenRequest) (*PushInventoryToQueenResponse, error)
	// UpdateDutLabels sets the SchedulableLabels of a DUT.
	//
	// This API should only be used by the Skylab infrastructure
	// internally.  It is used by repair tasks to update DUT labels.
	UpdateDutLabels(context.Context, *UpdateDutLabelsRequest) (*UpdateDutLabelsResponse, error)
	BatchUpdateDuts(context.Context, *BatchUpdateDutsRequest) (*BatchUpdateDutsResponse, error)
	// UpdateCachedInventory updates the cached inventory data.
	//
	// Cached inventory data is used to serve read-only inventory RPCs.
	// Cached inventory data is not used for inventory modification RPCs.
	UpdateCachedInventory(context.Context, *UpdateCachedInventoryRequest) (*UpdateCachedInventoryResponse, error)
	// Update device config to inventory and local datastore.
	//
	// Updating device config in inventory will be forbidden via repair jobs.
	// Instead, this cron job will sync up-to-date device config to inventory.
	//
	// It also caches device config to local datastore, which is used for filtering
	// out device config in future DUT label updating.
	UpdateDeviceConfig(context.Context, *UpdateDeviceConfigRequest) (*UpdateDeviceConfigResponse, error)
	// GetStableVersion reads the stable version for a particular DUT from datastore
	//
	// There is intentionally no RPC for overwtiting the stable version with arbitrary content.
	GetStableVersion(context.Context, *GetStableVersionRequest) (*GetStableVersionResponse, error)
	// DumpStableVersionToDatastore reads the stable version from the LUCI config file
	// and writes it to datastore.
	DumpStableVersionToDatastore(context.Context, *DumpStableVersionToDatastoreRequest) (*DumpStableVersionToDatastoreResponse, error)
	// Report inventory metrics.
	ReportInventory(context.Context, *ReportInventoryRequest) (*ReportInventoryResponse, error)
	// Backfill (part of) manufacturing config.
	UpdateManufacturingConfig(context.Context, *UpdateManufacturingConfigRequest) (*UpdateManufacturingConfigResponse, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) DeployDut(context.Context, *DeployDutRequest) (*DeployDutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDut not implemented")
}
func (*UnimplementedInventoryServer) RedeployDut(context.Context, *RedeployDutRequest) (*RedeployDutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeployDut not implemented")
}
func (*UnimplementedInventoryServer) GetDeploymentStatus(context.Context, *GetDeploymentStatusRequest) (*GetDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentStatus not implemented")
}
func (*UnimplementedInventoryServer) DeleteDuts(context.Context, *DeleteDutsRequest) (*DeleteDutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDuts not implemented")
}
func (*UnimplementedInventoryServer) BalancePools(context.Context, *BalancePoolsRequest) (*BalancePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalancePools not implemented")
}
func (*UnimplementedInventoryServer) ResizePool(context.Context, *ResizePoolRequest) (*ResizePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizePool not implemented")
}
func (*UnimplementedInventoryServer) RemoveDutsFromDrones(context.Context, *RemoveDutsFromDronesRequest) (*RemoveDutsFromDronesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDutsFromDrones not implemented")
}
func (*UnimplementedInventoryServer) AssignDutsToDrones(context.Context, *AssignDutsToDronesRequest) (*AssignDutsToDronesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDutsToDrones not implemented")
}
func (*UnimplementedInventoryServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (*UnimplementedInventoryServer) GetDutInfo(context.Context, *GetDutInfoRequest) (*GetDutInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDutInfo not implemented")
}
func (*UnimplementedInventoryServer) GetDroneConfig(context.Context, *GetDroneConfigRequest) (*GetDroneConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDroneConfig not implemented")
}
func (*UnimplementedInventoryServer) ListRemovedDuts(context.Context, *ListRemovedDutsRequest) (*ListRemovedDutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemovedDuts not implemented")
}
func (*UnimplementedInventoryServer) PushInventoryToQueen(context.Context, *PushInventoryToQueenRequest) (*PushInventoryToQueenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushInventoryToQueen not implemented")
}
func (*UnimplementedInventoryServer) UpdateDutLabels(context.Context, *UpdateDutLabelsRequest) (*UpdateDutLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDutLabels not implemented")
}
func (*UnimplementedInventoryServer) BatchUpdateDuts(context.Context, *BatchUpdateDutsRequest) (*BatchUpdateDutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateDuts not implemented")
}
func (*UnimplementedInventoryServer) UpdateCachedInventory(context.Context, *UpdateCachedInventoryRequest) (*UpdateCachedInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCachedInventory not implemented")
}
func (*UnimplementedInventoryServer) UpdateDeviceConfig(context.Context, *UpdateDeviceConfigRequest) (*UpdateDeviceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfig not implemented")
}
func (*UnimplementedInventoryServer) GetStableVersion(context.Context, *GetStableVersionRequest) (*GetStableVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStableVersion not implemented")
}
func (*UnimplementedInventoryServer) DumpStableVersionToDatastore(context.Context, *DumpStableVersionToDatastoreRequest) (*DumpStableVersionToDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpStableVersionToDatastore not implemented")
}
func (*UnimplementedInventoryServer) ReportInventory(context.Context, *ReportInventoryRequest) (*ReportInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInventory not implemented")
}
func (*UnimplementedInventoryServer) UpdateManufacturingConfig(context.Context, *UpdateManufacturingConfigRequest) (*UpdateManufacturingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManufacturingConfig not implemented")
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_DeployDut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployDutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeployDut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DeployDut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeployDut(ctx, req.(*DeployDutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_RedeployDut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeployDutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).RedeployDut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/RedeployDut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).RedeployDut(ctx, req.(*RedeployDutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/GetDeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetDeploymentStatus(ctx, req.(*GetDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DeleteDuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DeleteDuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DeleteDuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DeleteDuts(ctx, req.(*DeleteDutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_BalancePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).BalancePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/BalancePools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).BalancePools(ctx, req.(*BalancePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ResizePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ResizePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ResizePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ResizePool(ctx, req.(*ResizePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_RemoveDutsFromDrones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDutsFromDronesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).RemoveDutsFromDrones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/RemoveDutsFromDrones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).RemoveDutsFromDrones(ctx, req.(*RemoveDutsFromDronesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_AssignDutsToDrones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDutsToDronesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AssignDutsToDrones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/AssignDutsToDrones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AssignDutsToDrones(ctx, req.(*AssignDutsToDronesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetDutInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDutInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetDutInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/GetDutInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetDutInfo(ctx, req.(*GetDutInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetDroneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDroneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetDroneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/GetDroneConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetDroneConfig(ctx, req.(*GetDroneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ListRemovedDuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemovedDutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ListRemovedDuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ListRemovedDuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ListRemovedDuts(ctx, req.(*ListRemovedDutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_PushInventoryToQueen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushInventoryToQueenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).PushInventoryToQueen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/PushInventoryToQueen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).PushInventoryToQueen(ctx, req.(*PushInventoryToQueenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDutLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDutLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDutLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/UpdateDutLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDutLabels(ctx, req.(*UpdateDutLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_BatchUpdateDuts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateDutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).BatchUpdateDuts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/BatchUpdateDuts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).BatchUpdateDuts(ctx, req.(*BatchUpdateDutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateCachedInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCachedInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateCachedInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/UpdateCachedInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateCachedInventory(ctx, req.(*UpdateCachedInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/UpdateDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateDeviceConfig(ctx, req.(*UpdateDeviceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetStableVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStableVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetStableVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/GetStableVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetStableVersion(ctx, req.(*GetStableVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_DumpStableVersionToDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpStableVersionToDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).DumpStableVersionToDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/DumpStableVersionToDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).DumpStableVersionToDatastore(ctx, req.(*DumpStableVersionToDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ReportInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ReportInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ReportInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ReportInventory(ctx, req.(*ReportInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_UpdateManufacturingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManufacturingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).UpdateManufacturingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/UpdateManufacturingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).UpdateManufacturingConfig(ctx, req.(*UpdateManufacturingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosskylabadmin.fleet.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployDut",
			Handler:    _Inventory_DeployDut_Handler,
		},
		{
			MethodName: "RedeployDut",
			Handler:    _Inventory_RedeployDut_Handler,
		},
		{
			MethodName: "GetDeploymentStatus",
			Handler:    _Inventory_GetDeploymentStatus_Handler,
		},
		{
			MethodName: "DeleteDuts",
			Handler:    _Inventory_DeleteDuts_Handler,
		},
		{
			MethodName: "BalancePools",
			Handler:    _Inventory_BalancePools_Handler,
		},
		{
			MethodName: "ResizePool",
			Handler:    _Inventory_ResizePool_Handler,
		},
		{
			MethodName: "RemoveDutsFromDrones",
			Handler:    _Inventory_RemoveDutsFromDrones_Handler,
		},
		{
			MethodName: "AssignDutsToDrones",
			Handler:    _Inventory_AssignDutsToDrones_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _Inventory_ListServers_Handler,
		},
		{
			MethodName: "GetDutInfo",
			Handler:    _Inventory_GetDutInfo_Handler,
		},
		{
			MethodName: "GetDroneConfig",
			Handler:    _Inventory_GetDroneConfig_Handler,
		},
		{
			MethodName: "ListRemovedDuts",
			Handler:    _Inventory_ListRemovedDuts_Handler,
		},
		{
			MethodName: "PushInventoryToQueen",
			Handler:    _Inventory_PushInventoryToQueen_Handler,
		},
		{
			MethodName: "UpdateDutLabels",
			Handler:    _Inventory_UpdateDutLabels_Handler,
		},
		{
			MethodName: "BatchUpdateDuts",
			Handler:    _Inventory_BatchUpdateDuts_Handler,
		},
		{
			MethodName: "UpdateCachedInventory",
			Handler:    _Inventory_UpdateCachedInventory_Handler,
		},
		{
			MethodName: "UpdateDeviceConfig",
			Handler:    _Inventory_UpdateDeviceConfig_Handler,
		},
		{
			MethodName: "GetStableVersion",
			Handler:    _Inventory_GetStableVersion_Handler,
		},
		{
			MethodName: "DumpStableVersionToDatastore",
			Handler:    _Inventory_DumpStableVersionToDatastore_Handler,
		},
		{
			MethodName: "ReportInventory",
			Handler:    _Inventory_ReportInventory_Handler,
		},
		{
			MethodName: "UpdateManufacturingConfig",
			Handler:    _Inventory_UpdateManufacturingConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto",
}
