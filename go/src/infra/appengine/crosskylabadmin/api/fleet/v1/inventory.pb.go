// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto

package fleet

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnsurePoolHealthyResponse_Failure int32

const (
	EnsurePoolHealthyResponse_FAILURE_INVALID EnsurePoolHealthyResponse_Failure = 0
	// Target pool had more than max_unhealthy_duts unhealthy duts before any
	// action was taken.
	EnsurePoolHealthyResponse_TOO_MANY_UNHEALTHY_DUTS EnsurePoolHealthyResponse_Failure = 1
	// Spare pool did not have enough healthy DUTs to make sure all DUTs in
	// target pool are healthy. In this failure mode, the available healthy
	// spare DUTs do get transferred to the target pool.
	EnsurePoolHealthyResponse_NOT_ENOUGH_HEALTHY_SPARES EnsurePoolHealthyResponse_Failure = 2
)

var EnsurePoolHealthyResponse_Failure_name = map[int32]string{
	0: "FAILURE_INVALID",
	1: "TOO_MANY_UNHEALTHY_DUTS",
	2: "NOT_ENOUGH_HEALTHY_SPARES",
}

var EnsurePoolHealthyResponse_Failure_value = map[string]int32{
	"FAILURE_INVALID":           0,
	"TOO_MANY_UNHEALTHY_DUTS":   1,
	"NOT_ENOUGH_HEALTHY_SPARES": 2,
}

func (x EnsurePoolHealthyResponse_Failure) String() string {
	return proto.EnumName(EnsurePoolHealthyResponse_Failure_name, int32(x))
}

func (EnsurePoolHealthyResponse_Failure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{1, 0}
}

type EnsurePoolHealthyRequest struct {
	// dut_selectors filters the set of DUTs considered by EnsurePoolHealthy.
	//
	// All pool changes occurs within this selected set of DUTs.
	// It is an error to omit dut_selector because that would allow
	// unconstrained DUT reallocation between pools, disregarding all other
	// labels.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// spare_pool is the pool from which healthy DUTs will be swapped into
	// target_pool.
	SparePool string `protobuf:"bytes,3,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	// max_unhealthy_duts is the maximum number of DUTs that may be unhealthy in
	// the target pool before any action is taken.
	//
	// max_unhealthy_duts is meaningful only when it has a positive value (> 0).
	//
	// If the total number of unhealthy DUTs is above this threshold,
	// EnsurePoolHealthy does not change DUT pools and returns a
	// NOT_ENOUGH_HEALTHY_SPARES failure.
	MaxUnhealthyDuts     int32                             `protobuf:"varint,4,opt,name=max_unhealthy_duts,json=maxUnhealthyDuts,proto3" json:"max_unhealthy_duts,omitempty"`
	Options              *EnsurePoolHealthyRequest_Options `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *EnsurePoolHealthyRequest) Reset()         { *m = EnsurePoolHealthyRequest{} }
func (m *EnsurePoolHealthyRequest) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyRequest) ProtoMessage()    {}
func (*EnsurePoolHealthyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{0}
}

func (m *EnsurePoolHealthyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyRequest.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyRequest.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyRequest.Merge(m, src)
}
func (m *EnsurePoolHealthyRequest) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyRequest.Size(m)
}
func (m *EnsurePoolHealthyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyRequest proto.InternalMessageInfo

func (m *EnsurePoolHealthyRequest) GetDutSelector() *DutSelector {
	if m != nil {
		return m.DutSelector
	}
	return nil
}

func (m *EnsurePoolHealthyRequest) GetTargetPool() string {
	if m != nil {
		return m.TargetPool
	}
	return ""
}

func (m *EnsurePoolHealthyRequest) GetSparePool() string {
	if m != nil {
		return m.SparePool
	}
	return ""
}

func (m *EnsurePoolHealthyRequest) GetMaxUnhealthyDuts() int32 {
	if m != nil {
		return m.MaxUnhealthyDuts
	}
	return 0
}

func (m *EnsurePoolHealthyRequest) GetOptions() *EnsurePoolHealthyRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

type EnsurePoolHealthyRequest_Options struct {
	// If dryrun is true, no inventory changes are made. Proposed changes are
	// returned.
	Dryrun               bool     `protobuf:"varint,1,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnsurePoolHealthyRequest_Options) Reset()         { *m = EnsurePoolHealthyRequest_Options{} }
func (m *EnsurePoolHealthyRequest_Options) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyRequest_Options) ProtoMessage()    {}
func (*EnsurePoolHealthyRequest_Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{0, 0}
}

func (m *EnsurePoolHealthyRequest_Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyRequest_Options.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyRequest_Options.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyRequest_Options.Merge(m, src)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyRequest_Options.Size(m)
}
func (m *EnsurePoolHealthyRequest_Options) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyRequest_Options.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyRequest_Options proto.InternalMessageInfo

func (m *EnsurePoolHealthyRequest_Options) GetDryrun() bool {
	if m != nil {
		return m.Dryrun
	}
	return false
}

type EnsurePoolHealthyResponse struct {
	// Failures encountered during pool balancing.
	//
	// All the remaining fields of the response are still valid in the presence of
	// failures.
	Failures []EnsurePoolHealthyResponse_Failure `protobuf:"varint,1,rep,packed,name=failures,proto3,enum=crosskylabadmin.fleet.EnsurePoolHealthyResponse_Failure" json:"failures,omitempty"`
	// target_pool_status summarizes the target pool after the required
	// inventory changes are executed.
	//
	// Within the pool, only DUTs selected via dut_selector are summarized.
	TargetPoolStatus *PoolStatus `protobuf:"bytes,2,opt,name=target_pool_status,json=targetPoolStatus,proto3" json:"target_pool_status,omitempty"`
	// spare_pool_status summarizes the spare pool after the required
	// inventory changes are executed.
	//
	// Within the pool, only DUTs selected via dut_selector are summarized.
	SparePoolStatus *PoolStatus `protobuf:"bytes,3,opt,name=spare_pool_status,json=sparePoolStatus,proto3" json:"spare_pool_status,omitempty"`
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	//
	// url is empty in dryrun mode.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// changes correspond to the proposed or executed pool changes to ensure
	// inventory in response to various API methods calls.
	Changes              []*PoolChange `protobuf:"bytes,5,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EnsurePoolHealthyResponse) Reset()         { *m = EnsurePoolHealthyResponse{} }
func (m *EnsurePoolHealthyResponse) String() string { return proto.CompactTextString(m) }
func (*EnsurePoolHealthyResponse) ProtoMessage()    {}
func (*EnsurePoolHealthyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{1}
}

func (m *EnsurePoolHealthyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnsurePoolHealthyResponse.Unmarshal(m, b)
}
func (m *EnsurePoolHealthyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnsurePoolHealthyResponse.Marshal(b, m, deterministic)
}
func (m *EnsurePoolHealthyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePoolHealthyResponse.Merge(m, src)
}
func (m *EnsurePoolHealthyResponse) XXX_Size() int {
	return xxx_messageInfo_EnsurePoolHealthyResponse.Size(m)
}
func (m *EnsurePoolHealthyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePoolHealthyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePoolHealthyResponse proto.InternalMessageInfo

func (m *EnsurePoolHealthyResponse) GetFailures() []EnsurePoolHealthyResponse_Failure {
	if m != nil {
		return m.Failures
	}
	return nil
}

func (m *EnsurePoolHealthyResponse) GetTargetPoolStatus() *PoolStatus {
	if m != nil {
		return m.TargetPoolStatus
	}
	return nil
}

func (m *EnsurePoolHealthyResponse) GetSparePoolStatus() *PoolStatus {
	if m != nil {
		return m.SparePoolStatus
	}
	return nil
}

func (m *EnsurePoolHealthyResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EnsurePoolHealthyResponse) GetChanges() []*PoolChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ResizePoolRequest struct {
	// dut_selectors filters the set of DUTs considered by ResizePool.
	//
	// All pool changes occurs within this selected set of DUTs.
	// It is an error to omit dut_selector because that would allow
	// unconstrained DUT reallocation between pools, disregarding all other
	// labels.
	DutSelector *DutSelector `protobuf:"bytes,1,opt,name=dut_selector,json=dutSelector,proto3" json:"dut_selector,omitempty"`
	// target_pool is the pool that should contain healthy DUTs.
	TargetPool string `protobuf:"bytes,2,opt,name=target_pool,json=targetPool,proto3" json:"target_pool,omitempty"`
	// target_pool_size is the requested size for the target_pool.
	TargetPoolSize int32 `protobuf:"varint,3,opt,name=target_pool_size,json=targetPoolSize,proto3" json:"target_pool_size,omitempty"`
	// spare_pool is the pool to borrow needed DUTs from and return extra DUTs to.
	SparePool            string   `protobuf:"bytes,4,opt,name=spare_pool,json=sparePool,proto3" json:"spare_pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResizePoolRequest) Reset()         { *m = ResizePoolRequest{} }
func (m *ResizePoolRequest) String() string { return proto.CompactTextString(m) }
func (*ResizePoolRequest) ProtoMessage()    {}
func (*ResizePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{2}
}

func (m *ResizePoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResizePoolRequest.Unmarshal(m, b)
}
func (m *ResizePoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResizePoolRequest.Marshal(b, m, deterministic)
}
func (m *ResizePoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizePoolRequest.Merge(m, src)
}
func (m *ResizePoolRequest) XXX_Size() int {
	return xxx_messageInfo_ResizePoolRequest.Size(m)
}
func (m *ResizePoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizePoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResizePoolRequest proto.InternalMessageInfo

func (m *ResizePoolRequest) GetDutSelector() *DutSelector {
	if m != nil {
		return m.DutSelector
	}
	return nil
}

func (m *ResizePoolRequest) GetTargetPool() string {
	if m != nil {
		return m.TargetPool
	}
	return ""
}

func (m *ResizePoolRequest) GetTargetPoolSize() int32 {
	if m != nil {
		return m.TargetPoolSize
	}
	return 0
}

func (m *ResizePoolRequest) GetSparePool() string {
	if m != nil {
		return m.SparePool
	}
	return ""
}

type ResizePoolResponse struct {
	// url is an opaque URL for this inventory change.
	//
	// It is intended to be the gerrit CL corresponding to the change, or the
	// gitiles path for a committed changelist for the change.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// changes correspond to the proposed or executed pool changes to inventory in
	// response to the ResizePool RPC.
	Changes              []*PoolChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResizePoolResponse) Reset()         { *m = ResizePoolResponse{} }
func (m *ResizePoolResponse) String() string { return proto.CompactTextString(m) }
func (*ResizePoolResponse) ProtoMessage()    {}
func (*ResizePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{3}
}

func (m *ResizePoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResizePoolResponse.Unmarshal(m, b)
}
func (m *ResizePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResizePoolResponse.Marshal(b, m, deterministic)
}
func (m *ResizePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizePoolResponse.Merge(m, src)
}
func (m *ResizePoolResponse) XXX_Size() int {
	return xxx_messageInfo_ResizePoolResponse.Size(m)
}
func (m *ResizePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResizePoolResponse proto.InternalMessageInfo

func (m *ResizePoolResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ResizePoolResponse) GetChanges() []*PoolChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type DutSelector struct {
	Model                string   `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DutSelector) Reset()         { *m = DutSelector{} }
func (m *DutSelector) String() string { return proto.CompactTextString(m) }
func (*DutSelector) ProtoMessage()    {}
func (*DutSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{4}
}

func (m *DutSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DutSelector.Unmarshal(m, b)
}
func (m *DutSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DutSelector.Marshal(b, m, deterministic)
}
func (m *DutSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutSelector.Merge(m, src)
}
func (m *DutSelector) XXX_Size() int {
	return xxx_messageInfo_DutSelector.Size(m)
}
func (m *DutSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_DutSelector.DiscardUnknown(m)
}

var xxx_messageInfo_DutSelector proto.InternalMessageInfo

func (m *DutSelector) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type PoolStatus struct {
	// size is the number of DUTs in this pool.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// healthy_count is the number of healthy DUTs in this pool.
	HealthyCount         int32    `protobuf:"varint,2,opt,name=healthy_count,json=healthyCount,proto3" json:"healthy_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolStatus) Reset()         { *m = PoolStatus{} }
func (m *PoolStatus) String() string { return proto.CompactTextString(m) }
func (*PoolStatus) ProtoMessage()    {}
func (*PoolStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{5}
}

func (m *PoolStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PoolStatus.Unmarshal(m, b)
}
func (m *PoolStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PoolStatus.Marshal(b, m, deterministic)
}
func (m *PoolStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolStatus.Merge(m, src)
}
func (m *PoolStatus) XXX_Size() int {
	return xxx_messageInfo_PoolStatus.Size(m)
}
func (m *PoolStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PoolStatus proto.InternalMessageInfo

func (m *PoolStatus) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *PoolStatus) GetHealthyCount() int32 {
	if m != nil {
		return m.HealthyCount
	}
	return 0
}

// PoolChange is a single change of DUT pools in the inventory.
type PoolChange struct {
	// dut_id is the inventory ID of the DUT whose pool was modified.
	DutId string `protobuf:"bytes,1,opt,name=dut_id,json=dutId,proto3" json:"dut_id,omitempty"`
	// old_pool is the pool the DUT was removed from.
	OldPool string `protobuf:"bytes,2,opt,name=old_pool,json=oldPool,proto3" json:"old_pool,omitempty"`
	// new_pool is the pool the DUT was moved to.
	NewPool              string   `protobuf:"bytes,3,opt,name=new_pool,json=newPool,proto3" json:"new_pool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoolChange) Reset()         { *m = PoolChange{} }
func (m *PoolChange) String() string { return proto.CompactTextString(m) }
func (*PoolChange) ProtoMessage()    {}
func (*PoolChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ebb6f101f23e24c, []int{6}
}

func (m *PoolChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PoolChange.Unmarshal(m, b)
}
func (m *PoolChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PoolChange.Marshal(b, m, deterministic)
}
func (m *PoolChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolChange.Merge(m, src)
}
func (m *PoolChange) XXX_Size() int {
	return xxx_messageInfo_PoolChange.Size(m)
}
func (m *PoolChange) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolChange.DiscardUnknown(m)
}

var xxx_messageInfo_PoolChange proto.InternalMessageInfo

func (m *PoolChange) GetDutId() string {
	if m != nil {
		return m.DutId
	}
	return ""
}

func (m *PoolChange) GetOldPool() string {
	if m != nil {
		return m.OldPool
	}
	return ""
}

func (m *PoolChange) GetNewPool() string {
	if m != nil {
		return m.NewPool
	}
	return ""
}

func init() {
	proto.RegisterEnum("crosskylabadmin.fleet.EnsurePoolHealthyResponse_Failure", EnsurePoolHealthyResponse_Failure_name, EnsurePoolHealthyResponse_Failure_value)
	proto.RegisterType((*EnsurePoolHealthyRequest)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyRequest")
	proto.RegisterType((*EnsurePoolHealthyRequest_Options)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyRequest.Options")
	proto.RegisterType((*EnsurePoolHealthyResponse)(nil), "crosskylabadmin.fleet.EnsurePoolHealthyResponse")
	proto.RegisterType((*ResizePoolRequest)(nil), "crosskylabadmin.fleet.ResizePoolRequest")
	proto.RegisterType((*ResizePoolResponse)(nil), "crosskylabadmin.fleet.ResizePoolResponse")
	proto.RegisterType((*DutSelector)(nil), "crosskylabadmin.fleet.DutSelector")
	proto.RegisterType((*PoolStatus)(nil), "crosskylabadmin.fleet.PoolStatus")
	proto.RegisterType((*PoolChange)(nil), "crosskylabadmin.fleet.PoolChange")
}

func init() {
	proto.RegisterFile("infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto", fileDescriptor_6ebb6f101f23e24c)
}

var fileDescriptor_6ebb6f101f23e24c = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x51, 0x4f, 0xdb, 0x3a,
	0x14, 0xbe, 0x69, 0x29, 0x6d, 0x4f, 0xb9, 0x10, 0x7c, 0x2f, 0xf7, 0xb6, 0x4c, 0x68, 0x25, 0xbc,
	0x74, 0xd2, 0xd4, 0x6c, 0xdd, 0xc3, 0x26, 0x6d, 0x2f, 0x1d, 0x0d, 0x6b, 0x25, 0x68, 0x99, 0xdb,
	0x4e, 0x82, 0x97, 0xc8, 0x34, 0x06, 0xa2, 0xa5, 0x76, 0x16, 0x3b, 0x40, 0xf9, 0x6d, 0x7b, 0xdc,
	0xfe, 0xca, 0x7e, 0xc7, 0x14, 0x27, 0xa1, 0x19, 0x50, 0x0d, 0x5e, 0xf6, 0x16, 0x9f, 0xef, 0xf8,
	0xf3, 0x39, 0xdf, 0xe7, 0xe3, 0xc0, 0x3b, 0x97, 0x9d, 0x06, 0xc4, 0x24, 0xbe, 0x4f, 0xd9, 0x99,
	0xcb, 0xa8, 0x39, 0x09, 0xb8, 0x10, 0x9f, 0x67, 0x1e, 0x39, 0x21, 0xce, 0xd4, 0x65, 0x26, 0xf1,
	0x5d, 0xf3, 0xd4, 0xa3, 0x54, 0x9a, 0x17, 0x2f, 0x4d, 0x97, 0x5d, 0x50, 0x26, 0x79, 0x30, 0x6b,
	0xfa, 0x01, 0x97, 0x1c, 0x6d, 0xdc, 0xca, 0x6e, 0xaa, 0x4c, 0xe3, 0x7b, 0x0e, 0xaa, 0x16, 0x13,
	0x61, 0x40, 0x0f, 0x39, 0xf7, 0xba, 0x94, 0x78, 0xf2, 0x7c, 0x86, 0xe9, 0x97, 0x90, 0x0a, 0x89,
	0x2c, 0x58, 0x71, 0x42, 0x69, 0x0b, 0xea, 0xd1, 0x89, 0xe4, 0x41, 0x55, 0xab, 0x6b, 0x8d, 0x4a,
	0xcb, 0x68, 0xde, 0x4b, 0xd5, 0xec, 0x84, 0x72, 0x98, 0x64, 0xe2, 0x8a, 0x33, 0x5f, 0xa0, 0xa7,
	0x50, 0x91, 0x24, 0x38, 0xa3, 0xd2, 0xf6, 0x39, 0xf7, 0xaa, 0xb9, 0xba, 0xd6, 0x28, 0x63, 0x88,
	0x43, 0xd1, 0xa9, 0x68, 0x0b, 0x40, 0xf8, 0x24, 0xa0, 0x31, 0x9e, 0x57, 0x78, 0x59, 0x45, 0x14,
	0xfc, 0x1c, 0xd0, 0x94, 0x5c, 0xd9, 0x21, 0x3b, 0x8f, 0xcb, 0xb3, 0x9d, 0x50, 0x8a, 0xea, 0x52,
	0x5d, 0x6b, 0x14, 0xb0, 0x3e, 0x25, 0x57, 0xe3, 0x14, 0xe8, 0x84, 0x52, 0xa0, 0x8f, 0x50, 0xe4,
	0xbe, 0x74, 0x39, 0x13, 0xd5, 0x82, 0xaa, 0xf7, 0xf5, 0x82, 0x7a, 0x17, 0xb5, 0xdd, 0x1c, 0xc4,
	0xdb, 0x71, 0xca, 0xb3, 0xb9, 0x0d, 0xc5, 0x24, 0x86, 0xfe, 0x83, 0x65, 0x27, 0x98, 0x05, 0x21,
	0x53, 0x62, 0x94, 0x70, 0xb2, 0x32, 0xbe, 0xe6, 0xa1, 0x76, 0x0f, 0xa1, 0xf0, 0x39, 0x13, 0x14,
	0x8d, 0xa0, 0x74, 0x4a, 0x5c, 0x2f, 0x0c, 0xa8, 0xa8, 0x6a, 0xf5, 0x7c, 0x63, 0xb5, 0xf5, 0xe6,
	0xe1, 0x45, 0xc5, 0x1c, 0xcd, 0xbd, 0x98, 0x00, 0xdf, 0x30, 0xa1, 0x01, 0xa0, 0x8c, 0xae, 0xb6,
	0x90, 0x44, 0x86, 0x42, 0xc9, 0x5b, 0x69, 0x6d, 0x2f, 0xe0, 0x8f, 0x98, 0x87, 0x2a, 0x11, 0xeb,
	0x73, 0x07, 0xe2, 0x08, 0x3a, 0x80, 0xf5, 0xb9, 0x0f, 0x29, 0x5f, 0xfe, 0xa1, 0x7c, 0x6b, 0x37,
	0x8e, 0x25, 0x74, 0x3a, 0xe4, 0xc3, 0xc0, 0x53, 0x46, 0x95, 0x71, 0xf4, 0x89, 0xde, 0x42, 0x71,
	0x72, 0x4e, 0xd8, 0x19, 0x8d, 0xbc, 0xc9, 0xff, 0x86, 0x76, 0x57, 0x65, 0xe2, 0x74, 0x87, 0x71,
	0x0c, 0xc5, 0x44, 0x03, 0xf4, 0x0f, 0xac, 0xed, 0xb5, 0x7b, 0xfb, 0x63, 0x6c, 0xd9, 0xbd, 0xfe,
	0xa7, 0xf6, 0x7e, 0xaf, 0xa3, 0xff, 0x85, 0x9e, 0xc0, 0xff, 0xa3, 0xc1, 0xc0, 0x3e, 0x68, 0xf7,
	0x8f, 0xec, 0x71, 0xbf, 0x6b, 0xb5, 0xf7, 0x47, 0xdd, 0x23, 0xbb, 0x33, 0x1e, 0x0d, 0x75, 0x0d,
	0x6d, 0x41, 0xad, 0x3f, 0x18, 0xd9, 0x56, 0x7f, 0x30, 0xfe, 0xd0, 0xb5, 0x53, 0x70, 0x78, 0xd8,
	0xc6, 0xd6, 0x50, 0xcf, 0x19, 0xdf, 0x34, 0x58, 0xc7, 0x54, 0xb8, 0xd7, 0xaa, 0xfe, 0x3f, 0x7d,
	0xff, 0x1b, 0xa0, 0xff, 0x62, 0xa4, 0x7b, 0x4d, 0x95, 0xec, 0x05, 0xbc, 0x9a, 0xf1, 0xc8, 0xbd,
	0xa6, 0xb7, 0x26, 0x65, 0xe9, 0xd6, 0xa4, 0x18, 0x13, 0x40, 0xd9, 0x2e, 0x92, 0xdb, 0x97, 0xf8,
	0xa0, 0xdd, 0xeb, 0x43, 0xee, 0xd1, 0x3e, 0xec, 0x40, 0x25, 0xd3, 0x2a, 0xfa, 0x17, 0x0a, 0x53,
	0xee, 0xd0, 0x94, 0x3f, 0x5e, 0x18, 0x16, 0x40, 0xe6, 0x26, 0x20, 0x58, 0x52, 0x4d, 0x69, 0xaa,
	0x29, 0xf5, 0x8d, 0x76, 0xe0, 0xef, 0x74, 0x9e, 0x27, 0x3c, 0x64, 0x52, 0xe9, 0x52, 0xc0, 0x2b,
	0x49, 0x70, 0x37, 0x8a, 0x19, 0x47, 0x31, 0x4d, 0x5c, 0x02, 0xda, 0x80, 0xe5, 0xc8, 0x0f, 0xd7,
	0x49, 0xcf, 0x72, 0x42, 0xd9, 0x73, 0x50, 0x0d, 0x4a, 0xdc, 0x73, 0xb2, 0xe2, 0x16, 0xb9, 0xe7,
	0x28, 0x65, 0x6b, 0x50, 0x62, 0xf4, 0x32, 0xfb, 0xae, 0x14, 0x19, 0xbd, 0x8c, 0xa0, 0xd6, 0x0f,
	0x0d, 0xca, 0xbd, 0xf4, 0x91, 0x44, 0x17, 0xb0, 0x7e, 0x67, 0xf4, 0x90, 0xf9, 0xc8, 0x97, 0x63,
	0xf3, 0xc5, 0x63, 0xa7, 0x1a, 0x11, 0x80, 0xb9, 0x63, 0xa8, 0xb1, 0x60, 0xff, 0x9d, 0xab, 0xb9,
	0xf9, 0xec, 0x01, 0x99, 0xf1, 0x11, 0xef, 0x8b, 0xc7, 0x05, 0x85, 0x9d, 0x2c, 0xab, 0x3f, 0xc1,
	0xab, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xbf, 0xe9, 0x3b, 0x49, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	// EnsurePoolHealthy ensures that a target pool has only healthy DUTs.
	//
	// EnsurePoolHealthy works by swapping unhealthy DUTs from target pool with
	// healthy DUTs from a spare pool.
	EnsurePoolHealthy(ctx context.Context, in *EnsurePoolHealthyRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyResponse, error)
	// ResizePool changes the size of the target DUT pool.
	//
	// ResizePool borrows or returns extra DUTs from the spare pool.
	//
	// ResizePool does not consider DUT health. Clients should usually call
	// EnsurePoolHealthy following a ResizePool operation.
	//
	// ResizePool never makes partial changes. In case of an error, no inventory
	// changes are made.
	ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error)
}
type inventoryPRPCClient struct {
	client *prpc.Client
}

func NewInventoryPRPCClient(client *prpc.Client) InventoryClient {
	return &inventoryPRPCClient{client}
}

func (c *inventoryPRPCClient) EnsurePoolHealthy(ctx context.Context, in *EnsurePoolHealthyRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyResponse, error) {
	out := new(EnsurePoolHealthyResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "EnsurePoolHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryPRPCClient) ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error) {
	out := new(ResizePoolResponse)
	err := c.client.Call(ctx, "crosskylabadmin.fleet.Inventory", "ResizePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) EnsurePoolHealthy(ctx context.Context, in *EnsurePoolHealthyRequest, opts ...grpc.CallOption) (*EnsurePoolHealthyResponse, error) {
	out := new(EnsurePoolHealthyResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/EnsurePoolHealthy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ResizePool(ctx context.Context, in *ResizePoolRequest, opts ...grpc.CallOption) (*ResizePoolResponse, error) {
	out := new(ResizePoolResponse)
	err := c.cc.Invoke(ctx, "/crosskylabadmin.fleet.Inventory/ResizePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	// EnsurePoolHealthy ensures that a target pool has only healthy DUTs.
	//
	// EnsurePoolHealthy works by swapping unhealthy DUTs from target pool with
	// healthy DUTs from a spare pool.
	EnsurePoolHealthy(context.Context, *EnsurePoolHealthyRequest) (*EnsurePoolHealthyResponse, error)
	// ResizePool changes the size of the target DUT pool.
	//
	// ResizePool borrows or returns extra DUTs from the spare pool.
	//
	// ResizePool does not consider DUT health. Clients should usually call
	// EnsurePoolHealthy following a ResizePool operation.
	//
	// ResizePool never makes partial changes. In case of an error, no inventory
	// changes are made.
	ResizePool(context.Context, *ResizePoolRequest) (*ResizePoolResponse, error)
}

func RegisterInventoryServer(s prpc.Registrar, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_EnsurePoolHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsurePoolHealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).EnsurePoolHealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/EnsurePoolHealthy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).EnsurePoolHealthy(ctx, req.(*EnsurePoolHealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ResizePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ResizePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosskylabadmin.fleet.Inventory/ResizePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ResizePool(ctx, req.(*ResizePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosskylabadmin.fleet.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsurePoolHealthy",
			Handler:    _Inventory_EnsurePoolHealthy_Handler,
		},
		{
			MethodName: "ResizePool",
			Handler:    _Inventory_ResizePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/appengine/crosskylabadmin/api/fleet/v1/inventory.proto",
}
