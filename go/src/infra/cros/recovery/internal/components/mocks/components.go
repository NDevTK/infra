// Code generated by MockGen. DO NOT EDIT.
// Source: internal/components/components.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	components "infra/cros/recovery/internal/components"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	xmlrpc "go.chromium.org/chromiumos/config/go/api/test/xmlrpc"
)

// MockSSHRunResponse is a mock of SSHRunResponse interface.
type MockSSHRunResponse struct {
	ctrl     *gomock.Controller
	recorder *MockSSHRunResponseMockRecorder
}

// MockSSHRunResponseMockRecorder is the mock recorder for MockSSHRunResponse.
type MockSSHRunResponseMockRecorder struct {
	mock *MockSSHRunResponse
}

// NewMockSSHRunResponse creates a new mock instance.
func NewMockSSHRunResponse(ctrl *gomock.Controller) *MockSSHRunResponse {
	mock := &MockSSHRunResponse{ctrl: ctrl}
	mock.recorder = &MockSSHRunResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHRunResponse) EXPECT() *MockSSHRunResponseMockRecorder {
	return m.recorder
}

// GetExitCode mocks base method.
func (m *MockSSHRunResponse) GetExitCode() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitCode")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetExitCode indicates an expected call of GetExitCode.
func (mr *MockSSHRunResponseMockRecorder) GetExitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitCode", reflect.TypeOf((*MockSSHRunResponse)(nil).GetExitCode))
}

// GetStderr mocks base method.
func (m *MockSSHRunResponse) GetStderr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStderr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStderr indicates an expected call of GetStderr.
func (mr *MockSSHRunResponseMockRecorder) GetStderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStderr", reflect.TypeOf((*MockSSHRunResponse)(nil).GetStderr))
}

// GetStdout mocks base method.
func (m *MockSSHRunResponse) GetStdout() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStdout")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStdout indicates an expected call of GetStdout.
func (mr *MockSSHRunResponseMockRecorder) GetStdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStdout", reflect.TypeOf((*MockSSHRunResponse)(nil).GetStdout))
}

// MockHostAccess is a mock of HostAccess interface.
type MockHostAccess struct {
	ctrl     *gomock.Controller
	recorder *MockHostAccessMockRecorder
}

// MockHostAccessMockRecorder is the mock recorder for MockHostAccess.
type MockHostAccessMockRecorder struct {
	mock *MockHostAccess
}

// NewMockHostAccess creates a new mock instance.
func NewMockHostAccess(ctrl *gomock.Controller) *MockHostAccess {
	mock := &MockHostAccess{ctrl: ctrl}
	mock.recorder = &MockHostAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostAccess) EXPECT() *MockHostAccessMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHostAccess) Ping(ctx context.Context, pingCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, pingCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHostAccessMockRecorder) Ping(ctx, pingCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHostAccess)(nil).Ping), ctx, pingCount)
}

// Run mocks base method.
func (m *MockHostAccess) Run(ctx context.Context, timeout time.Duration, command string, args ...string) (components.SSHRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, timeout, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(components.SSHRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockHostAccessMockRecorder) Run(ctx, timeout, command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, timeout, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHostAccess)(nil).Run), varargs...)
}

// RunBackground mocks base method.
func (m *MockHostAccess) RunBackground(ctx context.Context, timeout time.Duration, command string, args ...string) (components.SSHRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, timeout, command}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunBackground", varargs...)
	ret0, _ := ret[0].(components.SSHRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBackground indicates an expected call of RunBackground.
func (mr *MockHostAccessMockRecorder) RunBackground(ctx, timeout, command interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, timeout, command}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBackground", reflect.TypeOf((*MockHostAccess)(nil).RunBackground), varargs...)
}

// MockServod is a mock of Servod interface.
type MockServod struct {
	ctrl     *gomock.Controller
	recorder *MockServodMockRecorder
}

// MockServodMockRecorder is the mock recorder for MockServod.
type MockServodMockRecorder struct {
	mock *MockServod
}

// NewMockServod creates a new mock instance.
func NewMockServod(ctrl *gomock.Controller) *MockServod {
	mock := &MockServod{ctrl: ctrl}
	mock.recorder = &MockServodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServod) EXPECT() *MockServodMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockServod) Call(ctx context.Context, method string, timeout time.Duration, args ...interface{}) (*xmlrpc.Value, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method, timeout}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*xmlrpc.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockServodMockRecorder) Call(ctx, method, timeout interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method, timeout}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockServod)(nil).Call), varargs...)
}

// Get mocks base method.
func (m *MockServod) Get(ctx context.Context, cmd string) (*xmlrpc.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cmd)
	ret0, _ := ret[0].(*xmlrpc.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServodMockRecorder) Get(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServod)(nil).Get), ctx, cmd)
}

// Has mocks base method.
func (m *MockServod) Has(ctx context.Context, command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", ctx, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockServodMockRecorder) Has(ctx, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockServod)(nil).Has), ctx, command)
}

// Port mocks base method.
func (m *MockServod) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockServodMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockServod)(nil).Port))
}

// Set mocks base method.
func (m *MockServod) Set(ctx context.Context, cmd string, val interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, cmd, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockServodMockRecorder) Set(ctx, cmd, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockServod)(nil).Set), ctx, cmd, val)
}

// MockVersioner is a mock of Versioner interface.
type MockVersioner struct {
	ctrl     *gomock.Controller
	recorder *MockVersionerMockRecorder
}

// MockVersionerMockRecorder is the mock recorder for MockVersioner.
type MockVersionerMockRecorder struct {
	mock *MockVersioner
}

// NewMockVersioner creates a new mock instance.
func NewMockVersioner(ctrl *gomock.Controller) *MockVersioner {
	mock := &MockVersioner{ctrl: ctrl}
	mock.recorder = &MockVersionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersioner) EXPECT() *MockVersionerMockRecorder {
	return m.recorder
}

// Cros mocks base method.
func (m *MockVersioner) Cros(ctx context.Context, resource string) (*components.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cros", ctx, resource)
	ret0, _ := ret[0].(*components.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cros indicates an expected call of Cros.
func (mr *MockVersionerMockRecorder) Cros(ctx, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cros", reflect.TypeOf((*MockVersioner)(nil).Cros), ctx, resource)
}

// GetVersion mocks base method.
func (m *MockVersioner) GetVersion(ctx context.Context, deviceType components.VersionDeviceType, resource, board, model string) (*components.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx, deviceType, resource, board, model)
	ret0, _ := ret[0].(*components.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockVersionerMockRecorder) GetVersion(ctx, deviceType, resource, board, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersioner)(nil).GetVersion), ctx, deviceType, resource, board, model)
}
