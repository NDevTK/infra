{
  "plans": [
    {
      "name": "servo",
      "critical_actions": [
        {
          "name": "Set state:MISSING_CONFIG",
          "exec_name": "servo_set_servo_state",
          "exec_args": [
            "state:MISSING_CONFIG"
          ],
          "run_control": "ALWAYS_RUN"
        },
        {
          "name": "Servo is know in the setup",
          "exec_name": "dut_servo_host_present",
          "docs": [
            "Verify if setup data has any data related to servo-host which mean servo is present in setup."
          ],
          "dependencies": [
            {
              "name": "Set state:WRONG_CONFIG",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:WRONG_CONFIG"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "run_control": "RUN_ONCE"
        },
        {
          "name": "Servod port specified",
          "exec_name": "servo_servod_port_present",
          "docs": [
            "Verify that servod port is present in servo data."
          ],
          "dependencies": [
            {
              "name": "Set state:WRONG_CONFIG",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:WRONG_CONFIG"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "run_control": "RUN_ONCE"
        },
        {
          "name": "Servo serial is specified",
          "exec_name": "dut_servo_has_serial",
          "docs": [
            "Check if root servo serial is present."
          ],
          "dependencies": [
            {
              "name": "Set state:WRONG_CONFIG",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:WRONG_CONFIG"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "run_control": "RUN_ONCE"
        },
        {
          "name": "Initialize docker container",
          "exec_name": "servo_host_servod_init",
          "docs": [
            "Initiate docker to have access to the host.",
            "Servod is not needed as on this stage we just verify that servo host is good.",
            "If start container with servod and root servo device is not connected it will fail."
          ],
          "conditions": [
            {
              "name": "Uses servod container",
              "exec_name": "servo_uses_servod_container",
              "docs": [
                "Condition to check if servo uses servod container."
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:NO_SSH",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:NO_SSH"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "no_servod:true"
          ],
          "timeout": "6m0s",
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Device is SSHable",
          "exec_name": "cros_ssh",
          "docs": [
            "Verify that device is reachable by SSH.",
            "Limited to 15 seconds."
          ],
          "dependencies": [
            {
              "name": "Set state:NO_SSH",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:NO_SSH"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Wait for labstation to load",
              "exec_name": "cros_ssh",
              "docs": [
                "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                "Labstation is expected to complete the reboot within 2 minutes."
              ],
              "timeout": "2m0s",
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "timeout": "15s",
          "run_control": "ALWAYS_RUN"
        },
        {
          "name": "Mark labstation as servod is in-use",
          "exec_name": "cros_create_servo_in_use",
          "docs": [
            "Create lock file is_in_use."
          ],
          "conditions": [
            {
              "name": "Is labstation",
              "exec_name": "servo_host_is_labstation",
              "docs": [
                "Condition to check if the servohost is a labstation."
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:SERVO_HOST_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVO_HOST_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Sleep 1s",
              "exec_name": "sample_sleep",
              "exec_args": [
                "sleep:1"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Read release info",
          "exec_name": "cros_run_command",
          "docs": [
            "Read host release data for future analysis."
          ],
          "conditions": [
            {
              "name": "Servod container is not used",
              "exec_name": "servo_uses_servod_container",
              "exec_args": [
                "reverse:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:SERVO_HOST_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVO_HOST_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "host:",
            "command:cat /etc/lsb-release"
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RUN_ONCE"
        },
        {
          "name": "Power-cycle by smart-hub",
          "exec_name": "servo_power_cycle_root_servo",
          "docs": [
            "Try to reset(power-cycle) the servo via smart usbhub."
          ],
          "conditions": [
            {
              "name": "DUT is not SSHable",
              "exec_name": "sample_fail",
              "docs": [
                "Verify if DUT is not SSH-able"
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "reset_timeout:60",
            "wait_timeout:20",
            "reset_authorized:false"
          ],
          "timeout": "2m0s",
          "allow_fail_after_recovery": true,
          "run_control": "RUN_ONCE"
        },
        {
          "name": "Has enough free disk space",
          "exec_name": "cros_has_enough_storage_space",
          "docs": [
            "Check if stateful partition have enough disk space that is at least 0.5GB."
          ],
          "conditions": [
            {
              "name": "Servod container is not used",
              "exec_name": "servo_uses_servod_container",
              "exec_args": [
                "reverse:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:BROKEN",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:BROKEN"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Remove logs and other files",
              "exec_name": "sample_pass",
              "docs": [
                "Clean up the old servod files as well as labstation."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "servo_labstation_disk_cleanup",
                  "exec_name": "servo_labstation_disk_cleanup",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Remove logs older 5 days",
                  "exec_name": "servo_servod_old_logs_cleanup",
                  "docs": [
                    "Clean up the old servod logs which older than 5 days."
                  ],
                  "exec_args": [
                    "max_days:5"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "/mnt/stateful_partition:0.5"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Cache latest servod start time",
          "exec_name": "cros_register_servod_logs_start",
          "docs": [
            "Cache servod start time based on previous runs.",
            "If we fail all logs will be collected"
          ],
          "conditions": [
            {
              "name": "Servod container is not used",
              "exec_name": "servo_uses_servod_container",
              "exec_args": [
                "reverse:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Servo_v4(p1) main present",
          "exec_name": "servo_v4_root_present",
          "docs": [
            "Verify that servo_v4(p1) board is present"
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:NOT_CONNECTED",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:NOT_CONNECTED"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Recover servo with Power-cycle by smart-hub",
              "exec_name": "servo_power_cycle_root_servo",
              "docs": [
                "Try to power-cycle the servo via smart usbhub to recover it."
              ],
              "exec_args": [
                "reset_timeout:60",
                "wait_timeout:20",
                "reset_authorized:false"
              ],
              "timeout": "2m0s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "update_topology:true"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "All servo's fw updated",
          "exec_name": "servo_fw_need_update",
          "docs": [
            "Check whether servo devices required firmware update.",
            "Check running agains version specified by servo_updater channel."
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:SERVO_UPDATER_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVO_UPDATER_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Sleep 1s",
              "exec_name": "sample_sleep",
              "exec_args": [
                "sleep:1"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Update all servo's firmware",
              "exec_name": "servo_update_servo_firmware",
              "docs": [
                "Try to update in  normal ways 3 times, if fail allow run force update."
              ],
              "dependencies": [
                {
                  "name": "Stop servod daemon on servo-host",
                  "exec_name": "servo_host_servod_init",
                  "docs": [
                    "Make sure servod daemon is not running on servo-host.",
                    "If container then run without daemon.",
                    "If daemon is running it will be stopped."
                  ],
                  "exec_args": [
                    "no_servod:true"
                  ],
                  "timeout": "6m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "try_attempt_count:3",
                "try_force_update_after_fail:true"
              ],
              "timeout": "10m0s",
              "run_control": "RUN_ONCE"
            }
          ],
          "timeout": "5m0s",
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Save UART capture",
          "exec_name": "servod_save_uart_capture",
          "dependencies": [
            {
              "name": "Stop UART capture",
              "exec_name": "servod_stop_uart_capture",
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Start servod daemon",
          "exec_name": "servo_host_servod_init",
          "docs": [
            "Start servod daemon on servo-host"
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:SERVO_HOST_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVO_HOST_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Stop servod and request to use recovery-mode for servod",
              "exec_name": "sample_pass",
              "docs": [
                "This recovery action to made adjust how we start servod.",
                "Specify to start servod with REC_MODE=1."
              ],
              "dependencies": [
                {
                  "name": "Specify to use REC_MODE=1 for servo",
                  "exec_name": "servo_create_flag_to_use_recovery_mode",
                  "docs": [
                    "Create a file to specify use REC_MODE=1 when start servod."
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reflash Cr50 fw and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is reflash Cr50 was done more 24 hours ago",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                    "Re-flashing limited to once per once per day to avoid over-flashing the device."
                  ],
                  "conditions": [
                    {
                      "name": "Is reflash Cr50 was done within 24 hours",
                      "exec_name": "metrics_found_at_last_time",
                      "docs": [
                        "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                      ],
                      "exec_args": [
                        "metrics_kind:cr50_flash",
                        "time_frame_hours:24"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reflash Cr50 fw on DUT",
                  "exec_name": "cros_reflash_cr50_fw",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "Reboot after the fw flash is successful."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "flash_timeout:120",
                    "wait_timeout:30"
                  ],
                  "timeout": "2m30s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reset GSC from DUT and stop servod",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset GSC from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reset GSC on DUT",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "The command recommended by cr50 team http://b/241161724#comment24.",
                    "Reboot after the fw flash is successful."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:trunks_send --raw 80010000000c200000000013"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "timeout": "2m0s",
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Start UART capture",
          "exec_name": "servod_start_uart_capture",
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Servod is responsive to dut-control",
          "exec_name": "servo_servod_echo_host",
          "docs": [
            "Uses a servod control to check whether the servod daemon is responsive."
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:SERVOD_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVOD_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod and request to use recovery-mode for servod",
              "exec_name": "sample_pass",
              "docs": [
                "This recovery action to made adjust how we start servod.",
                "Specify to start servod with REC_MODE=1."
              ],
              "dependencies": [
                {
                  "name": "Specify to use REC_MODE=1 for servo",
                  "exec_name": "servo_create_flag_to_use_recovery_mode",
                  "docs": [
                    "Create a file to specify use REC_MODE=1 when start servod."
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Cold reset the DUT by servod and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT by resetting power state command on servod."
              ],
              "dependencies": [
                {
                  "name": "Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "timeout": "30s",
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Read servo serial by servod harness",
          "exec_name": "servod_echo",
          "docs": [
            "Try to read servo serial by XMLRPC request to servod."
          ],
          "dependencies": [
            {
              "name": "Set state:SERVOD_PROXY_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVOD_PROXY_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Toggle DTS Mode and Servo Role",
              "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
              "docs": [
                "Toggle dts mode and servo role to try and recover CCD."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD once and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                "TODO(otabek): Add dependency for servo initialize."
              ],
              "dependencies": [
                {
                  "name": "Toggle PD once",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once."
                  ],
                  "exec_args": [
                    "toggle_times:1",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Cold reset the DUT by servod and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT by resetting power state command on servod."
              ],
              "dependencies": [
                {
                  "name": "Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reflash Cr50 fw and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is reflash Cr50 was done more 24 hours ago",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                    "Re-flashing limited to once per once per day to avoid over-flashing the device."
                  ],
                  "conditions": [
                    {
                      "name": "Is reflash Cr50 was done within 24 hours",
                      "exec_name": "metrics_found_at_last_time",
                      "docs": [
                        "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                      ],
                      "exec_args": [
                        "metrics_kind:cr50_flash",
                        "time_frame_hours:24"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reflash Cr50 fw on DUT",
                  "exec_name": "cros_reflash_cr50_fw",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "Reboot after the fw flash is successful."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "flash_timeout:120",
                    "wait_timeout:30"
                  ],
                  "timeout": "2m30s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Set cold_reset for c2d2",
          "exec_name": "servo_set",
          "docs": [
            "https://issuetracker.google.com/302370064 Use gsc_ec_reset instead of gsc_reset for c2d2 devices.",
            "This is faft ccd should be open and in factory mode, so gsc_ec_reset should be accessible."
          ],
          "conditions": [
            {
              "name": "Servo used c2d2",
              "exec_name": "servo_type_regex_match",
              "docs": [
                "Verify that servo uses c2d2"
              ],
              "exec_args": [
                "regex:c2d2"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "exec_args": [
            "command:cold_reset_select",
            "string_value:gsc_ec_reset"
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Verify servo connected to the DUT",
          "exec_name": "servo_low_ppdut5",
          "docs": [
            "Verify if servo connected to the DUTand received required voltage from it."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Is servo_v4(p1) with type-a connector",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify whether servo V4(p1) device is connect to DUT using Type-A connection."
              ],
              "exec_args": [
                "command:root.dut_connection_type",
                "expected_string_value:type-a"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "DUT has CrOS EC",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify if DUT has ChromeOS firmware for EC"
              ],
              "exec_args": [
                "command:supports_cros_ec_communication",
                "expected_string_value:yes"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:DUT_NOT_CONNECTED",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:DUT_NOT_CONNECTED"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Power cycle by RPM with delay and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Perform RPM cycle and wait to device to boot back.",
                "RPM applicable only for servo-micro testbeds."
              ],
              "conditions": [
                {
                  "name": "is_servo_micro",
                  "exec_name": "is_servo_micro",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "RPM config present",
                  "exec_name": "device_has_rpm_info",
                  "docs": [
                    "Verifies that the RPM configuration provided."
                  ],
                  "exec_args": [
                    "device_type:dut"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Set RPM OFF",
                  "exec_name": "device_rpm_power_off",
                  "exec_args": [
                    "device_type:dut"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Sleep 35s",
                  "exec_name": "sample_sleep",
                  "exec_args": [
                    "sleep:35"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Set RPM ON",
                  "exec_name": "device_rpm_power_on",
                  "exec_args": [
                    "device_type:dut"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD (5 times) and stop",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Toggle PD 5 times",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times."
                  ],
                  "exec_args": [
                    "toggle_times:5",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Cold reset the DUT by servod and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT by resetting power state command on servod."
              ],
              "dependencies": [
                {
                  "name": "Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Force reflash servo_micro fw and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to update servo micro firmware"
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "is_servo_micro",
                  "exec_name": "is_servo_micro",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is ok to force update servo_micro firmware",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Verify that it is time when we can try to re-flash fw on servo micro.",
                    "Re-flashing limited to once per once per 2 weeks to avoid over-flashing the servo device."
                  ],
                  "conditions": [
                    {
                      "name": "Last servo_micro fw updated within 2 weeks",
                      "exec_name": "metrics_found_at_last_time",
                      "docs": [
                        "Confirm that servo micro fw update action has occurred in the past 2 weeks. (336 hours)"
                      ],
                      "exec_args": [
                        "metrics_kind:servo_firmware_update_servo_micro",
                        "time_frame_hours:336"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Force update servo_micro firmware",
                  "exec_name": "servo_update_servo_firmware",
                  "docs": [
                    "Try to update servo micro firmware"
                  ],
                  "conditions": [
                    {
                      "name": "Is labstation",
                      "exec_name": "servo_host_is_labstation",
                      "docs": [
                        "Condition to check if the servohost is a labstation."
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "is_servo_micro",
                      "exec_name": "is_servo_micro",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is ok to force update servo_micro firmware",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on servo micro.",
                        "Re-flashing limited to once per once per 2 weeks to avoid over-flashing the servo device."
                      ],
                      "conditions": [
                        {
                          "name": "Last servo_micro fw updated within 2 weeks",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that servo micro fw update action has occurred in the past 2 weeks. (336 hours)"
                          ],
                          "exec_args": [
                            "metrics_kind:servo_firmware_update_servo_micro",
                            "time_frame_hours:336"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "force_update:true",
                    "ignore_version:true",
                    "servo_board:servo_micro"
                  ],
                  "timeout": "3m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Debug header servo present",
          "exec_name": "servo_check_servod_control",
          "docs": [
            "Check if servod detected debug header components as expected."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Servo uses debug header components",
              "exec_name": "servo_has_debug_header",
              "docs": [
                "Verify that servo has components which are not started from ccd_."
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:DEBUG_HEADER_SERVO_MISSING",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:DEBUG_HEADER_SERVO_MISSING"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "command:dut_controller_missing_fault",
            "expected_string_value:off"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Cold reset pin is detected",
          "exec_name": "servo_check_servod_control",
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Is servo_v4(p1) with type-a connector",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify whether servo V4(p1) device is connect to DUT using Type-A connection."
              ],
              "exec_args": [
                "command:root.dut_connection_type",
                "expected_string_value:type-a"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:COLD_RESET_PIN_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:COLD_RESET_PIN_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "command:cold_reset",
            "expected_string_value:off"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Warm reset pin is detected (servo_micro)",
          "exec_name": "servo_check_servod_control",
          "docs": [
            "Verify that warm_reset pin is detected by servod.",
            "If pin is not present then issue can be related to incorrect connected servo or issue with connector."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "is_servo_micro",
              "exec_name": "is_servo_micro",
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Warm reset control known by servo",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify is servod expected to have warm_reset control"
              ],
              "exec_args": [
                "command:warm_reset"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Device is SSHable",
              "exec_name": "cros_ssh",
              "docs": [
                "Verify that device is reachable by SSH.",
                "Limited to 15 seconds."
              ],
              "dependencies": [
                {
                  "name": "Set state:NO_SSH",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:NO_SSH"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Wait for labstation to load",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                    "Labstation is expected to complete the reboot within 2 minutes."
                  ],
                  "timeout": "2m0s",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set state:WARM_RESET_PIN_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:WARM_RESET_PIN_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "command:warm_reset",
            "expected_string_value:off"
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Charger connected",
          "exec_name": "servo_control_min_double_value",
          "docs": [
            "Verify that power for servo is provided.",
            "Applicable when we use type-c servo and RPM."
          ],
          "conditions": [
            {
              "name": "Is servo_v4(p1) used with type-c connector",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
              ],
              "exec_args": [
                "command:root.dut_connection_type",
                "expected_string_value:type-c"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Has ppchg5_mv control",
              "exec_name": "servod_has",
              "docs": [
                "Read and print ppchg5_mv control value to logs."
              ],
              "exec_args": [
                "command:ppchg5_mv"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Read ppdut5_mv value",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Read and print ppdut5_mv control value to logs."
              ],
              "exec_args": [
                "command:ppdut5_mv"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Read ppchg5_mv value",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Read and print ppchg5_mv control value to logs."
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "command:ppchg5_mv"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Set state:SERVOD_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVOD_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Power on DUT by RPM",
              "exec_name": "rpm_power_on",
              "docs": [
                "Power ON the RPM outlet."
              ],
              "conditions": [
                {
                  "name": "has_rpm_info",
                  "exec_name": "has_rpm_info",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "exec_args": [
            "control:ppchg5_mv",
            "min_value:4000"
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Check if PD is src state",
          "exec_name": "servo_check_servod_control",
          "docs": [
            "Verify that PD is src power to the DUT.",
            "Action can fail as not always the power is delivered by servo."
          ],
          "conditions": [
            {
              "name": "Is servo_v4(p1) used with type-c connector",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
              ],
              "exec_args": [
                "command:root.dut_connection_type",
                "expected_string_value:type-c"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Has ppchg5_mv control",
              "exec_name": "servod_has",
              "docs": [
                "Read and print ppchg5_mv control value to logs."
              ],
              "exec_args": [
                "command:ppchg5_mv"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:SERVOD_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVOD_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Read ppdut5_mv value",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Read and print ppdut5_mv control value to logs."
              ],
              "exec_args": [
                "command:ppdut5_mv"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Read ppchg5_mv value",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Read and print ppchg5_mv control value to logs."
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "command:ppchg5_mv"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Charger connected",
              "exec_name": "servo_control_min_double_value",
              "docs": [
                "Verify that power for servo is provided.",
                "Applicable when we use type-c servo and RPM."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Has ppchg5_mv control",
                  "exec_name": "servod_has",
                  "docs": [
                    "Read and print ppchg5_mv control value to logs."
                  ],
                  "exec_args": [
                    "command:ppchg5_mv"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Read ppdut5_mv value",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Read and print ppdut5_mv control value to logs."
                  ],
                  "exec_args": [
                    "command:ppdut5_mv"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Read ppchg5_mv value",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Read and print ppchg5_mv control value to logs."
                  ],
                  "recoveries": [
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:ppchg5_mv"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Set state:SERVOD_ISSUE",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:SERVOD_ISSUE"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Power on DUT by RPM",
                  "exec_name": "rpm_power_on",
                  "docs": [
                    "Power ON the RPM outlet."
                  ],
                  "conditions": [
                    {
                      "name": "has_rpm_info",
                      "exec_name": "has_rpm_info",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "control:ppchg5_mv",
                "min_value:4000"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "recoveries": [
            {
              "name": "Toggle PD once and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                "TODO(otabek): Add dependency for servo initialize."
              ],
              "dependencies": [
                {
                  "name": "Toggle PD once",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once."
                  ],
                  "exec_args": [
                    "toggle_times:1",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD (5 times) and stop",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Toggle PD 5 times",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times."
                  ],
                  "exec_args": [
                    "toggle_times:5",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle DTS Mode and Servo Role",
              "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
              "docs": [
                "Toggle dts mode and servo role to try and recover CCD."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "command:servo_pd_role",
            "expected_string_value:src"
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Verify CCD GSC connection detected",
          "exec_name": "sample_pass",
          "docs": [
            "Run basic cr50/ti50 detections checks."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Servo main device is CCD",
              "exec_name": "servo_main_device_is_ccd",
              "docs": [
                "Verify that main device is CCD"
              ],
              "dependencies": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:SBU_LOW_VOLTAGE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SBU_LOW_VOLTAGE"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Servo SBU voltage is good",
              "exec_name": "servo_cr50_low_sbu",
              "docs": [
                "Verify that SBU voltage is in expected range (2500mv)."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Servod detect voltage issue",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify that servod is detected required children."
                  ],
                  "exec_args": [
                    "command:dut_sbu_voltage_float_fault",
                    "expected_string_value:on"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot servo device",
                  "exec_name": "servo_reboot",
                  "docs": [
                    "Reboot servo device via servodtool"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "dependencies": [
                        {
                          "name": "Set state:NO_SSH",
                          "exec_name": "servo_set_servo_state",
                          "exec_args": [
                            "state:NO_SSH"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "reboot_timeout:30",
                    "wait_timeout:30"
                  ],
                  "timeout": "1m10s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Toggle DTS Mode and Servo Role",
                  "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
                  "docs": [
                    "Toggle dts mode and servo role to try and recover CCD."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reflash Cr50 fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is reflash Cr50 was done more 24 hours ago",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                        "Re-flashing limited to once per once per day to avoid over-flashing the device."
                      ],
                      "conditions": [
                        {
                          "name": "Is reflash Cr50 was done within 24 hours",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                          ],
                          "exec_args": [
                            "metrics_kind:cr50_flash",
                            "time_frame_hours:24"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reflash Cr50 fw on DUT",
                      "exec_name": "cros_reflash_cr50_fw",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "Reboot after the fw flash is successful."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "flash_timeout:120",
                        "wait_timeout:30"
                      ],
                      "timeout": "2m30s",
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset GSC from DUT and stop servod",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset GSC from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reset GSC on DUT",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "The command recommended by cr50 team http://b/241161724#comment24.",
                        "Reboot after the fw flash is successful."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:trunks_send --raw 80010000000c200000000013"
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Create request to reboot labstation",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Try to create reboot flag file request.",
                    "The action always fails as Servo will be fixed after reboot."
                  ],
                  "conditions": [
                    {
                      "name": "Is labstation",
                      "exec_name": "servo_host_is_labstation",
                      "docs": [
                        "Condition to check if the servohost is a labstation."
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_create_reboot_request",
                      "exec_name": "cros_create_reboot_request",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Set state:CR50_NOT_ENUMERATED",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:CR50_NOT_ENUMERATED"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Servo Cr50 enumerated",
              "exec_name": "sample_fail",
              "docs": [
                "Verify that Cr50/GSC is enumerated or not."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Servod detect voltage issue",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify that servod is detected required children."
                  ],
                  "exec_args": [
                    "command:dut_sbu_voltage_float_fault",
                    "expected_string_value:on"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot servo device",
                  "exec_name": "servo_reboot",
                  "docs": [
                    "Reboot servo device via servodtool"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "dependencies": [
                        {
                          "name": "Set state:NO_SSH",
                          "exec_name": "servo_set_servo_state",
                          "exec_args": [
                            "state:NO_SSH"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "reboot_timeout:30",
                    "wait_timeout:30"
                  ],
                  "timeout": "1m10s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Toggle DTS Mode and Servo Role",
                  "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
                  "docs": [
                    "Toggle dts mode and servo role to try and recover CCD."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reflash Cr50 fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is reflash Cr50 was done more 24 hours ago",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                        "Re-flashing limited to once per once per day to avoid over-flashing the device."
                      ],
                      "conditions": [
                        {
                          "name": "Is reflash Cr50 was done within 24 hours",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                          ],
                          "exec_args": [
                            "metrics_kind:cr50_flash",
                            "time_frame_hours:24"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reflash Cr50 fw on DUT",
                      "exec_name": "cros_reflash_cr50_fw",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "Reboot after the fw flash is successful."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "flash_timeout:120",
                        "wait_timeout:30"
                      ],
                      "timeout": "2m30s",
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Reset GSC from DUT and stop servod",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset GSC from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reset GSC on DUT",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "The command recommended by cr50 team http://b/241161724#comment24.",
                        "Reboot after the fw flash is successful."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:trunks_send --raw 80010000000c200000000013"
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Servod detect all children components",
          "exec_name": "servo_check_servod_control",
          "docs": [
            "Check if servod detected all required children components."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:SERVOD_DUT_CONTROLLER_MISSING",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:SERVOD_DUT_CONTROLLER_MISSING"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Toggle DTS Mode and Servo Role",
              "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
              "docs": [
                "Toggle dts mode and servo role to try and recover CCD."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD once and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                "TODO(otabek): Add dependency for servo initialize."
              ],
              "dependencies": [
                {
                  "name": "Toggle PD once",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once."
                  ],
                  "exec_args": [
                    "toggle_times:1",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD (5 times) and stop",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Toggle PD 5 times",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times."
                  ],
                  "exec_args": [
                    "toggle_times:5",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Cold reset the DUT by servod and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT by resetting power state command on servod."
              ],
              "dependencies": [
                {
                  "name": "Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reflash Cr50 fw and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is reflash Cr50 was done more 24 hours ago",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                    "Re-flashing limited to once per once per day to avoid over-flashing the device."
                  ],
                  "conditions": [
                    {
                      "name": "Is reflash Cr50 was done within 24 hours",
                      "exec_name": "metrics_found_at_last_time",
                      "docs": [
                        "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                      ],
                      "exec_args": [
                        "metrics_kind:cr50_flash",
                        "time_frame_hours:24"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reflash Cr50 fw on DUT",
                  "exec_name": "cros_reflash_cr50_fw",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "Reboot after the fw flash is successful."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "flash_timeout:120",
                    "wait_timeout:30"
                  ],
                  "timeout": "2m30s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reset GSC from DUT and stop servod",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset GSC from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reset GSC on DUT",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "The command recommended by cr50 team http://b/241161724#comment24.",
                    "Reboot after the fw flash is successful."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:trunks_send --raw 80010000000c200000000013"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Create request to reboot labstation",
              "exec_name": "sample_fail",
              "docs": [
                "Try to create reboot flag file request.",
                "The action always fails as Servo will be fixed after reboot."
              ],
              "conditions": [
                {
                  "name": "Is labstation",
                  "exec_name": "servo_host_is_labstation",
                  "docs": [
                    "Condition to check if the servohost is a labstation."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_create_reboot_request",
                  "exec_name": "cros_create_reboot_request",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "command:dut_controller_missing_fault",
            "expected_string_value:off"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Servo topology",
          "exec_name": "sample_pass",
          "docs": [
            "Make sure the servo has the required number of servo components."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Servo topology min one child",
              "exec_name": "servo_topology_update",
              "docs": [
                "Verify that setup has at least one servo child.",
                "Usually that is ccd_gsc|cr50 or servo_micro or c2d2."
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "recoveries": [
                    {
                      "name": "Wait for labstation to load",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                        "Labstation is expected to complete the reboot within 2 minutes."
                      ],
                      "timeout": "2m0s",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Set state:TOPOLOGY_ISSUE",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:TOPOLOGY_ISSUE"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot servo device",
                  "exec_name": "servo_reboot",
                  "docs": [
                    "Reboot servo device via servodtool"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "dependencies": [
                        {
                          "name": "Set state:NO_SSH",
                          "exec_name": "servo_set_servo_state",
                          "exec_args": [
                            "state:NO_SSH"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "reboot_timeout:30",
                    "wait_timeout:30"
                  ],
                  "timeout": "1m10s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Toggle DTS Mode and Servo Role",
                  "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
                  "docs": [
                    "Toggle dts mode and servo role to try and recover CCD."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset GSC from DUT and stop servod",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset GSC from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reset GSC on DUT",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "The command recommended by cr50 team http://b/241161724#comment24.",
                        "Reboot after the fw flash is successful."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:trunks_send --raw 80010000000c200000000013"
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset GSC from DUT and stop servod",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset GSC from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reset GSC on DUT",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "The command recommended by cr50 team http://b/241161724#comment24.",
                        "Reboot after the fw flash is successful."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:trunks_send --raw 80010000000c200000000013"
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Create request to reboot labstation",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Try to create reboot flag file request.",
                    "The action always fails as Servo will be fixed after reboot."
                  ],
                  "conditions": [
                    {
                      "name": "Is labstation",
                      "exec_name": "servo_host_is_labstation",
                      "docs": [
                        "Condition to check if the servohost is a labstation."
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_create_reboot_request",
                      "exec_name": "cros_create_reboot_request",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "min_child:1",
                "persist_topology:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Servo topology min two children",
              "exec_name": "servo_topology_update",
              "docs": [
                "Verify that setup has two servo children.",
                "Usually that is ccd_gsc|cr50 with servo_micro or c2d2."
              ],
              "conditions": [
                {
                  "name": "is_dual_setup",
                  "exec_name": "is_dual_setup_configured",
                  "docs": [
                    "Check whether the servo device has dual setup. This check only applies to the devices that have the dual setup configured on them."
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "recoveries": [
                    {
                      "name": "Wait for labstation to load",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                        "Labstation is expected to complete the reboot within 2 minutes."
                      ],
                      "timeout": "2m0s",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Set state:TOPOLOGY_ISSUE",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:TOPOLOGY_ISSUE"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot servo device",
                  "exec_name": "servo_reboot",
                  "docs": [
                    "Reboot servo device via servodtool"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "dependencies": [
                        {
                          "name": "Set state:NO_SSH",
                          "exec_name": "servo_set_servo_state",
                          "exec_args": [
                            "state:NO_SSH"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "reboot_timeout:30",
                    "wait_timeout:30"
                  ],
                  "timeout": "1m10s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Toggle DTS Mode and Servo Role",
                  "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
                  "docs": [
                    "Toggle dts mode and servo role to try and recover CCD."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reflash Cr50 fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is reflash Cr50 was done more 24 hours ago",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                        "Re-flashing limited to once per once per day to avoid over-flashing the device."
                      ],
                      "conditions": [
                        {
                          "name": "Is reflash Cr50 was done within 24 hours",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                          ],
                          "exec_args": [
                            "metrics_kind:cr50_flash",
                            "time_frame_hours:24"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reflash Cr50 fw on DUT",
                      "exec_name": "cros_reflash_cr50_fw",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "Reboot after the fw flash is successful."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "flash_timeout:120",
                        "wait_timeout:30"
                      ],
                      "timeout": "2m30s",
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset GSC from DUT and stop servod",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset GSC from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reset GSC on DUT",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "The command recommended by cr50 team http://b/241161724#comment24.",
                        "Reboot after the fw flash is successful."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:trunks_send --raw 80010000000c200000000013"
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Create request to reboot labstation",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Try to create reboot flag file request.",
                    "The action always fails as Servo will be fixed after reboot."
                  ],
                  "conditions": [
                    {
                      "name": "Is labstation",
                      "exec_name": "servo_host_is_labstation",
                      "docs": [
                        "Condition to check if the servohost is a labstation."
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_create_reboot_request",
                      "exec_name": "cros_create_reboot_request",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "min_child:2",
                "persist_topology:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Update USB drive info",
          "exec_name": "servo_update_usbkey_history",
          "docs": [
            "Try to update the information of the servo usbkey in inventory and karte."
          ],
          "dependencies": [
            {
              "name": "Verify that USB drive is detectable",
              "exec_name": "servo_usbkey_is_detected",
              "docs": [
                "Will detect the path to USB Drive on servo-host.",
                "Verify that usb-key is responsive"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "recoveries": [
                    {
                      "name": "Wait for labstation to load",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Sometimes we can try to connect when labstation is the middle of reboot, so we wait.",
                        "Labstation is expected to complete the reboot within 2 minutes."
                      ],
                      "timeout": "2m0s",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Recover servo with Power-cycle by smart-hub",
                  "exec_name": "servo_power_cycle_root_servo",
                  "docs": [
                    "Try to power-cycle the servo via smart usbhub to recover it."
                  ],
                  "exec_args": [
                    "reset_timeout:60",
                    "wait_timeout:20",
                    "reset_authorized:false"
                  ],
                  "timeout": "2m0s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "file_check:true"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Initialize DUT part for servo",
          "exec_name": "init_dut_for_servo",
          "docs": [
            "Call servod to init dependencies for DUT"
          ],
          "dependencies": [
            {
              "name": "Set state:BROKEN",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:BROKEN"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Set main servo device",
              "exec_name": "servod_set_main_device",
              "docs": [
                "Set main device is it not set before.",
                "Applicable if we have more than one child servo device."
              ],
              "conditions": [
                {
                  "name": "Servod knows about active_dut_controller control",
                  "exec_name": "servo_check_servod_control",
                  "exec_args": [
                    "command:active_dut_controller"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Open gsc testlab",
              "exec_name": "servo_set",
              "docs": [
                "If servo uses c2d2/cr50/gsc to control the DUT, open testlab will allowed to work (cr50_reboot, cold_reset, warm_reset)"
              ],
              "conditions": [
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Expected CCD factory settings",
                  "exec_name": "servo_ccd_expect_have_factory_reset",
                  "docs": [
                    "This devices should use testlab to open CCD and reset capabilities to factory settings."
                  ],
                  "dependencies": [
                    {
                      "name": "Is a Chromebook",
                      "exec_name": "dut_check_board",
                      "docs": [
                        "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                      ],
                      "exec_args": [
                        "string_values:aurora,reven",
                        "invert_result:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "command:cr50_testlab",
                "string_value:open"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset CCD to factory settings",
              "exec_name": "servo_set",
              "docs": [
                "Reset CCD to the factory settings."
              ],
              "conditions": [
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Expected CCD factory settings",
                  "exec_name": "servo_ccd_expect_have_factory_reset",
                  "docs": [
                    "This devices should use testlab to open CCD and reset capabilities to factory settings."
                  ],
                  "dependencies": [
                    {
                      "name": "Is a Chromebook",
                      "exec_name": "dut_check_board",
                      "docs": [
                        "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                      ],
                      "exec_args": [
                        "string_values:aurora,reven",
                        "invert_result:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "command:cr50_uart_cmd",
                "string_value:ccd reset factory"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Toggle DTS Mode and Servo Role",
              "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
              "docs": [
                "Toggle dts mode and servo role to try and recover CCD."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD once and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                "TODO(otabek): Add dependency for servo initialize."
              ],
              "dependencies": [
                {
                  "name": "Toggle PD once",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once."
                  ],
                  "exec_args": [
                    "toggle_times:1",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD (5 times) and stop",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Toggle PD 5 times",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times."
                  ],
                  "exec_args": [
                    "toggle_times:5",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Cold reset the DUT by servod and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT by resetting power state command on servod."
              ],
              "dependencies": [
                {
                  "name": "Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reflash Cr50 fw and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is reflash Cr50 was done more 24 hours ago",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                    "Re-flashing limited to once per once per day to avoid over-flashing the device."
                  ],
                  "conditions": [
                    {
                      "name": "Is reflash Cr50 was done within 24 hours",
                      "exec_name": "metrics_found_at_last_time",
                      "docs": [
                        "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                      ],
                      "exec_args": [
                        "metrics_kind:cr50_flash",
                        "time_frame_hours:24"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reflash Cr50 fw on DUT",
                  "exec_name": "cros_reflash_cr50_fw",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "Reboot after the fw flash is successful."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "flash_timeout:120",
                    "wait_timeout:30"
                  ],
                  "timeout": "2m30s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset GSC from DUT and stop servod",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset GSC from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reset GSC on DUT",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "The command recommended by cr50 team http://b/241161724#comment24.",
                    "Reboot after the fw flash is successful."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:trunks_send --raw 80010000000c200000000013"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            }
          ],
          "timeout": "2m0s",
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Verify cr50 console",
          "exec_name": "servod_can_read_all",
          "docs": [
            "Verify that Cr50 console is responsive."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Expected CCD factory settings",
              "exec_name": "servo_ccd_expect_have_factory_reset",
              "docs": [
                "This devices should use testlab to open CCD and reset capabilities to factory settings."
              ],
              "dependencies": [
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Initialize DUT part for servo",
              "exec_name": "init_dut_for_servo",
              "docs": [
                "Call servod to init dependencies for DUT"
              ],
              "dependencies": [
                {
                  "name": "Set state:BROKEN",
                  "exec_name": "servo_set_servo_state",
                  "exec_args": [
                    "state:BROKEN"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Set main servo device",
                  "exec_name": "servod_set_main_device",
                  "docs": [
                    "Set main device is it not set before.",
                    "Applicable if we have more than one child servo device."
                  ],
                  "conditions": [
                    {
                      "name": "Servod knows about active_dut_controller control",
                      "exec_name": "servo_check_servod_control",
                      "exec_args": [
                        "command:active_dut_controller"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "recoveries": [
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Toggle PD (5 times) and stop",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                      ],
                      "conditions": [
                        {
                          "name": "Is servo_v4(p1) used with type-c connector",
                          "exec_name": "servo_check_servod_control",
                          "docs": [
                            "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                          ],
                          "exec_args": [
                            "command:root.dut_connection_type",
                            "expected_string_value:type-c"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "dependencies": [
                        {
                          "name": "Toggle PD 5 times",
                          "exec_name": "servo_servod_toggle_pd_role",
                          "docs": [
                            "Toggle the servod command servo_pd_role 5 times."
                          ],
                          "exec_args": [
                            "toggle_times:5",
                            "wait_in_retry:5",
                            "wait_before_retry:1"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Toggle CC line and stop",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Try to repair servod by toggling cc and stop servod after."
                      ],
                      "dependencies": [
                        {
                          "name": "Toggle CC lines",
                          "exec_name": "servo_servod_cc_toggle",
                          "docs": [
                            "Toggle cc line connected between servo and DUT to wake up the connection."
                          ],
                          "conditions": [
                            {
                              "name": "is_servo_type_ccd",
                              "exec_name": "is_servo_type_ccd",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "cc_off_timeout:10",
                            "cc_on_timeout:30"
                          ],
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Stop servod",
                          "exec_name": "servo_host_servod_stop",
                          "docs": [
                            "Stop the servod daemon.",
                            "Allowed to fail as can be run when servod is not running."
                          ],
                          "dependencies": [
                            {
                              "name": "Save UART capture",
                              "exec_name": "servod_save_uart_capture",
                              "dependencies": [
                                {
                                  "name": "Stop UART capture",
                                  "exec_name": "servod_stop_uart_capture",
                                  "allow_fail_after_recovery": true,
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Reboot by EC console and stop",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Try to reboot DUT's EC by servod UART console and stop servod after that."
                      ],
                      "dependencies": [
                        {
                          "name": "Reboot by DUT's EC UART",
                          "exec_name": "servo_set_ec_uart_cmd",
                          "docs": [
                            "Try to reboot EC on DUT using servod command.",
                            "It reboots just the embedded controllers on the DUT."
                          ],
                          "exec_args": [
                            "wait_timeout:1",
                            "value:reboot"
                          ],
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Stop servod",
                          "exec_name": "servo_host_servod_stop",
                          "docs": [
                            "Stop the servod daemon.",
                            "Allowed to fail as can be run when servod is not running."
                          ],
                          "dependencies": [
                            {
                              "name": "Save UART capture",
                              "exec_name": "servod_save_uart_capture",
                              "dependencies": [
                                {
                                  "name": "Stop UART capture",
                                  "exec_name": "servod_stop_uart_capture",
                                  "allow_fail_after_recovery": true,
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Cold reset the DUT by servod and stop",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "dependencies": [
                        {
                          "name": "Cold reset by servod",
                          "exec_name": "servo_power_state_reset",
                          "docs": [
                            "Try to reboot DUT by resetting power state command on servod."
                          ],
                          "exec_args": [
                            "wait_timeout:1"
                          ],
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Stop servod",
                          "exec_name": "servo_host_servod_stop",
                          "docs": [
                            "Stop the servod daemon.",
                            "Allowed to fail as can be run when servod is not running."
                          ],
                          "dependencies": [
                            {
                              "name": "Save UART capture",
                              "exec_name": "servod_save_uart_capture",
                              "dependencies": [
                                {
                                  "name": "Stop UART capture",
                                  "exec_name": "servod_stop_uart_capture",
                                  "allow_fail_after_recovery": true,
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Reset EC from DUT and stop",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "dependencies": [
                        {
                          "name": "cros_reset_ec",
                          "exec_name": "cros_reset_ec",
                          "docs": [
                            "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                          ],
                          "dependencies": [
                            {
                              "name": "DUT is SSHable",
                              "exec_name": "cros_ssh_dut",
                              "docs": [
                                "verify if DUT is SSH-able"
                              ],
                              "timeout": "15s",
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "exec_args": [
                            "wait_timeout:30"
                          ],
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Stop servod",
                          "exec_name": "servo_host_servod_stop",
                          "docs": [
                            "Stop the servod daemon.",
                            "Allowed to fail as can be run when servod is not running."
                          ],
                          "dependencies": [
                            {
                              "name": "Save UART capture",
                              "exec_name": "servod_save_uart_capture",
                              "dependencies": [
                                {
                                  "name": "Stop UART capture",
                                  "exec_name": "servod_stop_uart_capture",
                                  "allow_fail_after_recovery": true,
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Open gsc testlab",
                  "exec_name": "servo_set",
                  "docs": [
                    "If servo uses c2d2/cr50/gsc to control the DUT, open testlab will allowed to work (cr50_reboot, cold_reset, warm_reset)"
                  ],
                  "conditions": [
                    {
                      "name": "Is a Chromebook",
                      "exec_name": "dut_check_board",
                      "docs": [
                        "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                      ],
                      "exec_args": [
                        "string_values:aurora,reven",
                        "invert_result:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Expected CCD factory settings",
                      "exec_name": "servo_ccd_expect_have_factory_reset",
                      "docs": [
                        "This devices should use testlab to open CCD and reset capabilities to factory settings."
                      ],
                      "dependencies": [
                        {
                          "name": "Is a Chromebook",
                          "exec_name": "dut_check_board",
                          "docs": [
                            "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                          ],
                          "exec_args": [
                            "string_values:aurora,reven",
                            "invert_result:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "command:cr50_testlab",
                    "string_value:open"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset CCD to factory settings",
                  "exec_name": "servo_set",
                  "docs": [
                    "Reset CCD to the factory settings."
                  ],
                  "conditions": [
                    {
                      "name": "Is a Chromebook",
                      "exec_name": "dut_check_board",
                      "docs": [
                        "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                      ],
                      "exec_args": [
                        "string_values:aurora,reven",
                        "invert_result:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Expected CCD factory settings",
                      "exec_name": "servo_ccd_expect_have_factory_reset",
                      "docs": [
                        "This devices should use testlab to open CCD and reset capabilities to factory settings."
                      ],
                      "dependencies": [
                        {
                          "name": "Is a Chromebook",
                          "exec_name": "dut_check_board",
                          "docs": [
                            "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                          ],
                          "exec_args": [
                            "string_values:aurora,reven",
                            "invert_result:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "command:cr50_uart_cmd",
                    "string_value:ccd reset factory"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot servo device",
                  "exec_name": "servo_reboot",
                  "docs": [
                    "Reboot servo device via servodtool"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "dependencies": [
                        {
                          "name": "Set state:NO_SSH",
                          "exec_name": "servo_set_servo_state",
                          "exec_args": [
                            "state:NO_SSH"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "reboot_timeout:30",
                    "wait_timeout:30"
                  ],
                  "timeout": "1m10s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Toggle DTS Mode and Servo Role",
                  "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
                  "docs": [
                    "Toggle dts mode and servo role to try and recover CCD."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reflash Cr50 fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is reflash Cr50 was done more 24 hours ago",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                        "Re-flashing limited to once per once per day to avoid over-flashing the device."
                      ],
                      "conditions": [
                        {
                          "name": "Is reflash Cr50 was done within 24 hours",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                          ],
                          "exec_args": [
                            "metrics_kind:cr50_flash",
                            "time_frame_hours:24"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reflash Cr50 fw on DUT",
                      "exec_name": "cros_reflash_cr50_fw",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "Reboot after the fw flash is successful."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "flash_timeout:120",
                        "wait_timeout:30"
                      ],
                      "timeout": "2m30s",
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset GSC from DUT and stop servod",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset GSC from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reset GSC on DUT",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "The command recommended by cr50 team http://b/241161724#comment24.",
                        "Reboot after the fw flash is successful."
                      ],
                      "conditions": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:trunks_send --raw 80010000000c200000000013"
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                }
              ],
              "timeout": "2m0s",
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Set state:CR50_CONSOLE_MISSING",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:CR50_CONSOLE_MISSING"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Toggle DTS Mode and Servo Role",
              "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
              "docs": [
                "Toggle dts mode and servo role to try and recover CCD."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD once and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                "TODO(otabek): Add dependency for servo initialize."
              ],
              "dependencies": [
                {
                  "name": "Toggle PD once",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once."
                  ],
                  "exec_args": [
                    "toggle_times:1",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle PD (5 times) and stop",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
              ],
              "conditions": [
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Toggle PD 5 times",
                  "exec_name": "servo_servod_toggle_pd_role",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times."
                  ],
                  "exec_args": [
                    "toggle_times:5",
                    "wait_in_retry:5",
                    "wait_before_retry:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot by EC console and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT's EC by servod UART console and stop servod after that."
              ],
              "dependencies": [
                {
                  "name": "Reboot by DUT's EC UART",
                  "exec_name": "servo_set_ec_uart_cmd",
                  "docs": [
                    "Try to reboot EC on DUT using servod command.",
                    "It reboots just the embedded controllers on the DUT."
                  ],
                  "exec_args": [
                    "wait_timeout:1",
                    "value:reboot"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Cold reset the DUT by servod and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reboot DUT by resetting power state command on servod."
              ],
              "dependencies": [
                {
                  "name": "Cold reset by servod",
                  "exec_name": "servo_power_state_reset",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "exec_args": [
                    "wait_timeout:1"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reflash Cr50 fw and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is reflash Cr50 was done more 24 hours ago",
                  "exec_name": "sample_fail",
                  "docs": [
                    "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                    "Re-flashing limited to once per once per day to avoid over-flashing the device."
                  ],
                  "conditions": [
                    {
                      "name": "Is reflash Cr50 was done within 24 hours",
                      "exec_name": "metrics_found_at_last_time",
                      "docs": [
                        "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                      ],
                      "exec_args": [
                        "metrics_kind:cr50_flash",
                        "time_frame_hours:24"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reflash Cr50 fw on DUT",
                  "exec_name": "cros_reflash_cr50_fw",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "Reboot after the fw flash is successful."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "flash_timeout:120",
                    "wait_timeout:30"
                  ],
                  "timeout": "2m30s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Reset EC from DUT and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "cros_reset_ec",
                  "exec_name": "cros_reset_ec",
                  "docs": [
                    "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                  ],
                  "dependencies": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "wait_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset GSC from DUT and stop servod",
              "exec_name": "sample_pass",
              "docs": [
                "Try to reset GSC from DUT side to wake it up."
              ],
              "conditions": [
                {
                  "name": "DUT is SSHable",
                  "exec_name": "cros_ssh_dut",
                  "docs": [
                    "verify if DUT is SSH-able"
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is servo_v4(p1) used with type-c connector",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                  ],
                  "exec_args": [
                    "command:root.dut_connection_type",
                    "expected_string_value:type-c"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Reset GSC on DUT",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                    "The command recommended by cr50 team http://b/241161724#comment24.",
                    "Reboot after the fw flash is successful."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:trunks_send --raw 80010000000c200000000013"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RUN_ONCE"
            }
          ],
          "exec_args": [
            "commands:cr50_ccd_level,cr50_testlab,cr50_ccd_state_flags",
            "any_one:true"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Cr50 testlab is enabled",
          "exec_name": "servo_check_servod_control",
          "docs": [
            "Verify that testlab flag is enabled in GSC chip.",
            "Expect that cr50/GSC will required to set cr50 testlab is enabled."
          ],
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Is not in cr50 pools",
              "exec_name": "dut_not_in_pool_regex",
              "docs": [
                "Verify that DUT is not in a cr-50 pools."
              ],
              "exec_args": [
                "regex:(?i)^faft-cr50"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Expected CCD factory settings",
              "exec_name": "servo_ccd_expect_have_factory_reset",
              "docs": [
                "This devices should use testlab to open CCD and reset capabilities to factory settings."
              ],
              "dependencies": [
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:CCD_TESTLAB_ISSUE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:CCD_TESTLAB_ISSUE"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "recoveries": [
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reboot servo device",
              "exec_name": "servo_reboot",
              "docs": [
                "Reboot servo device via servodtool"
              ],
              "dependencies": [
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "dependencies": [
                    {
                      "name": "Set state:NO_SSH",
                      "exec_name": "servo_set_servo_state",
                      "exec_args": [
                        "state:NO_SSH"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "reboot_timeout:30",
                "wait_timeout:30"
              ],
              "timeout": "1m10s",
              "run_control": "RUN_ONCE"
            },
            {
              "name": "Try fake disconnect and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by mimic reconnection of servo."
              ],
              "conditions": [
                {
                  "name": "is_servo_type_ccd",
                  "exec_name": "is_servo_type_ccd",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Try fake disconnect",
                  "exec_name": "servo_fake_disconnect_dut",
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "delay_in_ms:100",
                    "timeout_in_ms:2000"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Toggle CC line and stop",
              "exec_name": "sample_pass",
              "docs": [
                "Try to repair servod by toggling cc and stop servod after."
              ],
              "dependencies": [
                {
                  "name": "Toggle CC lines",
                  "exec_name": "servo_servod_cc_toggle",
                  "docs": [
                    "Toggle cc line connected between servo and DUT to wake up the connection."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "cc_off_timeout:10",
                    "cc_on_timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "exec_args": [
            "command:cr50_testlab",
            "expected_string_value:on"
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Verify EC",
          "exec_name": "sample_pass",
          "conditions": [
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "DUT has CrOS EC",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "Verify if DUT has ChromeOS firmware for EC"
              ],
              "exec_args": [
                "command:supports_cros_ec_communication",
                "expected_string_value:yes"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "dependencies": [
            {
              "name": "Set state:EC_BROKEN",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:EC_BROKEN"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Verify EC console",
              "exec_name": "servod_can_read_all",
              "conditions": [
                {
                  "name": "DUT has CrOS EC",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify if DUT has ChromeOS firmware for EC"
                  ],
                  "exec_args": [
                    "command:supports_cros_ec_communication",
                    "expected_string_value:yes"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "exec_args": [
                "commands:ec_system_powerstate,ec_board",
                "any_one:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Set state:BAD_RIBBON_CABLE",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:BAD_RIBBON_CABLE"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Verify power button signal",
              "exec_name": "servo_check_servod_control",
              "docs": [
                "verify that pwr_button signal is present.",
                "If signal is not present then probably we have issue with servo connection."
              ],
              "conditions": [
                {
                  "name": "pwr_button_supported_models",
                  "exec_name": "dut_check_model",
                  "docs": [
                    "power button check is not applicable for these models"
                  ],
                  "exec_args": [
                    "string_values:arkham,gale,mistral,storm,whirlwind",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot servo device",
                  "exec_name": "servo_reboot",
                  "docs": [
                    "Reboot servo device via servodtool"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "dependencies": [
                        {
                          "name": "Set state:NO_SSH",
                          "exec_name": "servo_set_servo_state",
                          "exec_args": [
                            "state:NO_SSH"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "reboot_timeout:30",
                    "wait_timeout:30"
                  ],
                  "timeout": "1m10s",
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Toggle DTS Mode and Servo Role",
                  "exec_name": "servo_servod_dts_and_servo_role_toggle_exec",
                  "docs": [
                    "Toggle dts mode and servo role to try and recover CCD."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD once and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Toggle the servod command servo_pd_role only once. And then stop the servod afterwards.",
                    "TODO(otabek): Add dependency for servo initialize."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD once",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role only once."
                      ],
                      "exec_args": [
                        "toggle_times:1",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle PD (5 times) and stop",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Toggle the servod command servo_pd_role 5 times. And then stop the servod afterwards."
                  ],
                  "conditions": [
                    {
                      "name": "Is servo_v4(p1) used with type-c connector",
                      "exec_name": "servo_check_servod_control",
                      "docs": [
                        "Verify whether servo_V4(p1) device is connect to DUT using Type-C connection."
                      ],
                      "exec_args": [
                        "command:root.dut_connection_type",
                        "expected_string_value:type-c"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle PD 5 times",
                      "exec_name": "servo_servod_toggle_pd_role",
                      "docs": [
                        "Toggle the servod command servo_pd_role 5 times."
                      ],
                      "exec_args": [
                        "toggle_times:5",
                        "wait_in_retry:5",
                        "wait_before_retry:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Try fake disconnect and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by mimic reconnection of servo."
                  ],
                  "conditions": [
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Try fake disconnect",
                      "exec_name": "servo_fake_disconnect_dut",
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "delay_in_ms:100",
                        "timeout_in_ms:2000"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Toggle CC line and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to repair servod by toggling cc and stop servod after."
                  ],
                  "dependencies": [
                    {
                      "name": "Toggle CC lines",
                      "exec_name": "servo_servod_cc_toggle",
                      "docs": [
                        "Toggle cc line connected between servo and DUT to wake up the connection."
                      ],
                      "conditions": [
                        {
                          "name": "is_servo_type_ccd",
                          "exec_name": "is_servo_type_ccd",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "cc_off_timeout:10",
                        "cc_on_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Force reflash servo_micro fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to update servo micro firmware"
                  ],
                  "conditions": [
                    {
                      "name": "Is labstation",
                      "exec_name": "servo_host_is_labstation",
                      "docs": [
                        "Condition to check if the servohost is a labstation."
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "is_servo_micro",
                      "exec_name": "is_servo_micro",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is ok to force update servo_micro firmware",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on servo micro.",
                        "Re-flashing limited to once per once per 2 weeks to avoid over-flashing the servo device."
                      ],
                      "conditions": [
                        {
                          "name": "Last servo_micro fw updated within 2 weeks",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that servo micro fw update action has occurred in the past 2 weeks. (336 hours)"
                          ],
                          "exec_args": [
                            "metrics_kind:servo_firmware_update_servo_micro",
                            "time_frame_hours:336"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Force update servo_micro firmware",
                      "exec_name": "servo_update_servo_firmware",
                      "docs": [
                        "Try to update servo micro firmware"
                      ],
                      "conditions": [
                        {
                          "name": "Is labstation",
                          "exec_name": "servo_host_is_labstation",
                          "docs": [
                            "Condition to check if the servohost is a labstation."
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "is_servo_micro",
                          "exec_name": "is_servo_micro",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Is ok to force update servo_micro firmware",
                          "exec_name": "sample_fail",
                          "docs": [
                            "Verify that it is time when we can try to re-flash fw on servo micro.",
                            "Re-flashing limited to once per once per 2 weeks to avoid over-flashing the servo device."
                          ],
                          "conditions": [
                            {
                              "name": "Last servo_micro fw updated within 2 weeks",
                              "exec_name": "metrics_found_at_last_time",
                              "docs": [
                                "Confirm that servo micro fw update action has occurred in the past 2 weeks. (336 hours)"
                              ],
                              "exec_args": [
                                "metrics_kind:servo_firmware_update_servo_micro",
                                "time_frame_hours:336"
                              ],
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "force_update:true",
                        "ignore_version:true",
                        "servo_board:servo_micro"
                      ],
                      "timeout": "3m0s",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Reflash Cr50 fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is reflash Cr50 was done more 24 hours ago",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                        "Re-flashing limited to once per once per day to avoid over-flashing the device."
                      ],
                      "conditions": [
                        {
                          "name": "Is reflash Cr50 was done within 24 hours",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                          ],
                          "exec_args": [
                            "metrics_kind:cr50_flash",
                            "time_frame_hours:24"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reflash Cr50 fw on DUT",
                      "exec_name": "cros_reflash_cr50_fw",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "Reboot after the fw flash is successful."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "flash_timeout:120",
                        "wait_timeout:30"
                      ],
                      "timeout": "2m30s",
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                }
              ],
              "exec_args": [
                "command:pwr_button",
                "expected_string_value:release"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Set state:LID_OPEN_FAILED",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:LID_OPEN_FAILED"
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Is lid open",
              "exec_name": "servod_lidopen",
              "docs": [
                "Verify lid of the is open",
                "Allowed to fail as check if ont effect the servo functionality."
              ],
              "recoveries": [
                {
                  "name": "Stop servod",
                  "exec_name": "servo_host_servod_stop",
                  "docs": [
                    "Stop the servod daemon.",
                    "Allowed to fail as can be run when servod is not running."
                  ],
                  "dependencies": [
                    {
                      "name": "Save UART capture",
                      "exec_name": "servod_save_uart_capture",
                      "dependencies": [
                        {
                          "name": "Stop UART capture",
                          "exec_name": "servod_stop_uart_capture",
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reboot by EC console and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT's EC by servod UART console and stop servod after that."
                  ],
                  "dependencies": [
                    {
                      "name": "Reboot by DUT's EC UART",
                      "exec_name": "servo_set_ec_uart_cmd",
                      "docs": [
                        "Try to reboot EC on DUT using servod command.",
                        "It reboots just the embedded controllers on the DUT."
                      ],
                      "exec_args": [
                        "wait_timeout:1",
                        "value:reboot"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset the DUT by servod and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reboot DUT by resetting power state command on servod."
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset by servod",
                      "exec_name": "servo_power_state_reset",
                      "docs": [
                        "Try to reboot DUT by resetting power state command on servod."
                      ],
                      "exec_args": [
                        "wait_timeout:1"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Reflash Cr50 fw and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is reflash Cr50 was done more 24 hours ago",
                      "exec_name": "sample_fail",
                      "docs": [
                        "Verify that it is time when we can try to re-flash fw on cr50 (H1).",
                        "Re-flashing limited to once per once per day to avoid over-flashing the device."
                      ],
                      "conditions": [
                        {
                          "name": "Is reflash Cr50 was done within 24 hours",
                          "exec_name": "metrics_found_at_last_time",
                          "docs": [
                            "Confirm that no cr50 reflash action has occurred in the past 24 hours."
                          ],
                          "exec_args": [
                            "metrics_kind:cr50_flash",
                            "time_frame_hours:24"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Reflash Cr50 fw on DUT",
                      "exec_name": "cros_reflash_cr50_fw",
                      "docs": [
                        "Try to reflash cr50 firmware and reboot AP from DUT side to wake it up.",
                        "Reboot after the fw flash is successful."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "flash_timeout:120",
                        "wait_timeout:30"
                      ],
                      "timeout": "2m30s",
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Reset EC from DUT and stop",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Try to reset EC from DUT side to wake CR50 up and then stop the servod."
                  ],
                  "conditions": [
                    {
                      "name": "DUT is SSHable",
                      "exec_name": "cros_ssh_dut",
                      "docs": [
                        "verify if DUT is SSH-able"
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "is_servo_type_ccd",
                      "exec_name": "is_servo_type_ccd",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "cros_reset_ec",
                      "exec_name": "cros_reset_ec",
                      "docs": [
                        "Try to reset EC from DUT side by running connads wake up the device as it will trigger recovering ec, cr50, and other fw."
                      ],
                      "dependencies": [
                        {
                          "name": "DUT is SSHable",
                          "exec_name": "cros_ssh_dut",
                          "docs": [
                            "verify if DUT is SSH-able"
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "wait_timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Stop servod",
                      "exec_name": "servo_host_servod_stop",
                      "docs": [
                        "Stop the servod daemon.",
                        "Allowed to fail as can be run when servod is not running."
                      ],
                      "dependencies": [
                        {
                          "name": "Save UART capture",
                          "exec_name": "servod_save_uart_capture",
                          "dependencies": [
                            {
                              "name": "Stop UART capture",
                              "exec_name": "servod_stop_uart_capture",
                              "allow_fail_after_recovery": true,
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "allow_fail_after_recovery": true,
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Verify battery by servo",
              "exec_name": "servo_battery_charging",
              "docs": [
                "Audit battery via servod"
              ],
              "conditions": [
                {
                  "name": "DUT has CrOS EC",
                  "exec_name": "servo_check_servod_control",
                  "docs": [
                    "Verify if DUT has ChromeOS firmware for EC"
                  ],
                  "exec_args": [
                    "command:supports_cros_ec_communication",
                    "expected_string_value:yes"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "battery_last_charge_readable",
                  "exec_name": "servo_check_servod_control",
                  "exec_args": [
                    "command:battery_full_charge_mah"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Record good servo type",
          "exec_name": "servo_update_servo_type_label",
          "docs": [
            "Record servo type information.",
            "The action need always work if not then we have issue."
          ],
          "dependencies": [
            {
              "name": "Set state:BROKEN",
              "exec_name": "servo_set_servo_state",
              "exec_args": [
                "state:BROKEN"
              ],
              "run_control": "ALWAYS_RUN"
            }
          ],
          "run_control": "RERUN_AFTER_RECOVERY"
        },
        {
          "name": "Set state:WORKING",
          "exec_name": "servo_set_servo_state",
          "exec_args": [
            "state:WORKING"
          ],
          "run_control": "ALWAYS_RUN"
        }
      ]
    },
    {
      "name": "cros_audit",
      "critical_actions": [
        {
          "name": "Set state: needs_repair",
          "exec_name": "dut_set_state",
          "docs": [
            "The action set devices with state means that repair tsk did not success to recover the devices."
          ],
          "exec_args": [
            "state:needs_repair"
          ],
          "run_control": "ALWAYS_RUN"
        },
        {
          "name": "Device is SSHable",
          "exec_name": "cros_ssh",
          "docs": [
            "Verify that device is reachable by SSH.",
            "Limited to 15 seconds."
          ],
          "recoveries": [
            {
              "name": "Cold reset by servo and wait for SSH",
              "exec_name": "sample_pass",
              "docs": [
                "This repair action will use servod command to reset power_state on the DUT.",
                "TODO: (blocked by: b/221083688) Collect logs from a successfully repaired DUT."
              ],
              "conditions": [
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "dependencies": [
                {
                  "name": "Cold reset DUT by servo",
                  "exec_name": "servo_set",
                  "docs": [
                    "Cold reset device by servo and do not wait."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:power_state",
                    "string_value:reset",
                    "timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Install OS in recovery mode by booting from servo USB-drive (no storage check)",
              "exec_name": "sample_pass",
              "docs": [
                "This action installs the test image on DUT utilizing the features of servo.",
                "DUT will be booted in recovery mode."
              ],
              "conditions": [
                {
                  "name": "Recovery version has OS image path",
                  "exec_name": "has_stable_version_cros_image",
                  "docs": [
                    "Verify that recovery version has OS image path."
                  ],
                  "dependencies": [
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servo USB key detected",
                  "exec_name": "servo_usbkey_is_detected",
                  "docs": [
                    "The action used as codiion.",
                    "The action verify that USB-key is detected and readable."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "file_check:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Servo USB-Key needs to be reflashed",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Check if it is time to download image to servo usbkey.",
                    "If so, then download the stable image to usbkey."
                  ],
                  "conditions": [
                    {
                      "name": "It is time to update USB-drive image",
                      "exec_name": "cros_is_time_to_force_download_image_to_usbkey",
                      "docs": [
                        "Check if it is time to force download image to usbkey",
                        "from the number of failed recoveries since last successful PARIS repair task."
                      ],
                      "exec_args": [
                        "task_name:recovery",
                        "repair_failed_count:1",
                        "repair_failed_interval:10"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Download stable image to USB-key",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Download lab stable image on servo USB-key",
                        "Download the image can take longer if labstation download parallel a few images.",
                        "This step is allowed to complete successfully even if some",
                        " errors happen during download because the image can already",
                        " be present on the USB-drive."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Is servo USB key detected",
                          "exec_name": "servo_usbkey_is_detected",
                          "docs": [
                            "The action used as codiion.",
                            "The action verify that USB-key is detected and readable."
                          ],
                          "dependencies": [
                            {
                              "name": "Is servod running",
                              "exec_name": "sample_pass",
                              "docs": [
                                "Verify that servo host specified in setup and servod is running."
                              ],
                              "dependencies": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                },
                                {
                                  "name": "Verify servod is responsive",
                                  "exec_name": "servod_echo",
                                  "conditions": [
                                    {
                                      "name": "Setup has servo info",
                                      "exec_name": "dut_servo_host_present",
                                      "run_control": "RERUN_AFTER_RECOVERY"
                                    }
                                  ],
                                  "exec_args": [
                                    "ssh_check:false"
                                  ],
                                  "timeout": "10s",
                                  "run_control": "ALWAYS_RUN"
                                }
                              ],
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "exec_args": [
                            "file_check:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Call servod to download image to USB-key",
                          "exec_name": "servo_download_image_to_usb",
                          "docs": [
                            "This action calls servod to download stable version OS image to servo USB-key."
                          ],
                          "timeout": "50m0s",
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Remove UPDATE_USBKEY_IMAGE repair-request",
                          "exec_name": "dut_remove_repair_requests",
                          "docs": [
                            "Remove UPDATE_USBKEY_IMAGE from repair-requests."
                          ],
                          "exec_args": [
                            "requests:UPDATE_USBKEY_IMAGE"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Download stable version OS image to servo usbkey if necessary (allow fail)",
                  "exec_name": "sample_pass",
                  "docs": [
                    "This action will download model specific stable version OS image to servo usbkey.",
                    "The action will be skipped if the required image is already loaded."
                  ],
                  "conditions": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stable version image is missing from servo usbkey",
                      "exec_name": "sample_fail",
                      "docs": [
                        "This is a reverse action which fails when required image is already cached in servo usbkey.",
                        "The purpose is to serve as a condition of Download stable image to USB-key action, so that we don't do duplicate download.",
                        "If this action fails, it means the servo usbkey already have required stable_version OS image cached."
                      ],
                      "conditions": [
                        {
                          "name": "Servo usbkey has stable image",
                          "exec_name": "servo_usbkey_has_stable_image",
                          "docs": [
                            "Check if the usbkey has the stable_version OS image.",
                            "TODO: Collect data on the usual number of retries and tweak the default"
                          ],
                          "exec_args": [
                            "retry_count:3",
                            "retry_interval:1",
                            "usb_file_check:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "servo_servod_echo_host",
                      "exec_name": "servo_servod_echo_host",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is servo USB key detected",
                      "exec_name": "servo_usbkey_is_detected",
                      "docs": [
                        "The action used as codiion.",
                        "The action verify that USB-key is detected and readable."
                      ],
                      "dependencies": [
                        {
                          "name": "Is servod running",
                          "exec_name": "sample_pass",
                          "docs": [
                            "Verify that servo host specified in setup and servod is running."
                          ],
                          "dependencies": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            },
                            {
                              "name": "Verify servod is responsive",
                              "exec_name": "servod_echo",
                              "conditions": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "exec_args": [
                                "ssh_check:false"
                              ],
                              "timeout": "10s",
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "file_check:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Call servod to download image to USB-key",
                      "exec_name": "servo_download_image_to_usb",
                      "docs": [
                        "This action calls servod to download stable version OS image to servo USB-key."
                      ],
                      "timeout": "50m0s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Remove UPDATE_USBKEY_IMAGE repair-request",
                      "exec_name": "dut_remove_repair_requests",
                      "docs": [
                        "Remove UPDATE_USBKEY_IMAGE from repair-requests."
                      ],
                      "exec_args": [
                        "requests:UPDATE_USBKEY_IMAGE"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Boot DUT in recovery and install from USB-drive (no storage check)",
                  "exec_name": "cros_install_in_recovery_mode",
                  "docs": [
                    "This action installs the test image on DUT utilizing ",
                    "the features of servo. DUT will be booted in recovery ",
                    "mode. In some cases RO FW is not allowed to boot in ",
                    "recovery mode with active PD, so we will change it to ",
                    "sink-mode if required."
                  ],
                  "exec_args": [
                    "run_tpm_reset:true",
                    "run_os_install:true",
                    "boot_timeout:480",
                    "boot_interval:10",
                    "boot_retry:2",
                    "halt_timeout:120",
                    "install_timeout:1200",
                    "tpm_reset_timeout:60",
                    "post_install_boot_time:15",
                    "ignore_reboot_failure:true",
                    "run_storage_checks:false",
                    "badblocks_mode:not",
                    "rw_badblocks_timeout:5400",
                    "ro_badblocks_timeout:3600",
                    "after_reboot_check:true",
                    "after_reboot_timeout:150",
                    "after_reboot_allow_use_servo_reset:true"
                  ],
                  "timeout": "2h13m20s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Remove REIMAGE_BY_USBKEY repair-request",
                  "exec_name": "dut_remove_repair_requests",
                  "docs": [
                    "Remove REIMAGE_BY_USBKEY and PROVISION repair-requests."
                  ],
                  "exec_args": [
                    "requests:PROVISION,REIMAGE_BY_USBKEY"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Update FW from fw-image by servo and wait for boot",
              "exec_name": "sample_pass",
              "docs": [
                "This action will repair the firmware on the DUT, and ",
                "then reboot and wait for the DUT to again become ",
                "available. This action exists to wrap these component ",
                "actions into a single repair action."
              ],
              "conditions": [
                {
                  "name": "Recovery version has firmware image path",
                  "exec_name": "has_stable_version_fw_image",
                  "docs": [
                    "Verify that recovery version has firmware image path."
                  ],
                  "dependencies": [
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Flash EC (FW) by servo (allowed failed)",
                  "exec_name": "cros_update_fw_with_fw_image_by_servo",
                  "docs": [
                    "Download fw-image specified in stable version and flash EC to the DUT by servo",
                    "Set timeout for 110 minutes for now as = 10m(download)+4*20m(find/extract file)+20m(ec-update with retry).",
                    "We will retry up to 5 times since there is flakiness on flash EC."
                  ],
                  "conditions": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Recovery version has firmware image path",
                      "exec_name": "has_stable_version_fw_image",
                      "docs": [
                        "Verify that recovery version has firmware image path."
                      ],
                      "dependencies": [
                        {
                          "name": "Has a stable-version service",
                          "exec_name": "has_stable_version_service_path",
                          "docs": [
                            "Verify if we have access to the service provided access to the stable version"
                          ],
                          "run_control": "RUN_ONCE"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "update_ec_attempt_count:5",
                    "download_timeout:600",
                    "use_cache_extractor:true"
                  ],
                  "timeout": "1h50m0s",
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Sleep 60 seconds",
                  "exec_name": "sample_sleep",
                  "exec_args": [
                    "sleep:60"
                  ],
                  "timeout": "1m10s",
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Disable software write protection via servo",
                  "exec_name": "cros_disable_software_write_protection_by_servo",
                  "docs": [
                    "Disable software write protection(for flash firmware) via servo."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "timeout": "1m0s",
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Flash AP (FW) with GBB 0x18 by servo",
                  "exec_name": "cros_update_fw_with_fw_image_by_servo",
                  "docs": [
                    "Download fw-image specified in stable version and flash AP to the DUT by servo",
                    "Set timeout for 90 minutes for now as = 10m(download)+2*20m(find/extract file)+40m(ap-update with retry).",
                    "We will retry up to 3 times since there may be flakiness on flash AP via servo."
                  ],
                  "conditions": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Recovery version has firmware image path",
                      "exec_name": "has_stable_version_fw_image",
                      "docs": [
                        "Verify that recovery version has firmware image path."
                      ],
                      "dependencies": [
                        {
                          "name": "Has a stable-version service",
                          "exec_name": "has_stable_version_service_path",
                          "docs": [
                            "Verify if we have access to the service provided access to the stable version"
                          ],
                          "run_control": "RUN_ONCE"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "update_ap_attempt_count:3",
                    "download_timeout:600",
                    "gbb_flags:0x18",
                    "use_cache_extractor:true"
                  ],
                  "timeout": "1h30m0s",
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Update fingerpprint FW from USB drive",
              "exec_name": "cros_install_in_recovery_mode",
              "docs": [
                "The goal to force update fingerprint fw when devices booted from USB-stick"
              ],
              "conditions": [
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servo USB key detected",
                  "exec_name": "servo_usbkey_is_detected",
                  "docs": [
                    "The action used as codiion.",
                    "The action verify that USB-key is detected and readable."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "file_check:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Set fw_wp_state to force_off",
                  "exec_name": "servo_set",
                  "docs": [
                    "Force disable wp of FW by servo."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "command:fw_wp_state",
                    "string_value:force_off"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "badblocks_mode:not",
                "run_custom_commands:true",
                "boot_timeout:480",
                "boot_interval:10",
                "boot_retry:1",
                "halt_timeout:120",
                "custom_command_allowed_to_fail:true",
                "custom_command_timeout:60",
                "custom_commands:flash_fp_mcu /opt/google/biod/fw/$(cros_config /fingerprint board)*.bin",
                "ignore_reboot_failure:true",
                "after_reboot_check:true",
                "after_reboot_timeout:150",
                "after_reboot_allow_use_servo_reset:true"
              ],
              "timeout": "16m40s",
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Install OS in recovery mode by booting from servo USB-drive",
              "exec_name": "sample_pass",
              "docs": [
                "This action installs the test image on DUT utilizing the features of servo.",
                "DUT will be booted in recovery mode."
              ],
              "conditions": [
                {
                  "name": "Recovery version has OS image path",
                  "exec_name": "has_stable_version_cros_image",
                  "docs": [
                    "Verify that recovery version has OS image path."
                  ],
                  "dependencies": [
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servo USB key detected",
                  "exec_name": "servo_usbkey_is_detected",
                  "docs": [
                    "The action used as codiion.",
                    "The action verify that USB-key is detected and readable."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "file_check:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Servo USB-Key needs to be reflashed",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Check if it is time to download image to servo usbkey.",
                    "If so, then download the stable image to usbkey."
                  ],
                  "conditions": [
                    {
                      "name": "It is time to update USB-drive image",
                      "exec_name": "cros_is_time_to_force_download_image_to_usbkey",
                      "docs": [
                        "Check if it is time to force download image to usbkey",
                        "from the number of failed recoveries since last successful PARIS repair task."
                      ],
                      "exec_args": [
                        "task_name:recovery",
                        "repair_failed_count:1",
                        "repair_failed_interval:10"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Download stable image to USB-key",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Download lab stable image on servo USB-key",
                        "Download the image can take longer if labstation download parallel a few images.",
                        "This step is allowed to complete successfully even if some",
                        " errors happen during download because the image can already",
                        " be present on the USB-drive."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Is servo USB key detected",
                          "exec_name": "servo_usbkey_is_detected",
                          "docs": [
                            "The action used as codiion.",
                            "The action verify that USB-key is detected and readable."
                          ],
                          "dependencies": [
                            {
                              "name": "Is servod running",
                              "exec_name": "sample_pass",
                              "docs": [
                                "Verify that servo host specified in setup and servod is running."
                              ],
                              "dependencies": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                },
                                {
                                  "name": "Verify servod is responsive",
                                  "exec_name": "servod_echo",
                                  "conditions": [
                                    {
                                      "name": "Setup has servo info",
                                      "exec_name": "dut_servo_host_present",
                                      "run_control": "RERUN_AFTER_RECOVERY"
                                    }
                                  ],
                                  "exec_args": [
                                    "ssh_check:false"
                                  ],
                                  "timeout": "10s",
                                  "run_control": "ALWAYS_RUN"
                                }
                              ],
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "exec_args": [
                            "file_check:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Call servod to download image to USB-key",
                          "exec_name": "servo_download_image_to_usb",
                          "docs": [
                            "This action calls servod to download stable version OS image to servo USB-key."
                          ],
                          "timeout": "50m0s",
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Remove UPDATE_USBKEY_IMAGE repair-request",
                          "exec_name": "dut_remove_repair_requests",
                          "docs": [
                            "Remove UPDATE_USBKEY_IMAGE from repair-requests."
                          ],
                          "exec_args": [
                            "requests:UPDATE_USBKEY_IMAGE"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Download stable version OS image to servo usbkey if necessary (allow fail)",
                  "exec_name": "sample_pass",
                  "docs": [
                    "This action will download model specific stable version OS image to servo usbkey.",
                    "The action will be skipped if the required image is already loaded."
                  ],
                  "conditions": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stable version image is missing from servo usbkey",
                      "exec_name": "sample_fail",
                      "docs": [
                        "This is a reverse action which fails when required image is already cached in servo usbkey.",
                        "The purpose is to serve as a condition of Download stable image to USB-key action, so that we don't do duplicate download.",
                        "If this action fails, it means the servo usbkey already have required stable_version OS image cached."
                      ],
                      "conditions": [
                        {
                          "name": "Servo usbkey has stable image",
                          "exec_name": "servo_usbkey_has_stable_image",
                          "docs": [
                            "Check if the usbkey has the stable_version OS image.",
                            "TODO: Collect data on the usual number of retries and tweak the default"
                          ],
                          "exec_args": [
                            "retry_count:3",
                            "retry_interval:1",
                            "usb_file_check:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "servo_servod_echo_host",
                      "exec_name": "servo_servod_echo_host",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is servo USB key detected",
                      "exec_name": "servo_usbkey_is_detected",
                      "docs": [
                        "The action used as codiion.",
                        "The action verify that USB-key is detected and readable."
                      ],
                      "dependencies": [
                        {
                          "name": "Is servod running",
                          "exec_name": "sample_pass",
                          "docs": [
                            "Verify that servo host specified in setup and servod is running."
                          ],
                          "dependencies": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            },
                            {
                              "name": "Verify servod is responsive",
                              "exec_name": "servod_echo",
                              "conditions": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "exec_args": [
                                "ssh_check:false"
                              ],
                              "timeout": "10s",
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "file_check:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Call servod to download image to USB-key",
                      "exec_name": "servo_download_image_to_usb",
                      "docs": [
                        "This action calls servod to download stable version OS image to servo USB-key."
                      ],
                      "timeout": "50m0s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Remove UPDATE_USBKEY_IMAGE repair-request",
                      "exec_name": "dut_remove_repair_requests",
                      "docs": [
                        "Remove UPDATE_USBKEY_IMAGE from repair-requests."
                      ],
                      "exec_args": [
                        "requests:UPDATE_USBKEY_IMAGE"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Boot DUT in recovery and install from USB-drive",
                  "exec_name": "cros_install_in_recovery_mode",
                  "docs": [
                    "This action installs the test image on DUT utilizing ",
                    "the features of servo. DUT will be booted in recovery ",
                    "mode. In some cases RO FW is not allowed to boot in ",
                    "recovery mode with active PD, so we will change it to ",
                    "sink-mode if required."
                  ],
                  "exec_args": [
                    "run_tpm_reset:true",
                    "run_os_install:true",
                    "boot_timeout:480",
                    "boot_interval:10",
                    "boot_retry:2",
                    "halt_timeout:120",
                    "install_timeout:1200",
                    "tpm_reset_timeout:60",
                    "post_install_boot_time:15",
                    "ignore_reboot_failure:true",
                    "badblocks_mode:auto",
                    "rw_badblocks_timeout:5400",
                    "ro_badblocks_timeout:3600",
                    "after_reboot_check:true",
                    "after_reboot_timeout:150",
                    "after_reboot_allow_use_servo_reset:true"
                  ],
                  "timeout": "2h13m20s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Remove REIMAGE_BY_USBKEY repair-request",
                  "exec_name": "dut_remove_repair_requests",
                  "docs": [
                    "Remove REIMAGE_BY_USBKEY and PROVISION repair-requests."
                  ],
                  "exec_args": [
                    "requests:PROVISION,REIMAGE_BY_USBKEY"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Install OS in recovery mode by booting from servo USB-drive (Flex)",
              "exec_name": "sample_pass",
              "docs": [
                "The action design only for Flex devices.",
                "This action installs the test image on DUT utilizing the features of servo.",
                "When DUT sees USB-key it will always try to boot from it."
              ],
              "conditions": [
                {
                  "name": "Is Flex device",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Flex board"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:false"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is servo USB key detected",
                  "exec_name": "servo_usbkey_is_detected",
                  "docs": [
                    "The action used as codiion.",
                    "The action verify that USB-key is detected and readable."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "file_check:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Servo USB-Key needs to be reflashed",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Check if it is time to download image to servo usbkey.",
                    "If so, then download the stable image to usbkey."
                  ],
                  "conditions": [
                    {
                      "name": "It is time to update USB-drive image",
                      "exec_name": "cros_is_time_to_force_download_image_to_usbkey",
                      "docs": [
                        "Check if it is time to force download image to usbkey",
                        "from the number of failed recoveries since last successful PARIS repair task."
                      ],
                      "exec_args": [
                        "task_name:recovery",
                        "repair_failed_count:1",
                        "repair_failed_interval:10"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Download stable image to USB-key",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Download lab stable image on servo USB-key",
                        "Download the image can take longer if labstation download parallel a few images.",
                        "This step is allowed to complete successfully even if some",
                        " errors happen during download because the image can already",
                        " be present on the USB-drive."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Is servo USB key detected",
                          "exec_name": "servo_usbkey_is_detected",
                          "docs": [
                            "The action used as codiion.",
                            "The action verify that USB-key is detected and readable."
                          ],
                          "dependencies": [
                            {
                              "name": "Is servod running",
                              "exec_name": "sample_pass",
                              "docs": [
                                "Verify that servo host specified in setup and servod is running."
                              ],
                              "dependencies": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                },
                                {
                                  "name": "Verify servod is responsive",
                                  "exec_name": "servod_echo",
                                  "conditions": [
                                    {
                                      "name": "Setup has servo info",
                                      "exec_name": "dut_servo_host_present",
                                      "run_control": "RERUN_AFTER_RECOVERY"
                                    }
                                  ],
                                  "exec_args": [
                                    "ssh_check:false"
                                  ],
                                  "timeout": "10s",
                                  "run_control": "ALWAYS_RUN"
                                }
                              ],
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "exec_args": [
                            "file_check:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Call servod to download image to USB-key",
                          "exec_name": "servo_download_image_to_usb",
                          "docs": [
                            "This action calls servod to download stable version OS image to servo USB-key."
                          ],
                          "timeout": "50m0s",
                          "run_control": "ALWAYS_RUN"
                        },
                        {
                          "name": "Remove UPDATE_USBKEY_IMAGE repair-request",
                          "exec_name": "dut_remove_repair_requests",
                          "docs": [
                            "Remove UPDATE_USBKEY_IMAGE from repair-requests."
                          ],
                          "exec_args": [
                            "requests:UPDATE_USBKEY_IMAGE"
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "allow_fail_after_recovery": true,
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Download stable version OS image to servo usbkey if necessary (allow fail)",
                  "exec_name": "sample_pass",
                  "docs": [
                    "This action will download model specific stable version OS image to servo usbkey.",
                    "The action will be skipped if the required image is already loaded."
                  ],
                  "conditions": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    },
                    {
                      "name": "Stable version image is missing from servo usbkey",
                      "exec_name": "sample_fail",
                      "docs": [
                        "This is a reverse action which fails when required image is already cached in servo usbkey.",
                        "The purpose is to serve as a condition of Download stable image to USB-key action, so that we don't do duplicate download.",
                        "If this action fails, it means the servo usbkey already have required stable_version OS image cached."
                      ],
                      "conditions": [
                        {
                          "name": "Servo usbkey has stable image",
                          "exec_name": "servo_usbkey_has_stable_image",
                          "docs": [
                            "Check if the usbkey has the stable_version OS image.",
                            "TODO: Collect data on the usual number of retries and tweak the default"
                          ],
                          "exec_args": [
                            "retry_count:3",
                            "retry_interval:1",
                            "usb_file_check:true"
                          ],
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "servo_servod_echo_host",
                      "exec_name": "servo_servod_echo_host",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Is servo USB key detected",
                      "exec_name": "servo_usbkey_is_detected",
                      "docs": [
                        "The action used as codiion.",
                        "The action verify that USB-key is detected and readable."
                      ],
                      "dependencies": [
                        {
                          "name": "Is servod running",
                          "exec_name": "sample_pass",
                          "docs": [
                            "Verify that servo host specified in setup and servod is running."
                          ],
                          "dependencies": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            },
                            {
                              "name": "Verify servod is responsive",
                              "exec_name": "servod_echo",
                              "conditions": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "exec_args": [
                                "ssh_check:false"
                              ],
                              "timeout": "10s",
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "file_check:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Call servod to download image to USB-key",
                      "exec_name": "servo_download_image_to_usb",
                      "docs": [
                        "This action calls servod to download stable version OS image to servo USB-key."
                      ],
                      "timeout": "50m0s",
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Remove UPDATE_USBKEY_IMAGE repair-request",
                      "exec_name": "dut_remove_repair_requests",
                      "docs": [
                        "Remove UPDATE_USBKEY_IMAGE from repair-requests."
                      ],
                      "exec_args": [
                        "requests:UPDATE_USBKEY_IMAGE"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RUN_ONCE"
                },
                {
                  "name": "Power OFF DUT by servo",
                  "exec_name": "servo_set",
                  "docs": [
                    "Turn DUT OFF by servo and do not wait."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:power_state",
                    "string_value:off",
                    "timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Direct USB-drive to DUT",
                  "exec_name": "servo_set",
                  "docs": [
                    "Switch servo's USB-drive to point to DUT."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:image_usbkey_direction",
                    "string_value:dut_sees_usbkey"
                  ],
                  "timeout": "20s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Sleep 10 seconds",
                  "exec_name": "sample_sleep",
                  "exec_args": [
                    "sleep:10"
                  ],
                  "timeout": "11s",
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Power ON DUT by servo",
                  "exec_name": "servo_set",
                  "docs": [
                    "Turn DUT ON by servo and do not wait."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:power_state",
                    "string_value:on"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Sleep 10 seconds",
                  "exec_name": "sample_sleep",
                  "exec_args": [
                    "sleep:10"
                  ],
                  "timeout": "11s",
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Print active devices",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Print active devices visible for DUT."
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:lsblk",
                    "background:false"
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is Flex booted from USB-drive",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Check if device booted from USB in installer mode."
                  ],
                  "conditions": [
                    {
                      "name": "Is Flex device",
                      "exec_name": "dut_check_board",
                      "docs": [
                        "Check that DUT is a Flex board"
                      ],
                      "exec_args": [
                        "string_values:aurora,reven",
                        "invert_result:false"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:is_running_from_installer |grep yes",
                    "background:false"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Run chromeos-install for Flex",
                  "exec_name": "cros_run_command",
                  "docs": [
                    "Run chromeos-install for Flex DUTs with detecting destination.",
                    "Flex device does not detect destination as part of chromeos-install script."
                  ],
                  "dependencies": [
                    {
                      "name": "Is Flex device",
                      "exec_name": "dut_check_board",
                      "docs": [
                        "Check that DUT is a Flex board"
                      ],
                      "exec_args": [
                        "string_values:aurora,reven",
                        "invert_result:false"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "host:dut",
                    "command:chromeos-install --dst $(lsblk --bytes --output NAME  --paths -I 259 -n -d) --yes",
                    "background:false"
                  ],
                  "timeout": "10m0s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Sleep 10 seconds",
                  "exec_name": "sample_sleep",
                  "exec_args": [
                    "sleep:10"
                  ],
                  "timeout": "11s",
                  "allow_fail_after_recovery": true,
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Power OFF DUT by servo",
                  "exec_name": "servo_set",
                  "docs": [
                    "Turn DUT OFF by servo and do not wait."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:power_state",
                    "string_value:off",
                    "timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Direct USB-drive to servo host",
                  "exec_name": "servo_set",
                  "docs": [
                    "Switch servo's USB-drive to point to servo-host."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:image_usbkey_direction",
                    "string_value:servo_sees_usbkey"
                  ],
                  "timeout": "20s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Power ON DUT by servo",
                  "exec_name": "servo_set",
                  "docs": [
                    "Turn DUT ON by servo and do not wait."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:power_state",
                    "string_value:on"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Remove REIMAGE_BY_USBKEY repair-request",
                  "exec_name": "dut_remove_repair_requests",
                  "docs": [
                    "Remove REIMAGE_BY_USBKEY and PROVISION repair-requests."
                  ],
                  "exec_args": [
                    "requests:PROVISION,REIMAGE_BY_USBKEY"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Install OS in DEV mode by USB-drive",
              "exec_name": "sample_pass",
              "docs": [
                "This action installs the test image on DUT after booking the DUT in dev mode."
              ],
              "conditions": [
                {
                  "name": "Recovery version has OS image path",
                  "exec_name": "has_stable_version_cros_image",
                  "docs": [
                    "Verify that recovery version has OS image path."
                  ],
                  "dependencies": [
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servo USB key detected",
                  "exec_name": "servo_usbkey_is_detected",
                  "docs": [
                    "The action used as codiion.",
                    "The action verify that USB-key is detected and readable."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "file_check:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Boot DUT from USB in DEV mode",
                  "exec_name": "cros_dev_mode_boot_from_servo_usb_drive",
                  "docs": [
                    "Restart and try to boot from USB-drive",
                    "First boot in dev mode can take time so set boot time to 10 minutes."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "boot_retry:2",
                    "boot_timeout:600",
                    "retry_interval:1",
                    "verify_usbkey_boot:true"
                  ],
                  "timeout": "10m50s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Run install after boot from USB-drive",
                  "exec_name": "cros_run_chromeos_install_command_after_boot_usbdrive",
                  "docs": [
                    "Perform install process when device booted from USB-drive."
                  ],
                  "timeout": "20m0s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Cold reset DUT by servo and wait to boot",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Cold reset device by servo and wait for DUT to become ping-able."
                  ],
                  "conditions": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "dependencies": [
                    {
                      "name": "Cold reset DUT by servo",
                      "exec_name": "servo_set",
                      "docs": [
                        "Cold reset device by servo and do not wait."
                      ],
                      "dependencies": [
                        {
                          "name": "Is servod running",
                          "exec_name": "sample_pass",
                          "docs": [
                            "Verify that servo host specified in setup and servod is running."
                          ],
                          "dependencies": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            },
                            {
                              "name": "Verify servod is responsive",
                              "exec_name": "servod_echo",
                              "conditions": [
                                {
                                  "name": "Setup has servo info",
                                  "exec_name": "dut_servo_host_present",
                                  "run_control": "RERUN_AFTER_RECOVERY"
                                }
                              ],
                              "exec_args": [
                                "ssh_check:false"
                              ],
                              "timeout": "10s",
                              "run_control": "ALWAYS_RUN"
                            }
                          ],
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "command:power_state",
                        "string_value:reset",
                        "timeout:30"
                      ],
                      "run_control": "ALWAYS_RUN"
                    },
                    {
                      "name": "Wait to be pingable (normal boot)",
                      "exec_name": "cros_ping",
                      "docs": [
                        "Wait DUT to be pingable after some action on it.",
                        "Waiting time 150 seconds."
                      ],
                      "timeout": "2m30s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Remove REIMAGE_BY_USBKEY repair-request",
                  "exec_name": "dut_remove_repair_requests",
                  "docs": [
                    "Remove REIMAGE_BY_USBKEY and PROVISION repair-requests."
                  ],
                  "exec_args": [
                    "requests:PROVISION,REIMAGE_BY_USBKEY"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Reset power using servo if booted from USB",
              "exec_name": "sample_pass",
              "docs": [
                "This action will reboot the DUT using servo if device ",
                "is not booted after off/on performed as part of ",
                "re-imaging the device from USB device."
              ],
              "conditions": [
                {
                  "name": "Is servod running",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Verify that servo host specified in setup and servod is running."
                  ],
                  "dependencies": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Verify servod is responsive",
                      "exec_name": "servod_echo",
                      "conditions": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        }
                      ],
                      "exec_args": [
                        "ssh_check:false"
                      ],
                      "timeout": "10s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "dependencies": [
                {
                  "name": "Cold reset DUT by servo",
                  "exec_name": "servo_set",
                  "docs": [
                    "Cold reset device by servo and do not wait."
                  ],
                  "dependencies": [
                    {
                      "name": "Is servod running",
                      "exec_name": "sample_pass",
                      "docs": [
                        "Verify that servo host specified in setup and servod is running."
                      ],
                      "dependencies": [
                        {
                          "name": "Setup has servo info",
                          "exec_name": "dut_servo_host_present",
                          "run_control": "RERUN_AFTER_RECOVERY"
                        },
                        {
                          "name": "Verify servod is responsive",
                          "exec_name": "servod_echo",
                          "conditions": [
                            {
                              "name": "Setup has servo info",
                              "exec_name": "dut_servo_host_present",
                              "run_control": "RERUN_AFTER_RECOVERY"
                            }
                          ],
                          "exec_args": [
                            "ssh_check:false"
                          ],
                          "timeout": "10s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "command:power_state",
                    "string_value:reset",
                    "timeout:30"
                  ],
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Wait to be SSHable (normal boot)",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Try to wait device to be sshable after the device being rebooted.",
                    "Waiting time 150 seconds."
                  ],
                  "timeout": "2m30s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "timeout": "15s",
          "run_control": "ALWAYS_RUN"
        },
        {
          "name": "Audit USB-drive from DUT",
          "exec_name": "audit_usb_from_dut_side",
          "docs": [
            "Audit the USB drive.",
            "Run badblocks to test USB-drive from DUT side.",
            "Timeout is 1 hour."
          ],
          "dependencies": [
            {
              "name": "Servo state is working",
              "exec_name": "servo_match_state",
              "docs": [
                "check the servo's state is WORKING."
              ],
              "exec_args": [
                "state:WORKING"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Is servod running",
              "exec_name": "sample_pass",
              "docs": [
                "Verify that servo host specified in setup and servod is running."
              ],
              "dependencies": [
                {
                  "name": "Setup has servo info",
                  "exec_name": "dut_servo_host_present",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Verify servod is responsive",
                  "exec_name": "servod_echo",
                  "conditions": [
                    {
                      "name": "Setup has servo info",
                      "exec_name": "dut_servo_host_present",
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "exec_args": [
                    "ssh_check:false"
                  ],
                  "timeout": "10s",
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Device NOT booted from USB-drive",
              "exec_name": "sample_fail",
              "docs": [
                "Verify that device was not booted from USB-drive."
              ],
              "conditions": [
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Check that DUT is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Device booted from USB-drive",
                  "exec_name": "cros_booted_from_external_storage",
                  "docs": [
                    "Verify that device was booted from USB-drive."
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "recoveries": [
                {
                  "name": "Set default boot as disk and reboot",
                  "exec_name": "sample_pass",
                  "docs": [
                    "Set default boot from disk and reboot."
                  ],
                  "dependencies": [
                    {
                      "name": "Set default boot as disk",
                      "exec_name": "cros_update_crossystem",
                      "docs": [
                        "Set default boot from disk by crossystem."
                      ],
                      "exec_args": [
                        "command:dev_default_boot",
                        "value:disk",
                        "check_after_update:true"
                      ],
                      "run_control": "RERUN_AFTER_RECOVERY"
                    },
                    {
                      "name": "Simple reboot",
                      "exec_name": "cros_run_command",
                      "docs": [
                        "Simple un-blocker reboot."
                      ],
                      "dependencies": [
                        {
                          "name": "Device is SSHable",
                          "exec_name": "cros_ssh",
                          "docs": [
                            "Verify that device is reachable by SSH.",
                            "Limited to 15 seconds."
                          ],
                          "timeout": "15s",
                          "run_control": "ALWAYS_RUN"
                        }
                      ],
                      "exec_args": [
                        "host:dut",
                        "command:reboot",
                        "background:true"
                      ],
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Print block devices of the DUT",
              "exec_name": "cros_run_command",
              "docs": [
                "Lsblk is used to display details about block devices and these blocks."
              ],
              "exec_args": [
                "host:dut",
                "command:lsblk"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Check if USB-key drop connection after sleep",
              "exec_name": "servo_usbkey_is_detected",
              "docs": [
                "The action verify that USB-key is detected and readable.",
                "The check is performed with sleep for 2 minutes to verify that USB-key would stay and be able detected"
              ],
              "exec_args": [
                "file_check:true",
                "check_drop_connection:true",
                "check_drop_connection_timeout:120"
              ],
              "timeout": "3m20s",
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "recoveries": [
            {
              "name": "Quick provision OS",
              "exec_name": "sample_pass",
              "docs": [
                "Install stable OS on the device."
              ],
              "conditions": [
                {
                  "name": "Recovery version has OS image path",
                  "exec_name": "has_stable_version_cros_image",
                  "docs": [
                    "Verify that recovery version has OS image path."
                  ],
                  "dependencies": [
                    {
                      "name": "Has a stable-version service",
                      "exec_name": "has_stable_version_service_path",
                      "docs": [
                        "Verify if we have access to the service provided access to the stable version"
                      ],
                      "run_control": "RUN_ONCE"
                    }
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Device is SSHable",
                  "exec_name": "cros_ssh",
                  "docs": [
                    "Verify that device is reachable by SSH.",
                    "Limited to 15 seconds."
                  ],
                  "timeout": "15s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Internal storage is responsive",
                  "exec_name": "cros_is_file_system_writable",
                  "docs": [
                    "Verify that internal storage is responsive"
                  ],
                  "dependencies": [
                    {
                      "name": "Device is SSHable",
                      "exec_name": "cros_ssh",
                      "docs": [
                        "Verify that device is reachable by SSH.",
                        "Limited to 15 seconds."
                      ],
                      "timeout": "15s",
                      "run_control": "ALWAYS_RUN"
                    }
                  ],
                  "exec_args": [
                    "paths:/mnt/stateful_partition,/var/tmp,/mnt/stateful_partition/encrypted"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "dependencies": [
                {
                  "name": "Call provision for DUT",
                  "exec_name": "cros_provision",
                  "docs": [
                    "Call provision OS of the DUT."
                  ],
                  "timeout": "1h0m0s",
                  "run_control": "ALWAYS_RUN"
                },
                {
                  "name": "Remove PROVISION repair-request",
                  "exec_name": "dut_remove_repair_requests",
                  "docs": [
                    "Remove a PROVISION repair-request."
                  ],
                  "exec_args": [
                    "requests:PROVISION"
                  ],
                  "run_control": "ALWAYS_RUN"
                }
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            }
          ],
          "exec_args": [
            "audit_timeout_min:58"
          ],
          "timeout": "1h0m0s",
          "run_control": "RERUN_AFTER_RECOVERY"
        }
      ]
    },
    {
      "name": "close",
      "critical_actions": [
        {
          "name": "Close Servo-host",
          "exec_name": "sample_pass",
          "conditions": [
            {
              "name": "Servo-host known",
              "exec_name": "dut_servo_host_present",
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Is a Chromebook",
              "exec_name": "dut_check_board",
              "docs": [
                "Verify that the device is a Chromebook by checking for non-Chromebook boards"
              ],
              "exec_args": [
                "string_values:aurora,reven",
                "invert_result:true"
              ],
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Servo-host is sshable",
              "exec_name": "cros_ssh",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "exec_args": [
                "device_type:servo"
              ],
              "timeout": "15s",
              "run_control": "ALWAYS_RUN"
            }
          ],
          "dependencies": [
            {
              "name": "Try copy messages from servo-host",
              "exec_name": "cros_copy_to_logs",
              "docs": [
                "Try to collect /var/log/messages from servo-host."
              ],
              "conditions": [
                {
                  "name": "Servo-host known",
                  "exec_name": "dut_servo_host_present",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "src_host_type:servo_host",
                "src_path:/var/log/messages",
                "src_type:file",
                "use_host_dir:true"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Try to collect servod logs",
              "exec_name": "cros_collect_servod_logs",
              "docs": [
                "Try to collect all servod logs since latest start time."
              ],
              "conditions": [
                {
                  "name": "Servo-host known",
                  "exec_name": "dut_servo_host_present",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Remove in-use flag on servo-host",
              "exec_name": "cros_remove_servo_in_use",
              "conditions": [
                {
                  "name": "Servo-host known",
                  "exec_name": "dut_servo_host_present",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Remove request to reboot if servo is good",
              "exec_name": "cros_remove_reboot_request",
              "conditions": [
                {
                  "name": "Is a Chromebook",
                  "exec_name": "dut_check_board",
                  "docs": [
                    "Verify that the device is a Chromebook by checking for non-Chromebook boards"
                  ],
                  "exec_args": [
                    "string_values:aurora,reven",
                    "invert_result:true"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Servo-host known",
                  "exec_name": "dut_servo_host_present",
                  "run_control": "RERUN_AFTER_RECOVERY"
                },
                {
                  "name": "Is servo_state:working",
                  "exec_name": "servo_match_state",
                  "docs": [
                    "check the servo's state is ServoStateWorking."
                  ],
                  "exec_args": [
                    "state:WORKING"
                  ],
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "RERUN_AFTER_RECOVERY"
            },
            {
              "name": "Turn off servo usbkey power",
              "exec_name": "servo_set",
              "docs": [
                "Ensure that servo usbkey power is in off state."
              ],
              "conditions": [
                {
                  "name": "Servo-host known",
                  "exec_name": "dut_servo_host_present",
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "exec_args": [
                "command:image_usbkey_pwr",
                "string_value:off"
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            },
            {
              "name": "Stop servod",
              "exec_name": "servo_host_servod_stop",
              "docs": [
                "Stop the servod daemon.",
                "Allowed to fail as can be run when servod is not running."
              ],
              "dependencies": [
                {
                  "name": "Save UART capture",
                  "exec_name": "servod_save_uart_capture",
                  "dependencies": [
                    {
                      "name": "Stop UART capture",
                      "exec_name": "servod_stop_uart_capture",
                      "allow_fail_after_recovery": true,
                      "run_control": "RERUN_AFTER_RECOVERY"
                    }
                  ],
                  "allow_fail_after_recovery": true,
                  "run_control": "RERUN_AFTER_RECOVERY"
                }
              ],
              "allow_fail_after_recovery": true,
              "run_control": "ALWAYS_RUN"
            }
          ],
          "allow_fail_after_recovery": true,
          "run_control": "RERUN_AFTER_RECOVERY"
        }
      ],
      "allow_fail": true
    }
  ]
}