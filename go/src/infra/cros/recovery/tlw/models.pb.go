// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: infra/cros/recovery/tlw/models.proto

package tlw

import (
	xmlrpc "go.chromium.org/chromiumos/config/go/api/test/xmlrpc"
	api "go.chromium.org/chromiumos/config/go/test/lab/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HardwareState describes the state of hardware components.
type HardwareState int32

const (
	// keep for all unspecified state by default.
	HardwareState_HARDWARE_UNSPECIFIED HardwareState = 0
	// Hardware is in good shape and pass all verifiers.
	HardwareState_HARDWARE_NORMAL HardwareState = 1
	// Hardware is still good but some not critical verifiers did not pass or
	// provided border values. (used for DUT storage when usage reached 98%)
	HardwareState_HARDWARE_ACCEPTABLE HardwareState = 2
	// Hardware is broken or bad (did not pass verifiers).
	HardwareState_HARDWARE_NEED_REPLACEMENT HardwareState = 3
	// Hardware is not detected to run verifiers.
	// (used for USB-drive when it expected but not detected on the device)
	HardwareState_HARDWARE_NOT_DETECTED HardwareState = 4
)

// Enum value maps for HardwareState.
var (
	HardwareState_name = map[int32]string{
		0: "HARDWARE_UNSPECIFIED",
		1: "HARDWARE_NORMAL",
		2: "HARDWARE_ACCEPTABLE",
		3: "HARDWARE_NEED_REPLACEMENT",
		4: "HARDWARE_NOT_DETECTED",
	}
	HardwareState_value = map[string]int32{
		"HARDWARE_UNSPECIFIED":      0,
		"HARDWARE_NORMAL":           1,
		"HARDWARE_ACCEPTABLE":       2,
		"HARDWARE_NEED_REPLACEMENT": 3,
		"HARDWARE_NOT_DETECTED":     4,
	}
)

func (x HardwareState) Enum() *HardwareState {
	p := new(HardwareState)
	*p = x
	return p
}

func (x HardwareState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwareState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[0].Descriptor()
}

func (HardwareState) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[0]
}

func (x HardwareState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwareState.Descriptor instead.
func (HardwareState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{0}
}

// Servo Firmware Channel describes the firmware expected to have on servos.
type ServoFwChannel int32

const (
	ServoFwChannel_FW_UNSPECIFIED ServoFwChannel = 0
	// Servo firmware from Stable channel.
	ServoFwChannel_STABLE ServoFwChannel = 1
	// The previous Servo firmware from Stable channel.
	ServoFwChannel_PREV ServoFwChannel = 2
	// Servo firmware from Dev channel.
	ServoFwChannel_DEV ServoFwChannel = 3
	// Servo firmware from Alpha channel.
	ServoFwChannel_ALPHA ServoFwChannel = 4
)

// Enum value maps for ServoFwChannel.
var (
	ServoFwChannel_name = map[int32]string{
		0: "FW_UNSPECIFIED",
		1: "STABLE",
		2: "PREV",
		3: "DEV",
		4: "ALPHA",
	}
	ServoFwChannel_value = map[string]int32{
		"FW_UNSPECIFIED": 0,
		"STABLE":         1,
		"PREV":           2,
		"DEV":            3,
		"ALPHA":          4,
	}
)

func (x ServoFwChannel) Enum() *ServoFwChannel {
	p := new(ServoFwChannel)
	*p = x
	return p
}

func (x ServoFwChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServoFwChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[1].Descriptor()
}

func (ServoFwChannel) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[1]
}

func (x ServoFwChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServoFwChannel.Descriptor instead.
func (ServoFwChannel) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{1}
}

// Action represents action expecting to perform on power supplier.
type RunRPMActionRequest_Action int32

const (
	RunRPMActionRequest_UNSPECIFIED RunRPMActionRequest_Action = 0
	// Switch state to ON.
	RunRPMActionRequest_ON RunRPMActionRequest_Action = 1
	// Switch state to OFF.
	RunRPMActionRequest_OFF RunRPMActionRequest_Action = 2
	// Switch state to OFF and then ON with delay 5 seconds.
	RunRPMActionRequest_CYCLE RunRPMActionRequest_Action = 3
)

// Enum value maps for RunRPMActionRequest_Action.
var (
	RunRPMActionRequest_Action_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ON",
		2: "OFF",
		3: "CYCLE",
	}
	RunRPMActionRequest_Action_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ON":          1,
		"OFF":         2,
		"CYCLE":       3,
	}
)

func (x RunRPMActionRequest_Action) Enum() *RunRPMActionRequest_Action {
	p := new(RunRPMActionRequest_Action)
	*p = x
	return p
}

func (x RunRPMActionRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunRPMActionRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[2].Descriptor()
}

func (RunRPMActionRequest_Action) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[2]
}

func (x RunRPMActionRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunRPMActionRequest_Action.Descriptor instead.
func (RunRPMActionRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{7, 0}
}

// RPMState describes the state of RPM outlet.
type RPMOutlet_State int32

const (
	RPMOutlet_UNSPECIFIED RPMOutlet_State = 0
	// Configuration for RPM outlet missed which block from execution the
	// actions.
	RPMOutlet_MISSING_CONFIG RPMOutlet_State = 1
	// Configuration for RPM outlet provided but does not working which can be
	// several reasons.
	RPMOutlet_WRONG_CONFIG RPMOutlet_State = 2
	// RPM outlet can successfully perform the actions.
	RPMOutlet_WORKING RPMOutlet_State = 3
)

// Enum value maps for RPMOutlet_State.
var (
	RPMOutlet_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MISSING_CONFIG",
		2: "WRONG_CONFIG",
		3: "WORKING",
	}
	RPMOutlet_State_value = map[string]int32{
		"UNSPECIFIED":    0,
		"MISSING_CONFIG": 1,
		"WRONG_CONFIG":   2,
		"WORKING":        3,
	}
)

func (x RPMOutlet_State) Enum() *RPMOutlet_State {
	p := new(RPMOutlet_State)
	*p = x
	return p
}

func (x RPMOutlet_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPMOutlet_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[3].Descriptor()
}

func (RPMOutlet_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[3]
}

func (x RPMOutlet_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPMOutlet_State.Descriptor instead.
func (RPMOutlet_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{8, 0}
}

// State of the device.
type WifiRouterHost_State int32

const (
	WifiRouterHost_UNSPECIFIED WifiRouterHost_State = 0
	WifiRouterHost_WORKING     WifiRouterHost_State = 1
	WifiRouterHost_BROKEN      WifiRouterHost_State = 2
)

// Enum value maps for WifiRouterHost_State.
var (
	WifiRouterHost_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
	}
	WifiRouterHost_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"WORKING":     1,
		"BROKEN":      2,
	}
)

func (x WifiRouterHost_State) Enum() *WifiRouterHost_State {
	p := new(WifiRouterHost_State)
	*p = x
	return p
}

func (x WifiRouterHost_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiRouterHost_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[4].Descriptor()
}

func (WifiRouterHost_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[4]
}

func (x WifiRouterHost_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiRouterHost_State.Descriptor instead.
func (WifiRouterHost_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{9, 0}
}

// VersionType represents type of devices requesting the stable version.
type VersionRequest_VersionType int32

const (
	VersionRequest_UNSPECIFIED VersionRequest_VersionType = 0
	// Chrome OS.
	VersionRequest_CROS VersionRequest_VersionType = 1
	// AP/PCAP peripheral.
	VersionRequest_WIFI_ROUTER VersionRequest_VersionType = 2
)

// Enum value maps for VersionRequest_VersionType.
var (
	VersionRequest_VersionType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CROS",
		2: "WIFI_ROUTER",
	}
	VersionRequest_VersionType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CROS":        1,
		"WIFI_ROUTER": 2,
	}
)

func (x VersionRequest_VersionType) Enum() *VersionRequest_VersionType {
	p := new(VersionRequest_VersionType)
	*p = x
	return p
}

func (x VersionRequest_VersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionRequest_VersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[5].Descriptor()
}

func (VersionRequest_VersionType) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[5]
}

func (x VersionRequest_VersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionRequest_VersionType.Descriptor instead.
func (VersionRequest_VersionType) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{14, 0}
}

// LoopbackState representes states for loopback dongle.
type DUTAudio_LoopbackState int32

const (
	DUTAudio_LOOPBACK_UNSPECIFIED DUTAudio_LoopbackState = 0
	// Device and software on it is working as expected.
	DUTAudio_LOOPBACK_WORKING DUTAudio_LoopbackState = 1
)

// Enum value maps for DUTAudio_LoopbackState.
var (
	DUTAudio_LoopbackState_name = map[int32]string{
		0: "LOOPBACK_UNSPECIFIED",
		1: "LOOPBACK_WORKING",
	}
	DUTAudio_LoopbackState_value = map[string]int32{
		"LOOPBACK_UNSPECIFIED": 0,
		"LOOPBACK_WORKING":     1,
	}
)

func (x DUTAudio_LoopbackState) Enum() *DUTAudio_LoopbackState {
	p := new(DUTAudio_LoopbackState)
	*p = x
	return p
}

func (x DUTAudio_LoopbackState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DUTAudio_LoopbackState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[6].Descriptor()
}

func (DUTAudio_LoopbackState) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[6]
}

func (x DUTAudio_LoopbackState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DUTAudio_LoopbackState.Descriptor instead.
func (DUTAudio_LoopbackState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{16, 0}
}

// State of the servo.
type ServoHost_State int32

const (
	ServoHost_STATE_UNSPECIFIED ServoHost_State = 0
	// Device and software on it is working as expected.
	ServoHost_WORKING ServoHost_State = 1
	// Configuration for device is not provided.
	ServoHost_MISSING_CONFIG ServoHost_State = 2
	// Configuration contains incorrect information.
	ServoHost_WRONG_CONFIG ServoHost_State = 3
	// Device is not connected/plugged.
	ServoHost_NOT_CONNECTED ServoHost_State = 4
	// Device is not reachable over ssh.
	ServoHost_NO_SSH ServoHost_State = 5
	// Device is broken or not working as expected. the state used if no
	// specified state for the issue.
	ServoHost_BROKEN ServoHost_State = 6
	// Device cannot be repaired or required manual attention to fix/replace it.
	ServoHost_NEED_REPLACEMENT ServoHost_State = 7
	// Cr50 console missing or unresponsive.
	ServoHost_CR50_CONSOLE_MISSING ServoHost_State = 8
	// Servod daemon cannot start on servo-host because cr50 testlab not
	// enabled.
	ServoHost_CCD_TESTLAB_ISSUE ServoHost_State = 9
	// Servod daemon cannot start on servo-host.
	ServoHost_SERVOD_ISSUE ServoHost_State = 10
	// Device lid is not open.
	ServoHost_LID_OPEN_FAILED ServoHost_State = 11
	// The ribbon cable between servo and DUT is broken or not connected.
	ServoHost_BAD_RIBBON_CABLE ServoHost_State = 12
	// The EC on the DUT has issue.
	ServoHost_EC_BROKEN ServoHost_State = 13
	// Servo is not connected to the DUT.
	ServoHost_DUT_NOT_CONNECTED ServoHost_State = 14
	// Some component in servo-topology missed or not detected.
	ServoHost_TOPOLOGY_ISSUE ServoHost_State = 15
	// SBU voltage issues effect CR50 detection.
	ServoHost_SBU_LOW_VOLTAGE ServoHost_State = 16
	// CR50 SBU voltage detected but device was not enumerated.
	ServoHost_CR50_NOT_ENUMERATED ServoHost_State = 17
	// Servo serial mismatch, when servo not detected and another serial
	// detected on previous used port.
	ServoHost_SERVO_SERIAL_MISMATCH ServoHost_State = 18
	// Issue to connect to servod by XMLRPC proxy.
	ServoHost_SERVOD_PROXY_ISSUE ServoHost_State = 19
	// Issue related to servo-host. Timeout to start servod or issue with
	// detecting devices.
	ServoHost_SERVO_HOST_ISSUE ServoHost_State = 20
	// Issue related to servo_updater on the servo-host.
	ServoHost_SERVO_UPDATER_ISSUE ServoHost_State = 21
	// Issue related to power button pin on the servo host.
	ServoHost_SERVOD_DUT_CONTROLLER_MISSING ServoHost_State = 22
	// Issue related to cold reset pin on the DUT.
	ServoHost_COLD_RESET_PIN_ISSUE ServoHost_State = 23
	// Issue related to warm reset pin on the DUT.
	ServoHost_WARM_RESET_PIN_ISSUE ServoHost_State = 24
	// Issue related to power button pin on the DUT.
	ServoHost_POWER_BUTTON_PIN_ISSUE ServoHost_State = 25
	// The servo device connected to debug header is not detected.
	// Reported by dut_controller_missing_fault control.
	ServoHost_DEBUG_HEADER_SERVO_MISSING ServoHost_State = 27
)

// Enum value maps for ServoHost_State.
var (
	ServoHost_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "WORKING",
		2:  "MISSING_CONFIG",
		3:  "WRONG_CONFIG",
		4:  "NOT_CONNECTED",
		5:  "NO_SSH",
		6:  "BROKEN",
		7:  "NEED_REPLACEMENT",
		8:  "CR50_CONSOLE_MISSING",
		9:  "CCD_TESTLAB_ISSUE",
		10: "SERVOD_ISSUE",
		11: "LID_OPEN_FAILED",
		12: "BAD_RIBBON_CABLE",
		13: "EC_BROKEN",
		14: "DUT_NOT_CONNECTED",
		15: "TOPOLOGY_ISSUE",
		16: "SBU_LOW_VOLTAGE",
		17: "CR50_NOT_ENUMERATED",
		18: "SERVO_SERIAL_MISMATCH",
		19: "SERVOD_PROXY_ISSUE",
		20: "SERVO_HOST_ISSUE",
		21: "SERVO_UPDATER_ISSUE",
		22: "SERVOD_DUT_CONTROLLER_MISSING",
		23: "COLD_RESET_PIN_ISSUE",
		24: "WARM_RESET_PIN_ISSUE",
		25: "POWER_BUTTON_PIN_ISSUE",
		27: "DEBUG_HEADER_SERVO_MISSING",
	}
	ServoHost_State_value = map[string]int32{
		"STATE_UNSPECIFIED":             0,
		"WORKING":                       1,
		"MISSING_CONFIG":                2,
		"WRONG_CONFIG":                  3,
		"NOT_CONNECTED":                 4,
		"NO_SSH":                        5,
		"BROKEN":                        6,
		"NEED_REPLACEMENT":              7,
		"CR50_CONSOLE_MISSING":          8,
		"CCD_TESTLAB_ISSUE":             9,
		"SERVOD_ISSUE":                  10,
		"LID_OPEN_FAILED":               11,
		"BAD_RIBBON_CABLE":              12,
		"EC_BROKEN":                     13,
		"DUT_NOT_CONNECTED":             14,
		"TOPOLOGY_ISSUE":                15,
		"SBU_LOW_VOLTAGE":               16,
		"CR50_NOT_ENUMERATED":           17,
		"SERVO_SERIAL_MISMATCH":         18,
		"SERVOD_PROXY_ISSUE":            19,
		"SERVO_HOST_ISSUE":              20,
		"SERVO_UPDATER_ISSUE":           21,
		"SERVOD_DUT_CONTROLLER_MISSING": 22,
		"COLD_RESET_PIN_ISSUE":          23,
		"WARM_RESET_PIN_ISSUE":          24,
		"POWER_BUTTON_PIN_ISSUE":        25,
		"DEBUG_HEADER_SERVO_MISSING":    27,
	}
)

func (x ServoHost_State) Enum() *ServoHost_State {
	p := new(ServoHost_State)
	*p = x
	return p
}

func (x ServoHost_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServoHost_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[7].Descriptor()
}

func (ServoHost_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[7]
}

func (x ServoHost_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServoHost_State.Descriptor instead.
func (ServoHost_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{21, 0}
}

// Type describes which type or storage used on the DUT.
type Storage_Type int32

const (
	Storage_TYPE_UNSPECIFIED Storage_Type = 0
	Storage_SSD              Storage_Type = 1
	Storage_HDD              Storage_Type = 2
	Storage_MMC              Storage_Type = 3
	Storage_NVME             Storage_Type = 4
	Storage_UFS              Storage_Type = 5
)

// Enum value maps for Storage_Type.
var (
	Storage_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "SSD",
		2: "HDD",
		3: "MMC",
		4: "NVME",
		5: "UFS",
	}
	Storage_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"SSD":              1,
		"HDD":              2,
		"MMC":              3,
		"NVME":             4,
		"UFS":              5,
	}
)

func (x Storage_Type) Enum() *Storage_Type {
	p := new(Storage_Type)
	*p = x
	return p
}

func (x Storage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Storage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[8].Descriptor()
}

func (Storage_Type) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[8]
}

func (x Storage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Storage_Type.Descriptor instead.
func (Storage_Type) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{23, 0}
}

// State describes the state of chameleon device.
type Chameleon_State int32

const (
	Chameleon_STATE_UNSPECIFIED Chameleon_State = 0
	// Device and software on it is working as expected.
	Chameleon_WORKING Chameleon_State = 1
	// Device is broken or not working as expected.
	Chameleon_BROKEN Chameleon_State = 2
	// Device State is not applicable.
	Chameleon_NOT_APPLICABLE Chameleon_State = 3
)

// Enum value maps for Chameleon_State.
var (
	Chameleon_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
		3: "NOT_APPLICABLE",
	}
	Chameleon_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"WORKING":           1,
		"BROKEN":            2,
		"NOT_APPLICABLE":    3,
	}
)

func (x Chameleon_State) Enum() *Chameleon_State {
	p := new(Chameleon_State)
	*p = x
	return p
}

func (x Chameleon_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chameleon_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[9].Descriptor()
}

func (Chameleon_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[9]
}

func (x Chameleon_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chameleon_State.Descriptor instead.
func (Chameleon_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{24, 0}
}

// AudioBoxJackPluggerState describes the state of AudioboxJackplugger
type Chameleon_AudioBoxJackPluggerState int32

const (
	Chameleon_AUDIOBOX_JACKPLUGGER_UNSPECIFIED Chameleon_AudioBoxJackPluggerState = 0
	// Device and software on it is working as expected.
	Chameleon_AUDIOBOX_JACKPLUGGER_WORKING Chameleon_AudioBoxJackPluggerState = 1
	// Device is broken or not working as expected.
	Chameleon_AUDIOBOX_JACKPLUGGER_BROKEN Chameleon_AudioBoxJackPluggerState = 2
	// Device is not applicable to this testbed
	Chameleon_AUDIOBOX_JACKPLUGGER_NOT_APPLICABLE Chameleon_AudioBoxJackPluggerState = 3
)

// Enum value maps for Chameleon_AudioBoxJackPluggerState.
var (
	Chameleon_AudioBoxJackPluggerState_name = map[int32]string{
		0: "AUDIOBOX_JACKPLUGGER_UNSPECIFIED",
		1: "AUDIOBOX_JACKPLUGGER_WORKING",
		2: "AUDIOBOX_JACKPLUGGER_BROKEN",
		3: "AUDIOBOX_JACKPLUGGER_NOT_APPLICABLE",
	}
	Chameleon_AudioBoxJackPluggerState_value = map[string]int32{
		"AUDIOBOX_JACKPLUGGER_UNSPECIFIED":    0,
		"AUDIOBOX_JACKPLUGGER_WORKING":        1,
		"AUDIOBOX_JACKPLUGGER_BROKEN":         2,
		"AUDIOBOX_JACKPLUGGER_NOT_APPLICABLE": 3,
	}
)

func (x Chameleon_AudioBoxJackPluggerState) Enum() *Chameleon_AudioBoxJackPluggerState {
	p := new(Chameleon_AudioBoxJackPluggerState)
	*p = x
	return p
}

func (x Chameleon_AudioBoxJackPluggerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chameleon_AudioBoxJackPluggerState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[10].Descriptor()
}

func (Chameleon_AudioBoxJackPluggerState) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[10]
}

func (x Chameleon_AudioBoxJackPluggerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chameleon_AudioBoxJackPluggerState.Descriptor instead.
func (Chameleon_AudioBoxJackPluggerState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{24, 1}
}

// State describes the state of bluetooth peer device.
type BluetoothPeer_State int32

const (
	BluetoothPeer_STATE_UNSPECIFIED BluetoothPeer_State = 0
	// Device and software on it is working as expected.
	BluetoothPeer_WORKING BluetoothPeer_State = 1
	// Device is broken or not working as expected.
	BluetoothPeer_BROKEN BluetoothPeer_State = 2
)

// Enum value maps for BluetoothPeer_State.
var (
	BluetoothPeer_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
	}
	BluetoothPeer_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"WORKING":           1,
		"BROKEN":            2,
	}
)

func (x BluetoothPeer_State) Enum() *BluetoothPeer_State {
	p := new(BluetoothPeer_State)
	*p = x
	return p
}

func (x BluetoothPeer_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothPeer_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[11].Descriptor()
}

func (BluetoothPeer_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[11]
}

func (x BluetoothPeer_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothPeer_State.Descriptor instead.
func (BluetoothPeer_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{25, 0}
}

// Type of modem hardware.
type Cellular_ModemType int32

const (
	Cellular_MODEM_TYPE_UNSPECIFIED Cellular_ModemType = 0
	Cellular_MODEM_TYPE_UNSUPPORTED Cellular_ModemType = 8
	// Qualcomm modem
	Cellular_MODEM_TYPE_QUALCOMM_SC7180 Cellular_ModemType = 1
	// Fibocomm modem
	Cellular_MODEM_TYPE_FIBOCOMM_L850GL Cellular_ModemType = 2
	// NL668
	Cellular_MODEM_TYPE_NL668 Cellular_ModemType = 3
	// FM350
	Cellular_MODEM_TYPE_FM350 Cellular_ModemType = 4
	// FM101
	Cellular_MODEM_TYPE_FM101 Cellular_ModemType = 5
	// SC7280
	Cellular_MODEM_TYPE_QUALCOMM_SC7280 Cellular_ModemType = 6
	// EM060
	Cellular_MODEM_TYPE_EM060 Cellular_ModemType = 7
)

// Enum value maps for Cellular_ModemType.
var (
	Cellular_ModemType_name = map[int32]string{
		0: "MODEM_TYPE_UNSPECIFIED",
		8: "MODEM_TYPE_UNSUPPORTED",
		1: "MODEM_TYPE_QUALCOMM_SC7180",
		2: "MODEM_TYPE_FIBOCOMM_L850GL",
		3: "MODEM_TYPE_NL668",
		4: "MODEM_TYPE_FM350",
		5: "MODEM_TYPE_FM101",
		6: "MODEM_TYPE_QUALCOMM_SC7280",
		7: "MODEM_TYPE_EM060",
	}
	Cellular_ModemType_value = map[string]int32{
		"MODEM_TYPE_UNSPECIFIED":     0,
		"MODEM_TYPE_UNSUPPORTED":     8,
		"MODEM_TYPE_QUALCOMM_SC7180": 1,
		"MODEM_TYPE_FIBOCOMM_L850GL": 2,
		"MODEM_TYPE_NL668":           3,
		"MODEM_TYPE_FM350":           4,
		"MODEM_TYPE_FM101":           5,
		"MODEM_TYPE_QUALCOMM_SC7280": 6,
		"MODEM_TYPE_EM060":           7,
	}
)

func (x Cellular_ModemType) Enum() *Cellular_ModemType {
	p := new(Cellular_ModemType)
	*p = x
	return p
}

func (x Cellular_ModemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cellular_ModemType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[12].Descriptor()
}

func (Cellular_ModemType) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[12]
}

func (x Cellular_ModemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cellular_ModemType.Descriptor instead.
func (Cellular_ModemType) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 0}
}

// The network operator for a particular SIM.
type Cellular_NetworkProvider int32

const (
	Cellular_NETWORK_UNSPECIFIED Cellular_NetworkProvider = 0
	Cellular_NETWORK_UNSUPPORTED Cellular_NetworkProvider = 5
	Cellular_NETWORK_TEST        Cellular_NetworkProvider = 1
	Cellular_NETWORK_ATT         Cellular_NetworkProvider = 2
	Cellular_NETWORK_TMOBILE     Cellular_NetworkProvider = 3
	Cellular_NETWORK_VERIZON     Cellular_NetworkProvider = 4
	Cellular_NETWORK_SPRINT      Cellular_NetworkProvider = 6
	Cellular_NETWORK_DOCOMO      Cellular_NetworkProvider = 7
	Cellular_NETWORK_SOFTBANK    Cellular_NetworkProvider = 8
	Cellular_NETWORK_KDDI        Cellular_NetworkProvider = 9
	Cellular_NETWORK_RAKUTEN     Cellular_NetworkProvider = 10
	Cellular_NETWORK_VODAFONE    Cellular_NetworkProvider = 11
	Cellular_NETWORK_EE          Cellular_NetworkProvider = 12
	Cellular_NETWORK_AMARISOFT   Cellular_NetworkProvider = 13
	Cellular_NETWORK_ROGER       Cellular_NetworkProvider = 14
	Cellular_NETWORK_BELL        Cellular_NetworkProvider = 15
	Cellular_NETWORK_TELUS       Cellular_NetworkProvider = 16
	Cellular_NETWORK_FI          Cellular_NetworkProvider = 17
)

// Enum value maps for Cellular_NetworkProvider.
var (
	Cellular_NetworkProvider_name = map[int32]string{
		0:  "NETWORK_UNSPECIFIED",
		5:  "NETWORK_UNSUPPORTED",
		1:  "NETWORK_TEST",
		2:  "NETWORK_ATT",
		3:  "NETWORK_TMOBILE",
		4:  "NETWORK_VERIZON",
		6:  "NETWORK_SPRINT",
		7:  "NETWORK_DOCOMO",
		8:  "NETWORK_SOFTBANK",
		9:  "NETWORK_KDDI",
		10: "NETWORK_RAKUTEN",
		11: "NETWORK_VODAFONE",
		12: "NETWORK_EE",
		13: "NETWORK_AMARISOFT",
		14: "NETWORK_ROGER",
		15: "NETWORK_BELL",
		16: "NETWORK_TELUS",
		17: "NETWORK_FI",
	}
	Cellular_NetworkProvider_value = map[string]int32{
		"NETWORK_UNSPECIFIED": 0,
		"NETWORK_UNSUPPORTED": 5,
		"NETWORK_TEST":        1,
		"NETWORK_ATT":         2,
		"NETWORK_TMOBILE":     3,
		"NETWORK_VERIZON":     4,
		"NETWORK_SPRINT":      6,
		"NETWORK_DOCOMO":      7,
		"NETWORK_SOFTBANK":    8,
		"NETWORK_KDDI":        9,
		"NETWORK_RAKUTEN":     10,
		"NETWORK_VODAFONE":    11,
		"NETWORK_EE":          12,
		"NETWORK_AMARISOFT":   13,
		"NETWORK_ROGER":       14,
		"NETWORK_BELL":        15,
		"NETWORK_TELUS":       16,
		"NETWORK_FI":          17,
	}
)

func (x Cellular_NetworkProvider) Enum() *Cellular_NetworkProvider {
	p := new(Cellular_NetworkProvider)
	*p = x
	return p
}

func (x Cellular_NetworkProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cellular_NetworkProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[13].Descriptor()
}

func (Cellular_NetworkProvider) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[13]
}

func (x Cellular_NetworkProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cellular_NetworkProvider.Descriptor instead.
func (Cellular_NetworkProvider) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 1}
}

// The type of SIM in the slot.
type Cellular_SIMType int32

const (
	Cellular_SIM_UNSPECIFIED Cellular_SIMType = 0
	Cellular_SIM_PHYSICAL    Cellular_SIMType = 1
	Cellular_SIM_DIGITAL     Cellular_SIMType = 2
)

// Enum value maps for Cellular_SIMType.
var (
	Cellular_SIMType_name = map[int32]string{
		0: "SIM_UNSPECIFIED",
		1: "SIM_PHYSICAL",
		2: "SIM_DIGITAL",
	}
	Cellular_SIMType_value = map[string]int32{
		"SIM_UNSPECIFIED": 0,
		"SIM_PHYSICAL":    1,
		"SIM_DIGITAL":     2,
	}
)

func (x Cellular_SIMType) Enum() *Cellular_SIMType {
	p := new(Cellular_SIMType)
	*p = x
	return p
}

func (x Cellular_SIMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cellular_SIMType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[14].Descriptor()
}

func (Cellular_SIMType) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[14]
}

func (x Cellular_SIMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cellular_SIMType.Descriptor instead.
func (Cellular_SIMType) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 2}
}

// PeripheralStarfishState describes the state of a starfish device in a testbed.
type Cellular_StarfishState int32

const (
	Cellular_STARFISH_STATE_UNSPECIFIED Cellular_StarfishState = 0
	// Starfish is working and SIMS detected as expected.
	Cellular_STARFISH_STATE_WORKING Cellular_StarfishState = 1
	// Starfish is not working or SIMs are not detected as expected.
	Cellular_STARFISH_STATE_BROKEN Cellular_StarfishState = 2
	// Does not apply to this device.
	Cellular_STARFISH_STATE_NOT_APPLICABLE Cellular_StarfishState = 3
)

// Enum value maps for Cellular_StarfishState.
var (
	Cellular_StarfishState_name = map[int32]string{
		0: "STARFISH_STATE_UNSPECIFIED",
		1: "STARFISH_STATE_WORKING",
		2: "STARFISH_STATE_BROKEN",
		3: "STARFISH_STATE_NOT_APPLICABLE",
	}
	Cellular_StarfishState_value = map[string]int32{
		"STARFISH_STATE_UNSPECIFIED":    0,
		"STARFISH_STATE_WORKING":        1,
		"STARFISH_STATE_BROKEN":         2,
		"STARFISH_STATE_NOT_APPLICABLE": 3,
	}
)

func (x Cellular_StarfishState) Enum() *Cellular_StarfishState {
	p := new(Cellular_StarfishState)
	*p = x
	return p
}

func (x Cellular_StarfishState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cellular_StarfishState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[15].Descriptor()
}

func (Cellular_StarfishState) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[15]
}

func (x Cellular_StarfishState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cellular_StarfishState.Descriptor instead.
func (Cellular_StarfishState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 3}
}

// State describes the state of device.
type HumanMotionRobot_State int32

const (
	HumanMotionRobot_STATE_UNSPECIFIED HumanMotionRobot_State = 0
	// Device and software on it is working as expected.
	HumanMotionRobot_WORKING HumanMotionRobot_State = 1
	// Device is broken or not working as expected.
	HumanMotionRobot_BROKEN HumanMotionRobot_State = 2
	// Device State is not applicable.
	HumanMotionRobot_NOT_APPLICABLE HumanMotionRobot_State = 3
)

// Enum value maps for HumanMotionRobot_State.
var (
	HumanMotionRobot_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
		3: "NOT_APPLICABLE",
	}
	HumanMotionRobot_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"WORKING":           1,
		"BROKEN":            2,
		"NOT_APPLICABLE":    3,
	}
)

func (x HumanMotionRobot_State) Enum() *HumanMotionRobot_State {
	p := new(HumanMotionRobot_State)
	*p = x
	return p
}

func (x HumanMotionRobot_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanMotionRobot_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[16].Descriptor()
}

func (HumanMotionRobot_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[16]
}

func (x HumanMotionRobot_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanMotionRobot_State.Descriptor instead.
func (HumanMotionRobot_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{30, 0}
}

type Dolos_DolosHWMajorRevision int32

const (
	// Default unset value
	Dolos_DOLOS_UNSPECIFIED Dolos_DolosHWMajorRevision = 0
	Dolos_DOLOS_V1          Dolos_DolosHWMajorRevision = 1
)

// Enum value maps for Dolos_DolosHWMajorRevision.
var (
	Dolos_DolosHWMajorRevision_name = map[int32]string{
		0: "DOLOS_UNSPECIFIED",
		1: "DOLOS_V1",
	}
	Dolos_DolosHWMajorRevision_value = map[string]int32{
		"DOLOS_UNSPECIFIED": 0,
		"DOLOS_V1":          1,
	}
)

func (x Dolos_DolosHWMajorRevision) Enum() *Dolos_DolosHWMajorRevision {
	p := new(Dolos_DolosHWMajorRevision)
	*p = x
	return p
}

func (x Dolos_DolosHWMajorRevision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dolos_DolosHWMajorRevision) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[17].Descriptor()
}

func (Dolos_DolosHWMajorRevision) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[17]
}

func (x Dolos_DolosHWMajorRevision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dolos_DolosHWMajorRevision.Descriptor instead.
func (Dolos_DolosHWMajorRevision) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{31, 0}
}

// State describes the state of Dolos.
type Dolos_State int32

const (
	Dolos_STATE_UNSPECIFIED Dolos_State = 0
	// Device and software on it is working as expected.
	Dolos_WORKING Dolos_State = 1
	// Device is broken or not working as expected.
	Dolos_BROKEN Dolos_State = 2
	// Device State is not applicable.
	Dolos_NOT_APPLICABLE Dolos_State = 3
)

// Enum value maps for Dolos_State.
var (
	Dolos_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
		3: "NOT_APPLICABLE",
	}
	Dolos_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"WORKING":           1,
		"BROKEN":            2,
		"NOT_APPLICABLE":    3,
	}
)

func (x Dolos_State) Enum() *Dolos_State {
	p := new(Dolos_State)
	*p = x
	return p
}

func (x Dolos_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dolos_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[18].Descriptor()
}

func (Dolos_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[18]
}

func (x Dolos_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dolos_State.Descriptor instead.
func (Dolos_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{31, 1}
}

// State describes the state of device.
type AudioLatencyToolkit_State int32

const (
	AudioLatencyToolkit_STATE_UNSPECIFIED AudioLatencyToolkit_State = 0
	// Device and software on it is working as expected.
	AudioLatencyToolkit_WORKING AudioLatencyToolkit_State = 1
	// Device is broken or not working as expected.
	AudioLatencyToolkit_BROKEN AudioLatencyToolkit_State = 2
	// Device State is not applicable.
	AudioLatencyToolkit_NOT_APPLICABLE AudioLatencyToolkit_State = 3
)

// Enum value maps for AudioLatencyToolkit_State.
var (
	AudioLatencyToolkit_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "WORKING",
		2: "BROKEN",
		3: "NOT_APPLICABLE",
	}
	AudioLatencyToolkit_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"WORKING":           1,
		"BROKEN":            2,
		"NOT_APPLICABLE":    3,
	}
)

func (x AudioLatencyToolkit_State) Enum() *AudioLatencyToolkit_State {
	p := new(AudioLatencyToolkit_State)
	*p = x
	return p
}

func (x AudioLatencyToolkit_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioLatencyToolkit_State) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[19].Descriptor()
}

func (AudioLatencyToolkit_State) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[19]
}

func (x AudioLatencyToolkit_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioLatencyToolkit_State.Descriptor instead.
func (AudioLatencyToolkit_State) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{32, 0}
}

// PowerSupplyType describes different power supply types for a DUT.
type ChromeOS_PowerSupplyType int32

const (
	ChromeOS_POWER_SUPPLY_UNSPECIFIED ChromeOS_PowerSupplyType = 0
	// Primary power source of the devices is wall-power. Devices does not have
	// a battery.
	ChromeOS_AC_ONLY ChromeOS_PowerSupplyType = 1
	// Primary power source of the devices is battery. Devices still connected
	// to wall-power to charge it.
	ChromeOS_BATTERY ChromeOS_PowerSupplyType = 2
)

// Enum value maps for ChromeOS_PowerSupplyType.
var (
	ChromeOS_PowerSupplyType_name = map[int32]string{
		0: "POWER_SUPPLY_UNSPECIFIED",
		1: "AC_ONLY",
		2: "BATTERY",
	}
	ChromeOS_PowerSupplyType_value = map[string]int32{
		"POWER_SUPPLY_UNSPECIFIED": 0,
		"AC_ONLY":                  1,
		"BATTERY":                  2,
	}
)

func (x ChromeOS_PowerSupplyType) Enum() *ChromeOS_PowerSupplyType {
	p := new(ChromeOS_PowerSupplyType)
	*p = x
	return p
}

func (x ChromeOS_PowerSupplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeOS_PowerSupplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[20].Descriptor()
}

func (ChromeOS_PowerSupplyType) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[20]
}

func (x ChromeOS_PowerSupplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChromeOS_PowerSupplyType.Descriptor instead.
func (ChromeOS_PowerSupplyType) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{34, 0}
}

// Cr50Phase describes different phases of CR50 firmware used on DUT.
// Label indicating the cr50 image type.
type ChromeOS_Cr50Phase int32

const (
	ChromeOS_CR50_PHASE_UNSPECIFIED ChromeOS_Cr50Phase = 0
	ChromeOS_CR50_PHASE_PVT         ChromeOS_Cr50Phase = 1
	ChromeOS_CR50_PHASE_PREPVT      ChromeOS_Cr50Phase = 2
)

// Enum value maps for ChromeOS_Cr50Phase.
var (
	ChromeOS_Cr50Phase_name = map[int32]string{
		0: "CR50_PHASE_UNSPECIFIED",
		1: "CR50_PHASE_PVT",
		2: "CR50_PHASE_PREPVT",
	}
	ChromeOS_Cr50Phase_value = map[string]int32{
		"CR50_PHASE_UNSPECIFIED": 0,
		"CR50_PHASE_PVT":         1,
		"CR50_PHASE_PREPVT":      2,
	}
)

func (x ChromeOS_Cr50Phase) Enum() *ChromeOS_Cr50Phase {
	p := new(ChromeOS_Cr50Phase)
	*p = x
	return p
}

func (x ChromeOS_Cr50Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeOS_Cr50Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[21].Descriptor()
}

func (ChromeOS_Cr50Phase) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[21]
}

func (x ChromeOS_Cr50Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChromeOS_Cr50Phase.Descriptor instead.
func (ChromeOS_Cr50Phase) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{34, 1}
}

// Cr50KeyEnv describes key env for cr50 RW version.
// Label indicating the cr50 RW version.
type ChromeOS_Cr50KeyEnv int32

const (
	ChromeOS_CR50_KEYENV_UNSPECIFIED ChromeOS_Cr50KeyEnv = 0
	ChromeOS_CR50_KEYENV_PROD        ChromeOS_Cr50KeyEnv = 1
	ChromeOS_CR50_KEYENV_DEV         ChromeOS_Cr50KeyEnv = 2
)

// Enum value maps for ChromeOS_Cr50KeyEnv.
var (
	ChromeOS_Cr50KeyEnv_name = map[int32]string{
		0: "CR50_KEYENV_UNSPECIFIED",
		1: "CR50_KEYENV_PROD",
		2: "CR50_KEYENV_DEV",
	}
	ChromeOS_Cr50KeyEnv_value = map[string]int32{
		"CR50_KEYENV_UNSPECIFIED": 0,
		"CR50_KEYENV_PROD":        1,
		"CR50_KEYENV_DEV":         2,
	}
)

func (x ChromeOS_Cr50KeyEnv) Enum() *ChromeOS_Cr50KeyEnv {
	p := new(ChromeOS_Cr50KeyEnv)
	*p = x
	return p
}

func (x ChromeOS_Cr50KeyEnv) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeOS_Cr50KeyEnv) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[22].Descriptor()
}

func (ChromeOS_Cr50KeyEnv) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[22]
}

func (x ChromeOS_Cr50KeyEnv) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChromeOS_Cr50KeyEnv.Descriptor instead.
func (ChromeOS_Cr50KeyEnv) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{34, 2}
}

// PeripheralWifiState describes the state of peripheral wifi testbed.
type ChromeOS_PeripheralWifiState int32

const (
	ChromeOS_PERIPHERAL_WIFI_STATE_UNSPECIFIED ChromeOS_PeripheralWifiState = 0
	// All wifirouters are working as expected.
	ChromeOS_PERIPHERAL_WIFI_STATE_WORKING ChromeOS_PeripheralWifiState = 2
	// Not all wifirouters are working as expected.
	ChromeOS_PERIPHERAL_WIFI_STATE_BROKEN ChromeOS_PeripheralWifiState = 3
	// State is not applicable for setup.
	ChromeOS_PERIPHERAL_WIFI_STATE_NOT_APPLICABLE ChromeOS_PeripheralWifiState = 4
)

// Enum value maps for ChromeOS_PeripheralWifiState.
var (
	ChromeOS_PeripheralWifiState_name = map[int32]string{
		0: "PERIPHERAL_WIFI_STATE_UNSPECIFIED",
		2: "PERIPHERAL_WIFI_STATE_WORKING",
		3: "PERIPHERAL_WIFI_STATE_BROKEN",
		4: "PERIPHERAL_WIFI_STATE_NOT_APPLICABLE",
	}
	ChromeOS_PeripheralWifiState_value = map[string]int32{
		"PERIPHERAL_WIFI_STATE_UNSPECIFIED":    0,
		"PERIPHERAL_WIFI_STATE_WORKING":        2,
		"PERIPHERAL_WIFI_STATE_BROKEN":         3,
		"PERIPHERAL_WIFI_STATE_NOT_APPLICABLE": 4,
	}
)

func (x ChromeOS_PeripheralWifiState) Enum() *ChromeOS_PeripheralWifiState {
	p := new(ChromeOS_PeripheralWifiState)
	*p = x
	return p
}

func (x ChromeOS_PeripheralWifiState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeOS_PeripheralWifiState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_recovery_tlw_models_proto_enumTypes[23].Descriptor()
}

func (ChromeOS_PeripheralWifiState) Type() protoreflect.EnumType {
	return &file_infra_cros_recovery_tlw_models_proto_enumTypes[23]
}

func (x ChromeOS_PeripheralWifiState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChromeOS_PeripheralWifiState.Descriptor instead.
func (ChromeOS_PeripheralWifiState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{34, 3}
}

// RunRequest represents result of executed command.
type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Command executed on the resource.
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Command arguments.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Command execution timeout.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Run command in background.
	InBackground bool `protobuf:"varint,5,opt,name=in_background,json=inBackground,proto3" json:"in_background,omitempty"`
	// SSH username to use. Leave unset to use default (root).
	SshUsername string `protobuf:"bytes,6,opt,name=ssh_username,json=sshUsername,proto3" json:"ssh_username,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{0}
}

func (x *RunRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RunRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RunRequest) GetInBackground() bool {
	if x != nil {
		return x.InBackground
	}
	return false
}

func (x *RunRequest) GetSshUsername() string {
	if x != nil {
		return x.SshUsername
	}
	return ""
}

// RunResult represents result of executed command.
type RunResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full command executed on the resource.
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Exit code return.
	// Eg: 0 - everything is good
	//
	//		   1 - executed stop with error code `1`
	//	    15 - timeout of execution
	ExitCode int32 `protobuf:"varint,2,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	// Standard output
	Stdout string `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Standard error output
	Stderr string `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *RunResult) Reset() {
	*x = RunResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResult) ProtoMessage() {}

func (x *RunResult) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResult.ProtoReflect.Descriptor instead.
func (*RunResult) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{1}
}

func (x *RunResult) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *RunResult) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *RunResult) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

// ProvisionRequest provides data to perform provisioning of the device.
type ProvisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Path to system image.
	// Path to the GS file.
	// Example: gs://bucket/file_name
	SystemImagePath string `protobuf:"bytes,2,opt,name=system_image_path,json=systemImagePath,proto3" json:"system_image_path,omitempty"`
	// Prevent reboot during provision OS.
	PreventReboot bool `protobuf:"varint,3,opt,name=prevent_reboot,json=preventReboot,proto3" json:"prevent_reboot,omitempty"`
}

func (x *ProvisionRequest) Reset() {
	*x = ProvisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionRequest) ProtoMessage() {}

func (x *ProvisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionRequest.ProtoReflect.Descriptor instead.
func (*ProvisionRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{2}
}

func (x *ProvisionRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProvisionRequest) GetSystemImagePath() string {
	if x != nil {
		return x.SystemImagePath
	}
	return ""
}

func (x *ProvisionRequest) GetPreventReboot() bool {
	if x != nil {
		return x.PreventReboot
	}
	return false
}

// CallBluetoothPeerRequest represents data to run command on bluetooth peer.
type CallBluetoothPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Method called on service.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Arguments provided to the service.
	Args []*xmlrpc.Value `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *CallBluetoothPeerRequest) Reset() {
	*x = CallBluetoothPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallBluetoothPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBluetoothPeerRequest) ProtoMessage() {}

func (x *CallBluetoothPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBluetoothPeerRequest.ProtoReflect.Descriptor instead.
func (*CallBluetoothPeerRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{3}
}

func (x *CallBluetoothPeerRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CallBluetoothPeerRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallBluetoothPeerRequest) GetArgs() []*xmlrpc.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

// CallBluetoothPeerResponse represents result data from running command on
// bluetooth peer.
type CallBluetoothPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *xmlrpc.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Fault bool          `protobuf:"varint,2,opt,name=fault,proto3" json:"fault,omitempty"`
}

func (x *CallBluetoothPeerResponse) Reset() {
	*x = CallBluetoothPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallBluetoothPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallBluetoothPeerResponse) ProtoMessage() {}

func (x *CallBluetoothPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallBluetoothPeerResponse.ProtoReflect.Descriptor instead.
func (*CallBluetoothPeerResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{4}
}

func (x *CallBluetoothPeerResponse) GetValue() *xmlrpc.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CallBluetoothPeerResponse) GetFault() bool {
	if x != nil {
		return x.Fault
	}
	return false
}

// CallTouchHostdRequest represents data to run command on touchhost.
type CallTouchHostdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Method called on service.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Arguments provided to the service.
	Args []*xmlrpc.Value `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Timeout
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CallTouchHostdRequest) Reset() {
	*x = CallTouchHostdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTouchHostdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTouchHostdRequest) ProtoMessage() {}

func (x *CallTouchHostdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTouchHostdRequest.ProtoReflect.Descriptor instead.
func (*CallTouchHostdRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{5}
}

func (x *CallTouchHostdRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CallTouchHostdRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallTouchHostdRequest) GetArgs() []*xmlrpc.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CallTouchHostdRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// CallTouchHostdResponse represents result data from running command on
// touchhost.
type CallTouchHostdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *xmlrpc.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Fault bool          `protobuf:"varint,2,opt,name=fault,proto3" json:"fault,omitempty"`
}

func (x *CallTouchHostdResponse) Reset() {
	*x = CallTouchHostdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTouchHostdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTouchHostdResponse) ProtoMessage() {}

func (x *CallTouchHostdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTouchHostdResponse.ProtoReflect.Descriptor instead.
func (*CallTouchHostdResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{6}
}

func (x *CallTouchHostdResponse) GetValue() *xmlrpc.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CallTouchHostdResponse) GetFault() bool {
	if x != nil {
		return x.Fault
	}
	return false
}

// RunRPMActionRequest represents data to perform action on RPM outlet.
type RunRPMActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname of the DUT.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
	RpmHostname string `protobuf:"bytes,2,opt,name=rpm_hostname,json=rpmHostname,proto3" json:"rpm_hostname,omitempty"`
	// Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
	RpmOutlet string `protobuf:"bytes,3,opt,name=rpm_outlet,json=rpmOutlet,proto3" json:"rpm_outlet,omitempty"`
	// Expected state to switch on.
	Action RunRPMActionRequest_Action `protobuf:"varint,4,opt,name=action,proto3,enum=chromeos.recovery.RunRPMActionRequest_Action" json:"action,omitempty"`
}

func (x *RunRPMActionRequest) Reset() {
	*x = RunRPMActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRPMActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRPMActionRequest) ProtoMessage() {}

func (x *RunRPMActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRPMActionRequest.ProtoReflect.Descriptor instead.
func (*RunRPMActionRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{7}
}

func (x *RunRPMActionRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RunRPMActionRequest) GetRpmHostname() string {
	if x != nil {
		return x.RpmHostname
	}
	return ""
}

func (x *RunRPMActionRequest) GetRpmOutlet() string {
	if x != nil {
		return x.RpmOutlet
	}
	return ""
}

func (x *RunRPMActionRequest) GetAction() RunRPMActionRequest_Action {
	if x != nil {
		return x.Action
	}
	return RunRPMActionRequest_UNSPECIFIED
}

// RPMOutlet is remote power management outlet allows perform an action to do
// OFF/ON/CYCLE on it.
type RPMOutlet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
	Outlet string `protobuf:"bytes,2,opt,name=outlet,proto3" json:"outlet,omitempty"`
	// State of the component.
	State RPMOutlet_State `protobuf:"varint,3,opt,name=state,proto3,enum=chromeos.recovery.RPMOutlet_State" json:"state,omitempty"`
}

func (x *RPMOutlet) Reset() {
	*x = RPMOutlet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPMOutlet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPMOutlet) ProtoMessage() {}

func (x *RPMOutlet) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPMOutlet.ProtoReflect.Descriptor instead.
func (*RPMOutlet) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{8}
}

func (x *RPMOutlet) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RPMOutlet) GetOutlet() string {
	if x != nil {
		return x.Outlet
	}
	return ""
}

func (x *RPMOutlet) GetState() RPMOutlet_State {
	if x != nil {
		return x.State
	}
	return RPMOutlet_UNSPECIFIED
}

// Router devices
type WifiRouterHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name name of router device e.g. "chromeos15-row99-rack33-host105-router".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the wifi router.
	State WifiRouterHost_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.WifiRouterHost_State" json:"state,omitempty"`
	// The model of the router.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The board of the router. Deprecated as it is not used by anything anymore.
	//
	// Deprecated: Marked as deprecated in infra/cros/recovery/tlw/models.proto.
	Board string `protobuf:"bytes,4,opt,name=board,proto3" json:"board,omitempty"`
	// RPMOutlet the router power connects to if it exists.
	RPMOutlet *RPMOutlet `protobuf:"bytes,5,opt,name=RPMOutlet,proto3" json:"RPMOutlet,omitempty"`
	// Supported test router hardware and software features.
	Features []api.WifiRouterFeature `protobuf:"varint,6,rep,packed,name=features,proto3,enum=chromiumos.test.lab.api.WifiRouterFeature" json:"features,omitempty"`
	// The type of router device this is (e.g. OpenWrt-based, ChromeOS Gale).
	DeviceType api.WifiRouterDeviceType `protobuf:"varint,7,opt,name=device_type,json=deviceType,proto3,enum=chromiumos.test.lab.api.WifiRouterDeviceType" json:"device_type,omitempty"`
}

func (x *WifiRouterHost) Reset() {
	*x = WifiRouterHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WifiRouterHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiRouterHost) ProtoMessage() {}

func (x *WifiRouterHost) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiRouterHost.ProtoReflect.Descriptor instead.
func (*WifiRouterHost) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{9}
}

func (x *WifiRouterHost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WifiRouterHost) GetState() WifiRouterHost_State {
	if x != nil {
		return x.State
	}
	return WifiRouterHost_UNSPECIFIED
}

func (x *WifiRouterHost) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Deprecated: Marked as deprecated in infra/cros/recovery/tlw/models.proto.
func (x *WifiRouterHost) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *WifiRouterHost) GetRPMOutlet() *RPMOutlet {
	if x != nil {
		return x.RPMOutlet
	}
	return nil
}

func (x *WifiRouterHost) GetFeatures() []api.WifiRouterFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *WifiRouterHost) GetDeviceType() api.WifiRouterDeviceType {
	if x != nil {
		return x.DeviceType
	}
	return api.WifiRouterDeviceType(0)
}

type AsusWrtRouterControllerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsusModel string `protobuf:"bytes,1,opt,name=asus_model,json=asusModel,proto3" json:"asus_model,omitempty"`
}

func (x *AsusWrtRouterControllerState) Reset() {
	*x = AsusWrtRouterControllerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsusWrtRouterControllerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsusWrtRouterControllerState) ProtoMessage() {}

func (x *AsusWrtRouterControllerState) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsusWrtRouterControllerState.ProtoReflect.Descriptor instead.
func (*AsusWrtRouterControllerState) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{10}
}

func (x *AsusWrtRouterControllerState) GetAsusModel() string {
	if x != nil {
		return x.AsusModel
	}
	return ""
}

type OpenWrtRouterControllerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceBuildInfo   *api.CrosOpenWrtImageBuildInfo     `protobuf:"bytes,1,opt,name=device_build_info,json=deviceBuildInfo,proto3" json:"device_build_info,omitempty"`
	Config            *api.OpenWrtWifiRouterDeviceConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ExpectedImageUuid string                             `protobuf:"bytes,3,opt,name=expected_image_uuid,json=expectedImageUuid,proto3" json:"expected_image_uuid,omitempty"`
}

func (x *OpenWrtRouterControllerState) Reset() {
	*x = OpenWrtRouterControllerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenWrtRouterControllerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenWrtRouterControllerState) ProtoMessage() {}

func (x *OpenWrtRouterControllerState) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenWrtRouterControllerState.ProtoReflect.Descriptor instead.
func (*OpenWrtRouterControllerState) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{11}
}

func (x *OpenWrtRouterControllerState) GetDeviceBuildInfo() *api.CrosOpenWrtImageBuildInfo {
	if x != nil {
		return x.DeviceBuildInfo
	}
	return nil
}

func (x *OpenWrtRouterControllerState) GetConfig() *api.OpenWrtWifiRouterDeviceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *OpenWrtRouterControllerState) GetExpectedImageUuid() string {
	if x != nil {
		return x.ExpectedImageUuid
	}
	return ""
}

// UbuntuRouterControllerState holds exec state information for wifirouter
// execs that use the UbuntuRouterController.
// Used only as internal state for scope. Do not use for store data.
type UbuntuRouterControllerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system product name as specified in the device's DMI table.
	SystemProductName string `protobuf:"bytes,1,opt,name=system_product_name,json=systemProductName,proto3" json:"system_product_name,omitempty"`
	// The name of the network controller found on the device.
	NetworkControllerName string `protobuf:"bytes,2,opt,name=network_controller_name,json=networkControllerName,proto3" json:"network_controller_name,omitempty"`
}

func (x *UbuntuRouterControllerState) Reset() {
	*x = UbuntuRouterControllerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UbuntuRouterControllerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UbuntuRouterControllerState) ProtoMessage() {}

func (x *UbuntuRouterControllerState) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UbuntuRouterControllerState.ProtoReflect.Descriptor instead.
func (*UbuntuRouterControllerState) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{12}
}

func (x *UbuntuRouterControllerState) GetSystemProductName() string {
	if x != nil {
		return x.SystemProductName
	}
	return ""
}

func (x *UbuntuRouterControllerState) GetNetworkControllerName() string {
	if x != nil {
		return x.NetworkControllerName
	}
	return ""
}

// BluetoothPeerScopeState holds exec state information for btpeer execs.
// Meant to describe the exec state for a single btpeer.
// Used only as internal state for scope. Do not use for store data.
type BluetoothPeerScopeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the BluetoothPeer device this state is for.
	Btpeer *BluetoothPeer `protobuf:"bytes,1,opt,name=btpeer,proto3" json:"btpeer,omitempty"`
	// Chameleond state info for this btpeer.
	Chameleond *BluetoothPeerScopeState_Chameleond `protobuf:"bytes,2,opt,name=chameleond,proto3" json:"chameleond,omitempty"`
	// RaspiosCrosBtpeerImage state info for this btpeer.
	RaspiosCrosBtpeerImage *BluetoothPeerScopeState_RaspiosCrosBtpeerImage `protobuf:"bytes,3,opt,name=raspios_cros_btpeer_image,json=raspiosCrosBtpeerImage,proto3" json:"raspios_cros_btpeer_image,omitempty"`
}

func (x *BluetoothPeerScopeState) Reset() {
	*x = BluetoothPeerScopeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothPeerScopeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothPeerScopeState) ProtoMessage() {}

func (x *BluetoothPeerScopeState) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothPeerScopeState.ProtoReflect.Descriptor instead.
func (*BluetoothPeerScopeState) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{13}
}

func (x *BluetoothPeerScopeState) GetBtpeer() *BluetoothPeer {
	if x != nil {
		return x.Btpeer
	}
	return nil
}

func (x *BluetoothPeerScopeState) GetChameleond() *BluetoothPeerScopeState_Chameleond {
	if x != nil {
		return x.Chameleond
	}
	return nil
}

func (x *BluetoothPeerScopeState) GetRaspiosCrosBtpeerImage() *BluetoothPeerScopeState_RaspiosCrosBtpeerImage {
	if x != nil {
		return x.RaspiosCrosBtpeerImage
	}
	return nil
}

// VersionRequest holds data for version service request.
type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of device.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Version type describe type of versions and device type associated with
	// that.
	Type VersionRequest_VersionType `protobuf:"varint,2,opt,name=type,proto3,enum=chromeos.recovery.VersionRequest_VersionType" json:"type,omitempty"`
	// Board of the device.
	Board string `protobuf:"bytes,3,opt,name=board,proto3" json:"board,omitempty"`
	// Model of the device.
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{14}
}

func (x *VersionRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *VersionRequest) GetType() VersionRequest_VersionType {
	if x != nil {
		return x.Type
	}
	return VersionRequest_UNSPECIFIED
}

func (x *VersionRequest) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *VersionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// VersionResponse holds data received from service.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All version values.
	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{15}
}

func (x *VersionResponse) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// CrosAudio holds infor for audio information of the DUT.
type DUTAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate if the DUT is housed in an audio box to record / replay audio
	// for audio testing.
	InBox bool `protobuf:"varint,1,opt,name=in_box,json=inBox,proto3" json:"in_box,omitempty"`
	// Indicate if the DUT is connected to Atrus speakermic
	Atrus bool `protobuf:"varint,2,opt,name=atrus,proto3" json:"atrus,omitempty"`
	// Indicate if the DUT is connected to chameleon through static audio cable
	StaticCable bool `protobuf:"varint,3,opt,name=static_cable,json=staticCable,proto3" json:"static_cable,omitempty"`
	// Audio loopback dongle is plugged in.
	LoopbackState DUTAudio_LoopbackState `protobuf:"varint,4,opt,name=loopback_state,json=loopbackState,proto3,enum=chromeos.recovery.DUTAudio_LoopbackState" json:"loopback_state,omitempty"`
}

func (x *DUTAudio) Reset() {
	*x = DUTAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DUTAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DUTAudio) ProtoMessage() {}

func (x *DUTAudio) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DUTAudio.ProtoReflect.Descriptor instead.
func (*DUTAudio) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{16}
}

func (x *DUTAudio) GetInBox() bool {
	if x != nil {
		return x.InBox
	}
	return false
}

func (x *DUTAudio) GetAtrus() bool {
	if x != nil {
		return x.Atrus
	}
	return false
}

func (x *DUTAudio) GetStaticCable() bool {
	if x != nil {
		return x.StaticCable
	}
	return false
}

func (x *DUTAudio) GetLoopbackState() DUTAudio_LoopbackState {
	if x != nil {
		return x.LoopbackState
	}
	return DUTAudio_LOOPBACK_UNSPECIFIED
}

// InitServodRequest represents data to initiate servod daemon on servo-host.
type InitServodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of device.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// ServodOptions options to provide options for servod daemon.
	Options *ServodOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// Prepare servo-host without servod service.
	NoServod bool `protobuf:"varint,3,opt,name=no_servod,json=noServod,proto3" json:"no_servod,omitempty"`
}

func (x *InitServodRequest) Reset() {
	*x = InitServodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitServodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitServodRequest) ProtoMessage() {}

func (x *InitServodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitServodRequest.ProtoReflect.Descriptor instead.
func (*InitServodRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{17}
}

func (x *InitServodRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *InitServodRequest) GetOptions() *ServodOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InitServodRequest) GetNoServod() bool {
	if x != nil {
		return x.NoServod
	}
	return false
}

// ServodOption represents options to start servod.
type ServodOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Board of DUT connected to servod.
	DutBoard string `protobuf:"bytes,1,opt,name=dut_board,json=dutBoard,proto3" json:"dut_board,omitempty"`
	// Model of DUT connected to servod.
	DutModel string `protobuf:"bytes,2,opt,name=dut_model,json=dutModel,proto3" json:"dut_model,omitempty"`
	// Port assigned to servod.
	ServodPort int32 `protobuf:"varint,3,opt,name=servod_port,json=servodPort,proto3" json:"servod_port,omitempty"`
	// Servo board serial.
	ServoSerial string `protobuf:"bytes,4,opt,name=servo_serial,json=servoSerial,proto3" json:"servo_serial,omitempty"`
	// Specified dual setup for servod.
	ServoDual bool `protobuf:"varint,5,opt,name=servo_dual,json=servoDual,proto3" json:"servo_dual,omitempty"`
	// Specified if need apply CR50 config.
	UseCr50Config bool `protobuf:"varint,6,opt,name=use_cr50_config,json=useCr50Config,proto3" json:"use_cr50_config,omitempty"`
	// Use recovery mode when start servod.
	RecoveryMode bool `protobuf:"varint,7,opt,name=recovery_mode,json=recoveryMode,proto3" json:"recovery_mode,omitempty"`
}

func (x *ServodOptions) Reset() {
	*x = ServodOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServodOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServodOptions) ProtoMessage() {}

func (x *ServodOptions) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServodOptions.ProtoReflect.Descriptor instead.
func (*ServodOptions) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{18}
}

func (x *ServodOptions) GetDutBoard() string {
	if x != nil {
		return x.DutBoard
	}
	return ""
}

func (x *ServodOptions) GetDutModel() string {
	if x != nil {
		return x.DutModel
	}
	return ""
}

func (x *ServodOptions) GetServodPort() int32 {
	if x != nil {
		return x.ServodPort
	}
	return 0
}

func (x *ServodOptions) GetServoSerial() string {
	if x != nil {
		return x.ServoSerial
	}
	return ""
}

func (x *ServodOptions) GetServoDual() bool {
	if x != nil {
		return x.ServoDual
	}
	return false
}

func (x *ServodOptions) GetUseCr50Config() bool {
	if x != nil {
		return x.UseCr50Config
	}
	return false
}

func (x *ServodOptions) GetRecoveryMode() bool {
	if x != nil {
		return x.RecoveryMode
	}
	return false
}

// ServoTopology describes servo devices used to provide servo functionality.
type ServoTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root     *ServoTopologyItem   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Children []*ServoTopologyItem `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *ServoTopology) Reset() {
	*x = ServoTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServoTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServoTopology) ProtoMessage() {}

func (x *ServoTopology) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServoTopology.ProtoReflect.Descriptor instead.
func (*ServoTopology) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{19}
}

func (x *ServoTopology) GetRoot() *ServoTopologyItem {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *ServoTopology) GetChildren() []*ServoTopologyItem {
	if x != nil {
		return x.Children
	}
	return nil
}

// ServoTopologyItem describes details of one servo device.
type ServoTopologyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type provides the type of servo device. Keeping as String to avoid issue
	// with introduce new type.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// sysfs_product provides the product name of the device recorded in File
	// System.
	SysfsProduct string `protobuf:"bytes,2,opt,name=sysfs_product,json=sysfsProduct,proto3" json:"sysfs_product,omitempty"`
	// serial provides the serial number of the device.
	Serial string `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	// usb_hub_port provides the port connection to the device.
	// e.g. '1-6.2.2' where
	//
	//	'1-6'  - port on the labstation
	//	'2'    - port on smart-hub connected to the labstation
	//	'2'    - port on servo hub (part of servo_v4 or servo_v4.1) connected to
	//	the smart-hub
	//
	// The same path will look '1-6.2' if connected servo_v4 directly to the
	// labstation.
	UsbHubPort string `protobuf:"bytes,4,opt,name=usb_hub_port,json=usbHubPort,proto3" json:"usb_hub_port,omitempty"`
	// This is the complete path on the file system for the servo device.
	SysfsPath string `protobuf:"bytes,5,opt,name=sysfs_path,json=sysfsPath,proto3" json:"sysfs_path,omitempty"`
	// This is the version of servo device.
	FwVersion string `protobuf:"bytes,6,opt,name=fw_version,json=fwVersion,proto3" json:"fw_version,omitempty"`
}

func (x *ServoTopologyItem) Reset() {
	*x = ServoTopologyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServoTopologyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServoTopologyItem) ProtoMessage() {}

func (x *ServoTopologyItem) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServoTopologyItem.ProtoReflect.Descriptor instead.
func (*ServoTopologyItem) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{20}
}

func (x *ServoTopologyItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServoTopologyItem) GetSysfsProduct() string {
	if x != nil {
		return x.SysfsProduct
	}
	return ""
}

func (x *ServoTopologyItem) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *ServoTopologyItem) GetUsbHubPort() string {
	if x != nil {
		return x.UsbHubPort
	}
	return ""
}

func (x *ServoTopologyItem) GetSysfsPath() string {
	if x != nil {
		return x.SysfsPath
	}
	return ""
}

func (x *ServoTopologyItem) GetFwVersion() string {
	if x != nil {
		return x.FwVersion
	}
	return ""
}

// ServoHost holds info about host to manage servod services and verify
// connected servo devices. Example: labstation, servo-host container.
type ServoHost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the resource name.
	Name  string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	State ServoHost_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.ServoHost_State" json:"state,omitempty"`
	// Serial number of the root servo device.
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Channel of firmware used on servo devices.
	FirmwareChannel ServoFwChannel `protobuf:"varint,4,opt,name=firmware_channel,json=firmwareChannel,proto3,enum=chromeos.recovery.ServoFwChannel" json:"firmware_channel,omitempty"`
	// Self representation of servo-setup by servod.
	// Example: servo_v4_with_servo_micro, servo_v4_with_ccd_cr50.
	ServodType string `protobuf:"bytes,5,opt,name=servod_type,json=servodType,proto3" json:"servod_type,omitempty"`
	// State of the USB-key connected to the servo.
	UsbkeyState HardwareState `protobuf:"varint,6,opt,name=usbkey_state,json=usbkeyState,proto3,enum=chromeos.recovery.HardwareState" json:"usbkey_state,omitempty"`
	// Port user on the host to run servod daemon. Expected value between 9900
	// and 9999.
	ServodPort int32 `protobuf:"varint,7,opt,name=servod_port,json=servodPort,proto3" json:"servod_port,omitempty"`
	// Smart USB-hub is present on setup.
	SmartUsbhubPresent bool `protobuf:"varint,8,opt,name=smart_usbhub_present,json=smartUsbhubPresent,proto3" json:"smart_usbhub_present,omitempty"`
	// Servo Topology of servo devices.
	ServoTopology *ServoTopology `protobuf:"bytes,9,opt,name=servo_topology,json=servoTopology,proto3" json:"servo_topology,omitempty"`
	// Name of the servod container if the servo uses a
	// servod-container.
	ContainerName string `protobuf:"bytes,10,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// UsbDrive contains details of the servo's plugged USB drive.
	UsbDrive *api.UsbDrive `protobuf:"bytes,11,opt,name=usb_drive,json=usbDrive,proto3" json:"usb_drive,omitempty"`
}

func (x *ServoHost) Reset() {
	*x = ServoHost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServoHost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServoHost) ProtoMessage() {}

func (x *ServoHost) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServoHost.ProtoReflect.Descriptor instead.
func (*ServoHost) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{21}
}

func (x *ServoHost) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServoHost) GetState() ServoHost_State {
	if x != nil {
		return x.State
	}
	return ServoHost_STATE_UNSPECIFIED
}

func (x *ServoHost) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ServoHost) GetFirmwareChannel() ServoFwChannel {
	if x != nil {
		return x.FirmwareChannel
	}
	return ServoFwChannel_FW_UNSPECIFIED
}

func (x *ServoHost) GetServodType() string {
	if x != nil {
		return x.ServodType
	}
	return ""
}

func (x *ServoHost) GetUsbkeyState() HardwareState {
	if x != nil {
		return x.UsbkeyState
	}
	return HardwareState_HARDWARE_UNSPECIFIED
}

func (x *ServoHost) GetServodPort() int32 {
	if x != nil {
		return x.ServodPort
	}
	return 0
}

func (x *ServoHost) GetSmartUsbhubPresent() bool {
	if x != nil {
		return x.SmartUsbhubPresent
	}
	return false
}

func (x *ServoHost) GetServoTopology() *ServoTopology {
	if x != nil {
		return x.ServoTopology
	}
	return nil
}

func (x *ServoHost) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ServoHost) GetUsbDrive() *api.UsbDrive {
	if x != nil {
		return x.UsbDrive
	}
	return nil
}

// ProvisionedInfo holds info about provisioned info for the DUT.
type ProvisionedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CrosVersion tells which ChromeOS version is on the DUT.
	// Example: board-release/R90-13816.47.0
	CrosVersion string `protobuf:"bytes,1,opt,name=cros_version,json=crosVersion,proto3" json:"cros_version,omitempty"`
	// JobRepoUrl provide path to download client code to the DUT.
	// Example: http://{cache_server}:8082/download/{gs_path}
	JobRepoUrl string `protobuf:"bytes,2,opt,name=job_repo_url,json=jobRepoUrl,proto3" json:"job_repo_url,omitempty"`
}

func (x *ProvisionedInfo) Reset() {
	*x = ProvisionedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionedInfo) ProtoMessage() {}

func (x *ProvisionedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionedInfo.ProtoReflect.Descriptor instead.
func (*ProvisionedInfo) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{22}
}

func (x *ProvisionedInfo) GetCrosVersion() string {
	if x != nil {
		return x.CrosVersion
	}
	return ""
}

func (x *ProvisionedInfo) GetJobRepoUrl() string {
	if x != nil {
		return x.JobRepoUrl
	}
	return ""
}

// Storage holds info about internal storage of the DUT.
type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the component.
	State HardwareState `protobuf:"varint,1,opt,name=state,proto3,enum=chromeos.recovery.HardwareState" json:"state,omitempty"`
	// Type of storage used on device.
	Type Storage_Type `protobuf:"varint,2,opt,name=type,proto3,enum=chromeos.recovery.Storage_Type" json:"type,omitempty"`
}

func (x *Storage) Reset() {
	*x = Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{23}
}

func (x *Storage) GetState() HardwareState {
	if x != nil {
		return x.State
	}
	return HardwareState_HARDWARE_UNSPECIFIED
}

func (x *Storage) GetType() Storage_Type {
	if x != nil {
		return x.Type
	}
	return Storage_TYPE_UNSPECIFIED
}

// Chameleon holds info about chameleon device.
type Chameleon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// State of the device.
	State Chameleon_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.Chameleon_State" json:"state,omitempty"`
	// RPMOutlet of the Chameleon.
	RPMOutlet *RPMOutlet `protobuf:"bytes,3,opt,name=RPMOutlet,proto3" json:"RPMOutlet,omitempty"`
	// State of the AudioBoxJackPlugger
	Audioboxjackpluggerstate Chameleon_AudioBoxJackPluggerState `protobuf:"varint,4,opt,name=audioboxjackpluggerstate,proto3,enum=chromeos.recovery.Chameleon_AudioBoxJackPluggerState" json:"audioboxjackpluggerstate,omitempty"`
}

func (x *Chameleon) Reset() {
	*x = Chameleon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chameleon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chameleon) ProtoMessage() {}

func (x *Chameleon) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chameleon.ProtoReflect.Descriptor instead.
func (*Chameleon) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{24}
}

func (x *Chameleon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chameleon) GetState() Chameleon_State {
	if x != nil {
		return x.State
	}
	return Chameleon_STATE_UNSPECIFIED
}

func (x *Chameleon) GetRPMOutlet() *RPMOutlet {
	if x != nil {
		return x.RPMOutlet
	}
	return nil
}

func (x *Chameleon) GetAudioboxjackpluggerstate() Chameleon_AudioBoxJackPluggerState {
	if x != nil {
		return x.Audioboxjackpluggerstate
	}
	return Chameleon_AUDIOBOX_JACKPLUGGER_UNSPECIFIED
}

// BluetoothPeer models a Bluetooth peer device and its state as used by
// recovery.
type BluetoothPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// State of the device.
	State BluetoothPeer_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.BluetoothPeer_State" json:"state,omitempty"`
}

func (x *BluetoothPeer) Reset() {
	*x = BluetoothPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothPeer) ProtoMessage() {}

func (x *BluetoothPeer) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothPeer.ProtoReflect.Descriptor instead.
func (*BluetoothPeer) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{25}
}

func (x *BluetoothPeer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BluetoothPeer) GetState() BluetoothPeer_State {
	if x != nil {
		return x.State
	}
	return BluetoothPeer_STATE_UNSPECIFIED
}

// Wifi holds info about internal wifi of the DUT.
type Wifi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the component.
	State HardwareState `protobuf:"varint,1,opt,name=state,proto3,enum=chromeos.recovery.HardwareState" json:"state,omitempty"`
	// Name of wifi chip used on the device.
	ChipName string `protobuf:"bytes,2,opt,name=chip_name,json=chipName,proto3" json:"chip_name,omitempty"`
}

func (x *Wifi) Reset() {
	*x = Wifi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wifi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wifi) ProtoMessage() {}

func (x *Wifi) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wifi.ProtoReflect.Descriptor instead.
func (*Wifi) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{26}
}

func (x *Wifi) GetState() HardwareState {
	if x != nil {
		return x.State
	}
	return HardwareState_HARDWARE_UNSPECIFIED
}

func (x *Wifi) GetChipName() string {
	if x != nil {
		return x.ChipName
	}
	return ""
}

// Bluetooth holds info about internal bluetooth of the DUT.
type Bluetooth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the component.
	State HardwareState `protobuf:"varint,1,opt,name=state,proto3,enum=chromeos.recovery.HardwareState" json:"state,omitempty"`
	// The hardware expected present based on hardware feature.
	Expected bool `protobuf:"varint,2,opt,name=expected,proto3" json:"expected,omitempty"`
}

func (x *Bluetooth) Reset() {
	*x = Bluetooth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bluetooth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bluetooth) ProtoMessage() {}

func (x *Bluetooth) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bluetooth.ProtoReflect.Descriptor instead.
func (*Bluetooth) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{27}
}

func (x *Bluetooth) GetState() HardwareState {
	if x != nil {
		return x.State
	}
	return HardwareState_HARDWARE_UNSPECIFIED
}

func (x *Bluetooth) GetExpected() bool {
	if x != nil {
		return x.Expected
	}
	return false
}

// Cellular holds info about the cellular of the DUT.
type Cellular struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the modem.
	ModemState HardwareState `protobuf:"varint,1,opt,name=modem_state,json=modemState,proto3,enum=chromeos.recovery.HardwareState" json:"modem_state,omitempty"`
	// Device carrier.
	Carrier string `protobuf:"bytes,2,opt,name=carrier,proto3" json:"carrier,omitempty"`
	// Model variant.
	ModelVariant string `protobuf:"bytes,3,opt,name=model_variant,json=modelVariant,proto3" json:"model_variant,omitempty"`
	// Modem-specific label info.
	ModemInfo *Cellular_ModemInfo `protobuf:"bytes,4,opt,name=modem_info,json=modemInfo,proto3" json:"modem_info,omitempty"`
	// Information on all SIMs available on the DUT.
	SimInfos []*Cellular_SIMInfo `protobuf:"bytes,5,rep,name=sim_infos,json=simInfos,proto3" json:"sim_infos,omitempty"`
	// Information on all carrier dependencies that can be satisfied by this DUT.
	SupportedCarriers []string `protobuf:"bytes,6,rep,name=supported_carriers,json=supportedCarriers,proto3" json:"supported_carriers,omitempty"`
	// State of the starfish connected to the device.
	StarfishState Cellular_StarfishState `protobuf:"varint,7,opt,name=starfish_state,json=starfishState,proto3,enum=chromeos.recovery.Cellular_StarfishState" json:"starfish_state,omitempty"`
}

func (x *Cellular) Reset() {
	*x = Cellular{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cellular) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cellular) ProtoMessage() {}

func (x *Cellular) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cellular.ProtoReflect.Descriptor instead.
func (*Cellular) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28}
}

func (x *Cellular) GetModemState() HardwareState {
	if x != nil {
		return x.ModemState
	}
	return HardwareState_HARDWARE_UNSPECIFIED
}

func (x *Cellular) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *Cellular) GetModelVariant() string {
	if x != nil {
		return x.ModelVariant
	}
	return ""
}

func (x *Cellular) GetModemInfo() *Cellular_ModemInfo {
	if x != nil {
		return x.ModemInfo
	}
	return nil
}

func (x *Cellular) GetSimInfos() []*Cellular_SIMInfo {
	if x != nil {
		return x.SimInfos
	}
	return nil
}

func (x *Cellular) GetSupportedCarriers() []string {
	if x != nil {
		return x.SupportedCarriers
	}
	return nil
}

func (x *Cellular) GetStarfishState() Cellular_StarfishState {
	if x != nil {
		return x.StarfishState
	}
	return Cellular_STARFISH_STATE_UNSPECIFIED
}

// Battery holds info about battery of the DUT.
type Battery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the component.
	State HardwareState `protobuf:"varint,1,opt,name=state,proto3,enum=chromeos.recovery.HardwareState" json:"state,omitempty"`
}

func (x *Battery) Reset() {
	*x = Battery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Battery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battery) ProtoMessage() {}

func (x *Battery) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battery.ProtoReflect.Descriptor instead.
func (*Battery) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{29}
}

func (x *Battery) GetState() HardwareState {
	if x != nil {
		return x.State
	}
	return HardwareState_HARDWARE_UNSPECIFIED
}

// HumanMotionRobot holds info about human motion robot of the DUT
type HumanMotionRobot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname of HMR-Pi
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// State of the device.
	State HumanMotionRobot_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.HumanMotionRobot_State" json:"state,omitempty"`
	// Hostname of Gateway host (touchhost) Pi
	Touchhost string `protobuf:"bytes,3,opt,name=touchhost,proto3" json:"touchhost,omitempty"`
}

func (x *HumanMotionRobot) Reset() {
	*x = HumanMotionRobot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanMotionRobot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanMotionRobot) ProtoMessage() {}

func (x *HumanMotionRobot) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanMotionRobot.ProtoReflect.Descriptor instead.
func (*HumanMotionRobot) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{30}
}

func (x *HumanMotionRobot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HumanMotionRobot) GetState() HumanMotionRobot_State {
	if x != nil {
		return x.State
	}
	return HumanMotionRobot_STATE_UNSPECIFIED
}

func (x *HumanMotionRobot) GetTouchhost() string {
	if x != nil {
		return x.Touchhost
	}
	return ""
}

// Dolos holds info about a Dolos device of the DUT.
type Dolos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial used to identify device over USB
	SerialCable string `protobuf:"bytes,1,opt,name=serial_cable,json=serialCable,proto3" json:"serial_cable,omitempty"`
	// Serial of the cable_cable
	SerialUsb string `protobuf:"bytes,2,opt,name=serial_usb,json=serialUsb,proto3" json:"serial_usb,omitempty"`
	// Hardware revision
	HwMajorRevision Dolos_DolosHWMajorRevision `protobuf:"varint,3,opt,name=hw_major_revision,json=hwMajorRevision,proto3,enum=chromeos.recovery.Dolos_DolosHWMajorRevision" json:"hw_major_revision,omitempty"`
	// Dolos firmware version
	FwVersion string `protobuf:"bytes,4,opt,name=fw_version,json=fwVersion,proto3" json:"fw_version,omitempty"`
	// Hostname of the host machine the dolos connected to via USB cable.
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// State of the device.
	State Dolos_State `protobuf:"varint,6,opt,name=state,proto3,enum=chromeos.recovery.Dolos_State" json:"state,omitempty"`
}

func (x *Dolos) Reset() {
	*x = Dolos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dolos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dolos) ProtoMessage() {}

func (x *Dolos) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dolos.ProtoReflect.Descriptor instead.
func (*Dolos) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{31}
}

func (x *Dolos) GetSerialCable() string {
	if x != nil {
		return x.SerialCable
	}
	return ""
}

func (x *Dolos) GetSerialUsb() string {
	if x != nil {
		return x.SerialUsb
	}
	return ""
}

func (x *Dolos) GetHwMajorRevision() Dolos_DolosHWMajorRevision {
	if x != nil {
		return x.HwMajorRevision
	}
	return Dolos_DOLOS_UNSPECIFIED
}

func (x *Dolos) GetFwVersion() string {
	if x != nil {
		return x.FwVersion
	}
	return ""
}

func (x *Dolos) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Dolos) GetState() Dolos_State {
	if x != nil {
		return x.State
	}
	return Dolos_STATE_UNSPECIFIED
}

// AudioLatencyToolkit holds info about Teensy audio latency toolkit on the DUT
type AudioLatencyToolkit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Teensy Version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // default: "4.1"
	// State of the device.
	State AudioLatencyToolkit_State `protobuf:"varint,2,opt,name=state,proto3,enum=chromeos.recovery.AudioLatencyToolkit_State" json:"state,omitempty"`
}

func (x *AudioLatencyToolkit) Reset() {
	*x = AudioLatencyToolkit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLatencyToolkit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLatencyToolkit) ProtoMessage() {}

func (x *AudioLatencyToolkit) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLatencyToolkit.ProtoReflect.Descriptor instead.
func (*AudioLatencyToolkit) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{32}
}

func (x *AudioLatencyToolkit) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AudioLatencyToolkit) GetState() AudioLatencyToolkit_State {
	if x != nil {
		return x.State
	}
	return AudioLatencyToolkit_STATE_UNSPECIFIED
}

// FirmwareInfo hold info to describe FW information.
type FirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target names for EC and AP. In majority cases they are the same.
	// Example: `target1` will generate names
	//
	//	ec: target1/ec/bin and target1/npcx_monitor.bin
	//	ap: image-target1.bin
	EcTarget string `protobuf:"bytes,1,opt,name=ec_target,json=ecTarget,proto3" json:"ec_target,omitempty"`
	ApTarget string `protobuf:"bytes,2,opt,name=ap_target,json=apTarget,proto3" json:"ap_target,omitempty"`
}

func (x *FirmwareInfo) Reset() {
	*x = FirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfo) ProtoMessage() {}

func (x *FirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfo.ProtoReflect.Descriptor instead.
func (*FirmwareInfo) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{33}
}

func (x *FirmwareInfo) GetEcTarget() string {
	if x != nil {
		return x.EcTarget
	}
	return ""
}

func (x *FirmwareInfo) GetApTarget() string {
	if x != nil {
		return x.ApTarget
	}
	return ""
}

// Chrome OS specific DUT details
// NEXT TAG: 34
type ChromeOS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Board name of the DUT.
	Board string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// Model name of the DUT.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Hardware identifier.
	Hwid string `protobuf:"bytes,4,opt,name=hwid,proto3" json:"hwid,omitempty"`
	// Hardware phase.
	Phase string `protobuf:"bytes,5,opt,name=phase,proto3" json:"phase,omitempty"`
	// Serial number of the DUT.
	SerialNumber string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// FirmwareInfo describes DUT firmware data.
	FirmwareInfo *FirmwareInfo `protobuf:"bytes,32,opt,name=firmware_info,json=firmwareInfo,proto3" json:"firmware_info,omitempty"`
	// PowerSupplyType describes the DUT's power supply type.
	PowerSupplyType ChromeOS_PowerSupplyType `protobuf:"varint,7,opt,name=power_supply_type,json=powerSupplyType,proto3,enum=chromeos.recovery.ChromeOS_PowerSupplyType" json:"power_supply_type,omitempty"`
	// Cr50 firmware phase used on the DUT.
	Cr50Phase ChromeOS_Cr50Phase `protobuf:"varint,8,opt,name=cr50_phase,json=cr50Phase,proto3,enum=chromeos.recovery.ChromeOS_Cr50Phase" json:"cr50_phase,omitempty"`
	// Key env for RW Cr50 firmware version.
	Cr50KeyEnv ChromeOS_Cr50KeyEnv `protobuf:"varint,9,opt,name=cr50_key_env,json=cr50KeyEnv,proto3,enum=chromeos.recovery.ChromeOS_Cr50KeyEnv" json:"cr50_key_env,omitempty"`
	// Audio info.
	Audio *DUTAudio `protobuf:"bytes,10,opt,name=audio,proto3" json:"audio,omitempty"`
	// Stock-keeping unit of the DUT.
	DeviceSku string `protobuf:"bytes,11,opt,name=device_sku,json=deviceSku,proto3" json:"device_sku,omitempty"`
	// DLM SKU ID of the DUT
	DlmSkuId string `protobuf:"bytes,31,opt,name=dlm_sku_id,json=dlmSkuId,proto3" json:"dlm_sku_id,omitempty"`
	// Physical parts of DUT.
	// Internal storage info.
	Storage *Storage `protobuf:"bytes,12,opt,name=storage,proto3" json:"storage,omitempty"`
	// Battery info.
	Battery *Battery `protobuf:"bytes,13,opt,name=battery,proto3" json:"battery,omitempty"`
	// Wifi info.
	Wifi *Wifi `protobuf:"bytes,14,opt,name=wifi,proto3" json:"wifi,omitempty"`
	// Bluetooth info.
	Bluetooth *Bluetooth `protobuf:"bytes,15,opt,name=bluetooth,proto3" json:"bluetooth,omitempty"`
	// Peripheral devices.
	// Servo setup of the DUT setup.
	Servo *ServoHost `protobuf:"bytes,16,opt,name=servo,proto3" json:"servo,omitempty"`
	// Chameleon device of the DUT setup.
	Chameleon *Chameleon `protobuf:"bytes,17,opt,name=chameleon,proto3" json:"chameleon,omitempty"`
	// BluetoothPeer info of DUT setup.
	BluetoothPeers []*BluetoothPeer `protobuf:"bytes,18,rep,name=bluetooth_peers,json=bluetoothPeers,proto3" json:"bluetooth_peers,omitempty"`
	// Array of Wifi Router peripheral devices.
	WifiRouters []*WifiRouterHost `protobuf:"bytes,19,rep,name=wifi_routers,json=wifiRouters,proto3" json:"wifi_routers,omitempty"`
	// Peripheral Wifi state of testbed
	PeripheralWifiState ChromeOS_PeripheralWifiState `protobuf:"varint,20,opt,name=peripheral_wifi_state,json=peripheralWifiState,proto3,enum=chromeos.recovery.ChromeOS_PeripheralWifiState" json:"peripheral_wifi_state,omitempty"`
	// WifiRouterFeatures that are supported by all wifi routers in the testbed.
	//
	// If there are no wifi routers this will be empty.
	// If any routers have unknown features, this will just have a single
	// WIFI_ROUTER_FEATURE_UNKNOWN entry.
	// If any routers' features has a WIFI_ROUTER_FEATURE_INVALID feature, a
	// WIFI_ROUTER_FEATURE_INVALID feature will be included along with the other
	// common, valid features.
	// If there are no common, valid features between all routers, this will just
	// have a single WIFI_ROUTER_FEATURE_INVALID entry.
	WifiRouterFeatures []api.WifiRouterFeature `protobuf:"varint,27,rep,packed,name=wifi_router_features,json=wifiRouterFeatures,proto3,enum=chromiumos.test.lab.api.WifiRouterFeature" json:"wifi_router_features,omitempty"`
	// RPMOutlet of the DUT setup.
	RpmOutlet *RPMOutlet `protobuf:"bytes,21,opt,name=rpm_outlet,json=rpmOutlet,proto3" json:"rpm_outlet,omitempty"`
	// Map of key value pairs from RO_VPD.
	RoVpdMap map[string]string `protobuf:"bytes,22,rep,name=ro_vpd_map,json=roVpdMap,proto3" json:"ro_vpd_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// CBI contents on the DUT
	Cbi *api.Cbi `protobuf:"bytes,23,opt,name=cbi,proto3" json:"cbi,omitempty"`
	// Cellular info.
	Cellular *Cellular `protobuf:"bytes,24,opt,name=cellular,proto3" json:"cellular,omitempty"`
	// Capability to support Chromebook X features
	Cbx bool `protobuf:"varint,25,opt,name=cbx,proto3" json:"cbx,omitempty"`
	// Human Motion Robot info.
	HumanMotionRobot *HumanMotionRobot `protobuf:"bytes,26,opt,name=human_motion_robot,json=humanMotionRobot,proto3" json:"human_motion_robot,omitempty"`
	// Testbed Capability info
	TestbedCapability *TestbedCapability `protobuf:"bytes,28,opt,name=testbed_capability,json=testbedCapability,proto3" json:"testbed_capability,omitempty"`
	// Audio Latency Toolkit info.
	AudioLatencyToolkit *AudioLatencyToolkit `protobuf:"bytes,29,opt,name=audio_latency_toolkit,json=audioLatencyToolkit,proto3" json:"audio_latency_toolkit,omitempty"`
	// Dolos device info.
	Dolos *Dolos `protobuf:"bytes,30,opt,name=dolos,proto3" json:"dolos,omitempty"`
	GpuId string `protobuf:"bytes,33,opt,name=gpu_id,json=gpuId,proto3" json:"gpu_id,omitempty"`
}

func (x *ChromeOS) Reset() {
	*x = ChromeOS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeOS) ProtoMessage() {}

func (x *ChromeOS) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeOS.ProtoReflect.Descriptor instead.
func (*ChromeOS) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{34}
}

func (x *ChromeOS) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *ChromeOS) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChromeOS) GetHwid() string {
	if x != nil {
		return x.Hwid
	}
	return ""
}

func (x *ChromeOS) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ChromeOS) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ChromeOS) GetFirmwareInfo() *FirmwareInfo {
	if x != nil {
		return x.FirmwareInfo
	}
	return nil
}

func (x *ChromeOS) GetPowerSupplyType() ChromeOS_PowerSupplyType {
	if x != nil {
		return x.PowerSupplyType
	}
	return ChromeOS_POWER_SUPPLY_UNSPECIFIED
}

func (x *ChromeOS) GetCr50Phase() ChromeOS_Cr50Phase {
	if x != nil {
		return x.Cr50Phase
	}
	return ChromeOS_CR50_PHASE_UNSPECIFIED
}

func (x *ChromeOS) GetCr50KeyEnv() ChromeOS_Cr50KeyEnv {
	if x != nil {
		return x.Cr50KeyEnv
	}
	return ChromeOS_CR50_KEYENV_UNSPECIFIED
}

func (x *ChromeOS) GetAudio() *DUTAudio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *ChromeOS) GetDeviceSku() string {
	if x != nil {
		return x.DeviceSku
	}
	return ""
}

func (x *ChromeOS) GetDlmSkuId() string {
	if x != nil {
		return x.DlmSkuId
	}
	return ""
}

func (x *ChromeOS) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ChromeOS) GetBattery() *Battery {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *ChromeOS) GetWifi() *Wifi {
	if x != nil {
		return x.Wifi
	}
	return nil
}

func (x *ChromeOS) GetBluetooth() *Bluetooth {
	if x != nil {
		return x.Bluetooth
	}
	return nil
}

func (x *ChromeOS) GetServo() *ServoHost {
	if x != nil {
		return x.Servo
	}
	return nil
}

func (x *ChromeOS) GetChameleon() *Chameleon {
	if x != nil {
		return x.Chameleon
	}
	return nil
}

func (x *ChromeOS) GetBluetoothPeers() []*BluetoothPeer {
	if x != nil {
		return x.BluetoothPeers
	}
	return nil
}

func (x *ChromeOS) GetWifiRouters() []*WifiRouterHost {
	if x != nil {
		return x.WifiRouters
	}
	return nil
}

func (x *ChromeOS) GetPeripheralWifiState() ChromeOS_PeripheralWifiState {
	if x != nil {
		return x.PeripheralWifiState
	}
	return ChromeOS_PERIPHERAL_WIFI_STATE_UNSPECIFIED
}

func (x *ChromeOS) GetWifiRouterFeatures() []api.WifiRouterFeature {
	if x != nil {
		return x.WifiRouterFeatures
	}
	return nil
}

func (x *ChromeOS) GetRpmOutlet() *RPMOutlet {
	if x != nil {
		return x.RpmOutlet
	}
	return nil
}

func (x *ChromeOS) GetRoVpdMap() map[string]string {
	if x != nil {
		return x.RoVpdMap
	}
	return nil
}

func (x *ChromeOS) GetCbi() *api.Cbi {
	if x != nil {
		return x.Cbi
	}
	return nil
}

func (x *ChromeOS) GetCellular() *Cellular {
	if x != nil {
		return x.Cellular
	}
	return nil
}

func (x *ChromeOS) GetCbx() bool {
	if x != nil {
		return x.Cbx
	}
	return false
}

func (x *ChromeOS) GetHumanMotionRobot() *HumanMotionRobot {
	if x != nil {
		return x.HumanMotionRobot
	}
	return nil
}

func (x *ChromeOS) GetTestbedCapability() *TestbedCapability {
	if x != nil {
		return x.TestbedCapability
	}
	return nil
}

func (x *ChromeOS) GetAudioLatencyToolkit() *AudioLatencyToolkit {
	if x != nil {
		return x.AudioLatencyToolkit
	}
	return nil
}

func (x *ChromeOS) GetDolos() *Dolos {
	if x != nil {
		return x.Dolos
	}
	return nil
}

func (x *ChromeOS) GetGpuId() string {
	if x != nil {
		return x.GpuId
	}
	return ""
}

// TestbedCapability specifies whether the testbed can execute certain tests.
// It is used as test dependency - as the specific testbed required to run certain e2e tests.
type TestbedCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Testbed with specific setup and capable to run 3.5mm Audio jack detection tests on DUT.
	Audiojack bool `protobuf:"varint,2,opt,name=audiojack,proto3" json:"audiojack,omitempty"`
	// Testbed with specific setup and capable to run USB audio peripherals tests on DUT.
	Usbaudio bool `protobuf:"varint,3,opt,name=usbaudio,proto3" json:"usbaudio,omitempty"`
	// Testbed with specific setup and capable to run USB printer tests on DUT.
	Usbprinting bool `protobuf:"varint,4,opt,name=usbprinting,proto3" json:"usbprinting,omitempty"`
	// Testbed with specific setup and capable to run HDMI peripherals tests on DUT.
	Hdmiaudio bool `protobuf:"varint,5,opt,name=hdmiaudio,proto3" json:"hdmiaudio,omitempty"`
}

func (x *TestbedCapability) Reset() {
	*x = TestbedCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestbedCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestbedCapability) ProtoMessage() {}

func (x *TestbedCapability) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestbedCapability.ProtoReflect.Descriptor instead.
func (*TestbedCapability) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{35}
}

func (x *TestbedCapability) GetAudiojack() bool {
	if x != nil {
		return x.Audiojack
	}
	return false
}

func (x *TestbedCapability) GetUsbaudio() bool {
	if x != nil {
		return x.Usbaudio
	}
	return false
}

func (x *TestbedCapability) GetUsbprinting() bool {
	if x != nil {
		return x.Usbprinting
	}
	return false
}

func (x *TestbedCapability) GetHdmiaudio() bool {
	if x != nil {
		return x.Hdmiaudio
	}
	return false
}

// Android specific DUT details
type Android struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Board name of the DUT.
	Board string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// Model name of the DUT.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Serial number of the DUT.
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Hostname to which the Android DUT is attached to.
	AssociatedHostname string `protobuf:"bytes,5,opt,name=associated_hostname,json=associatedHostname,proto3" json:"associated_hostname,omitempty"`
}

func (x *Android) Reset() {
	*x = Android{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Android) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Android) ProtoMessage() {}

func (x *Android) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Android.ProtoReflect.Descriptor instead.
func (*Android) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{36}
}

func (x *Android) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *Android) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Android) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Android) GetAssociatedHostname() string {
	if x != nil {
		return x.AssociatedHostname
	}
	return ""
}

// DevBoard specific DUT details.
type DevBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Board name of the DUT.
	Board string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// Model name of the DUT.
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Serial number of the DUT.
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Peripheral devices.
	// Servo setup of the DUT setup.
	Servo *ServoHost `protobuf:"bytes,5,opt,name=servo,proto3" json:"servo,omitempty"`
}

func (x *DevBoard) Reset() {
	*x = DevBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevBoard) ProtoMessage() {}

func (x *DevBoard) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevBoard.ProtoReflect.Descriptor instead.
func (*DevBoard) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{37}
}

func (x *DevBoard) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *DevBoard) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DevBoard) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DevBoard) GetServo() *ServoHost {
	if x != nil {
		return x.Servo
	}
	return nil
}

// CopyRequest represents data to perform copy data from/to resource.
type CopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Path to source file or directory.
	PathSource string `protobuf:"bytes,2,opt,name=path_source,json=pathSource,proto3" json:"path_source,omitempty"`
	// Path to destination file or directory.
	PathDestination string `protobuf:"bytes,3,opt,name=path_destination,json=pathDestination,proto3" json:"path_destination,omitempty"`
}

func (x *CopyRequest) Reset() {
	*x = CopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRequest) ProtoMessage() {}

func (x *CopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRequest.ProtoReflect.Descriptor instead.
func (*CopyRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{38}
}

func (x *CopyRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CopyRequest) GetPathSource() string {
	if x != nil {
		return x.PathSource
	}
	return ""
}

func (x *CopyRequest) GetPathDestination() string {
	if x != nil {
		return x.PathDestination
	}
	return ""
}

// CallServodRequest represents data to run command on servod.
type CallServodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string               `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Method   string               `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Args     []*xmlrpc.Value      `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Timeout  *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CallServodRequest) Reset() {
	*x = CallServodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallServodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallServodRequest) ProtoMessage() {}

func (x *CallServodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallServodRequest.ProtoReflect.Descriptor instead.
func (*CallServodRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{39}
}

func (x *CallServodRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CallServodRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallServodRequest) GetArgs() []*xmlrpc.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CallServodRequest) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// CallServodResponse represents result data from running command on servod.
type CallServodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *xmlrpc.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Fault bool          `protobuf:"varint,2,opt,name=fault,proto3" json:"fault,omitempty"`
}

func (x *CallServodResponse) Reset() {
	*x = CallServodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallServodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallServodResponse) ProtoMessage() {}

func (x *CallServodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallServodResponse.ProtoReflect.Descriptor instead.
func (*CallServodResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{40}
}

func (x *CallServodResponse) GetValue() *xmlrpc.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CallServodResponse) GetFault() bool {
	if x != nil {
		return x.Fault
	}
	return false
}

// Chameleond holds data related to the state of chameleond on the btpeer.
type BluetoothPeerScopeState_Chameleond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commit of chameleond at which the bundle installed on the btpeer was created.
	InstalledCommit string `protobuf:"bytes,1,opt,name=installed_commit,json=installedCommit,proto3" json:"installed_commit,omitempty"`
	// The BluetoothPeerChameleondConfig as retrieved from the global config
	// JSON file stored on GCS. Includes information regarding available
	// chameleond bundle releases for all btpeers.
	ReleaseConfig *api.BluetoothPeerChameleondConfig `protobuf:"bytes,2,opt,name=release_config,json=releaseConfig,proto3" json:"release_config,omitempty"`
	// The config of the chameleond bundle from the release_config that has been
	// identified as the expected bundle for this specific btpeer.
	ExpectedBundleConfig *api.BluetoothPeerChameleondConfig_ChameleondBundle `protobuf:"bytes,3,opt,name=expected_bundle_config,json=expectedBundleConfig,proto3" json:"expected_bundle_config,omitempty"`
}

func (x *BluetoothPeerScopeState_Chameleond) Reset() {
	*x = BluetoothPeerScopeState_Chameleond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothPeerScopeState_Chameleond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothPeerScopeState_Chameleond) ProtoMessage() {}

func (x *BluetoothPeerScopeState_Chameleond) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothPeerScopeState_Chameleond.ProtoReflect.Descriptor instead.
func (*BluetoothPeerScopeState_Chameleond) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{13, 0}
}

func (x *BluetoothPeerScopeState_Chameleond) GetInstalledCommit() string {
	if x != nil {
		return x.InstalledCommit
	}
	return ""
}

func (x *BluetoothPeerScopeState_Chameleond) GetReleaseConfig() *api.BluetoothPeerChameleondConfig {
	if x != nil {
		return x.ReleaseConfig
	}
	return nil
}

func (x *BluetoothPeerScopeState_Chameleond) GetExpectedBundleConfig() *api.BluetoothPeerChameleondConfig_ChameleondBundle {
	if x != nil {
		return x.ExpectedBundleConfig
	}
	return nil
}

// RaspiosCrosBtpeerImage holds data related to the state of a ChromeOS
// Raspberry Pi OS image on the btpeer.
type BluetoothPeerScopeState_RaspiosCrosBtpeerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the ChromeOS Raspberry Pi OS image installed on the btpeer.
	InstalledImageUuid string `protobuf:"bytes,1,opt,name=installed_image_uuid,json=installedImageUuid,proto3" json:"installed_image_uuid,omitempty"`
	// The RaspiosCrosBtpeerImageConfig as retrieved from the global config JSON
	// file stored on GCS. Includes information regarding available image
	// releases for all btpeers.
	ReleaseConfig *api.RaspiosCrosBtpeerImageConfig `protobuf:"bytes,2,opt,name=release_config,json=releaseConfig,proto3" json:"release_config,omitempty"`
	// The config of the image from the release_config that has been identified
	// as the expected image for this specific btpeer.
	ExpectedImageConfig *api.RaspiosCrosBtpeerImageConfig_OSImage `protobuf:"bytes,3,opt,name=expected_image_config,json=expectedImageConfig,proto3" json:"expected_image_config,omitempty"`
}

func (x *BluetoothPeerScopeState_RaspiosCrosBtpeerImage) Reset() {
	*x = BluetoothPeerScopeState_RaspiosCrosBtpeerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluetoothPeerScopeState_RaspiosCrosBtpeerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothPeerScopeState_RaspiosCrosBtpeerImage) ProtoMessage() {}

func (x *BluetoothPeerScopeState_RaspiosCrosBtpeerImage) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothPeerScopeState_RaspiosCrosBtpeerImage.ProtoReflect.Descriptor instead.
func (*BluetoothPeerScopeState_RaspiosCrosBtpeerImage) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{13, 1}
}

func (x *BluetoothPeerScopeState_RaspiosCrosBtpeerImage) GetInstalledImageUuid() string {
	if x != nil {
		return x.InstalledImageUuid
	}
	return ""
}

func (x *BluetoothPeerScopeState_RaspiosCrosBtpeerImage) GetReleaseConfig() *api.RaspiosCrosBtpeerImageConfig {
	if x != nil {
		return x.ReleaseConfig
	}
	return nil
}

func (x *BluetoothPeerScopeState_RaspiosCrosBtpeerImage) GetExpectedImageConfig() *api.RaspiosCrosBtpeerImageConfig_OSImage {
	if x != nil {
		return x.ExpectedImageConfig
	}
	return nil
}

type Cellular_ModemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Cellular_ModemType `protobuf:"varint,1,opt,name=type,proto3,enum=chromeos.recovery.Cellular_ModemType" json:"type,omitempty"`
	// Equipment Identifier
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
}

func (x *Cellular_ModemInfo) Reset() {
	*x = Cellular_ModemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cellular_ModemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cellular_ModemInfo) ProtoMessage() {}

func (x *Cellular_ModemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cellular_ModemInfo.ProtoReflect.Descriptor instead.
func (*Cellular_ModemInfo) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Cellular_ModemInfo) GetType() Cellular_ModemType {
	if x != nil {
		return x.Type
	}
	return Cellular_MODEM_TYPE_UNSPECIFIED
}

func (x *Cellular_ModemInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

// Information on the profiles available on the SIM.
type Cellular_SIMProfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique profile ICCID.
	Iccid string `protobuf:"bytes,1,opt,name=iccid,proto3" json:"iccid,omitempty"`
	// The associated PUK code.
	SimPin string `protobuf:"bytes,2,opt,name=sim_pin,json=simPin,proto3" json:"sim_pin,omitempty"`
	// The associated PUK code.
	SimPuk string `protobuf:"bytes,3,opt,name=sim_puk,json=simPuk,proto3" json:"sim_puk,omitempty"`
	// The associated network provider.
	CarrierName Cellular_NetworkProvider `protobuf:"varint,4,opt,name=carrier_name,json=carrierName,proto3,enum=chromeos.recovery.Cellular_NetworkProvider" json:"carrier_name,omitempty"`
	// The phone number associated with the SIM.
	OwnNumber string `protobuf:"bytes,5,opt,name=own_number,json=ownNumber,proto3" json:"own_number,omitempty"`
}

func (x *Cellular_SIMProfileInfo) Reset() {
	*x = Cellular_SIMProfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cellular_SIMProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cellular_SIMProfileInfo) ProtoMessage() {}

func (x *Cellular_SIMProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cellular_SIMProfileInfo.ProtoReflect.Descriptor instead.
func (*Cellular_SIMProfileInfo) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 1}
}

func (x *Cellular_SIMProfileInfo) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *Cellular_SIMProfileInfo) GetSimPin() string {
	if x != nil {
		return x.SimPin
	}
	return ""
}

func (x *Cellular_SIMProfileInfo) GetSimPuk() string {
	if x != nil {
		return x.SimPuk
	}
	return ""
}

func (x *Cellular_SIMProfileInfo) GetCarrierName() Cellular_NetworkProvider {
	if x != nil {
		return x.CarrierName
	}
	return Cellular_NETWORK_UNSPECIFIED
}

func (x *Cellular_SIMProfileInfo) GetOwnNumber() string {
	if x != nil {
		return x.OwnNumber
	}
	return ""
}

// Information on a single SIM card in a slot.
type Cellular_SIMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which slot on the device the SIM card occupies.
	SlotId int32            `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
	Type   Cellular_SIMType `protobuf:"varint,2,opt,name=type,proto3,enum=chromeos.recovery.Cellular_SIMType" json:"type,omitempty"`
	// The unique SIM EID.
	Eid string `protobuf:"bytes,3,opt,name=eid,proto3" json:"eid,omitempty"`
	// True if the SIM is a test-eSIM (not prod).
	TestEsim bool `protobuf:"varint,4,opt,name=test_esim,json=testEsim,proto3" json:"test_esim,omitempty"`
	// The available profiles on the SIM card.
	ProfileInfos []*Cellular_SIMProfileInfo `protobuf:"bytes,5,rep,name=profile_infos,json=profileInfos,proto3" json:"profile_infos,omitempty"`
}

func (x *Cellular_SIMInfo) Reset() {
	*x = Cellular_SIMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cellular_SIMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cellular_SIMInfo) ProtoMessage() {}

func (x *Cellular_SIMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_recovery_tlw_models_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cellular_SIMInfo.ProtoReflect.Descriptor instead.
func (*Cellular_SIMInfo) Descriptor() ([]byte, []int) {
	return file_infra_cros_recovery_tlw_models_proto_rawDescGZIP(), []int{28, 2}
}

func (x *Cellular_SIMInfo) GetSlotId() int32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *Cellular_SIMInfo) GetType() Cellular_SIMType {
	if x != nil {
		return x.Type
	}
	return Cellular_SIM_UNSPECIFIED
}

func (x *Cellular_SIMInfo) GetEid() string {
	if x != nil {
		return x.Eid
	}
	return ""
}

func (x *Cellular_SIMInfo) GetTestEsim() bool {
	if x != nil {
		return x.TestEsim
	}
	return false
}

func (x *Cellular_SIMInfo) GetProfileInfos() []*Cellular_SIMProfileInfo {
	if x != nil {
		return x.ProfileInfos
	}
	return nil
}

var File_infra_cros_recovery_tlw_models_proto protoreflect.FileDescriptor

var file_infra_cros_recovery_tlw_models_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x6c, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x56, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x6d,
	0x6c, 0x72, 0x70, 0x63, 0x2f, 0x78, 0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x4f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x73, 0x62, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x49, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6c, 0x61, 0x62, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x62, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f,
	0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77,
	0x69, 0x66, 0x69, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x54, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x73, 0x68,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x09,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22,
	0x81, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x78, 0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6d, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78,
	0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x6e, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x75, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6d, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x52, 0x50,
	0x4d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x70,
	0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x70, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x70, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x70, 0x6d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x75, 0x6e, 0x52, 0x50, 0x4d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x03, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x52,
	0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x22, 0x9a, 0x03, 0x0a, 0x0e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69,
	0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x52, 0x50, 0x4d,
	0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x09, 0x52, 0x50, 0x4d, 0x4f,
	0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4e, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x66,
	0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02,
	0x22, 0x3d, 0x0a, 0x1c, 0x41, 0x73, 0x75, 0x73, 0x57, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22,
	0xfe, 0x01, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x5e, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x72,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x57,
	0x72, 0x74, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x1b, 0x55, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x06, 0x0a, 0x17, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x74, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x06, 0x62, 0x74, 0x70, 0x65, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x64, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x65,
	0x6c, 0x65, 0x6f, 0x6e, 0x64, 0x12, 0x7c, 0x0a, 0x19, 0x72, 0x61, 0x73, 0x70, 0x69, 0x6f, 0x73,
	0x5f, 0x63, 0x72, 0x6f, 0x73, 0x5f, 0x62, 0x74, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x73, 0x70, 0x69, 0x6f, 0x73, 0x43, 0x72, 0x6f, 0x73,
	0x42, 0x74, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x16, 0x72, 0x61, 0x73,
	0x70, 0x69, 0x6f, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x42, 0x74, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x1a, 0x95, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x16,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x9b, 0x02, 0x0a, 0x16,
	0x52, 0x61, 0x73, 0x70, 0x69, 0x6f, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x42, 0x74, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x73, 0x70, 0x69,
	0x6f, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x42, 0x74, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x61, 0x73, 0x70, 0x69, 0x6f, 0x73, 0x43, 0x72, 0x6f, 0x73, 0x42, 0x74, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x53, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x52, 0x4f, 0x53, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x10, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x08, 0x44, 0x55, 0x54, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x42, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x72,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x74, 0x72, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x55, 0x54, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x64,
	0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x44, 0x75, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x35, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x43, 0x72, 0x35,
	0x30, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x38,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x66, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x73,
	0x66, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x62, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x62, 0x48, 0x75, 0x62, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x73, 0x66, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x95, 0x09, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x48, 0x6f, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x46, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x73, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x62, 0x6b, 0x65,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x6f, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x75, 0x73, 0x62, 0x68, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x55, 0x73, 0x62, 0x68,
	0x75, 0x62, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x75, 0x73, 0x62,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x62, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x62, 0x44, 0x72, 0x69, 0x76, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x57,
	0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x52, 0x35, 0x30, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x43, 0x44, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x09, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10,
	0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x49,
	0x42, 0x42, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09,
	0x45, 0x43, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x42, 0x55, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x52, 0x35, 0x30, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x12, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x4f,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x14, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x44,
	0x5f, 0x44, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4c,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x18, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x50, 0x49,
	0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x19, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x1b, 0x22, 0x56, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x72, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x72,
	0x6c, 0x22, 0xc2, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x44, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x44, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4d,
	0x43, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x56, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x46, 0x53, 0x10, 0x05, 0x22, 0x84, 0x04, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6d, 0x65,
	0x6c, 0x65, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6d,
	0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74,
	0x6c, 0x65, 0x74, 0x52, 0x09, 0x52, 0x50, 0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x12, 0x71,
	0x0a, 0x18, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x62, 0x6f, 0x78, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6c,
	0x75, 0x67, 0x67, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x42, 0x6f, 0x78, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x18, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x62, 0x6f,
	0x78, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x4b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0xac,
	0x01, 0x0a, 0x18, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x6f, 0x78, 0x4a, 0x61, 0x63, 0x6b, 0x50,
	0x6c, 0x75, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x42, 0x4f, 0x58, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x55, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x42, 0x4f, 0x58, 0x5f, 0x4a, 0x41,
	0x43, 0x4b, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x42, 0x4f, 0x58, 0x5f,
	0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x42, 0x4f, 0x58,
	0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x9a, 0x01,
	0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x50, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x37, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x22, 0x5b, 0x0a, 0x04, 0x57, 0x69,
	0x66, 0x69, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xe3, 0x0d, 0x0a, 0x08, 0x43, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6d,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x09, 0x73, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x49,
	0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x12, 0x50,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x66, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x66, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x66, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x5a, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x1a, 0xc7, 0x01, 0x0a,
	0x0e, 0x53, 0x49, 0x4d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x6d, 0x5f, 0x70, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x50, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x6d, 0x5f, 0x70, 0x75, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x69, 0x6d, 0x50, 0x75, 0x6b, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xdb, 0x01, 0x0a, 0x07, 0x53, 0x49, 0x4d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x49, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x73, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x73, 0x69, 0x6d, 0x12, 0x4f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x2e, 0x53, 0x49, 0x4d, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f,
	0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x43, 0x4f, 0x4d,
	0x4d, 0x5f, 0x53, 0x43, 0x37, 0x31, 0x38, 0x30, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f,
	0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x42, 0x4f, 0x43, 0x4f, 0x4d,
	0x4d, 0x5f, 0x4c, 0x38, 0x35, 0x30, 0x47, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f,
	0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4c, 0x36, 0x36, 0x38, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4d, 0x33, 0x35, 0x30, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4d, 0x31, 0x30, 0x31, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x43,
	0x4f, 0x4d, 0x4d, 0x5f, 0x53, 0x43, 0x37, 0x32, 0x38, 0x30, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x30, 0x36, 0x30,
	0x10, 0x07, 0x22, 0xfa, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x54, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x5a, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x44, 0x4f, 0x43, 0x4f, 0x4d, 0x4f, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x42, 0x41, 0x4e,
	0x4b, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4b,
	0x44, 0x44, 0x49, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x52, 0x41, 0x4b, 0x55, 0x54, 0x45, 0x4e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x56, 0x4f, 0x44, 0x41, 0x46, 0x4f, 0x4e, 0x45, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x45, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4d, 0x41, 0x52,
	0x49, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x52, 0x4f, 0x47, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x45, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x45, 0x4c, 0x55, 0x53, 0x10, 0x10, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x46, 0x49, 0x10, 0x11, 0x22,
	0x41, 0x0a, 0x07, 0x53, 0x49, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4d, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x66, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x52, 0x46, 0x49, 0x53, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x52, 0x46, 0x49, 0x53, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x52, 0x46, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x54, 0x41, 0x52, 0x46, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x41,
	0x0a, 0x07, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52,
	0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x9f, 0x03, 0x0a, 0x05, 0x44, 0x6f, 0x6c, 0x6f, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x55,
	0x73, 0x62, 0x12, 0x59, 0x0a, 0x11, 0x68, 0x77, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x44, 0x6f, 0x6c, 0x6f, 0x73, 0x2e, 0x44, 0x6f, 0x6c, 0x6f, 0x73, 0x48, 0x57, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68, 0x77,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x6c, 0x6f,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3b,
	0x0a, 0x14, 0x44, 0x6f, 0x6c, 0x6f, 0x73, 0x48, 0x57, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4c, 0x4f, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x4f, 0x4c, 0x4f, 0x53, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42,
	0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x48, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xef, 0x11, 0x0a, 0x08, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x4f, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x77, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x77,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a,
	0x63, 0x72, 0x35, 0x30, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x2e, 0x43, 0x72,
	0x35, 0x30, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x63, 0x72, 0x35, 0x30, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x72, 0x35, 0x30, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x2e, 0x43, 0x72, 0x35, 0x30, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76,
	0x52, 0x0a, 0x63, 0x72, 0x35, 0x30, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x12, 0x31, 0x0a, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x55, 0x54, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6b, 0x75, 0x12, 0x1c,
	0x0a, 0x0a, 0x64, 0x6c, 0x6d, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6c, 0x6d, 0x53, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x77, 0x69, 0x66, 0x69,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x52,
	0x04, 0x77, 0x69, 0x66, 0x69, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74,
	0x68, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05,
	0x73, 0x65, 0x72, 0x76, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61,
	0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0c,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x77, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x69, 0x66, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x57, 0x69,
	0x66, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x12, 0x77, 0x69, 0x66, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x70, 0x6d, 0x5f, 0x6f, 0x75, 0x74,
	0x6c, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x50,
	0x4d, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x52, 0x09, 0x72, 0x70, 0x6d, 0x4f, 0x75, 0x74, 0x6c,
	0x65, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x6f, 0x5f, 0x76, 0x70, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x4f, 0x53, 0x2e, 0x52, 0x6f, 0x56, 0x70, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x6f, 0x56, 0x70, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x62, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x62, 0x69, 0x52, 0x03, 0x63, 0x62, 0x69, 0x12, 0x37, 0x0a, 0x08, 0x63,
	0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x75, 0x6c, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x63, 0x62, 0x78, 0x12, 0x51, 0x0a, 0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x10, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x65, 0x73,
	0x74, 0x62, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x62, 0x65,
	0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x74, 0x65, 0x73,
	0x74, 0x62, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5a,
	0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f,
	0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x6f,
	0x6c, 0x6f, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x6f,
	0x6c, 0x6f, 0x73, 0x52, 0x05, 0x64, 0x6f, 0x6c, 0x6f, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x70, 0x75, 0x49,
	0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x6f, 0x56, 0x70, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49,
	0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x43, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x09, 0x43, 0x72, 0x35,
	0x30, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x35, 0x30, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x35, 0x30, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x50, 0x56, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x35, 0x30, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x56, 0x54, 0x10, 0x02, 0x22, 0x54, 0x0a,
	0x0a, 0x43, 0x72, 0x35, 0x30, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x52, 0x35, 0x30, 0x5f, 0x4b, 0x45, 0x59, 0x45, 0x4e, 0x56, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x35, 0x30,
	0x5f, 0x4b, 0x45, 0x59, 0x45, 0x4e, 0x56, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x52, 0x35, 0x30, 0x5f, 0x4b, 0x45, 0x59, 0x45, 0x4e, 0x56, 0x5f, 0x44, 0x45,
	0x56, 0x10, 0x02, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x57, 0x69, 0x66, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x50,
	0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x49, 0x50, 0x48, 0x45,
	0x52, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x45, 0x52, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74,
	0x62, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x6a, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x6a, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75,
	0x73, 0x62, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x62, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73,
	0x62, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x64, 0x6d,
	0x69, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x64,
	0x6d, 0x69, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x91, 0x01,
	0x0a, 0x07, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x73, 0x65,
	0x72, 0x76, 0x6f, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x75, 0x0a, 0x0b, 0x43, 0x6f, 0x70,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x61, 0x74, 0x68, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xba, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x78, 0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x6a, 0x0a,
	0x12, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x78, 0x6d, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2a, 0x91, 0x01, 0x0a, 0x0d, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x48,
	0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41,
	0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x4e, 0x45, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x4e, 0x0a,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x46, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x52, 0x45, 0x56, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x56,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x10, 0x04, 0x42, 0x1d, 0x5a,
	0x1b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2f, 0x74, 0x6c, 0x77, 0x3b, 0x74, 0x6c, 0x77, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_cros_recovery_tlw_models_proto_rawDescOnce sync.Once
	file_infra_cros_recovery_tlw_models_proto_rawDescData = file_infra_cros_recovery_tlw_models_proto_rawDesc
)

func file_infra_cros_recovery_tlw_models_proto_rawDescGZIP() []byte {
	file_infra_cros_recovery_tlw_models_proto_rawDescOnce.Do(func() {
		file_infra_cros_recovery_tlw_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_cros_recovery_tlw_models_proto_rawDescData)
	})
	return file_infra_cros_recovery_tlw_models_proto_rawDescData
}

var file_infra_cros_recovery_tlw_models_proto_enumTypes = make([]protoimpl.EnumInfo, 24)
var file_infra_cros_recovery_tlw_models_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_infra_cros_recovery_tlw_models_proto_goTypes = []interface{}{
	(HardwareState)(0),                                     // 0: chromeos.recovery.HardwareState
	(ServoFwChannel)(0),                                    // 1: chromeos.recovery.ServoFwChannel
	(RunRPMActionRequest_Action)(0),                        // 2: chromeos.recovery.RunRPMActionRequest.Action
	(RPMOutlet_State)(0),                                   // 3: chromeos.recovery.RPMOutlet.State
	(WifiRouterHost_State)(0),                              // 4: chromeos.recovery.WifiRouterHost.State
	(VersionRequest_VersionType)(0),                        // 5: chromeos.recovery.VersionRequest.VersionType
	(DUTAudio_LoopbackState)(0),                            // 6: chromeos.recovery.DUTAudio.LoopbackState
	(ServoHost_State)(0),                                   // 7: chromeos.recovery.ServoHost.State
	(Storage_Type)(0),                                      // 8: chromeos.recovery.Storage.Type
	(Chameleon_State)(0),                                   // 9: chromeos.recovery.Chameleon.State
	(Chameleon_AudioBoxJackPluggerState)(0),                // 10: chromeos.recovery.Chameleon.AudioBoxJackPluggerState
	(BluetoothPeer_State)(0),                               // 11: chromeos.recovery.BluetoothPeer.State
	(Cellular_ModemType)(0),                                // 12: chromeos.recovery.Cellular.ModemType
	(Cellular_NetworkProvider)(0),                          // 13: chromeos.recovery.Cellular.NetworkProvider
	(Cellular_SIMType)(0),                                  // 14: chromeos.recovery.Cellular.SIMType
	(Cellular_StarfishState)(0),                            // 15: chromeos.recovery.Cellular.StarfishState
	(HumanMotionRobot_State)(0),                            // 16: chromeos.recovery.HumanMotionRobot.State
	(Dolos_DolosHWMajorRevision)(0),                        // 17: chromeos.recovery.Dolos.DolosHWMajorRevision
	(Dolos_State)(0),                                       // 18: chromeos.recovery.Dolos.State
	(AudioLatencyToolkit_State)(0),                         // 19: chromeos.recovery.AudioLatencyToolkit.State
	(ChromeOS_PowerSupplyType)(0),                          // 20: chromeos.recovery.ChromeOS.PowerSupplyType
	(ChromeOS_Cr50Phase)(0),                                // 21: chromeos.recovery.ChromeOS.Cr50Phase
	(ChromeOS_Cr50KeyEnv)(0),                               // 22: chromeos.recovery.ChromeOS.Cr50KeyEnv
	(ChromeOS_PeripheralWifiState)(0),                      // 23: chromeos.recovery.ChromeOS.PeripheralWifiState
	(*RunRequest)(nil),                                     // 24: chromeos.recovery.RunRequest
	(*RunResult)(nil),                                      // 25: chromeos.recovery.RunResult
	(*ProvisionRequest)(nil),                               // 26: chromeos.recovery.ProvisionRequest
	(*CallBluetoothPeerRequest)(nil),                       // 27: chromeos.recovery.CallBluetoothPeerRequest
	(*CallBluetoothPeerResponse)(nil),                      // 28: chromeos.recovery.CallBluetoothPeerResponse
	(*CallTouchHostdRequest)(nil),                          // 29: chromeos.recovery.CallTouchHostdRequest
	(*CallTouchHostdResponse)(nil),                         // 30: chromeos.recovery.CallTouchHostdResponse
	(*RunRPMActionRequest)(nil),                            // 31: chromeos.recovery.RunRPMActionRequest
	(*RPMOutlet)(nil),                                      // 32: chromeos.recovery.RPMOutlet
	(*WifiRouterHost)(nil),                                 // 33: chromeos.recovery.WifiRouterHost
	(*AsusWrtRouterControllerState)(nil),                   // 34: chromeos.recovery.AsusWrtRouterControllerState
	(*OpenWrtRouterControllerState)(nil),                   // 35: chromeos.recovery.OpenWrtRouterControllerState
	(*UbuntuRouterControllerState)(nil),                    // 36: chromeos.recovery.UbuntuRouterControllerState
	(*BluetoothPeerScopeState)(nil),                        // 37: chromeos.recovery.BluetoothPeerScopeState
	(*VersionRequest)(nil),                                 // 38: chromeos.recovery.VersionRequest
	(*VersionResponse)(nil),                                // 39: chromeos.recovery.VersionResponse
	(*DUTAudio)(nil),                                       // 40: chromeos.recovery.DUTAudio
	(*InitServodRequest)(nil),                              // 41: chromeos.recovery.InitServodRequest
	(*ServodOptions)(nil),                                  // 42: chromeos.recovery.ServodOptions
	(*ServoTopology)(nil),                                  // 43: chromeos.recovery.ServoTopology
	(*ServoTopologyItem)(nil),                              // 44: chromeos.recovery.ServoTopologyItem
	(*ServoHost)(nil),                                      // 45: chromeos.recovery.ServoHost
	(*ProvisionedInfo)(nil),                                // 46: chromeos.recovery.ProvisionedInfo
	(*Storage)(nil),                                        // 47: chromeos.recovery.Storage
	(*Chameleon)(nil),                                      // 48: chromeos.recovery.Chameleon
	(*BluetoothPeer)(nil),                                  // 49: chromeos.recovery.BluetoothPeer
	(*Wifi)(nil),                                           // 50: chromeos.recovery.Wifi
	(*Bluetooth)(nil),                                      // 51: chromeos.recovery.Bluetooth
	(*Cellular)(nil),                                       // 52: chromeos.recovery.Cellular
	(*Battery)(nil),                                        // 53: chromeos.recovery.Battery
	(*HumanMotionRobot)(nil),                               // 54: chromeos.recovery.HumanMotionRobot
	(*Dolos)(nil),                                          // 55: chromeos.recovery.Dolos
	(*AudioLatencyToolkit)(nil),                            // 56: chromeos.recovery.AudioLatencyToolkit
	(*FirmwareInfo)(nil),                                   // 57: chromeos.recovery.FirmwareInfo
	(*ChromeOS)(nil),                                       // 58: chromeos.recovery.ChromeOS
	(*TestbedCapability)(nil),                              // 59: chromeos.recovery.TestbedCapability
	(*Android)(nil),                                        // 60: chromeos.recovery.Android
	(*DevBoard)(nil),                                       // 61: chromeos.recovery.DevBoard
	(*CopyRequest)(nil),                                    // 62: chromeos.recovery.CopyRequest
	(*CallServodRequest)(nil),                              // 63: chromeos.recovery.CallServodRequest
	(*CallServodResponse)(nil),                             // 64: chromeos.recovery.CallServodResponse
	(*BluetoothPeerScopeState_Chameleond)(nil),             // 65: chromeos.recovery.BluetoothPeerScopeState.Chameleond
	(*BluetoothPeerScopeState_RaspiosCrosBtpeerImage)(nil), // 66: chromeos.recovery.BluetoothPeerScopeState.RaspiosCrosBtpeerImage
	nil,                                       // 67: chromeos.recovery.VersionResponse.ValueEntry
	(*Cellular_ModemInfo)(nil),                // 68: chromeos.recovery.Cellular.ModemInfo
	(*Cellular_SIMProfileInfo)(nil),           // 69: chromeos.recovery.Cellular.SIMProfileInfo
	(*Cellular_SIMInfo)(nil),                  // 70: chromeos.recovery.Cellular.SIMInfo
	nil,                                       // 71: chromeos.recovery.ChromeOS.RoVpdMapEntry
	(*durationpb.Duration)(nil),               // 72: google.protobuf.Duration
	(*xmlrpc.Value)(nil),                      // 73: chromiumos.config.api.test.xmlrpc.Value
	(api.WifiRouterFeature)(0),                // 74: chromiumos.test.lab.api.WifiRouterFeature
	(api.WifiRouterDeviceType)(0),             // 75: chromiumos.test.lab.api.WifiRouterDeviceType
	(*api.CrosOpenWrtImageBuildInfo)(nil),     // 76: chromiumos.test.lab.api.CrosOpenWrtImageBuildInfo
	(*api.OpenWrtWifiRouterDeviceConfig)(nil), // 77: chromiumos.test.lab.api.OpenWrtWifiRouterDeviceConfig
	(*api.UsbDrive)(nil),                      // 78: chromiumos.test.lab.api.UsbDrive
	(*api.Cbi)(nil),                           // 79: chromiumos.test.lab.api.Cbi
	(*api.BluetoothPeerChameleondConfig)(nil), // 80: chromiumos.test.lab.api.BluetoothPeerChameleondConfig
	(*api.BluetoothPeerChameleondConfig_ChameleondBundle)(nil), // 81: chromiumos.test.lab.api.BluetoothPeerChameleondConfig.ChameleondBundle
	(*api.RaspiosCrosBtpeerImageConfig)(nil),                   // 82: chromiumos.test.lab.api.RaspiosCrosBtpeerImageConfig
	(*api.RaspiosCrosBtpeerImageConfig_OSImage)(nil),           // 83: chromiumos.test.lab.api.RaspiosCrosBtpeerImageConfig.OSImage
}
var file_infra_cros_recovery_tlw_models_proto_depIdxs = []int32{
	72, // 0: chromeos.recovery.RunRequest.timeout:type_name -> google.protobuf.Duration
	73, // 1: chromeos.recovery.CallBluetoothPeerRequest.args:type_name -> chromiumos.config.api.test.xmlrpc.Value
	73, // 2: chromeos.recovery.CallBluetoothPeerResponse.value:type_name -> chromiumos.config.api.test.xmlrpc.Value
	73, // 3: chromeos.recovery.CallTouchHostdRequest.args:type_name -> chromiumos.config.api.test.xmlrpc.Value
	72, // 4: chromeos.recovery.CallTouchHostdRequest.timeout:type_name -> google.protobuf.Duration
	73, // 5: chromeos.recovery.CallTouchHostdResponse.value:type_name -> chromiumos.config.api.test.xmlrpc.Value
	2,  // 6: chromeos.recovery.RunRPMActionRequest.action:type_name -> chromeos.recovery.RunRPMActionRequest.Action
	3,  // 7: chromeos.recovery.RPMOutlet.state:type_name -> chromeos.recovery.RPMOutlet.State
	4,  // 8: chromeos.recovery.WifiRouterHost.state:type_name -> chromeos.recovery.WifiRouterHost.State
	32, // 9: chromeos.recovery.WifiRouterHost.RPMOutlet:type_name -> chromeos.recovery.RPMOutlet
	74, // 10: chromeos.recovery.WifiRouterHost.features:type_name -> chromiumos.test.lab.api.WifiRouterFeature
	75, // 11: chromeos.recovery.WifiRouterHost.device_type:type_name -> chromiumos.test.lab.api.WifiRouterDeviceType
	76, // 12: chromeos.recovery.OpenWrtRouterControllerState.device_build_info:type_name -> chromiumos.test.lab.api.CrosOpenWrtImageBuildInfo
	77, // 13: chromeos.recovery.OpenWrtRouterControllerState.config:type_name -> chromiumos.test.lab.api.OpenWrtWifiRouterDeviceConfig
	49, // 14: chromeos.recovery.BluetoothPeerScopeState.btpeer:type_name -> chromeos.recovery.BluetoothPeer
	65, // 15: chromeos.recovery.BluetoothPeerScopeState.chameleond:type_name -> chromeos.recovery.BluetoothPeerScopeState.Chameleond
	66, // 16: chromeos.recovery.BluetoothPeerScopeState.raspios_cros_btpeer_image:type_name -> chromeos.recovery.BluetoothPeerScopeState.RaspiosCrosBtpeerImage
	5,  // 17: chromeos.recovery.VersionRequest.type:type_name -> chromeos.recovery.VersionRequest.VersionType
	67, // 18: chromeos.recovery.VersionResponse.value:type_name -> chromeos.recovery.VersionResponse.ValueEntry
	6,  // 19: chromeos.recovery.DUTAudio.loopback_state:type_name -> chromeos.recovery.DUTAudio.LoopbackState
	42, // 20: chromeos.recovery.InitServodRequest.options:type_name -> chromeos.recovery.ServodOptions
	44, // 21: chromeos.recovery.ServoTopology.root:type_name -> chromeos.recovery.ServoTopologyItem
	44, // 22: chromeos.recovery.ServoTopology.children:type_name -> chromeos.recovery.ServoTopologyItem
	7,  // 23: chromeos.recovery.ServoHost.state:type_name -> chromeos.recovery.ServoHost.State
	1,  // 24: chromeos.recovery.ServoHost.firmware_channel:type_name -> chromeos.recovery.ServoFwChannel
	0,  // 25: chromeos.recovery.ServoHost.usbkey_state:type_name -> chromeos.recovery.HardwareState
	43, // 26: chromeos.recovery.ServoHost.servo_topology:type_name -> chromeos.recovery.ServoTopology
	78, // 27: chromeos.recovery.ServoHost.usb_drive:type_name -> chromiumos.test.lab.api.UsbDrive
	0,  // 28: chromeos.recovery.Storage.state:type_name -> chromeos.recovery.HardwareState
	8,  // 29: chromeos.recovery.Storage.type:type_name -> chromeos.recovery.Storage.Type
	9,  // 30: chromeos.recovery.Chameleon.state:type_name -> chromeos.recovery.Chameleon.State
	32, // 31: chromeos.recovery.Chameleon.RPMOutlet:type_name -> chromeos.recovery.RPMOutlet
	10, // 32: chromeos.recovery.Chameleon.audioboxjackpluggerstate:type_name -> chromeos.recovery.Chameleon.AudioBoxJackPluggerState
	11, // 33: chromeos.recovery.BluetoothPeer.state:type_name -> chromeos.recovery.BluetoothPeer.State
	0,  // 34: chromeos.recovery.Wifi.state:type_name -> chromeos.recovery.HardwareState
	0,  // 35: chromeos.recovery.Bluetooth.state:type_name -> chromeos.recovery.HardwareState
	0,  // 36: chromeos.recovery.Cellular.modem_state:type_name -> chromeos.recovery.HardwareState
	68, // 37: chromeos.recovery.Cellular.modem_info:type_name -> chromeos.recovery.Cellular.ModemInfo
	70, // 38: chromeos.recovery.Cellular.sim_infos:type_name -> chromeos.recovery.Cellular.SIMInfo
	15, // 39: chromeos.recovery.Cellular.starfish_state:type_name -> chromeos.recovery.Cellular.StarfishState
	0,  // 40: chromeos.recovery.Battery.state:type_name -> chromeos.recovery.HardwareState
	16, // 41: chromeos.recovery.HumanMotionRobot.state:type_name -> chromeos.recovery.HumanMotionRobot.State
	17, // 42: chromeos.recovery.Dolos.hw_major_revision:type_name -> chromeos.recovery.Dolos.DolosHWMajorRevision
	18, // 43: chromeos.recovery.Dolos.state:type_name -> chromeos.recovery.Dolos.State
	19, // 44: chromeos.recovery.AudioLatencyToolkit.state:type_name -> chromeos.recovery.AudioLatencyToolkit.State
	57, // 45: chromeos.recovery.ChromeOS.firmware_info:type_name -> chromeos.recovery.FirmwareInfo
	20, // 46: chromeos.recovery.ChromeOS.power_supply_type:type_name -> chromeos.recovery.ChromeOS.PowerSupplyType
	21, // 47: chromeos.recovery.ChromeOS.cr50_phase:type_name -> chromeos.recovery.ChromeOS.Cr50Phase
	22, // 48: chromeos.recovery.ChromeOS.cr50_key_env:type_name -> chromeos.recovery.ChromeOS.Cr50KeyEnv
	40, // 49: chromeos.recovery.ChromeOS.audio:type_name -> chromeos.recovery.DUTAudio
	47, // 50: chromeos.recovery.ChromeOS.storage:type_name -> chromeos.recovery.Storage
	53, // 51: chromeos.recovery.ChromeOS.battery:type_name -> chromeos.recovery.Battery
	50, // 52: chromeos.recovery.ChromeOS.wifi:type_name -> chromeos.recovery.Wifi
	51, // 53: chromeos.recovery.ChromeOS.bluetooth:type_name -> chromeos.recovery.Bluetooth
	45, // 54: chromeos.recovery.ChromeOS.servo:type_name -> chromeos.recovery.ServoHost
	48, // 55: chromeos.recovery.ChromeOS.chameleon:type_name -> chromeos.recovery.Chameleon
	49, // 56: chromeos.recovery.ChromeOS.bluetooth_peers:type_name -> chromeos.recovery.BluetoothPeer
	33, // 57: chromeos.recovery.ChromeOS.wifi_routers:type_name -> chromeos.recovery.WifiRouterHost
	23, // 58: chromeos.recovery.ChromeOS.peripheral_wifi_state:type_name -> chromeos.recovery.ChromeOS.PeripheralWifiState
	74, // 59: chromeos.recovery.ChromeOS.wifi_router_features:type_name -> chromiumos.test.lab.api.WifiRouterFeature
	32, // 60: chromeos.recovery.ChromeOS.rpm_outlet:type_name -> chromeos.recovery.RPMOutlet
	71, // 61: chromeos.recovery.ChromeOS.ro_vpd_map:type_name -> chromeos.recovery.ChromeOS.RoVpdMapEntry
	79, // 62: chromeos.recovery.ChromeOS.cbi:type_name -> chromiumos.test.lab.api.Cbi
	52, // 63: chromeos.recovery.ChromeOS.cellular:type_name -> chromeos.recovery.Cellular
	54, // 64: chromeos.recovery.ChromeOS.human_motion_robot:type_name -> chromeos.recovery.HumanMotionRobot
	59, // 65: chromeos.recovery.ChromeOS.testbed_capability:type_name -> chromeos.recovery.TestbedCapability
	56, // 66: chromeos.recovery.ChromeOS.audio_latency_toolkit:type_name -> chromeos.recovery.AudioLatencyToolkit
	55, // 67: chromeos.recovery.ChromeOS.dolos:type_name -> chromeos.recovery.Dolos
	45, // 68: chromeos.recovery.DevBoard.servo:type_name -> chromeos.recovery.ServoHost
	73, // 69: chromeos.recovery.CallServodRequest.args:type_name -> chromiumos.config.api.test.xmlrpc.Value
	72, // 70: chromeos.recovery.CallServodRequest.timeout:type_name -> google.protobuf.Duration
	73, // 71: chromeos.recovery.CallServodResponse.value:type_name -> chromiumos.config.api.test.xmlrpc.Value
	80, // 72: chromeos.recovery.BluetoothPeerScopeState.Chameleond.release_config:type_name -> chromiumos.test.lab.api.BluetoothPeerChameleondConfig
	81, // 73: chromeos.recovery.BluetoothPeerScopeState.Chameleond.expected_bundle_config:type_name -> chromiumos.test.lab.api.BluetoothPeerChameleondConfig.ChameleondBundle
	82, // 74: chromeos.recovery.BluetoothPeerScopeState.RaspiosCrosBtpeerImage.release_config:type_name -> chromiumos.test.lab.api.RaspiosCrosBtpeerImageConfig
	83, // 75: chromeos.recovery.BluetoothPeerScopeState.RaspiosCrosBtpeerImage.expected_image_config:type_name -> chromiumos.test.lab.api.RaspiosCrosBtpeerImageConfig.OSImage
	12, // 76: chromeos.recovery.Cellular.ModemInfo.type:type_name -> chromeos.recovery.Cellular.ModemType
	13, // 77: chromeos.recovery.Cellular.SIMProfileInfo.carrier_name:type_name -> chromeos.recovery.Cellular.NetworkProvider
	14, // 78: chromeos.recovery.Cellular.SIMInfo.type:type_name -> chromeos.recovery.Cellular.SIMType
	69, // 79: chromeos.recovery.Cellular.SIMInfo.profile_infos:type_name -> chromeos.recovery.Cellular.SIMProfileInfo
	80, // [80:80] is the sub-list for method output_type
	80, // [80:80] is the sub-list for method input_type
	80, // [80:80] is the sub-list for extension type_name
	80, // [80:80] is the sub-list for extension extendee
	0,  // [0:80] is the sub-list for field type_name
}

func init() { file_infra_cros_recovery_tlw_models_proto_init() }
func file_infra_cros_recovery_tlw_models_proto_init() {
	if File_infra_cros_recovery_tlw_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_cros_recovery_tlw_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallBluetoothPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallBluetoothPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTouchHostdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTouchHostdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRPMActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPMOutlet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WifiRouterHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsusWrtRouterControllerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenWrtRouterControllerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UbuntuRouterControllerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothPeerScopeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DUTAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitServodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServodOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServoTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServoTopologyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServoHost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chameleon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wifi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bluetooth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cellular); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Battery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanMotionRobot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dolos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLatencyToolkit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeOS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestbedCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Android); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallServodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallServodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothPeerScopeState_Chameleond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluetoothPeerScopeState_RaspiosCrosBtpeerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cellular_ModemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cellular_SIMProfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_recovery_tlw_models_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cellular_SIMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_cros_recovery_tlw_models_proto_rawDesc,
			NumEnums:      24,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_cros_recovery_tlw_models_proto_goTypes,
		DependencyIndexes: file_infra_cros_recovery_tlw_models_proto_depIdxs,
		EnumInfos:         file_infra_cros_recovery_tlw_models_proto_enumTypes,
		MessageInfos:      file_infra_cros_recovery_tlw_models_proto_msgTypes,
	}.Build()
	File_infra_cros_recovery_tlw_models_proto = out.File
	file_infra_cros_recovery_tlw_models_proto_rawDesc = nil
	file_infra_cros_recovery_tlw_models_proto_goTypes = nil
	file_infra_cros_recovery_tlw_models_proto_depIdxs = nil
}
