// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package chromeos.recovery;

option go_package = "infra/cros/recovery/tlw;tlw";

import "google/protobuf/duration.proto";
import "go.chromium.org/chromiumos/config/proto/chromiumos/config/api/test/xmlrpc/xmlrpc.proto";

// RunRequest represents result of executed command.
message RunRequest {
  // Resource name
  string resource = 1;
  // Command executed on the resource.
  string command = 2;
  // Command arguments.
  repeated string args = 3;
  // Command execution timeout.
  google.protobuf.Duration timeout = 4;
}

// ProvisionRequest provides data to perform provisioning of the device.
message ProvisionRequest {
  // Resource name
  string resource = 1;
  // Path to system image.
  // Path to the GS file.
  // Example: gs://bucket/file_name
  string system_image_path = 2;
  // Prevent reboot during provision OS.
  bool prevent_reboot = 3;
}

// CallBluetoothPeerRequest represents data to run command on bluetooth peer.
message CallBluetoothPeerRequest {
  // Resource name
  string resource = 1;
  // Method called on service.
  string method = 2;
  // Arguments provided to the service.
  repeated chromiumos.config.api.test.xmlrpc.Value args = 3;
}

// CallBluetoothPeerResponse represents result data from running command on
// bluetooth peer.
message CallBluetoothPeerResponse {
  chromiumos.config.api.test.xmlrpc.Value value = 1;
  bool fault = 2;
}

// RunRPMActionRequest represents data to perform action on RPM outlet.
message RunRPMActionRequest {
  // Hostname of the DUT.
  string hostname = 1;
  // Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
  string rpm_hostname = 2;
  // Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
  string rpm_outlet = 3;
  // Action represents action expecting to perform on power supplier.
  enum Action {
    UNSPECIFIED = 0;
    // Switch state to ON.
    ON = 1;
    // Switch state to OFF.
    OFF = 2;
    // Switch state to OFF and then ON with delay 5 seconds.
    CYCLE = 3;
  }
  // Expected state to switch on.
  Action action = 4;
}

// RPMOutlet is remote power management outlet allows perform an action to do
// OFF/ON/CYCLE on it.
message RPMOutlet {
  // Hostname of the RPM power unit, e.g. "chromeos6-row13_14-rack15-rpm2".
  string hostname = 1;
  // Name to locate a specific outlet from a RPM power unit, e.g. ".A7".
  string outlet = 2;
  // RPMState describes the state of RPM outlet.
  enum State {
    UNSPECIFIED = 0;
    // Configuration for RPM outlet missed which block from execution the
    // actions.
    MISSING_CONFIG = 1;
    // Configuration for RPM outlet provided but does not working which can be
    // several reasons.
    WRONG_CONFIG = 2;
    // RPM outlet can successfully perform the actions.
    WORKING = 3;
  }
  // State of the component.
  State state = 3;
}

// Router devices
message WifiRouterHost {
  // Name name of router device e.g. "chromeos15-row99-rack33-host105-router".
  string name = 1;
  // State of the device.
  enum State {
    UNSPECIFIED = 0;
    WORKING = 1;
    BROKEN = 2;
  }
  // The state of the wifi router.
  State state = 2;
  // The model of the router.
  string model = 3;
  // The board of the router.
  string board = 4;
  // RPMOutlet the router power connects to if it exists.
  RPMOutlet RPMOutlet = 5;
}

// VersionRequest holds data for version service request.
message VersionRequest {
  // Resource name of device.
  string resource = 1;
  // VersionType represents type of devices requesting the stable version.
  enum VersionType {
    UNSPECIFIED = 0;
    // Chrome OS.
    CROS = 1;
    // AP/PCAP peripheral.
    WIFI_ROUTER = 2;
  }
  // Version type describe type of versions and device type associated with
  // that.
  VersionType type = 2;
}

// VersionResponse holds data received from service.
message VersionResponse {
  // All version values.
  map<string, string> value = 1;
}

// CrosAudio holds infor for audio information of the DUT.
message DUTAudio {
  // Indicate if the DUT is housed in an audio box to record / replay audio
  // for audio testing.
  bool in_box = 1;
  // Indicate if the DUT is connected to Atrus speakermic
  bool atrus = 2;
  // Indicate if the DUT is connected to chameleon through static audio cable
  bool static_cable = 3;
  // LoopbackState representes states for loopback dongle.
  enum LoopbackState {
    LOOPBACK_UNSPECIFIED = 0;
    // Device and software on it is working as expected.
    LOOPBACK_WORKING = 1;
  }
  // Audio loopback dongle is plugged in.
  LoopbackState loopback_state = 4;
}

// InitServodRequest represents data to initiate servod daemon on servo-host.
message InitServodRequest {
  // Resource name of device.
  string resource = 1;
  // ServodOptions options to provide options for servod daemon.
  ServodOptions options = 2;
  // Prepare servo-host without servod service.
  bool no_servod = 3;
}

// ServodOption represents options to start servod.
message ServodOptions {
  // Board of DUT connected to servod.
  string dut_board = 1;
  // Model of DUT connected to servod.
  string dut_model = 2;
  // Port assigned to servod.
  int32 servod_port = 3;
  // Servo board serial.
  string servo_serial = 4;
  // Specified dual setup for servod.
  bool servo_dual = 5;
  // Specified if need apply CR50 config.
  bool use_cr50_config = 6;
  // Use recovery mode when start servod.
  bool recovery_mode = 7;
}

// ServoTopology describes servo devices used to provide servo functionality.
message ServoTopology {
  ServoTopologyItem root = 1;
  repeated ServoTopologyItem children = 2;
}

// ServoTopologyItem describes details of one servo device.
message ServoTopologyItem {
  // type provides the type of servo device. Keeping as String to avoid issue
  // with introduce new type.
  string type = 1;
  // sysfs_product provides the product name of the device recorded in File
  // System.
  string sysfs_product = 2;
  // serial provides the serial number of the device.
  string serial = 3;
  // usb_hub_port provides the port connection to the device.
  // e.g. '1-6.2.2' where
  //   '1-6'  - port on the labstation
  //   '2'    - port on smart-hub connected to the labstation
  //   '2'    - port on servo hub (part of servo_v4 or servo_v4.1) connected to
  //   the smart-hub
  // The same path will look '1-6.2' if connected servo_v4 directly to the
  // labstation.
  string usb_hub_port = 4;

  // This is the complete path on the file system for the servo device.
  string sysfs_path = 5;
  // This is the version of servo device.
  string fw_version = 6;
}

// HardwareState describes the state of hardware components.
enum HardwareState {
  // keep for all unspecified state by default.
  HARDWARE_UNSPECIFIED = 0;
  // Hardware is in good shape and pass all verifiers.
  HARDWARE_NORMAL = 1;
  // Hardware is still good but some not critical verifiers did not pass or
  // provided border values. (used for DUT storage when usage reached 98%)
  HARDWARE_ACCEPTABLE = 2;
  // Hardware is broken or bad (did not pass verifiers).
  HARDWARE_NEED_REPLACEMENT = 3;
  // Hardware is not detected to run verifiers.
  // (used for USB-drive when it expected but not detected on the device)
  HARDWARE_NOT_DETECTED = 4;
}

// Servo Firmware Channel describes the firmware expected to have on servos.
enum ServoFwChannel {
  FW_UNSPECIFIED = 0;
  // Servo firmware from Stable channel.
  FW_STABLE = 1;
  // The previous Servo firmware from Stable channel.
  FW_PREV = 2;
  // Servo firmware from Dev channel.
  FW_DEV = 3;
  // Servo firmware from Alpha channel.
  FW_ALPHA = 4;
}

// ServoHost holds info about host to manage servod services and verify
// connected servo devices. Example: labstation, servo-host container.
message ServoHost {
  // Name is the resource name.
  string Name = 1;
  // State of the servo.
  enum State {
    STATE_UNSPECIFIED = 0;
    // Device and software on it is working as expected.
    WORKING = 1;
    // Configuration for device is not provided.
    MISSING_CONFIG = 2;
    // Configuration contains incorrect information.
    WRONG_CONFIG = 3;
    // Device is not connected/plugged.
    NOT_CONNECTED = 4;
    // Device is not reachable over ssh.
    NO_SSH = 5;
    // Device is broken or not working as expected. the state used if no
    // specified state for the issue.
    BROKEN = 6;
    // Device cannot be repaired or required manual attention to fix/replace it.
    NEED_REPLACEMENT = 7;
    // Cr50 console missing or unresponsive.
    CR50_CONSOLE_MISSING = 8;
    // Servod daemon cannot start on servo-host because cr50 testlab not
    // enabled.
    CCD_TESTLAB_ISSUE = 9;
    // Servod daemon cannot start on servo-host.
    SERVOD_ISSUE = 10;
    // Device lid is not open.
    LID_OPEN_FAILED = 11;
    // The ribbon cable between servo and DUT is broken or not connected.
    BAD_RIBBON_CABLE = 12;
    // The EC on the DUT has issue.
    EC_BROKEN = 13;
    // Servo is not connected to the DUT.
    DUT_NOT_CONNECTED = 14;
    // Some component in servo-topology missed or not detected.
    TOPOLOGY_ISSUE = 15;
    // SBU voltage issues effect CR50 detection.
    SBU_LOW_VOLTAGE = 16;
    // CR50 SBU voltage detected but device was not enumerated.
    CR50_NOT_ENUMERATED = 17;
    // Servo serial mismatch, when servo not detected and another serial
    // detected on previous used port.
    SERVO_SERIAL_MISMATCH = 18;
    // Issue to connect to servod by XMLRPC proxy.
    SERVOD_PROXY_ISSUE = 19;
    // Issue related to servo-host. Timeout to start servod or issue with
    // detecting devices.
    SERVO_HOST_ISSUE = 20;
    // Issue related to servo_updater on the servo-host.
    SERVO_UPDATER_ISSUE = 21;
    // Issue related to power button pin on the servo host.
    SERVOD_DUT_CONTROLLER_MISSING = 22;
    // Issue related to cold reset pin on the DUT.
    COLD_RESET_PIN_ISSUE = 23;
    // Issue related to warm reset pin on the DUT.
    WARM_RESET_PIN_ISSUE = 24;
    // Issue related to power button pin on the DUT.
    POWER_BUTTON_PIN_ISSUE = 25;
  }
  State state = 2;
  // Serial number of the root servo device.
  string serial_number = 3;
  // Channel of firmware used on servo devices.
  ServoFwChannel firmware_channel = 4;
  // Self representation of servo-setup by servod.
  // Example: servo_v4_with_servo_micro, servo_v4_with_ccd_cr50.
  string servod_type = 5;
  // State of the USB-key connected to the servo.
  HardwareState usbkey_state = 6;
  // Port user on the host to run servod daemon. Expected value between 9900
  // and 9999.
  int32 servod_port = 7;
  // Smart USB-hub is present on setup.
  bool smart_usbhub_present = 8;
  // Servo Topology of servo devices.
  ServoTopology servo_topology = 9;
  // Name of the servod container if the servo uses a
  // servod-container.
  string container_name = 10;
}

// ProvisionedInfo holds info about provisioned info for the DUT.
message ProvisionedInfo {
  // CrosVersion tells which ChromeOS version is on the DUT.
  // Example: board-release/R90-13816.47.0
  string cros_version = 1;
  // JobRepoUrl provide path to download client code to the DUT.
  // Example: http://{cache_server}:8082/download/{gs_path}
  string job_repo_url = 2;
}

// Storage holds info about internal storage of the DUT.
message Storage {
  // State of the component.
  HardwareState state = 1;
  // Type describes which type or storage used on the DUT.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    SSD = 1;
    HDD = 2;
    MMC = 3;
    NVME = 4;
    UFS = 5;
  }
  // Type of storage used on device.
  Type type = 2;
}

// Chameleon holds info about chameleon device.
message Chameleon {
  // Name is the resource name.
  string name = 1;
  // State describes the state of chameleon device.
  enum State {
    STATE_UNSPECIFIED = 0;
    // Device and software on it is working as expected.
    WORKING = 1;
    // Device is broken or not working as expected.
    BROKEN = 2;
  }
  // State of the device.
  State state = 2;
}

// BluetoothPeer models a Bluetooth peer device and its state as used by
// recovery.
message BluetoothPeer {
  // Name is the resource name.
  string name = 1;
  // State describes the state of bluetooth peer device.
  enum State {
    STATE_UNSPECIFIED = 0;
    // Device and software on it is working as expected.
    WORKING = 1;
    // Device is broken or not working as expected.
    BROKEN = 2;
  }
  // State of the device.
  State state = 2;
}
