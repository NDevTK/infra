// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by MockGen. DO NOT EDIT.
// Source: swarming.go

package clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apipb "go.chromium.org/luci/swarming/proto/api_v2"
	grpc "google.golang.org/grpc"
)

// MockSwarmingClient is a mock of SwarmingClient interface.
type MockSwarmingClient struct {
	ctrl     *gomock.Controller
	recorder *MockSwarmingClientMockRecorder
}

// MockSwarmingClientMockRecorder is the mock recorder for MockSwarmingClient.
type MockSwarmingClientMockRecorder struct {
	mock *MockSwarmingClient
}

// NewMockSwarmingClient creates a new mock instance.
func NewMockSwarmingClient(ctrl *gomock.Controller) *MockSwarmingClient {
	mock := &MockSwarmingClient{ctrl: ctrl}
	mock.recorder = &MockSwarmingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwarmingClient) EXPECT() *MockSwarmingClientMockRecorder {
	return m.recorder
}

// ListBots mocks base method.
func (m *MockSwarmingClient) ListBots(ctx context.Context, in *apipb.BotsRequest, opts ...grpc.CallOption) (*apipb.BotInfoListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBots", varargs...)
	ret0, _ := ret[0].(*apipb.BotInfoListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBots indicates an expected call of ListBots.
func (mr *MockSwarmingClientMockRecorder) ListBots(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBots", reflect.TypeOf((*MockSwarmingClient)(nil).ListBots), varargs...)
}
