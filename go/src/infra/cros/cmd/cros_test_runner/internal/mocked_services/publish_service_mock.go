// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/google/home/azrahman/chromiumos/infra/infra/go/src/go.chromium.org/chromiumos/config/go/test/api/cros_publish_service_grpc.pb.go

// Package mocked_services is a generated GoMock package.
package mocked_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	longrunning "go.chromium.org/chromiumos/config/go/longrunning"
	api "go.chromium.org/chromiumos/config/go/test/api"
	grpc "google.golang.org/grpc"
)

// MockGenericPublishServiceClient is a mock of GenericPublishServiceClient interface.
type MockGenericPublishServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGenericPublishServiceClientMockRecorder
}

// MockGenericPublishServiceClientMockRecorder is the mock recorder for MockGenericPublishServiceClient.
type MockGenericPublishServiceClientMockRecorder struct {
	mock *MockGenericPublishServiceClient
}

// NewMockGenericPublishServiceClient creates a new mock instance.
func NewMockGenericPublishServiceClient(ctrl *gomock.Controller) *MockGenericPublishServiceClient {
	mock := &MockGenericPublishServiceClient{ctrl: ctrl}
	mock.recorder = &MockGenericPublishServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericPublishServiceClient) EXPECT() *MockGenericPublishServiceClientMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockGenericPublishServiceClient) Publish(ctx context.Context, in *api.PublishRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockGenericPublishServiceClientMockRecorder) Publish(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockGenericPublishServiceClient)(nil).Publish), varargs...)
}

// MockGenericPublishServiceServer is a mock of GenericPublishServiceServer interface.
type MockGenericPublishServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGenericPublishServiceServerMockRecorder
}

// MockGenericPublishServiceServerMockRecorder is the mock recorder for MockGenericPublishServiceServer.
type MockGenericPublishServiceServerMockRecorder struct {
	mock *MockGenericPublishServiceServer
}

// NewMockGenericPublishServiceServer creates a new mock instance.
func NewMockGenericPublishServiceServer(ctrl *gomock.Controller) *MockGenericPublishServiceServer {
	mock := &MockGenericPublishServiceServer{ctrl: ctrl}
	mock.recorder = &MockGenericPublishServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericPublishServiceServer) EXPECT() *MockGenericPublishServiceServerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockGenericPublishServiceServer) Publish(arg0 context.Context, arg1 *api.PublishRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockGenericPublishServiceServerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockGenericPublishServiceServer)(nil).Publish), arg0, arg1)
}

// MockUnsafeGenericPublishServiceServer is a mock of UnsafeGenericPublishServiceServer interface.
type MockUnsafeGenericPublishServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGenericPublishServiceServerMockRecorder
}

// MockUnsafeGenericPublishServiceServerMockRecorder is the mock recorder for MockUnsafeGenericPublishServiceServer.
type MockUnsafeGenericPublishServiceServerMockRecorder struct {
	mock *MockUnsafeGenericPublishServiceServer
}

// NewMockUnsafeGenericPublishServiceServer creates a new mock instance.
func NewMockUnsafeGenericPublishServiceServer(ctrl *gomock.Controller) *MockUnsafeGenericPublishServiceServer {
	mock := &MockUnsafeGenericPublishServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGenericPublishServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGenericPublishServiceServer) EXPECT() *MockUnsafeGenericPublishServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGenericPublishServiceServer mocks base method.
func (m *MockUnsafeGenericPublishServiceServer) mustEmbedUnimplementedGenericPublishServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGenericPublishServiceServer")
}

// mustEmbedUnimplementedGenericPublishServiceServer indicates an expected call of mustEmbedUnimplementedGenericPublishServiceServer.
func (mr *MockUnsafeGenericPublishServiceServerMockRecorder) mustEmbedUnimplementedGenericPublishServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGenericPublishServiceServer", reflect.TypeOf((*MockUnsafeGenericPublishServiceServer)(nil).mustEmbedUnimplementedGenericPublishServiceServer))
}
