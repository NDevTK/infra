// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/google/home/azrahman/chromiumos/infra/infra/go/src/go.chromium.org/chromiumos/config/go/test/lab/api/inventory_service_grpc.pb.go

// Package mocked_services is a generated GoMock package.
package mocked_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "go.chromium.org/chromiumos/config/go/test/lab/api"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockInventoryServiceClient is a mock of InventoryServiceClient interface.
type MockInventoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceClientMockRecorder
}

// MockInventoryServiceClientMockRecorder is the mock recorder for MockInventoryServiceClient.
type MockInventoryServiceClientMockRecorder struct {
	mock *MockInventoryServiceClient
}

// NewMockInventoryServiceClient creates a new mock instance.
func NewMockInventoryServiceClient(ctrl *gomock.Controller) *MockInventoryServiceClient {
	mock := &MockInventoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceClient) EXPECT() *MockInventoryServiceClientMockRecorder {
	return m.recorder
}

// GetDutTopology mocks base method.
func (m *MockInventoryServiceClient) GetDutTopology(ctx context.Context, in *api.GetDutTopologyRequest, opts ...grpc.CallOption) (api.InventoryService_GetDutTopologyClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDutTopology", varargs...)
	ret0, _ := ret[0].(api.InventoryService_GetDutTopologyClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDutTopology indicates an expected call of GetDutTopology.
func (mr *MockInventoryServiceClientMockRecorder) GetDutTopology(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDutTopology", reflect.TypeOf((*MockInventoryServiceClient)(nil).GetDutTopology), varargs...)
}

// MockInventoryService_GetDutTopologyClient is a mock of InventoryService_GetDutTopologyClient interface.
type MockInventoryService_GetDutTopologyClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryService_GetDutTopologyClientMockRecorder
}

// MockInventoryService_GetDutTopologyClientMockRecorder is the mock recorder for MockInventoryService_GetDutTopologyClient.
type MockInventoryService_GetDutTopologyClientMockRecorder struct {
	mock *MockInventoryService_GetDutTopologyClient
}

// NewMockInventoryService_GetDutTopologyClient creates a new mock instance.
func NewMockInventoryService_GetDutTopologyClient(ctrl *gomock.Controller) *MockInventoryService_GetDutTopologyClient {
	mock := &MockInventoryService_GetDutTopologyClient{ctrl: ctrl}
	mock.recorder = &MockInventoryService_GetDutTopologyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService_GetDutTopologyClient) EXPECT() *MockInventoryService_GetDutTopologyClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockInventoryService_GetDutTopologyClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockInventoryService_GetDutTopologyClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).Context))
}

// Header mocks base method.
func (m *MockInventoryService_GetDutTopologyClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockInventoryService_GetDutTopologyClient) Recv() (*api.GetDutTopologyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.GetDutTopologyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockInventoryService_GetDutTopologyClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockInventoryService_GetDutTopologyClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockInventoryService_GetDutTopologyClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockInventoryService_GetDutTopologyClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockInventoryService_GetDutTopologyClient)(nil).Trailer))
}

// MockInventoryServiceServer is a mock of InventoryServiceServer interface.
type MockInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceServerMockRecorder
}

// MockInventoryServiceServerMockRecorder is the mock recorder for MockInventoryServiceServer.
type MockInventoryServiceServerMockRecorder struct {
	mock *MockInventoryServiceServer
}

// NewMockInventoryServiceServer creates a new mock instance.
func NewMockInventoryServiceServer(ctrl *gomock.Controller) *MockInventoryServiceServer {
	mock := &MockInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceServer) EXPECT() *MockInventoryServiceServerMockRecorder {
	return m.recorder
}

// GetDutTopology mocks base method.
func (m *MockInventoryServiceServer) GetDutTopology(arg0 *api.GetDutTopologyRequest, arg1 api.InventoryService_GetDutTopologyServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDutTopology", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDutTopology indicates an expected call of GetDutTopology.
func (mr *MockInventoryServiceServerMockRecorder) GetDutTopology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDutTopology", reflect.TypeOf((*MockInventoryServiceServer)(nil).GetDutTopology), arg0, arg1)
}

// MockUnsafeInventoryServiceServer is a mock of UnsafeInventoryServiceServer interface.
type MockUnsafeInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInventoryServiceServerMockRecorder
}

// MockUnsafeInventoryServiceServerMockRecorder is the mock recorder for MockUnsafeInventoryServiceServer.
type MockUnsafeInventoryServiceServerMockRecorder struct {
	mock *MockUnsafeInventoryServiceServer
}

// NewMockUnsafeInventoryServiceServer creates a new mock instance.
func NewMockUnsafeInventoryServiceServer(ctrl *gomock.Controller) *MockUnsafeInventoryServiceServer {
	mock := &MockUnsafeInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInventoryServiceServer) EXPECT() *MockUnsafeInventoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockUnsafeInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockUnsafeInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockUnsafeInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}

// MockInventoryService_GetDutTopologyServer is a mock of InventoryService_GetDutTopologyServer interface.
type MockInventoryService_GetDutTopologyServer struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryService_GetDutTopologyServerMockRecorder
}

// MockInventoryService_GetDutTopologyServerMockRecorder is the mock recorder for MockInventoryService_GetDutTopologyServer.
type MockInventoryService_GetDutTopologyServerMockRecorder struct {
	mock *MockInventoryService_GetDutTopologyServer
}

// NewMockInventoryService_GetDutTopologyServer creates a new mock instance.
func NewMockInventoryService_GetDutTopologyServer(ctrl *gomock.Controller) *MockInventoryService_GetDutTopologyServer {
	mock := &MockInventoryService_GetDutTopologyServer{ctrl: ctrl}
	mock.recorder = &MockInventoryService_GetDutTopologyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService_GetDutTopologyServer) EXPECT() *MockInventoryService_GetDutTopologyServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockInventoryService_GetDutTopologyServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockInventoryService_GetDutTopologyServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockInventoryService_GetDutTopologyServer) Send(arg0 *api.GetDutTopologyResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockInventoryService_GetDutTopologyServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockInventoryService_GetDutTopologyServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockInventoryService_GetDutTopologyServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockInventoryService_GetDutTopologyServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockInventoryService_GetDutTopologyServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockInventoryService_GetDutTopologyServer)(nil).SetTrailer), arg0)
}
