// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/google/home/azrahman/chromiumos/infra/infra/go/src/go.chromium.org/chromiumos/config/go/test/api/execution_service_grpc.pb.go

// Package mocked_services is a generated GoMock package.
package mocked_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	longrunning "go.chromium.org/chromiumos/config/go/longrunning"
	api "go.chromium.org/chromiumos/config/go/test/api"
	grpc "google.golang.org/grpc"
)

// MockExecutionServiceClient is a mock of ExecutionServiceClient interface.
type MockExecutionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionServiceClientMockRecorder
}

// MockExecutionServiceClientMockRecorder is the mock recorder for MockExecutionServiceClient.
type MockExecutionServiceClientMockRecorder struct {
	mock *MockExecutionServiceClient
}

// NewMockExecutionServiceClient creates a new mock instance.
func NewMockExecutionServiceClient(ctrl *gomock.Controller) *MockExecutionServiceClient {
	mock := &MockExecutionServiceClient{ctrl: ctrl}
	mock.recorder = &MockExecutionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionServiceClient) EXPECT() *MockExecutionServiceClientMockRecorder {
	return m.recorder
}

// RunTests mocks base method.
func (m *MockExecutionServiceClient) RunTests(ctx context.Context, in *api.CrosTestRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTests", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTests indicates an expected call of RunTests.
func (mr *MockExecutionServiceClientMockRecorder) RunTests(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTests", reflect.TypeOf((*MockExecutionServiceClient)(nil).RunTests), varargs...)
}

// MockExecutionServiceServer is a mock of ExecutionServiceServer interface.
type MockExecutionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionServiceServerMockRecorder
}

// MockExecutionServiceServerMockRecorder is the mock recorder for MockExecutionServiceServer.
type MockExecutionServiceServerMockRecorder struct {
	mock *MockExecutionServiceServer
}

// NewMockExecutionServiceServer creates a new mock instance.
func NewMockExecutionServiceServer(ctrl *gomock.Controller) *MockExecutionServiceServer {
	mock := &MockExecutionServiceServer{ctrl: ctrl}
	mock.recorder = &MockExecutionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionServiceServer) EXPECT() *MockExecutionServiceServerMockRecorder {
	return m.recorder
}

// RunTests mocks base method.
func (m *MockExecutionServiceServer) RunTests(arg0 context.Context, arg1 *api.CrosTestRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTests", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunTests indicates an expected call of RunTests.
func (mr *MockExecutionServiceServerMockRecorder) RunTests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTests", reflect.TypeOf((*MockExecutionServiceServer)(nil).RunTests), arg0, arg1)
}

// MockUnsafeExecutionServiceServer is a mock of UnsafeExecutionServiceServer interface.
type MockUnsafeExecutionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeExecutionServiceServerMockRecorder
}

// MockUnsafeExecutionServiceServerMockRecorder is the mock recorder for MockUnsafeExecutionServiceServer.
type MockUnsafeExecutionServiceServerMockRecorder struct {
	mock *MockUnsafeExecutionServiceServer
}

// NewMockUnsafeExecutionServiceServer creates a new mock instance.
func NewMockUnsafeExecutionServiceServer(ctrl *gomock.Controller) *MockUnsafeExecutionServiceServer {
	mock := &MockUnsafeExecutionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeExecutionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeExecutionServiceServer) EXPECT() *MockUnsafeExecutionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedExecutionServiceServer mocks base method.
func (m *MockUnsafeExecutionServiceServer) mustEmbedUnimplementedExecutionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExecutionServiceServer")
}

// mustEmbedUnimplementedExecutionServiceServer indicates an expected call of mustEmbedUnimplementedExecutionServiceServer.
func (mr *MockUnsafeExecutionServiceServerMockRecorder) mustEmbedUnimplementedExecutionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExecutionServiceServer", reflect.TypeOf((*MockUnsafeExecutionServiceServer)(nil).mustEmbedUnimplementedExecutionServiceServer))
}
