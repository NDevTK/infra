// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/google/home/azrahman/chromiumos/infra/infra/go/src/go.chromium.org/chromiumos/config/go/test/api/dut_service_grpc.pb.go

// Package mocked_services is a generated GoMock package.
package mocked_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	longrunning "go.chromium.org/chromiumos/config/go/longrunning"
	api "go.chromium.org/chromiumos/config/go/test/api"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDutServiceClient is a mock of DutServiceClient interface.
type MockDutServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDutServiceClientMockRecorder
}

// MockDutServiceClientMockRecorder is the mock recorder for MockDutServiceClient.
type MockDutServiceClientMockRecorder struct {
	mock *MockDutServiceClient
}

// NewMockDutServiceClient creates a new mock instance.
func NewMockDutServiceClient(ctrl *gomock.Controller) *MockDutServiceClient {
	mock := &MockDutServiceClient{ctrl: ctrl}
	mock.recorder = &MockDutServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutServiceClient) EXPECT() *MockDutServiceClientMockRecorder {
	return m.recorder
}

// Cache mocks base method.
func (m *MockDutServiceClient) Cache(ctx context.Context, in *api.CacheRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cache", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cache indicates an expected call of Cache.
func (mr *MockDutServiceClientMockRecorder) Cache(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockDutServiceClient)(nil).Cache), varargs...)
}

// DetectDeviceConfigId mocks base method.
func (m *MockDutServiceClient) DetectDeviceConfigId(ctx context.Context, in *api.DetectDeviceConfigIdRequest, opts ...grpc.CallOption) (api.DutService_DetectDeviceConfigIdClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetectDeviceConfigId", varargs...)
	ret0, _ := ret[0].(api.DutService_DetectDeviceConfigIdClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectDeviceConfigId indicates an expected call of DetectDeviceConfigId.
func (mr *MockDutServiceClientMockRecorder) DetectDeviceConfigId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDeviceConfigId", reflect.TypeOf((*MockDutServiceClient)(nil).DetectDeviceConfigId), varargs...)
}

// ExecCommand mocks base method.
func (m *MockDutServiceClient) ExecCommand(ctx context.Context, in *api.ExecCommandRequest, opts ...grpc.CallOption) (api.DutService_ExecCommandClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecCommand", varargs...)
	ret0, _ := ret[0].(api.DutService_ExecCommandClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommand indicates an expected call of ExecCommand.
func (mr *MockDutServiceClientMockRecorder) ExecCommand(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommand", reflect.TypeOf((*MockDutServiceClient)(nil).ExecCommand), varargs...)
}

// FetchCrashes mocks base method.
func (m *MockDutServiceClient) FetchCrashes(ctx context.Context, in *api.FetchCrashesRequest, opts ...grpc.CallOption) (api.DutService_FetchCrashesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchCrashes", varargs...)
	ret0, _ := ret[0].(api.DutService_FetchCrashesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCrashes indicates an expected call of FetchCrashes.
func (mr *MockDutServiceClientMockRecorder) FetchCrashes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCrashes", reflect.TypeOf((*MockDutServiceClient)(nil).FetchCrashes), varargs...)
}

// ForceReconnect mocks base method.
func (m *MockDutServiceClient) ForceReconnect(ctx context.Context, in *api.ForceReconnectRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceReconnect", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceReconnect indicates an expected call of ForceReconnect.
func (mr *MockDutServiceClientMockRecorder) ForceReconnect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceReconnect", reflect.TypeOf((*MockDutServiceClient)(nil).ForceReconnect), varargs...)
}

// Restart mocks base method.
func (m *MockDutServiceClient) Restart(ctx context.Context, in *api.RestartRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Restart", varargs...)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockDutServiceClientMockRecorder) Restart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockDutServiceClient)(nil).Restart), varargs...)
}

// MockDutService_ExecCommandClient is a mock of DutService_ExecCommandClient interface.
type MockDutService_ExecCommandClient struct {
	ctrl     *gomock.Controller
	recorder *MockDutService_ExecCommandClientMockRecorder
}

// MockDutService_ExecCommandClientMockRecorder is the mock recorder for MockDutService_ExecCommandClient.
type MockDutService_ExecCommandClientMockRecorder struct {
	mock *MockDutService_ExecCommandClient
}

// NewMockDutService_ExecCommandClient creates a new mock instance.
func NewMockDutService_ExecCommandClient(ctrl *gomock.Controller) *MockDutService_ExecCommandClient {
	mock := &MockDutService_ExecCommandClient{ctrl: ctrl}
	mock.recorder = &MockDutService_ExecCommandClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutService_ExecCommandClient) EXPECT() *MockDutService_ExecCommandClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDutService_ExecCommandClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDutService_ExecCommandClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDutService_ExecCommandClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDutService_ExecCommandClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDutService_ExecCommandClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDutService_ExecCommandClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDutService_ExecCommandClient) Recv() (*api.ExecCommandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.ExecCommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDutService_ExecCommandClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDutService_ExecCommandClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDutService_ExecCommandClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDutService_ExecCommandClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDutService_ExecCommandClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDutService_ExecCommandClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDutService_ExecCommandClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDutService_ExecCommandClient)(nil).Trailer))
}

// MockDutService_FetchCrashesClient is a mock of DutService_FetchCrashesClient interface.
type MockDutService_FetchCrashesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDutService_FetchCrashesClientMockRecorder
}

// MockDutService_FetchCrashesClientMockRecorder is the mock recorder for MockDutService_FetchCrashesClient.
type MockDutService_FetchCrashesClientMockRecorder struct {
	mock *MockDutService_FetchCrashesClient
}

// NewMockDutService_FetchCrashesClient creates a new mock instance.
func NewMockDutService_FetchCrashesClient(ctrl *gomock.Controller) *MockDutService_FetchCrashesClient {
	mock := &MockDutService_FetchCrashesClient{ctrl: ctrl}
	mock.recorder = &MockDutService_FetchCrashesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutService_FetchCrashesClient) EXPECT() *MockDutService_FetchCrashesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDutService_FetchCrashesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDutService_FetchCrashesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDutService_FetchCrashesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDutService_FetchCrashesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDutService_FetchCrashesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDutService_FetchCrashesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDutService_FetchCrashesClient) Recv() (*api.FetchCrashesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.FetchCrashesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDutService_FetchCrashesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDutService_FetchCrashesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDutService_FetchCrashesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDutService_FetchCrashesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDutService_FetchCrashesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDutService_FetchCrashesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDutService_FetchCrashesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDutService_FetchCrashesClient)(nil).Trailer))
}

// MockDutService_DetectDeviceConfigIdClient is a mock of DutService_DetectDeviceConfigIdClient interface.
type MockDutService_DetectDeviceConfigIdClient struct {
	ctrl     *gomock.Controller
	recorder *MockDutService_DetectDeviceConfigIdClientMockRecorder
}

// MockDutService_DetectDeviceConfigIdClientMockRecorder is the mock recorder for MockDutService_DetectDeviceConfigIdClient.
type MockDutService_DetectDeviceConfigIdClientMockRecorder struct {
	mock *MockDutService_DetectDeviceConfigIdClient
}

// NewMockDutService_DetectDeviceConfigIdClient creates a new mock instance.
func NewMockDutService_DetectDeviceConfigIdClient(ctrl *gomock.Controller) *MockDutService_DetectDeviceConfigIdClient {
	mock := &MockDutService_DetectDeviceConfigIdClient{ctrl: ctrl}
	mock.recorder = &MockDutService_DetectDeviceConfigIdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutService_DetectDeviceConfigIdClient) EXPECT() *MockDutService_DetectDeviceConfigIdClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDutService_DetectDeviceConfigIdClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDutService_DetectDeviceConfigIdClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDutService_DetectDeviceConfigIdClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDutService_DetectDeviceConfigIdClient) Recv() (*api.DetectDeviceConfigIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.DetectDeviceConfigIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDutService_DetectDeviceConfigIdClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDutService_DetectDeviceConfigIdClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDutService_DetectDeviceConfigIdClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDutService_DetectDeviceConfigIdClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdClient)(nil).Trailer))
}

// MockDutServiceServer is a mock of DutServiceServer interface.
type MockDutServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDutServiceServerMockRecorder
}

// MockDutServiceServerMockRecorder is the mock recorder for MockDutServiceServer.
type MockDutServiceServerMockRecorder struct {
	mock *MockDutServiceServer
}

// NewMockDutServiceServer creates a new mock instance.
func NewMockDutServiceServer(ctrl *gomock.Controller) *MockDutServiceServer {
	mock := &MockDutServiceServer{ctrl: ctrl}
	mock.recorder = &MockDutServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutServiceServer) EXPECT() *MockDutServiceServerMockRecorder {
	return m.recorder
}

// Cache mocks base method.
func (m *MockDutServiceServer) Cache(arg0 context.Context, arg1 *api.CacheRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cache indicates an expected call of Cache.
func (mr *MockDutServiceServerMockRecorder) Cache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockDutServiceServer)(nil).Cache), arg0, arg1)
}

// DetectDeviceConfigId mocks base method.
func (m *MockDutServiceServer) DetectDeviceConfigId(arg0 *api.DetectDeviceConfigIdRequest, arg1 api.DutService_DetectDeviceConfigIdServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectDeviceConfigId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetectDeviceConfigId indicates an expected call of DetectDeviceConfigId.
func (mr *MockDutServiceServerMockRecorder) DetectDeviceConfigId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectDeviceConfigId", reflect.TypeOf((*MockDutServiceServer)(nil).DetectDeviceConfigId), arg0, arg1)
}

// ExecCommand mocks base method.
func (m *MockDutServiceServer) ExecCommand(arg0 *api.ExecCommandRequest, arg1 api.DutService_ExecCommandServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCommand", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecCommand indicates an expected call of ExecCommand.
func (mr *MockDutServiceServerMockRecorder) ExecCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommand", reflect.TypeOf((*MockDutServiceServer)(nil).ExecCommand), arg0, arg1)
}

// FetchCrashes mocks base method.
func (m *MockDutServiceServer) FetchCrashes(arg0 *api.FetchCrashesRequest, arg1 api.DutService_FetchCrashesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCrashes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchCrashes indicates an expected call of FetchCrashes.
func (mr *MockDutServiceServerMockRecorder) FetchCrashes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCrashes", reflect.TypeOf((*MockDutServiceServer)(nil).FetchCrashes), arg0, arg1)
}

// ForceReconnect mocks base method.
func (m *MockDutServiceServer) ForceReconnect(arg0 context.Context, arg1 *api.ForceReconnectRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceReconnect", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceReconnect indicates an expected call of ForceReconnect.
func (mr *MockDutServiceServerMockRecorder) ForceReconnect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceReconnect", reflect.TypeOf((*MockDutServiceServer)(nil).ForceReconnect), arg0, arg1)
}

// Restart mocks base method.
func (m *MockDutServiceServer) Restart(arg0 context.Context, arg1 *api.RestartRequest) (*longrunning.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1)
	ret0, _ := ret[0].(*longrunning.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restart indicates an expected call of Restart.
func (mr *MockDutServiceServerMockRecorder) Restart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockDutServiceServer)(nil).Restart), arg0, arg1)
}

// MockUnsafeDutServiceServer is a mock of UnsafeDutServiceServer interface.
type MockUnsafeDutServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDutServiceServerMockRecorder
}

// MockUnsafeDutServiceServerMockRecorder is the mock recorder for MockUnsafeDutServiceServer.
type MockUnsafeDutServiceServerMockRecorder struct {
	mock *MockUnsafeDutServiceServer
}

// NewMockUnsafeDutServiceServer creates a new mock instance.
func NewMockUnsafeDutServiceServer(ctrl *gomock.Controller) *MockUnsafeDutServiceServer {
	mock := &MockUnsafeDutServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDutServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDutServiceServer) EXPECT() *MockUnsafeDutServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDutServiceServer mocks base method.
func (m *MockUnsafeDutServiceServer) mustEmbedUnimplementedDutServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDutServiceServer")
}

// mustEmbedUnimplementedDutServiceServer indicates an expected call of mustEmbedUnimplementedDutServiceServer.
func (mr *MockUnsafeDutServiceServerMockRecorder) mustEmbedUnimplementedDutServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDutServiceServer", reflect.TypeOf((*MockUnsafeDutServiceServer)(nil).mustEmbedUnimplementedDutServiceServer))
}

// MockDutService_ExecCommandServer is a mock of DutService_ExecCommandServer interface.
type MockDutService_ExecCommandServer struct {
	ctrl     *gomock.Controller
	recorder *MockDutService_ExecCommandServerMockRecorder
}

// MockDutService_ExecCommandServerMockRecorder is the mock recorder for MockDutService_ExecCommandServer.
type MockDutService_ExecCommandServerMockRecorder struct {
	mock *MockDutService_ExecCommandServer
}

// NewMockDutService_ExecCommandServer creates a new mock instance.
func NewMockDutService_ExecCommandServer(ctrl *gomock.Controller) *MockDutService_ExecCommandServer {
	mock := &MockDutService_ExecCommandServer{ctrl: ctrl}
	mock.recorder = &MockDutService_ExecCommandServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutService_ExecCommandServer) EXPECT() *MockDutService_ExecCommandServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDutService_ExecCommandServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDutService_ExecCommandServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDutService_ExecCommandServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDutService_ExecCommandServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDutService_ExecCommandServer) Send(arg0 *api.ExecCommandResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDutService_ExecCommandServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDutService_ExecCommandServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDutService_ExecCommandServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDutService_ExecCommandServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDutService_ExecCommandServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDutService_ExecCommandServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDutService_ExecCommandServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDutService_ExecCommandServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDutService_ExecCommandServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDutService_ExecCommandServer)(nil).SetTrailer), arg0)
}

// MockDutService_FetchCrashesServer is a mock of DutService_FetchCrashesServer interface.
type MockDutService_FetchCrashesServer struct {
	ctrl     *gomock.Controller
	recorder *MockDutService_FetchCrashesServerMockRecorder
}

// MockDutService_FetchCrashesServerMockRecorder is the mock recorder for MockDutService_FetchCrashesServer.
type MockDutService_FetchCrashesServerMockRecorder struct {
	mock *MockDutService_FetchCrashesServer
}

// NewMockDutService_FetchCrashesServer creates a new mock instance.
func NewMockDutService_FetchCrashesServer(ctrl *gomock.Controller) *MockDutService_FetchCrashesServer {
	mock := &MockDutService_FetchCrashesServer{ctrl: ctrl}
	mock.recorder = &MockDutService_FetchCrashesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutService_FetchCrashesServer) EXPECT() *MockDutService_FetchCrashesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDutService_FetchCrashesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDutService_FetchCrashesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDutService_FetchCrashesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDutService_FetchCrashesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDutService_FetchCrashesServer) Send(arg0 *api.FetchCrashesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDutService_FetchCrashesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDutService_FetchCrashesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDutService_FetchCrashesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDutService_FetchCrashesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDutService_FetchCrashesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDutService_FetchCrashesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDutService_FetchCrashesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDutService_FetchCrashesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDutService_FetchCrashesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDutService_FetchCrashesServer)(nil).SetTrailer), arg0)
}

// MockDutService_DetectDeviceConfigIdServer is a mock of DutService_DetectDeviceConfigIdServer interface.
type MockDutService_DetectDeviceConfigIdServer struct {
	ctrl     *gomock.Controller
	recorder *MockDutService_DetectDeviceConfigIdServerMockRecorder
}

// MockDutService_DetectDeviceConfigIdServerMockRecorder is the mock recorder for MockDutService_DetectDeviceConfigIdServer.
type MockDutService_DetectDeviceConfigIdServerMockRecorder struct {
	mock *MockDutService_DetectDeviceConfigIdServer
}

// NewMockDutService_DetectDeviceConfigIdServer creates a new mock instance.
func NewMockDutService_DetectDeviceConfigIdServer(ctrl *gomock.Controller) *MockDutService_DetectDeviceConfigIdServer {
	mock := &MockDutService_DetectDeviceConfigIdServer{ctrl: ctrl}
	mock.recorder = &MockDutService_DetectDeviceConfigIdServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDutService_DetectDeviceConfigIdServer) EXPECT() *MockDutService_DetectDeviceConfigIdServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDutService_DetectDeviceConfigIdServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDutService_DetectDeviceConfigIdServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDutService_DetectDeviceConfigIdServer) Send(arg0 *api.DetectDeviceConfigIdResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDutService_DetectDeviceConfigIdServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDutService_DetectDeviceConfigIdServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDutService_DetectDeviceConfigIdServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDutService_DetectDeviceConfigIdServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDutService_DetectDeviceConfigIdServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDutService_DetectDeviceConfigIdServer)(nil).SetTrailer), arg0)
}
