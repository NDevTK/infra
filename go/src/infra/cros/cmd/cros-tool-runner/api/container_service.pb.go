// Copyright 2022 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/cros/cmd/cros-tool-runner/api/container_service.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents basic info of a docker network
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Network ID assigned by docker
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates if the network was created by the current container service.
	Owned bool `protobuf:"varint,3,opt,name=owned,proto3" json:"owned,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Network) GetOwned() bool {
	if x != nil {
		return x.Owned
	}
	return false
}

// Represents basic info of a docker container
type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Container name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Container ID assigned by docker
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates if the container was started by the current container service.
	Owned        bool                     `protobuf:"varint,3,opt,name=owned,proto3" json:"owned,omitempty"`
	PortBindings []*Container_PortBinding `protobuf:"bytes,4,rep,name=port_bindings,json=portBindings,proto3" json:"port_bindings,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{1}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Container) GetOwned() bool {
	if x != nil {
		return x.Owned
	}
	return false
}

func (x *Container) GetPortBindings() []*Container_PortBinding {
	if x != nil {
		return x.PortBindings
	}
	return nil
}

type CreateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateNetworkRequest) Reset() {
	*x = CreateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkRequest) ProtoMessage() {}

func (x *CreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *CreateNetworkResponse) Reset() {
	*x = CreateNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNetworkResponse) ProtoMessage() {}

func (x *CreateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNetworkResponse.ProtoReflect.Descriptor instead.
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNetworkResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type GetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNetworkRequest) Reset() {
	*x = GetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkRequest) ProtoMessage() {}

func (x *GetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetNetworkResponse) Reset() {
	*x = GetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkResponse) ProtoMessage() {}

func (x *GetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetNetworkResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{6}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{7}
}

type LoginRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User name. For gcloud, this should be `oauth2accesstoken`
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password value or a command substitution. E.g. actual token value or
	// $(gcloud auth print-access-token)
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Registry server name. E.g. us-docker.pkg.dev
	Registry string `protobuf:"bytes,3,opt,name=registry,proto3" json:"registry,omitempty"`
	// Optional extensions to change behavior before the login action
	Extensions *LoginRegistryExtensions `protobuf:"bytes,4,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *LoginRegistryRequest) Reset() {
	*x = LoginRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRegistryRequest) ProtoMessage() {}

func (x *LoginRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRegistryRequest.ProtoReflect.Descriptor instead.
func (*LoginRegistryRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{8}
}

func (x *LoginRegistryRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRegistryRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRegistryRequest) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *LoginRegistryRequest) GetExtensions() *LoginRegistryExtensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type LoginRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message returned by docker login command
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Messages returned by extensions
	ExtensionsOutput []string `protobuf:"bytes,2,rep,name=extensions_output,json=extensionsOutput,proto3" json:"extensions_output,omitempty"`
}

func (x *LoginRegistryResponse) Reset() {
	*x = LoginRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRegistryResponse) ProtoMessage() {}

func (x *LoginRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRegistryResponse.ProtoReflect.Descriptor instead.
func (*LoginRegistryResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{9}
}

func (x *LoginRegistryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoginRegistryResponse) GetExtensionsOutput() []string {
	if x != nil {
		return x.ExtensionsOutput
	}
	return nil
}

type StartContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name given to the container that will be used later to retrieve
	// container info.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Location of image that can be directly pulled by docker. Note that start
	// container assumes docker is already authenticated.
	// e.g. us-docker.pkg.dev/cros-registry/test-services/cros-dut:latest
	ContainerImage string `protobuf:"bytes,2,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	// Additional options for `docker run`.
	AdditionalOptions *StartContainerRequest_Options `protobuf:"bytes,3,opt,name=additional_options,json=additionalOptions,proto3" json:"additional_options,omitempty"`
	// Command to run the server in a container.
	// e.g. ["cros-dut", "-port", "80", ...]
	StartCommand []string `protobuf:"bytes,4,rep,name=start_command,json=startCommand,proto3" json:"start_command,omitempty"`
}

func (x *StartContainerRequest) Reset() {
	*x = StartContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest) ProtoMessage() {}

func (x *StartContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest.ProtoReflect.Descriptor instead.
func (*StartContainerRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{10}
}

func (x *StartContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartContainerRequest) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *StartContainerRequest) GetAdditionalOptions() *StartContainerRequest_Options {
	if x != nil {
		return x.AdditionalOptions
	}
	return nil
}

func (x *StartContainerRequest) GetStartCommand() []string {
	if x != nil {
		return x.StartCommand
	}
	return nil
}

type StartContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container *Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *StartContainerResponse) Reset() {
	*x = StartContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerResponse) ProtoMessage() {}

func (x *StartContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerResponse.ProtoReflect.Descriptor instead.
func (*StartContainerResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{11}
}

func (x *StartContainerResponse) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

// StartTemplatedContainerRequest does not use additional_options or
// start_command as in StartContainerRequest. Instead, container-specific
// template is used to provide instructions on how to start the container.
type StartTemplatedContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name given to the container that will be used later to retrieve
	// container info.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Location of image that can be directly pulled by docker. Note that start
	// container assumes docker is already authenticated.
	// e.g. us-docker.pkg.dev/cros-registry/test-services/cros-dut:latest
	ContainerImage string `protobuf:"bytes,2,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	// Container-specific template
	Template *Template `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *StartTemplatedContainerRequest) Reset() {
	*x = StartTemplatedContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTemplatedContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTemplatedContainerRequest) ProtoMessage() {}

func (x *StartTemplatedContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTemplatedContainerRequest.ProtoReflect.Descriptor instead.
func (*StartTemplatedContainerRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{12}
}

func (x *StartTemplatedContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartTemplatedContainerRequest) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *StartTemplatedContainerRequest) GetTemplate() *Template {
	if x != nil {
		return x.Template
	}
	return nil
}

type StackCommandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*StackCommandsRequest_Stackable `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *StackCommandsRequest) Reset() {
	*x = StackCommandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackCommandsRequest) ProtoMessage() {}

func (x *StackCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackCommandsRequest.ProtoReflect.Descriptor instead.
func (*StackCommandsRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{13}
}

func (x *StackCommandsRequest) GetRequests() []*StackCommandsRequest_Stackable {
	if x != nil {
		return x.Requests
	}
	return nil
}

type StackCommandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*StackCommandsResponse_Stackable `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *StackCommandsResponse) Reset() {
	*x = StackCommandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackCommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackCommandsResponse) ProtoMessage() {}

func (x *StackCommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackCommandsResponse.ProtoReflect.Descriptor instead.
func (*StackCommandsResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{14}
}

func (x *StackCommandsResponse) GetResponses() []*StackCommandsResponse_Stackable {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContainerRequest) Reset() {
	*x = GetContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerRequest) ProtoMessage() {}

func (x *GetContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerRequest.ProtoReflect.Descriptor instead.
func (*GetContainerRequest) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container *Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *GetContainerResponse) Reset() {
	*x = GetContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerResponse) ProtoMessage() {}

func (x *GetContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerResponse.ProtoReflect.Descriptor instead.
func (*GetContainerResponse) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetContainerResponse) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type Container_PortBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerPort int32  `protobuf:"varint,1,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	Protocol      string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	HostIp        string `protobuf:"bytes,3,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	HostPort      int32  `protobuf:"varint,4,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
}

func (x *Container_PortBinding) Reset() {
	*x = Container_PortBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container_PortBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container_PortBinding) ProtoMessage() {}

func (x *Container_PortBinding) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container_PortBinding.ProtoReflect.Descriptor instead.
func (*Container_PortBinding) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Container_PortBinding) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *Container_PortBinding) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Container_PortBinding) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *Container_PortBinding) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

// Supported options match corresponding `docker run` flags.
type StartContainerRequest_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expose port. see docker run --expose. All exposed ports will be published
	// to a random port on the host. Currently only support one exposed port.
	// e.g. 80
	Expose []string `protobuf:"bytes,1,rep,name=expose,proto3" json:"expose,omitempty"`
	// Volume mounting. see docker run --volume
	// e.g. /tmp/host-src/cros-test:/tmp/container-dest/cros-test
	Volume []string `protobuf:"bytes,2,rep,name=volume,proto3" json:"volume,omitempty"`
	// Connect to the named docker network. see docker run --network
	// e.g. bridge
	Network string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *StartContainerRequest_Options) Reset() {
	*x = StartContainerRequest_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartContainerRequest_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest_Options) ProtoMessage() {}

func (x *StartContainerRequest_Options) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest_Options.ProtoReflect.Descriptor instead.
func (*StartContainerRequest_Options) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StartContainerRequest_Options) GetExpose() []string {
	if x != nil {
		return x.Expose
	}
	return nil
}

func (x *StartContainerRequest_Options) GetVolume() []string {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *StartContainerRequest_Options) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type StackCommandsRequest_Stackable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*StackCommandsRequest_Stackable_StartContainer
	//	*StackCommandsRequest_Stackable_StartTemplatedContainer
	//	*StackCommandsRequest_Stackable_CreateNetwork
	//	*StackCommandsRequest_Stackable_LoginRegistry
	Command isStackCommandsRequest_Stackable_Command `protobuf_oneof:"command"`
}

func (x *StackCommandsRequest_Stackable) Reset() {
	*x = StackCommandsRequest_Stackable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackCommandsRequest_Stackable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackCommandsRequest_Stackable) ProtoMessage() {}

func (x *StackCommandsRequest_Stackable) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackCommandsRequest_Stackable.ProtoReflect.Descriptor instead.
func (*StackCommandsRequest_Stackable) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{13, 0}
}

func (m *StackCommandsRequest_Stackable) GetCommand() isStackCommandsRequest_Stackable_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *StackCommandsRequest_Stackable) GetStartContainer() *StartContainerRequest {
	if x, ok := x.GetCommand().(*StackCommandsRequest_Stackable_StartContainer); ok {
		return x.StartContainer
	}
	return nil
}

func (x *StackCommandsRequest_Stackable) GetStartTemplatedContainer() *StartTemplatedContainerRequest {
	if x, ok := x.GetCommand().(*StackCommandsRequest_Stackable_StartTemplatedContainer); ok {
		return x.StartTemplatedContainer
	}
	return nil
}

func (x *StackCommandsRequest_Stackable) GetCreateNetwork() *CreateNetworkRequest {
	if x, ok := x.GetCommand().(*StackCommandsRequest_Stackable_CreateNetwork); ok {
		return x.CreateNetwork
	}
	return nil
}

func (x *StackCommandsRequest_Stackable) GetLoginRegistry() *LoginRegistryRequest {
	if x, ok := x.GetCommand().(*StackCommandsRequest_Stackable_LoginRegistry); ok {
		return x.LoginRegistry
	}
	return nil
}

type isStackCommandsRequest_Stackable_Command interface {
	isStackCommandsRequest_Stackable_Command()
}

type StackCommandsRequest_Stackable_StartContainer struct {
	StartContainer *StartContainerRequest `protobuf:"bytes,1,opt,name=start_container,json=startContainer,proto3,oneof"`
}

type StackCommandsRequest_Stackable_StartTemplatedContainer struct {
	StartTemplatedContainer *StartTemplatedContainerRequest `protobuf:"bytes,2,opt,name=start_templated_container,json=startTemplatedContainer,proto3,oneof"`
}

type StackCommandsRequest_Stackable_CreateNetwork struct {
	CreateNetwork *CreateNetworkRequest `protobuf:"bytes,3,opt,name=create_network,json=createNetwork,proto3,oneof"`
}

type StackCommandsRequest_Stackable_LoginRegistry struct {
	LoginRegistry *LoginRegistryRequest `protobuf:"bytes,4,opt,name=login_registry,json=loginRegistry,proto3,oneof"`
}

func (*StackCommandsRequest_Stackable_StartContainer) isStackCommandsRequest_Stackable_Command() {}

func (*StackCommandsRequest_Stackable_StartTemplatedContainer) isStackCommandsRequest_Stackable_Command() {
}

func (*StackCommandsRequest_Stackable_CreateNetwork) isStackCommandsRequest_Stackable_Command() {}

func (*StackCommandsRequest_Stackable_LoginRegistry) isStackCommandsRequest_Stackable_Command() {}

type StackCommandsResponse_Stackable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Output:
	//	*StackCommandsResponse_Stackable_StartContainer
	//	*StackCommandsResponse_Stackable_CreateNetwork
	//	*StackCommandsResponse_Stackable_LoginRegistry
	Output isStackCommandsResponse_Stackable_Output `protobuf_oneof:"output"`
}

func (x *StackCommandsResponse_Stackable) Reset() {
	*x = StackCommandsResponse_Stackable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackCommandsResponse_Stackable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackCommandsResponse_Stackable) ProtoMessage() {}

func (x *StackCommandsResponse_Stackable) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackCommandsResponse_Stackable.ProtoReflect.Descriptor instead.
func (*StackCommandsResponse_Stackable) Descriptor() ([]byte, []int) {
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP(), []int{14, 0}
}

func (m *StackCommandsResponse_Stackable) GetOutput() isStackCommandsResponse_Stackable_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *StackCommandsResponse_Stackable) GetStartContainer() *StartContainerResponse {
	if x, ok := x.GetOutput().(*StackCommandsResponse_Stackable_StartContainer); ok {
		return x.StartContainer
	}
	return nil
}

func (x *StackCommandsResponse_Stackable) GetCreateNetwork() *CreateNetworkResponse {
	if x, ok := x.GetOutput().(*StackCommandsResponse_Stackable_CreateNetwork); ok {
		return x.CreateNetwork
	}
	return nil
}

func (x *StackCommandsResponse_Stackable) GetLoginRegistry() *LoginRegistryResponse {
	if x, ok := x.GetOutput().(*StackCommandsResponse_Stackable_LoginRegistry); ok {
		return x.LoginRegistry
	}
	return nil
}

type isStackCommandsResponse_Stackable_Output interface {
	isStackCommandsResponse_Stackable_Output()
}

type StackCommandsResponse_Stackable_StartContainer struct {
	StartContainer *StartContainerResponse `protobuf:"bytes,1,opt,name=start_container,json=startContainer,proto3,oneof"`
}

type StackCommandsResponse_Stackable_CreateNetwork struct {
	CreateNetwork *CreateNetworkResponse `protobuf:"bytes,2,opt,name=create_network,json=createNetwork,proto3,oneof"`
}

type StackCommandsResponse_Stackable_LoginRegistry struct {
	LoginRegistry *LoginRegistryResponse `protobuf:"bytes,3,opt,name=login_registry,json=loginRegistry,proto3,oneof"`
}

func (*StackCommandsResponse_Stackable_StartContainer) isStackCommandsResponse_Stackable_Output() {}

func (*StackCommandsResponse_Stackable_CreateNetwork) isStackCommandsResponse_Stackable_Output() {}

func (*StackCommandsResponse_Stackable_LoginRegistry) isStackCommandsResponse_Stackable_Output() {}

var File_infra_cros_cmd_cros_tool_runner_api_container_service_proto protoreflect.FileDescriptor

var file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x63, 0x6d, 0x64,
	0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x2d, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63,
	0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x34, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x63, 0x72, 0x6f, 0x73, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2d, 0x74, 0x6f,
	0x6f, 0x6c, 0x2d, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x63,
	0x72, 0x6f, 0x73, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x2d, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x2a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x74,
	0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x53, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0xc0, 0x03, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0xe0, 0x02, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x19,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x48, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xf9, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x49, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x74, 0x72,
	0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x32, 0xbd, 0x05, 0x0a, 0x1e,
	0x43, 0x72, 0x6f, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x1f, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x1c, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x74, 0x72, 0x76,
	0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x74, 0x72,
	0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x74, 0x72, 0x76, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x74, 0x72,
	0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x74, 0x72,
	0x76, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x2d, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescOnce sync.Once
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescData = file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDesc
)

func file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescGZIP() []byte {
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescOnce.Do(func() {
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescData)
	})
	return file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDescData
}

var file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_goTypes = []interface{}{
	(*Network)(nil),                         // 0: ctrv2.api.Network
	(*Container)(nil),                       // 1: ctrv2.api.Container
	(*CreateNetworkRequest)(nil),            // 2: ctrv2.api.CreateNetworkRequest
	(*CreateNetworkResponse)(nil),           // 3: ctrv2.api.CreateNetworkResponse
	(*GetNetworkRequest)(nil),               // 4: ctrv2.api.GetNetworkRequest
	(*GetNetworkResponse)(nil),              // 5: ctrv2.api.GetNetworkResponse
	(*ShutdownRequest)(nil),                 // 6: ctrv2.api.ShutdownRequest
	(*ShutdownResponse)(nil),                // 7: ctrv2.api.ShutdownResponse
	(*LoginRegistryRequest)(nil),            // 8: ctrv2.api.LoginRegistryRequest
	(*LoginRegistryResponse)(nil),           // 9: ctrv2.api.LoginRegistryResponse
	(*StartContainerRequest)(nil),           // 10: ctrv2.api.StartContainerRequest
	(*StartContainerResponse)(nil),          // 11: ctrv2.api.StartContainerResponse
	(*StartTemplatedContainerRequest)(nil),  // 12: ctrv2.api.StartTemplatedContainerRequest
	(*StackCommandsRequest)(nil),            // 13: ctrv2.api.StackCommandsRequest
	(*StackCommandsResponse)(nil),           // 14: ctrv2.api.StackCommandsResponse
	(*GetContainerRequest)(nil),             // 15: ctrv2.api.GetContainerRequest
	(*GetContainerResponse)(nil),            // 16: ctrv2.api.GetContainerResponse
	(*Container_PortBinding)(nil),           // 17: ctrv2.api.Container.PortBinding
	(*StartContainerRequest_Options)(nil),   // 18: ctrv2.api.StartContainerRequest.Options
	(*StackCommandsRequest_Stackable)(nil),  // 19: ctrv2.api.StackCommandsRequest.Stackable
	(*StackCommandsResponse_Stackable)(nil), // 20: ctrv2.api.StackCommandsResponse.Stackable
	(*LoginRegistryExtensions)(nil),         // 21: ctrv2.api.LoginRegistryExtensions
	(*Template)(nil),                        // 22: ctrv2.api.Template
}
var file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_depIdxs = []int32{
	17, // 0: ctrv2.api.Container.port_bindings:type_name -> ctrv2.api.Container.PortBinding
	0,  // 1: ctrv2.api.CreateNetworkResponse.network:type_name -> ctrv2.api.Network
	0,  // 2: ctrv2.api.GetNetworkResponse.network:type_name -> ctrv2.api.Network
	21, // 3: ctrv2.api.LoginRegistryRequest.extensions:type_name -> ctrv2.api.LoginRegistryExtensions
	18, // 4: ctrv2.api.StartContainerRequest.additional_options:type_name -> ctrv2.api.StartContainerRequest.Options
	1,  // 5: ctrv2.api.StartContainerResponse.container:type_name -> ctrv2.api.Container
	22, // 6: ctrv2.api.StartTemplatedContainerRequest.template:type_name -> ctrv2.api.Template
	19, // 7: ctrv2.api.StackCommandsRequest.requests:type_name -> ctrv2.api.StackCommandsRequest.Stackable
	20, // 8: ctrv2.api.StackCommandsResponse.responses:type_name -> ctrv2.api.StackCommandsResponse.Stackable
	1,  // 9: ctrv2.api.GetContainerResponse.container:type_name -> ctrv2.api.Container
	10, // 10: ctrv2.api.StackCommandsRequest.Stackable.start_container:type_name -> ctrv2.api.StartContainerRequest
	12, // 11: ctrv2.api.StackCommandsRequest.Stackable.start_templated_container:type_name -> ctrv2.api.StartTemplatedContainerRequest
	2,  // 12: ctrv2.api.StackCommandsRequest.Stackable.create_network:type_name -> ctrv2.api.CreateNetworkRequest
	8,  // 13: ctrv2.api.StackCommandsRequest.Stackable.login_registry:type_name -> ctrv2.api.LoginRegistryRequest
	11, // 14: ctrv2.api.StackCommandsResponse.Stackable.start_container:type_name -> ctrv2.api.StartContainerResponse
	3,  // 15: ctrv2.api.StackCommandsResponse.Stackable.create_network:type_name -> ctrv2.api.CreateNetworkResponse
	9,  // 16: ctrv2.api.StackCommandsResponse.Stackable.login_registry:type_name -> ctrv2.api.LoginRegistryResponse
	2,  // 17: ctrv2.api.CrosToolRunnerContainerService.CreateNetwork:input_type -> ctrv2.api.CreateNetworkRequest
	4,  // 18: ctrv2.api.CrosToolRunnerContainerService.GetNetwork:input_type -> ctrv2.api.GetNetworkRequest
	6,  // 19: ctrv2.api.CrosToolRunnerContainerService.Shutdown:input_type -> ctrv2.api.ShutdownRequest
	8,  // 20: ctrv2.api.CrosToolRunnerContainerService.LoginRegistry:input_type -> ctrv2.api.LoginRegistryRequest
	10, // 21: ctrv2.api.CrosToolRunnerContainerService.StartContainer:input_type -> ctrv2.api.StartContainerRequest
	12, // 22: ctrv2.api.CrosToolRunnerContainerService.StartTemplatedContainer:input_type -> ctrv2.api.StartTemplatedContainerRequest
	13, // 23: ctrv2.api.CrosToolRunnerContainerService.StackCommands:input_type -> ctrv2.api.StackCommandsRequest
	15, // 24: ctrv2.api.CrosToolRunnerContainerService.GetContainer:input_type -> ctrv2.api.GetContainerRequest
	3,  // 25: ctrv2.api.CrosToolRunnerContainerService.CreateNetwork:output_type -> ctrv2.api.CreateNetworkResponse
	5,  // 26: ctrv2.api.CrosToolRunnerContainerService.GetNetwork:output_type -> ctrv2.api.GetNetworkResponse
	7,  // 27: ctrv2.api.CrosToolRunnerContainerService.Shutdown:output_type -> ctrv2.api.ShutdownResponse
	9,  // 28: ctrv2.api.CrosToolRunnerContainerService.LoginRegistry:output_type -> ctrv2.api.LoginRegistryResponse
	11, // 29: ctrv2.api.CrosToolRunnerContainerService.StartContainer:output_type -> ctrv2.api.StartContainerResponse
	11, // 30: ctrv2.api.CrosToolRunnerContainerService.StartTemplatedContainer:output_type -> ctrv2.api.StartContainerResponse
	14, // 31: ctrv2.api.CrosToolRunnerContainerService.StackCommands:output_type -> ctrv2.api.StackCommandsResponse
	16, // 32: ctrv2.api.CrosToolRunnerContainerService.GetContainer:output_type -> ctrv2.api.GetContainerResponse
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_init() }
func file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_init() {
	if File_infra_cros_cmd_cros_tool_runner_api_container_service_proto != nil {
		return
	}
	file_infra_cros_cmd_cros_tool_runner_api_extensions_proto_init()
	file_infra_cros_cmd_cros_tool_runner_api_templates_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTemplatedContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackCommandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackCommandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container_PortBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartContainerRequest_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackCommandsRequest_Stackable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackCommandsResponse_Stackable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*StackCommandsRequest_Stackable_StartContainer)(nil),
		(*StackCommandsRequest_Stackable_StartTemplatedContainer)(nil),
		(*StackCommandsRequest_Stackable_CreateNetwork)(nil),
		(*StackCommandsRequest_Stackable_LoginRegistry)(nil),
	}
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*StackCommandsResponse_Stackable_StartContainer)(nil),
		(*StackCommandsResponse_Stackable_CreateNetwork)(nil),
		(*StackCommandsResponse_Stackable_LoginRegistry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_goTypes,
		DependencyIndexes: file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_depIdxs,
		MessageInfos:      file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_msgTypes,
	}.Build()
	File_infra_cros_cmd_cros_tool_runner_api_container_service_proto = out.File
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_rawDesc = nil
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_goTypes = nil
	file_infra_cros_cmd_cros_tool_runner_api_container_service_proto_depIdxs = nil
}
