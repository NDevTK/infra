// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrosToolRunnerContainerServiceClient is the client API for CrosToolRunnerContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrosToolRunnerContainerServiceClient interface {
	// Creates a docker network
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	// Retrieves info of a docker network
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	// Shuts down CTR container service
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Runs a docker container with the provided start command.
	// This assumes docker is already authenticated to pull the supplied image.
	// The container will run in detached mode (-d); all exposed ports will be
	// published to a random port on host (-P); and the container will be removed
	// after it stops (--rm).
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
	// Runs a docker container that has a template implemented. A template
	// simplifies the data required in the request, and provides placeholders to
	// populate information that is only known at runtime. E.g. dynamically mapped
	// port number, IP address of a container.
	// A template implementation converts the request to the generic
	// StartContainer endpoint, and returns the generic StartContainerResponse.
	StartTemplatedContainer(ctx context.Context, in *StartTemplatedContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
}

type crosToolRunnerContainerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrosToolRunnerContainerServiceClient(cc grpc.ClientConnInterface) CrosToolRunnerContainerServiceClient {
	return &crosToolRunnerContainerServiceClient{cc}
}

func (c *crosToolRunnerContainerServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, "/ctrv2.api.CrosToolRunnerContainerService/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crosToolRunnerContainerServiceClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, "/ctrv2.api.CrosToolRunnerContainerService/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crosToolRunnerContainerServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/ctrv2.api.CrosToolRunnerContainerService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crosToolRunnerContainerServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	out := new(StartContainerResponse)
	err := c.cc.Invoke(ctx, "/ctrv2.api.CrosToolRunnerContainerService/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crosToolRunnerContainerServiceClient) StartTemplatedContainer(ctx context.Context, in *StartTemplatedContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	out := new(StartContainerResponse)
	err := c.cc.Invoke(ctx, "/ctrv2.api.CrosToolRunnerContainerService/StartTemplatedContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrosToolRunnerContainerServiceServer is the server API for CrosToolRunnerContainerService service.
// All implementations must embed UnimplementedCrosToolRunnerContainerServiceServer
// for forward compatibility
type CrosToolRunnerContainerServiceServer interface {
	// Creates a docker network
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	// Retrieves info of a docker network
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	// Shuts down CTR container service
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Runs a docker container with the provided start command.
	// This assumes docker is already authenticated to pull the supplied image.
	// The container will run in detached mode (-d); all exposed ports will be
	// published to a random port on host (-P); and the container will be removed
	// after it stops (--rm).
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	// Runs a docker container that has a template implemented. A template
	// simplifies the data required in the request, and provides placeholders to
	// populate information that is only known at runtime. E.g. dynamically mapped
	// port number, IP address of a container.
	// A template implementation converts the request to the generic
	// StartContainer endpoint, and returns the generic StartContainerResponse.
	StartTemplatedContainer(context.Context, *StartTemplatedContainerRequest) (*StartContainerResponse, error)
	mustEmbedUnimplementedCrosToolRunnerContainerServiceServer()
}

// UnimplementedCrosToolRunnerContainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrosToolRunnerContainerServiceServer struct {
}

func (UnimplementedCrosToolRunnerContainerServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedCrosToolRunnerContainerServiceServer) GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedCrosToolRunnerContainerServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedCrosToolRunnerContainerServiceServer) StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedCrosToolRunnerContainerServiceServer) StartTemplatedContainer(context.Context, *StartTemplatedContainerRequest) (*StartContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTemplatedContainer not implemented")
}
func (UnimplementedCrosToolRunnerContainerServiceServer) mustEmbedUnimplementedCrosToolRunnerContainerServiceServer() {
}

// UnsafeCrosToolRunnerContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrosToolRunnerContainerServiceServer will
// result in compilation errors.
type UnsafeCrosToolRunnerContainerServiceServer interface {
	mustEmbedUnimplementedCrosToolRunnerContainerServiceServer()
}

func RegisterCrosToolRunnerContainerServiceServer(s grpc.ServiceRegistrar, srv CrosToolRunnerContainerServiceServer) {
	s.RegisterService(&CrosToolRunnerContainerService_ServiceDesc, srv)
}

func _CrosToolRunnerContainerService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosToolRunnerContainerServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrv2.api.CrosToolRunnerContainerService/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosToolRunnerContainerServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrosToolRunnerContainerService_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosToolRunnerContainerServiceServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrv2.api.CrosToolRunnerContainerService/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosToolRunnerContainerServiceServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrosToolRunnerContainerService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosToolRunnerContainerServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrv2.api.CrosToolRunnerContainerService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosToolRunnerContainerServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrosToolRunnerContainerService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosToolRunnerContainerServiceServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrv2.api.CrosToolRunnerContainerService/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosToolRunnerContainerServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrosToolRunnerContainerService_StartTemplatedContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTemplatedContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrosToolRunnerContainerServiceServer).StartTemplatedContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrv2.api.CrosToolRunnerContainerService/StartTemplatedContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrosToolRunnerContainerServiceServer).StartTemplatedContainer(ctx, req.(*StartTemplatedContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrosToolRunnerContainerService_ServiceDesc is the grpc.ServiceDesc for CrosToolRunnerContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrosToolRunnerContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ctrv2.api.CrosToolRunnerContainerService",
	HandlerType: (*CrosToolRunnerContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _CrosToolRunnerContainerService_CreateNetwork_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _CrosToolRunnerContainerService_GetNetwork_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _CrosToolRunnerContainerService_Shutdown_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _CrosToolRunnerContainerService_StartContainer_Handler,
		},
		{
			MethodName: "StartTemplatedContainer",
			Handler:    _CrosToolRunnerContainerService_StartTemplatedContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/cros/cmd/cros-tool-runner/api/container_service.proto",
}
