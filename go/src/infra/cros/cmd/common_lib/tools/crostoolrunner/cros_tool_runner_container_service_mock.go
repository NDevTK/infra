// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by MockGen. DO NOT EDIT.
// Source: /usr/local/google/home/azrahman/chromiumos/infra/infra/go/src/go.chromium.org/chromiumos/config/go/test/api/cros_tool_runner_container_service_grpc.pb.go

// Package mocked_services is a generated GoMock package.
package crostoolrunner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "go.chromium.org/chromiumos/config/go/test/api"
	grpc "google.golang.org/grpc"
)

// MockCrosToolRunnerContainerServiceClient is a mock of CrosToolRunnerContainerServiceClient interface.
type MockCrosToolRunnerContainerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCrosToolRunnerContainerServiceClientMockRecorder
}

// MockCrosToolRunnerContainerServiceClientMockRecorder is the mock recorder for MockCrosToolRunnerContainerServiceClient.
type MockCrosToolRunnerContainerServiceClientMockRecorder struct {
	mock *MockCrosToolRunnerContainerServiceClient
}

// NewMockCrosToolRunnerContainerServiceClient creates a new mock instance.
func NewMockCrosToolRunnerContainerServiceClient(ctrl *gomock.Controller) *MockCrosToolRunnerContainerServiceClient {
	mock := &MockCrosToolRunnerContainerServiceClient{ctrl: ctrl}
	mock.recorder = &MockCrosToolRunnerContainerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrosToolRunnerContainerServiceClient) EXPECT() *MockCrosToolRunnerContainerServiceClientMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) CreateNetwork(ctx context.Context, in *api.CreateNetworkRequest, opts ...grpc.CallOption) (*api.CreateNetworkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNetwork", varargs...)
	ret0, _ := ret[0].(*api.CreateNetworkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) CreateNetwork(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).CreateNetwork), varargs...)
}

// GetContainer mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) GetContainer(ctx context.Context, in *api.GetContainerRequest, opts ...grpc.CallOption) (*api.GetContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContainer", varargs...)
	ret0, _ := ret[0].(*api.GetContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) GetContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).GetContainer), varargs...)
}

// GetNetwork mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) GetNetwork(ctx context.Context, in *api.GetNetworkRequest, opts ...grpc.CallOption) (*api.GetNetworkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetwork", varargs...)
	ret0, _ := ret[0].(*api.GetNetworkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) GetNetwork(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).GetNetwork), varargs...)
}

// LoginRegistry mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) LoginRegistry(ctx context.Context, in *api.LoginRegistryRequest, opts ...grpc.CallOption) (*api.LoginRegistryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginRegistry", varargs...)
	ret0, _ := ret[0].(*api.LoginRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginRegistry indicates an expected call of LoginRegistry.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) LoginRegistry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRegistry", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).LoginRegistry), varargs...)
}

// Shutdown mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) Shutdown(ctx context.Context, in *api.ShutdownRequest, opts ...grpc.CallOption) (*api.ShutdownResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shutdown", varargs...)
	ret0, _ := ret[0].(*api.ShutdownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) Shutdown(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).Shutdown), varargs...)
}

// StackCommands mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) StackCommands(ctx context.Context, in *api.StackCommandsRequest, opts ...grpc.CallOption) (*api.StackCommandsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StackCommands", varargs...)
	ret0, _ := ret[0].(*api.StackCommandsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StackCommands indicates an expected call of StackCommands.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) StackCommands(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackCommands", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).StackCommands), varargs...)
}

// StartContainer mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) StartContainer(ctx context.Context, in *api.StartContainerRequest, opts ...grpc.CallOption) (*api.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartContainer", varargs...)
	ret0, _ := ret[0].(*api.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) StartContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).StartContainer), varargs...)
}

// StartTemplatedContainer mocks base method.
func (m *MockCrosToolRunnerContainerServiceClient) StartTemplatedContainer(ctx context.Context, in *api.StartTemplatedContainerRequest, opts ...grpc.CallOption) (*api.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTemplatedContainer", varargs...)
	ret0, _ := ret[0].(*api.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTemplatedContainer indicates an expected call of StartTemplatedContainer.
func (mr *MockCrosToolRunnerContainerServiceClientMockRecorder) StartTemplatedContainer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTemplatedContainer", reflect.TypeOf((*MockCrosToolRunnerContainerServiceClient)(nil).StartTemplatedContainer), varargs...)
}

// MockCrosToolRunnerContainerServiceServer is a mock of CrosToolRunnerContainerServiceServer interface.
type MockCrosToolRunnerContainerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCrosToolRunnerContainerServiceServerMockRecorder
}

// MockCrosToolRunnerContainerServiceServerMockRecorder is the mock recorder for MockCrosToolRunnerContainerServiceServer.
type MockCrosToolRunnerContainerServiceServerMockRecorder struct {
	mock *MockCrosToolRunnerContainerServiceServer
}

// NewMockCrosToolRunnerContainerServiceServer creates a new mock instance.
func NewMockCrosToolRunnerContainerServiceServer(ctrl *gomock.Controller) *MockCrosToolRunnerContainerServiceServer {
	mock := &MockCrosToolRunnerContainerServiceServer{ctrl: ctrl}
	mock.recorder = &MockCrosToolRunnerContainerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrosToolRunnerContainerServiceServer) EXPECT() *MockCrosToolRunnerContainerServiceServerMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) CreateNetwork(arg0 context.Context, arg1 *api.CreateNetworkRequest) (*api.CreateNetworkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateNetworkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) CreateNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).CreateNetwork), arg0, arg1)
}

// GetContainer mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) GetContainer(arg0 context.Context, arg1 *api.GetContainerRequest) (*api.GetContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", arg0, arg1)
	ret0, _ := ret[0].(*api.GetContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) GetContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).GetContainer), arg0, arg1)
}

// GetNetwork mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) GetNetwork(arg0 context.Context, arg1 *api.GetNetworkRequest) (*api.GetNetworkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0, arg1)
	ret0, _ := ret[0].(*api.GetNetworkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) GetNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).GetNetwork), arg0, arg1)
}

// LoginRegistry mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) LoginRegistry(arg0 context.Context, arg1 *api.LoginRegistryRequest) (*api.LoginRegistryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRegistry", arg0, arg1)
	ret0, _ := ret[0].(*api.LoginRegistryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginRegistry indicates an expected call of LoginRegistry.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) LoginRegistry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRegistry", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).LoginRegistry), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) Shutdown(arg0 context.Context, arg1 *api.ShutdownRequest) (*api.ShutdownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0, arg1)
	ret0, _ := ret[0].(*api.ShutdownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) Shutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).Shutdown), arg0, arg1)
}

// StackCommands mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) StackCommands(arg0 context.Context, arg1 *api.StackCommandsRequest) (*api.StackCommandsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackCommands", arg0, arg1)
	ret0, _ := ret[0].(*api.StackCommandsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StackCommands indicates an expected call of StackCommands.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) StackCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackCommands", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).StackCommands), arg0, arg1)
}

// StartContainer mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) StartContainer(arg0 context.Context, arg1 *api.StartContainerRequest) (*api.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0, arg1)
	ret0, _ := ret[0].(*api.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).StartContainer), arg0, arg1)
}

// StartTemplatedContainer mocks base method.
func (m *MockCrosToolRunnerContainerServiceServer) StartTemplatedContainer(arg0 context.Context, arg1 *api.StartTemplatedContainerRequest) (*api.StartContainerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTemplatedContainer", arg0, arg1)
	ret0, _ := ret[0].(*api.StartContainerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTemplatedContainer indicates an expected call of StartTemplatedContainer.
func (mr *MockCrosToolRunnerContainerServiceServerMockRecorder) StartTemplatedContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTemplatedContainer", reflect.TypeOf((*MockCrosToolRunnerContainerServiceServer)(nil).StartTemplatedContainer), arg0, arg1)
}

// MockUnsafeCrosToolRunnerContainerServiceServer is a mock of UnsafeCrosToolRunnerContainerServiceServer interface.
type MockUnsafeCrosToolRunnerContainerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCrosToolRunnerContainerServiceServerMockRecorder
}

// MockUnsafeCrosToolRunnerContainerServiceServerMockRecorder is the mock recorder for MockUnsafeCrosToolRunnerContainerServiceServer.
type MockUnsafeCrosToolRunnerContainerServiceServerMockRecorder struct {
	mock *MockUnsafeCrosToolRunnerContainerServiceServer
}

// NewMockUnsafeCrosToolRunnerContainerServiceServer creates a new mock instance.
func NewMockUnsafeCrosToolRunnerContainerServiceServer(ctrl *gomock.Controller) *MockUnsafeCrosToolRunnerContainerServiceServer {
	mock := &MockUnsafeCrosToolRunnerContainerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCrosToolRunnerContainerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCrosToolRunnerContainerServiceServer) EXPECT() *MockUnsafeCrosToolRunnerContainerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCrosToolRunnerContainerServiceServer mocks base method.
func (m *MockUnsafeCrosToolRunnerContainerServiceServer) mustEmbedUnimplementedCrosToolRunnerContainerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCrosToolRunnerContainerServiceServer")
}

// mustEmbedUnimplementedCrosToolRunnerContainerServiceServer indicates an expected call of mustEmbedUnimplementedCrosToolRunnerContainerServiceServer.
func (mr *MockUnsafeCrosToolRunnerContainerServiceServerMockRecorder) mustEmbedUnimplementedCrosToolRunnerContainerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCrosToolRunnerContainerServiceServer", reflect.TypeOf((*MockUnsafeCrosToolRunnerContainerServiceServer)(nil).mustEmbedUnimplementedCrosToolRunnerContainerServiceServer))
}
