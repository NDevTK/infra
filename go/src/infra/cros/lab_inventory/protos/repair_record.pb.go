// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.1
// source: infra/cros/lab_inventory/protos/repair_record.proto

package invlibs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Standard manual repair actions taken to fix the labstation.
// Next tag: 7
type LabstationRepairAction int32

const (
	LabstationRepairAction_LABSTATION_NA            LabstationRepairAction = 0
	LabstationRepairAction_LABSTATION_POWER_CYCLE   LabstationRepairAction = 1
	LabstationRepairAction_LABSTATION_REIMAGE       LabstationRepairAction = 2
	LabstationRepairAction_LABSTATION_UPDATE_CONFIG LabstationRepairAction = 3
	LabstationRepairAction_LABSTATION_REPLACE       LabstationRepairAction = 4
	LabstationRepairAction_LABSTATION_OTHER         LabstationRepairAction = 5
	LabstationRepairAction_LABSTATION_FLASH         LabstationRepairAction = 6
)

// Enum value maps for LabstationRepairAction.
var (
	LabstationRepairAction_name = map[int32]string{
		0: "LABSTATION_NA",
		1: "LABSTATION_POWER_CYCLE",
		2: "LABSTATION_REIMAGE",
		3: "LABSTATION_UPDATE_CONFIG",
		4: "LABSTATION_REPLACE",
		5: "LABSTATION_OTHER",
		6: "LABSTATION_FLASH",
	}
	LabstationRepairAction_value = map[string]int32{
		"LABSTATION_NA":            0,
		"LABSTATION_POWER_CYCLE":   1,
		"LABSTATION_REIMAGE":       2,
		"LABSTATION_UPDATE_CONFIG": 3,
		"LABSTATION_REPLACE":       4,
		"LABSTATION_OTHER":         5,
		"LABSTATION_FLASH":         6,
	}
)

func (x LabstationRepairAction) Enum() *LabstationRepairAction {
	p := new(LabstationRepairAction)
	*p = x
	return p
}

func (x LabstationRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabstationRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[0].Descriptor()
}

func (LabstationRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[0]
}

func (x LabstationRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabstationRepairAction.Descriptor instead.
func (LabstationRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{0}
}

// Standard manual repair actions taken to fix the servo (servo_v4, servo_v3).
// Next tag: 7
type ServoRepairAction int32

const (
	ServoRepairAction_SERVO_NA                   ServoRepairAction = 0
	ServoRepairAction_SERVO_POWER_CYCLE          ServoRepairAction = 1
	ServoRepairAction_SERVO_REPLUG_USB_TO_DUT    ServoRepairAction = 2
	ServoRepairAction_SERVO_REPLUG_TO_SERVO_HOST ServoRepairAction = 3
	ServoRepairAction_SERVO_UPDATE_CONFIG        ServoRepairAction = 4
	ServoRepairAction_SERVO_REPLACE              ServoRepairAction = 5
	ServoRepairAction_SERVO_OTHER                ServoRepairAction = 6
)

// Enum value maps for ServoRepairAction.
var (
	ServoRepairAction_name = map[int32]string{
		0: "SERVO_NA",
		1: "SERVO_POWER_CYCLE",
		2: "SERVO_REPLUG_USB_TO_DUT",
		3: "SERVO_REPLUG_TO_SERVO_HOST",
		4: "SERVO_UPDATE_CONFIG",
		5: "SERVO_REPLACE",
		6: "SERVO_OTHER",
	}
	ServoRepairAction_value = map[string]int32{
		"SERVO_NA":                   0,
		"SERVO_POWER_CYCLE":          1,
		"SERVO_REPLUG_USB_TO_DUT":    2,
		"SERVO_REPLUG_TO_SERVO_HOST": 3,
		"SERVO_UPDATE_CONFIG":        4,
		"SERVO_REPLACE":              5,
		"SERVO_OTHER":                6,
	}
)

func (x ServoRepairAction) Enum() *ServoRepairAction {
	p := new(ServoRepairAction)
	*p = x
	return p
}

func (x ServoRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServoRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[1].Descriptor()
}

func (ServoRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[1]
}

func (x ServoRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServoRepairAction.Descriptor instead.
func (ServoRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{1}
}

// Standard manual repair actions taken to fix the yoshi cable (ribbon cable or
// servo_micro).
// Next tag: 5
type YoshiRepairAction int32

const (
	YoshiRepairAction_YOSHI_NA              YoshiRepairAction = 0
	YoshiRepairAction_YOSHI_REPLUG_ON_DUT   YoshiRepairAction = 1
	YoshiRepairAction_YOSHI_REPLUG_TO_SERVO YoshiRepairAction = 2
	YoshiRepairAction_YOSHI_REPLACE         YoshiRepairAction = 3
	YoshiRepairAction_YOSHI_OTHER           YoshiRepairAction = 4
)

// Enum value maps for YoshiRepairAction.
var (
	YoshiRepairAction_name = map[int32]string{
		0: "YOSHI_NA",
		1: "YOSHI_REPLUG_ON_DUT",
		2: "YOSHI_REPLUG_TO_SERVO",
		3: "YOSHI_REPLACE",
		4: "YOSHI_OTHER",
	}
	YoshiRepairAction_value = map[string]int32{
		"YOSHI_NA":              0,
		"YOSHI_REPLUG_ON_DUT":   1,
		"YOSHI_REPLUG_TO_SERVO": 2,
		"YOSHI_REPLACE":         3,
		"YOSHI_OTHER":           4,
	}
)

func (x YoshiRepairAction) Enum() *YoshiRepairAction {
	p := new(YoshiRepairAction)
	*p = x
	return p
}

func (x YoshiRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YoshiRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[2].Descriptor()
}

func (YoshiRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[2]
}

func (x YoshiRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use YoshiRepairAction.Descriptor instead.
func (YoshiRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{2}
}

// Standard manual repair actions taken to fix the charger.
// Next tag: 4
type ChargerRepairAction int32

const (
	ChargerRepairAction_CHARGER_NA      ChargerRepairAction = 0
	ChargerRepairAction_CHARGER_REPLUG  ChargerRepairAction = 1
	ChargerRepairAction_CHARGER_REPLACE ChargerRepairAction = 2
	ChargerRepairAction_CHARGER_OTHER   ChargerRepairAction = 3
)

// Enum value maps for ChargerRepairAction.
var (
	ChargerRepairAction_name = map[int32]string{
		0: "CHARGER_NA",
		1: "CHARGER_REPLUG",
		2: "CHARGER_REPLACE",
		3: "CHARGER_OTHER",
	}
	ChargerRepairAction_value = map[string]int32{
		"CHARGER_NA":      0,
		"CHARGER_REPLUG":  1,
		"CHARGER_REPLACE": 2,
		"CHARGER_OTHER":   3,
	}
)

func (x ChargerRepairAction) Enum() *ChargerRepairAction {
	p := new(ChargerRepairAction)
	*p = x
	return p
}

func (x ChargerRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargerRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[3].Descriptor()
}

func (ChargerRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[3]
}

func (x ChargerRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargerRepairAction.Descriptor instead.
func (ChargerRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{3}
}

// Standard manual repair actions taken to fix the usb stick on the servo.
// Next tag: 5
type UsbStickRepairAction int32

const (
	UsbStickRepairAction_USB_STICK_NA      UsbStickRepairAction = 0
	UsbStickRepairAction_USB_STICK_REPLUG  UsbStickRepairAction = 1
	UsbStickRepairAction_USB_STICK_REPLACE UsbStickRepairAction = 2
	UsbStickRepairAction_USB_STICK_MISSED  UsbStickRepairAction = 3
	UsbStickRepairAction_USB_STICK_OTHER   UsbStickRepairAction = 4
)

// Enum value maps for UsbStickRepairAction.
var (
	UsbStickRepairAction_name = map[int32]string{
		0: "USB_STICK_NA",
		1: "USB_STICK_REPLUG",
		2: "USB_STICK_REPLACE",
		3: "USB_STICK_MISSED",
		4: "USB_STICK_OTHER",
	}
	UsbStickRepairAction_value = map[string]int32{
		"USB_STICK_NA":      0,
		"USB_STICK_REPLUG":  1,
		"USB_STICK_REPLACE": 2,
		"USB_STICK_MISSED":  3,
		"USB_STICK_OTHER":   4,
	}
)

func (x UsbStickRepairAction) Enum() *UsbStickRepairAction {
	p := new(UsbStickRepairAction)
	*p = x
	return p
}

func (x UsbStickRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsbStickRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[4].Descriptor()
}

func (UsbStickRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[4]
}

func (x UsbStickRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsbStickRepairAction.Descriptor instead.
func (UsbStickRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{4}
}

// Standard manual repair actions taken to fix any other cables.
// Next tag: 5
type CableRepairAction int32

const (
	CableRepairAction_CABLE_NA                CableRepairAction = 0
	CableRepairAction_CABLE_SERVO_HOST_SERVO  CableRepairAction = 1
	CableRepairAction_CABLE_SERVO_DUT         CableRepairAction = 2
	CableRepairAction_CABLE_SERVO_SERVO_MICRO CableRepairAction = 3
	CableRepairAction_CABLE_OTHER             CableRepairAction = 4
)

// Enum value maps for CableRepairAction.
var (
	CableRepairAction_name = map[int32]string{
		0: "CABLE_NA",
		1: "CABLE_SERVO_HOST_SERVO",
		2: "CABLE_SERVO_DUT",
		3: "CABLE_SERVO_SERVO_MICRO",
		4: "CABLE_OTHER",
	}
	CableRepairAction_value = map[string]int32{
		"CABLE_NA":                0,
		"CABLE_SERVO_HOST_SERVO":  1,
		"CABLE_SERVO_DUT":         2,
		"CABLE_SERVO_SERVO_MICRO": 3,
		"CABLE_OTHER":             4,
	}
)

func (x CableRepairAction) Enum() *CableRepairAction {
	p := new(CableRepairAction)
	*p = x
	return p
}

func (x CableRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CableRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[5].Descriptor()
}

func (CableRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[5]
}

func (x CableRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CableRepairAction.Descriptor instead.
func (CableRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{5}
}

// Standard manual repair actions taken to fix the rpm.
// Next tag: 5
type RpmRepairAction int32

const (
	RpmRepairAction_RPM_NA                RpmRepairAction = 0
	RpmRepairAction_RPM_UPDATE_DHCP       RpmRepairAction = 1
	RpmRepairAction_RPM_UPDATE_DUT_CONFIG RpmRepairAction = 2
	RpmRepairAction_RPM_REPLACE           RpmRepairAction = 3
	RpmRepairAction_RPM_OTHER             RpmRepairAction = 4
)

// Enum value maps for RpmRepairAction.
var (
	RpmRepairAction_name = map[int32]string{
		0: "RPM_NA",
		1: "RPM_UPDATE_DHCP",
		2: "RPM_UPDATE_DUT_CONFIG",
		3: "RPM_REPLACE",
		4: "RPM_OTHER",
	}
	RpmRepairAction_value = map[string]int32{
		"RPM_NA":                0,
		"RPM_UPDATE_DHCP":       1,
		"RPM_UPDATE_DUT_CONFIG": 2,
		"RPM_REPLACE":           3,
		"RPM_OTHER":             4,
	}
)

func (x RpmRepairAction) Enum() *RpmRepairAction {
	p := new(RpmRepairAction)
	*p = x
	return p
}

func (x RpmRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpmRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[6].Descriptor()
}

func (RpmRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[6]
}

func (x RpmRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpmRepairAction.Descriptor instead.
func (RpmRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{6}
}

// Standard manual repair actions taken to fix the dut.
// Next tag: 10
type DutRepairAction int32

const (
	DutRepairAction_DUT_NA              DutRepairAction = 0
	DutRepairAction_DUT_REIMAGE_DEV     DutRepairAction = 1
	DutRepairAction_DUT_REIMAGE_PROD    DutRepairAction = 2
	DutRepairAction_DUT_POWER_CYCLE_DUT DutRepairAction = 4
	DutRepairAction_DUT_REBOOT_EC       DutRepairAction = 5
	DutRepairAction_DUT_NOT_PRESENT     DutRepairAction = 6
	DutRepairAction_DUT_REFLASH         DutRepairAction = 7
	DutRepairAction_DUT_REPLACE         DutRepairAction = 8
	DutRepairAction_DUT_OTHER           DutRepairAction = 9
)

// Enum value maps for DutRepairAction.
var (
	DutRepairAction_name = map[int32]string{
		0: "DUT_NA",
		1: "DUT_REIMAGE_DEV",
		2: "DUT_REIMAGE_PROD",
		4: "DUT_POWER_CYCLE_DUT",
		5: "DUT_REBOOT_EC",
		6: "DUT_NOT_PRESENT",
		7: "DUT_REFLASH",
		8: "DUT_REPLACE",
		9: "DUT_OTHER",
	}
	DutRepairAction_value = map[string]int32{
		"DUT_NA":              0,
		"DUT_REIMAGE_DEV":     1,
		"DUT_REIMAGE_PROD":    2,
		"DUT_POWER_CYCLE_DUT": 4,
		"DUT_REBOOT_EC":       5,
		"DUT_NOT_PRESENT":     6,
		"DUT_REFLASH":         7,
		"DUT_REPLACE":         8,
		"DUT_OTHER":           9,
	}
)

func (x DutRepairAction) Enum() *DutRepairAction {
	p := new(DutRepairAction)
	*p = x
	return p
}

func (x DutRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DutRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[7].Descriptor()
}

func (DutRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[7]
}

func (x DutRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DutRepairAction.Descriptor instead.
func (DutRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{7}
}

// The triggering device that led you to work on this repair.
//
// ie. If the DUT repairs dashboard led you to work on this device, then it is
// a DUT repair. If the Servo or Labstation dashboard lead to you work on this
// device, then it is a Servo or Labstation repair.
// Next tag: 3
type DeviceManualRepairRecord_RepairTargetType int32

const (
	DeviceManualRepairRecord_TYPE_DUT        DeviceManualRepairRecord_RepairTargetType = 0
	DeviceManualRepairRecord_TYPE_LABSTATION DeviceManualRepairRecord_RepairTargetType = 1
	DeviceManualRepairRecord_TYPE_SERVO      DeviceManualRepairRecord_RepairTargetType = 2
)

// Enum value maps for DeviceManualRepairRecord_RepairTargetType.
var (
	DeviceManualRepairRecord_RepairTargetType_name = map[int32]string{
		0: "TYPE_DUT",
		1: "TYPE_LABSTATION",
		2: "TYPE_SERVO",
	}
	DeviceManualRepairRecord_RepairTargetType_value = map[string]int32{
		"TYPE_DUT":        0,
		"TYPE_LABSTATION": 1,
		"TYPE_SERVO":      2,
	}
)

func (x DeviceManualRepairRecord_RepairTargetType) Enum() *DeviceManualRepairRecord_RepairTargetType {
	p := new(DeviceManualRepairRecord_RepairTargetType)
	*p = x
	return p
}

func (x DeviceManualRepairRecord_RepairTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceManualRepairRecord_RepairTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[8].Descriptor()
}

func (DeviceManualRepairRecord_RepairTargetType) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[8]
}

func (x DeviceManualRepairRecord_RepairTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceManualRepairRecord_RepairTargetType.Descriptor instead.
func (DeviceManualRepairRecord_RepairTargetType) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{0, 0}
}

// State for tracking manual repair progress.
// Next tag: 4
type DeviceManualRepairRecord_RepairState int32

const (
	DeviceManualRepairRecord_STATE_INVALID     DeviceManualRepairRecord_RepairState = 0
	DeviceManualRepairRecord_STATE_NOT_STARTED DeviceManualRepairRecord_RepairState = 1
	DeviceManualRepairRecord_STATE_IN_PROGRESS DeviceManualRepairRecord_RepairState = 2
	DeviceManualRepairRecord_STATE_COMPLETED   DeviceManualRepairRecord_RepairState = 3
)

// Enum value maps for DeviceManualRepairRecord_RepairState.
var (
	DeviceManualRepairRecord_RepairState_name = map[int32]string{
		0: "STATE_INVALID",
		1: "STATE_NOT_STARTED",
		2: "STATE_IN_PROGRESS",
		3: "STATE_COMPLETED",
	}
	DeviceManualRepairRecord_RepairState_value = map[string]int32{
		"STATE_INVALID":     0,
		"STATE_NOT_STARTED": 1,
		"STATE_IN_PROGRESS": 2,
		"STATE_COMPLETED":   3,
	}
)

func (x DeviceManualRepairRecord_RepairState) Enum() *DeviceManualRepairRecord_RepairState {
	p := new(DeviceManualRepairRecord_RepairState)
	*p = x
	return p
}

func (x DeviceManualRepairRecord_RepairState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceManualRepairRecord_RepairState) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[9].Descriptor()
}

func (DeviceManualRepairRecord_RepairState) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[9]
}

func (x DeviceManualRepairRecord_RepairState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceManualRepairRecord_RepairState.Descriptor instead.
func (DeviceManualRepairRecord_RepairState) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{0, 1}
}

// DEPRECATED: Using more granular actions instead.
// Standard manual repair actions taken to fix the device.
// Next tag: 7
type DeviceManualRepairRecord_ManualRepairAction int32

const (
	// Fix Labstation
	DeviceManualRepairRecord_ACTION_FIX_LABSTATION DeviceManualRepairRecord_ManualRepairAction = 0
	// Fix Servo
	DeviceManualRepairRecord_ACTION_FIX_SERVO DeviceManualRepairRecord_ManualRepairAction = 1
	// Fix Yoshi cable / servo_micro
	DeviceManualRepairRecord_ACTION_FIX_YOSHI_CABLE DeviceManualRepairRecord_ManualRepairAction = 2
	// Visual Inspection
	DeviceManualRepairRecord_ACTION_VISUAL_INSPECTION DeviceManualRepairRecord_ManualRepairAction = 3
	// Check / Fix Power for DUT
	DeviceManualRepairRecord_ACTION_DUT_POWER DeviceManualRepairRecord_ManualRepairAction = 4
	// Troubleshoot DUT
	DeviceManualRepairRecord_ACTION_TROUBLESHOOT_DUT DeviceManualRepairRecord_ManualRepairAction = 5
	// Reimage / Reflash DUT
	DeviceManualRepairRecord_ACTION_REIMAGE_DUT DeviceManualRepairRecord_ManualRepairAction = 6
)

// Enum value maps for DeviceManualRepairRecord_ManualRepairAction.
var (
	DeviceManualRepairRecord_ManualRepairAction_name = map[int32]string{
		0: "ACTION_FIX_LABSTATION",
		1: "ACTION_FIX_SERVO",
		2: "ACTION_FIX_YOSHI_CABLE",
		3: "ACTION_VISUAL_INSPECTION",
		4: "ACTION_DUT_POWER",
		5: "ACTION_TROUBLESHOOT_DUT",
		6: "ACTION_REIMAGE_DUT",
	}
	DeviceManualRepairRecord_ManualRepairAction_value = map[string]int32{
		"ACTION_FIX_LABSTATION":    0,
		"ACTION_FIX_SERVO":         1,
		"ACTION_FIX_YOSHI_CABLE":   2,
		"ACTION_VISUAL_INSPECTION": 3,
		"ACTION_DUT_POWER":         4,
		"ACTION_TROUBLESHOOT_DUT":  5,
		"ACTION_REIMAGE_DUT":       6,
	}
)

func (x DeviceManualRepairRecord_ManualRepairAction) Enum() *DeviceManualRepairRecord_ManualRepairAction {
	p := new(DeviceManualRepairRecord_ManualRepairAction)
	*p = x
	return p
}

func (x DeviceManualRepairRecord_ManualRepairAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceManualRepairRecord_ManualRepairAction) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[10].Descriptor()
}

func (DeviceManualRepairRecord_ManualRepairAction) Type() protoreflect.EnumType {
	return &file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes[10]
}

func (x DeviceManualRepairRecord_ManualRepairAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceManualRepairRecord_ManualRepairAction.Descriptor instead.
func (DeviceManualRepairRecord_ManualRepairAction) EnumDescriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{0, 2}
}

// Next tag: 30
type DeviceManualRepairRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname         string                                    `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	AssetTag         string                                    `protobuf:"bytes,2,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
	RepairTargetType DeviceManualRepairRecord_RepairTargetType `protobuf:"varint,3,opt,name=repair_target_type,json=repairTargetType,proto3,enum=inventory.libs.protos.DeviceManualRepairRecord_RepairTargetType" json:"repair_target_type,omitempty"`
	RepairState      DeviceManualRepairRecord_RepairState      `protobuf:"varint,4,opt,name=repair_state,json=repairState,proto3,enum=inventory.libs.protos.DeviceManualRepairRecord_RepairState" json:"repair_state,omitempty"`
	// Buganizer bug tracking https://b/XXXXXXXXX.
	BuganizerBugUrl string `protobuf:"bytes,5,opt,name=buganizer_bug_url,json=buganizerBugUrl,proto3" json:"buganizer_bug_url,omitempty"`
	// Chromium bug tracking https://crbug.com/XXXXXXX.
	ChromiumBugUrl string `protobuf:"bytes,6,opt,name=chromium_bug_url,json=chromiumBugUrl,proto3" json:"chromium_bug_url,omitempty"`
	// DUT repair failure description.
	//
	// Deprecated: Do not use.
	DutRepairFailureDescription string `protobuf:"bytes,7,opt,name=dut_repair_failure_description,json=dutRepairFailureDescription,proto3" json:"dut_repair_failure_description,omitempty"`
	// The last DUT repair verifier that failed.
	//
	// Deprecated: Do not use.
	DutVerifierFailureDescription string `protobuf:"bytes,8,opt,name=dut_verifier_failure_description,json=dutVerifierFailureDescription,proto3" json:"dut_verifier_failure_description,omitempty"`
	// Servo repair failure description.
	//
	// Deprecated: Do not use.
	ServoRepairFailureDescription string `protobuf:"bytes,9,opt,name=servo_repair_failure_description,json=servoRepairFailureDescription,proto3" json:"servo_repair_failure_description,omitempty"`
	// The last Servo repair verifier that failed.
	//
	// Deprecated: Do not use.
	ServoVerifierFailureDescription string `protobuf:"bytes,10,opt,name=servo_verifier_failure_description,json=servoVerifierFailureDescription,proto3" json:"servo_verifier_failure_description,omitempty"`
	// Diagnosis of what is wrong with the device.
	Diagnosis string `protobuf:"bytes,11,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// The procedure that fixed the device. This can be a best guess. Assumption
	// is that admin/skylab repairs will run to verify the repair post fix.
	RepairProcedure string `protobuf:"bytes,12,opt,name=repair_procedure,json=repairProcedure,proto3" json:"repair_procedure,omitempty"`
	// Deprecated: Do not use.
	ManualRepairActions     []DeviceManualRepairRecord_ManualRepairAction `protobuf:"varint,13,rep,packed,name=manual_repair_actions,json=manualRepairActions,proto3,enum=inventory.libs.protos.DeviceManualRepairRecord_ManualRepairAction" json:"manual_repair_actions,omitempty"`
	LabstationRepairActions []LabstationRepairAction                      `protobuf:"varint,20,rep,packed,name=labstation_repair_actions,json=labstationRepairActions,proto3,enum=inventory.libs.protos.LabstationRepairAction" json:"labstation_repair_actions,omitempty"`
	ServoRepairActions      []ServoRepairAction                           `protobuf:"varint,21,rep,packed,name=servo_repair_actions,json=servoRepairActions,proto3,enum=inventory.libs.protos.ServoRepairAction" json:"servo_repair_actions,omitempty"`
	YoshiRepairActions      []YoshiRepairAction                           `protobuf:"varint,22,rep,packed,name=yoshi_repair_actions,json=yoshiRepairActions,proto3,enum=inventory.libs.protos.YoshiRepairAction" json:"yoshi_repair_actions,omitempty"`
	ChargerRepairActions    []ChargerRepairAction                         `protobuf:"varint,23,rep,packed,name=charger_repair_actions,json=chargerRepairActions,proto3,enum=inventory.libs.protos.ChargerRepairAction" json:"charger_repair_actions,omitempty"`
	UsbStickRepairActions   []UsbStickRepairAction                        `protobuf:"varint,24,rep,packed,name=usb_stick_repair_actions,json=usbStickRepairActions,proto3,enum=inventory.libs.protos.UsbStickRepairAction" json:"usb_stick_repair_actions,omitempty"`
	CableRepairActions      []CableRepairAction                           `protobuf:"varint,25,rep,packed,name=cable_repair_actions,json=cableRepairActions,proto3,enum=inventory.libs.protos.CableRepairAction" json:"cable_repair_actions,omitempty"`
	RpmRepairActions        []RpmRepairAction                             `protobuf:"varint,26,rep,packed,name=rpm_repair_actions,json=rpmRepairActions,proto3,enum=inventory.libs.protos.RpmRepairAction" json:"rpm_repair_actions,omitempty"`
	DutRepairActions        []DutRepairAction                             `protobuf:"varint,27,rep,packed,name=dut_repair_actions,json=dutRepairActions,proto3,enum=inventory.libs.protos.DutRepairAction" json:"dut_repair_actions,omitempty"`
	// Boolean value of whether the primary issue has been fixed or not.
	IssueFixed bool `protobuf:"varint,18,opt,name=issue_fixed,json=issueFixed,proto3" json:"issue_fixed,omitempty"`
	// Technician ldap of who started the device repair.
	UserLdap string `protobuf:"bytes,19,opt,name=user_ldap,json=userLdap,proto3" json:"user_ldap,omitempty"`
	// Whether a replacement was requested for this device.
	ReplacementRequested bool `protobuf:"varint,29,opt,name=replacement_requested,json=replacementRequested,proto3" json:"replacement_requested,omitempty"`
	// Time taken will be calculated based on the types of repair actions take.
	// This is to give a better repair time estimate that excludes time spent
	// waiting. Record updations may not happen right after a repair is completed
	// so calculating from other timestamps may not accurately portray the time a
	// Lab Tech spent actually investigating and repairing the device.
	TimeTaken int32 `protobuf:"varint,14,opt,name=time_taken,json=timeTaken,proto3" json:"time_taken,omitempty"`
	// Timestamp when repair record was created.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Timestamp when repair record was last updated.
	UpdatedTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	// Timestamp when repair record was marked completed.
	CompletedTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=completed_time,json=completedTime,proto3" json:"completed_time,omitempty"`
	// Additional comments if needed to capture repair status.
	AdditionalComments string `protobuf:"bytes,28,opt,name=additional_comments,json=additionalComments,proto3" json:"additional_comments,omitempty"`
}

func (x *DeviceManualRepairRecord) Reset() {
	*x = DeviceManualRepairRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_lab_inventory_protos_repair_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceManualRepairRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceManualRepairRecord) ProtoMessage() {}

func (x *DeviceManualRepairRecord) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_lab_inventory_protos_repair_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceManualRepairRecord.ProtoReflect.Descriptor instead.
func (*DeviceManualRepairRecord) Descriptor() ([]byte, []int) {
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceManualRepairRecord) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DeviceManualRepairRecord) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

func (x *DeviceManualRepairRecord) GetRepairTargetType() DeviceManualRepairRecord_RepairTargetType {
	if x != nil {
		return x.RepairTargetType
	}
	return DeviceManualRepairRecord_TYPE_DUT
}

func (x *DeviceManualRepairRecord) GetRepairState() DeviceManualRepairRecord_RepairState {
	if x != nil {
		return x.RepairState
	}
	return DeviceManualRepairRecord_STATE_INVALID
}

func (x *DeviceManualRepairRecord) GetBuganizerBugUrl() string {
	if x != nil {
		return x.BuganizerBugUrl
	}
	return ""
}

func (x *DeviceManualRepairRecord) GetChromiumBugUrl() string {
	if x != nil {
		return x.ChromiumBugUrl
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeviceManualRepairRecord) GetDutRepairFailureDescription() string {
	if x != nil {
		return x.DutRepairFailureDescription
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeviceManualRepairRecord) GetDutVerifierFailureDescription() string {
	if x != nil {
		return x.DutVerifierFailureDescription
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeviceManualRepairRecord) GetServoRepairFailureDescription() string {
	if x != nil {
		return x.ServoRepairFailureDescription
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeviceManualRepairRecord) GetServoVerifierFailureDescription() string {
	if x != nil {
		return x.ServoVerifierFailureDescription
	}
	return ""
}

func (x *DeviceManualRepairRecord) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *DeviceManualRepairRecord) GetRepairProcedure() string {
	if x != nil {
		return x.RepairProcedure
	}
	return ""
}

// Deprecated: Do not use.
func (x *DeviceManualRepairRecord) GetManualRepairActions() []DeviceManualRepairRecord_ManualRepairAction {
	if x != nil {
		return x.ManualRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetLabstationRepairActions() []LabstationRepairAction {
	if x != nil {
		return x.LabstationRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetServoRepairActions() []ServoRepairAction {
	if x != nil {
		return x.ServoRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetYoshiRepairActions() []YoshiRepairAction {
	if x != nil {
		return x.YoshiRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetChargerRepairActions() []ChargerRepairAction {
	if x != nil {
		return x.ChargerRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetUsbStickRepairActions() []UsbStickRepairAction {
	if x != nil {
		return x.UsbStickRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetCableRepairActions() []CableRepairAction {
	if x != nil {
		return x.CableRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetRpmRepairActions() []RpmRepairAction {
	if x != nil {
		return x.RpmRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetDutRepairActions() []DutRepairAction {
	if x != nil {
		return x.DutRepairActions
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetIssueFixed() bool {
	if x != nil {
		return x.IssueFixed
	}
	return false
}

func (x *DeviceManualRepairRecord) GetUserLdap() string {
	if x != nil {
		return x.UserLdap
	}
	return ""
}

func (x *DeviceManualRepairRecord) GetReplacementRequested() bool {
	if x != nil {
		return x.ReplacementRequested
	}
	return false
}

func (x *DeviceManualRepairRecord) GetTimeTaken() int32 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *DeviceManualRepairRecord) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *DeviceManualRepairRecord) GetAdditionalComments() string {
	if x != nil {
		return x.AdditionalComments
	}
	return ""
}

var File_infra_cros_lab_inventory_protos_repair_record_proto protoreflect.FileDescriptor

var file_infra_cros_lab_inventory_protos_repair_record_proto_rawDesc = []byte{
	0x0a, 0x33, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x12,
	0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x6e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x62, 0x75, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x42, 0x75, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x42, 0x75, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x1e, 0x64, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x64, 0x75, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x20, 0x64, 0x75, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x1d, 0x64, 0x75, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1d, 0x73,
	0x65, 0x72, 0x76, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x22,
	0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1f, 0x73, 0x65,
	0x72, 0x76, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x61,
	0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x79, 0x6f, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x59, 0x6f, 0x73, 0x68, 0x69, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x79, 0x6f, 0x73, 0x68, 0x69, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x75, 0x73, 0x62, 0x5f, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x55, 0x73, 0x62, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x62, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a,
	0x14, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x61,
	0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x72, 0x70, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x70,
	0x6d, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72,
	0x70, 0x6d, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x54, 0x0a, 0x12, 0x64, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x69, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x44, 0x75, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x75, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x64, 0x61, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x64, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x10, 0x52, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x10, 0x02,
	0x22, 0x63, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x41, 0x42, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x58, 0x5f, 0x59, 0x4f, 0x53, 0x48,
	0x49, 0x5f, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x53,
	0x48, 0x4f, 0x4f, 0x54, 0x5f, 0x44, 0x55, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x55, 0x54,
	0x10, 0x06, 0x2a, 0xc1, 0x01, 0x0a, 0x16, 0x4c, 0x61, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41,
	0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x4c, 0x41, 0x53, 0x48, 0x10, 0x06, 0x2a, 0xb2, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x6f,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45,
	0x52, 0x56, 0x4f, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x55,
	0x47, 0x5f, 0x55, 0x53, 0x42, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x55, 0x47, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x4f,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x52, 0x56, 0x4f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x2a, 0x79, 0x0a, 0x11, 0x59,
	0x6f, 0x73, 0x68, 0x69, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x08, 0x59, 0x4f, 0x53, 0x48, 0x49, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x59, 0x4f, 0x53, 0x48, 0x49, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x55, 0x47, 0x5f, 0x4f,
	0x4e, 0x5f, 0x44, 0x55, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x59, 0x4f, 0x53, 0x48, 0x49,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x55, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x4f, 0x53, 0x48, 0x49, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x59, 0x4f, 0x53, 0x48, 0x49, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x55, 0x47, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x80, 0x01, 0x0a, 0x14, 0x55, 0x73,
	0x62, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x5f,
	0x4e, 0x41, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53,
	0x42, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x42, 0x5f, 0x53,
	0x54, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x80, 0x01, 0x0a,
	0x11, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x44, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x4f, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a,
	0x6d, 0x0a, 0x0f, 0x52, 0x70, 0x6d, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x50, 0x4d, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x50, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x48, 0x43,
	0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x50, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x50, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x50, 0x4d, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0xba,
	0x01, 0x0a, 0x0f, 0x44, 0x75, 0x74, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x55, 0x54, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45,
	0x56, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x55, 0x54,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x44, 0x55, 0x54,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54,
	0x5f, 0x45, 0x43, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x55, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x55, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x42, 0x29, 0x5a, 0x27, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3b, 0x69,
	0x6e, 0x76, 0x6c, 0x69, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescOnce sync.Once
	file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescData = file_infra_cros_lab_inventory_protos_repair_record_proto_rawDesc
)

func file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescGZIP() []byte {
	file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescOnce.Do(func() {
		file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescData)
	})
	return file_infra_cros_lab_inventory_protos_repair_record_proto_rawDescData
}

var file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_infra_cros_lab_inventory_protos_repair_record_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_infra_cros_lab_inventory_protos_repair_record_proto_goTypes = []interface{}{
	(LabstationRepairAction)(0),                      // 0: inventory.libs.protos.LabstationRepairAction
	(ServoRepairAction)(0),                           // 1: inventory.libs.protos.ServoRepairAction
	(YoshiRepairAction)(0),                           // 2: inventory.libs.protos.YoshiRepairAction
	(ChargerRepairAction)(0),                         // 3: inventory.libs.protos.ChargerRepairAction
	(UsbStickRepairAction)(0),                        // 4: inventory.libs.protos.UsbStickRepairAction
	(CableRepairAction)(0),                           // 5: inventory.libs.protos.CableRepairAction
	(RpmRepairAction)(0),                             // 6: inventory.libs.protos.RpmRepairAction
	(DutRepairAction)(0),                             // 7: inventory.libs.protos.DutRepairAction
	(DeviceManualRepairRecord_RepairTargetType)(0),   // 8: inventory.libs.protos.DeviceManualRepairRecord.RepairTargetType
	(DeviceManualRepairRecord_RepairState)(0),        // 9: inventory.libs.protos.DeviceManualRepairRecord.RepairState
	(DeviceManualRepairRecord_ManualRepairAction)(0), // 10: inventory.libs.protos.DeviceManualRepairRecord.ManualRepairAction
	(*DeviceManualRepairRecord)(nil),                 // 11: inventory.libs.protos.DeviceManualRepairRecord
	(*timestamppb.Timestamp)(nil),                    // 12: google.protobuf.Timestamp
}
var file_infra_cros_lab_inventory_protos_repair_record_proto_depIdxs = []int32{
	8,  // 0: inventory.libs.protos.DeviceManualRepairRecord.repair_target_type:type_name -> inventory.libs.protos.DeviceManualRepairRecord.RepairTargetType
	9,  // 1: inventory.libs.protos.DeviceManualRepairRecord.repair_state:type_name -> inventory.libs.protos.DeviceManualRepairRecord.RepairState
	10, // 2: inventory.libs.protos.DeviceManualRepairRecord.manual_repair_actions:type_name -> inventory.libs.protos.DeviceManualRepairRecord.ManualRepairAction
	0,  // 3: inventory.libs.protos.DeviceManualRepairRecord.labstation_repair_actions:type_name -> inventory.libs.protos.LabstationRepairAction
	1,  // 4: inventory.libs.protos.DeviceManualRepairRecord.servo_repair_actions:type_name -> inventory.libs.protos.ServoRepairAction
	2,  // 5: inventory.libs.protos.DeviceManualRepairRecord.yoshi_repair_actions:type_name -> inventory.libs.protos.YoshiRepairAction
	3,  // 6: inventory.libs.protos.DeviceManualRepairRecord.charger_repair_actions:type_name -> inventory.libs.protos.ChargerRepairAction
	4,  // 7: inventory.libs.protos.DeviceManualRepairRecord.usb_stick_repair_actions:type_name -> inventory.libs.protos.UsbStickRepairAction
	5,  // 8: inventory.libs.protos.DeviceManualRepairRecord.cable_repair_actions:type_name -> inventory.libs.protos.CableRepairAction
	6,  // 9: inventory.libs.protos.DeviceManualRepairRecord.rpm_repair_actions:type_name -> inventory.libs.protos.RpmRepairAction
	7,  // 10: inventory.libs.protos.DeviceManualRepairRecord.dut_repair_actions:type_name -> inventory.libs.protos.DutRepairAction
	12, // 11: inventory.libs.protos.DeviceManualRepairRecord.created_time:type_name -> google.protobuf.Timestamp
	12, // 12: inventory.libs.protos.DeviceManualRepairRecord.updated_time:type_name -> google.protobuf.Timestamp
	12, // 13: inventory.libs.protos.DeviceManualRepairRecord.completed_time:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_infra_cros_lab_inventory_protos_repair_record_proto_init() }
func file_infra_cros_lab_inventory_protos_repair_record_proto_init() {
	if File_infra_cros_lab_inventory_protos_repair_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_cros_lab_inventory_protos_repair_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceManualRepairRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_cros_lab_inventory_protos_repair_record_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_cros_lab_inventory_protos_repair_record_proto_goTypes,
		DependencyIndexes: file_infra_cros_lab_inventory_protos_repair_record_proto_depIdxs,
		EnumInfos:         file_infra_cros_lab_inventory_protos_repair_record_proto_enumTypes,
		MessageInfos:      file_infra_cros_lab_inventory_protos_repair_record_proto_msgTypes,
	}.Build()
	File_infra_cros_lab_inventory_protos_repair_record_proto = out.File
	file_infra_cros_lab_inventory_protos_repair_record_proto_rawDesc = nil
	file_infra_cros_lab_inventory_protos_repair_record_proto_goTypes = nil
	file_infra_cros_lab_inventory_protos_repair_record_proto_depIdxs = nil
}
