// Code generated by genoptions.go. DO NOT EDIT.
//
// Edit genoptions.go and run "go generate" to modify.

package git

import (
	"fmt"
)

type cloneOpt interface {
	cloneOptArgs() []string
}

type fetchOpt interface {
	fetchOptArgs() []string
}

type pushRefOpt interface {
	pushRefOptArgs() []string
}

type ForceOpt struct {
	val bool
}

// Force overrides checks that a command might run before modifying state, see individual command documentation for exact behavior.
func ForceIf(enabled bool) *ForceOpt {
	return &ForceOpt{val: enabled}
}

// Force overrides checks that a command might run before modifying state, see individual command documentation for exact behavior.
func Force() *ForceOpt {
	return &ForceOpt{val: true}
}

func (o ForceOpt) args() []string {
	if o.val {
		return []string{"--force"}
	}

	return []string{}

}

func (o ForceOpt) pushRefOptArgs() []string { return o.args() }

type DryRunOpt struct {
	val bool
}

// DryRun shows what a command would do without actually running it.
func DryRunIf(enabled bool) *DryRunOpt {
	return &DryRunOpt{val: enabled}
}

// DryRun shows what a command would do without actually running it.
func DryRun() *DryRunOpt {
	return &DryRunOpt{val: true}
}

func (o DryRunOpt) args() []string {
	if o.val {
		return []string{"--dry-run"}
	}

	return []string{}

}

func (o DryRunOpt) pushRefOptArgs() []string { return o.args() }

type DepthOpt struct {
	val int
}

// Depth creates a shallow clone, and limits fetches in a repository created by a shallow clone.
func Depth(val int) *DepthOpt {
	return &DepthOpt{val: val}
}

func (o DepthOpt) args() []string {
	return []string{"--depth", fmt.Sprint(o.val)}

}

func (o DepthOpt) fetchOptArgs() []string { return o.args() }

func (o DepthOpt) cloneOptArgs() []string { return o.args() }

type ShallowSinceOpt struct {
	val string
}

// ShallowSince creates a shallow clone with a history after the specified time.
func ShallowSince(val string) *ShallowSinceOpt {
	return &ShallowSinceOpt{val: val}
}

func (o ShallowSinceOpt) args() []string {
	return []string{"--shallow-since", fmt.Sprint(o.val)}

}

func (o ShallowSinceOpt) fetchOptArgs() []string { return o.args() }

func (o ShallowSinceOpt) cloneOptArgs() []string { return o.args() }

type NoTagsOpt struct {
	val bool
}

// NoTags disables downloading tags during fetch or clone commands.
func NoTagsIf(enabled bool) *NoTagsOpt {
	return &NoTagsOpt{val: enabled}
}

// NoTags disables downloading tags during fetch or clone commands.
func NoTags() *NoTagsOpt {
	return &NoTagsOpt{val: true}
}

func (o NoTagsOpt) args() []string {
	if o.val {
		return []string{"--no-tags"}
	}

	return []string{}

}

func (o NoTagsOpt) fetchOptArgs() []string { return o.args() }

func (o NoTagsOpt) cloneOptArgs() []string { return o.args() }

type SingleBranchOpt struct {
	val bool
}

// SingleBranch clones only a single branch
func SingleBranchIf(enabled bool) *SingleBranchOpt {
	return &SingleBranchOpt{val: enabled}
}

// SingleBranch clones only a single branch
func SingleBranch() *SingleBranchOpt {
	return &SingleBranchOpt{val: true}
}

func (o SingleBranchOpt) args() []string {
	if o.val {
		return []string{"--single-branch"}
	}

	return []string{}

}

func (o SingleBranchOpt) cloneOptArgs() []string { return o.args() }

type BranchOpt struct {
	val string
}

// Branch specifies the branch to clone from. Must be used in conjunction with SingleBranch
func Branch(val string) *BranchOpt {
	return &BranchOpt{val: val}
}

func (o BranchOpt) args() []string {
	return []string{"--branch", fmt.Sprint(o.val)}

}

func (o BranchOpt) cloneOptArgs() []string { return o.args() }
