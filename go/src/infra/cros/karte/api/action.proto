// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package chromeos.karte;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

option go_package = "infra/cros/karte/api;kartepb";

// An action represents an event that was intentionally performed on a DUT.
// Examples include running a command on a DUT or resetting the servo
// attached to a DUT.
//
message Action {
  option (google.api.resource) = {
    type: "karte.appspot.com/Action"
    pattern: "actions/{action}"
  };

  reserved 2;
  reserved "action_kind";

  // The resource name of the action. Names are generated
  // automatically when a new action is created.
  string name = 1;

  // A kind is a coarse-grained type of an action, such as
  // ssh-attempt. New action_kinds will be created frequently so this field
  // is a string; see https://google.aip.dev/126 for details.
  string kind = 3;

  // A swarming task ID is the ID of a single swarming task.
  // The swarming task of an action is the swarming task that invoked the
  // action.
  // For example, "4f6c0ba2ef3fc610" is a swarming task ID.
  string swarming_task_id = 4;

  // An asset tag is the tag of a given asset in UFS.
  // An asset tag may be a short number such as C444444 printed on a device,
  // or it may be a UUID in some circumstances.
  string asset_tag = 5;

  // The start time is the time that an action started.
  google.protobuf.Timestamp start_time = 6;

  // The stop time is the time that an action finished.
  google.protobuf.Timestamp stop_time = 7;

  // The create time is the time that an action was created by Karte.
  // This is the time that the event was first received, since events are
  // immutable outside of rare cases.
  // This field is managed by Karte itself.
  google.protobuf.Timestamp create_time = 8
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // The status of an action is whether the action succeeded or failed.
  enum Status {
    STATUS_UNSPECIFIED = 0;
    SUCCESS = 1;
    FAIL = 2;
    SKIP = 3;
  }
  Status status = 9;

  // The fail reason of an event is a diagnostic message that is emitted when
  // the action in question has failed.
  string fail_reason = 10;

  // The seal time is when the particular Karte record is sealed and no further
  // changes can be made.
  google.protobuf.Timestamp seal_time = 11;

  // The client is the name of the entity creating the Action entry, e.g.
  // "paris".
  string client_name = 12;

  // The client version is the version of the entity creating the Action entry,
  // e.g. "0.0.1".
  string client_version = 13;

  // The buildbucket ID is the ID of the buildbucket build associated with the
  // event in question.
  string buildbucket_id = 14;

  // The hostname is the hostname of the DUT in question.
  string hostname = 15;

  // Modification_count returns the number of times that the Karte record has
  // been modified. This field is managed by Karte.
  int32 modification_count = 16 [(google.api.field_behavior) = OUTPUT_ONLY];

  // model is the model of the DUT this event applies to.
  string model = 17;

  // board is the board of the DUT this event applies to.
  string board = 18;

  // recovered by is the name of the task that recovered the current action, if
  // one exists.
  string recovered_by = 19;

  // restarts is the number of times that the current plan was restarted.
  int32 restarts = 20;

  // plan_name is the name of the plan that we're currently executing.
  string plan_name = 21;

  // AllowFail records whether failure is allowed or not for the action in
  // question. There are two features of actions commonly referred to as
  // "criticality". The first is whether the action is a "critical action" or
  // not. A critical action is one that is considered an entrypoint from the
  // perspective of the Paris engine. The second is one where failures are NOT
  // forgiven. This captures the second notion.
  enum AllowFail {
    ALLOW_FAIL_UNSPECIFIED = 0;
    ALLOW_FAIL = 1;
    NO_ALLOW_FAIL = 2;
  };
  AllowFail allow_fail = 22;

  // ActionType is the type of the action: verifier, condition, or recovery.
  enum ActionType {
    // ACTION_TYPE_UNSPECIFIED is the default action type.
    ACTION_TYPE_UNSPECIFIED = 0;
    // ACTION_TYPE_VERIFIER actions are critical actions and their dependencies.
    ACTION_TYPE_VERIFIER = 1;
    // ACTION_TYPE_CONDITION actions are condition actions and their
    // dependencies.
    ACTION_TYPE_CONDITION = 2;
    // ACTION_TYPE_RECOVERY actions are recovery actions and their dependencies.
    ACTION_TYPE_RECOVERY = 3;
  }
  ActionType action_type = 23;
}
