// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package chromeos.karte;

import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

option go_package = "infra/cros/karte/api;kartepb";

// An action represents an event that was intentionally performed on a DUT.
// Examples include running a command on a DUT or resetting the servo
// attached to a DUT.
//
// Next Tag: 11
message Action {
  option (google.api.resource) = {
    type: "karte.appspot.com/Action"
    pattern: "actions/{action}"
  };

  reserved 2;
  reserved "action_kind";

  // The resource name of the action. Names are generated
  // automatically when a new action is created.
  string name = 1;

  // A kind is a coarse-grained type of an action, such as
  // ssh-attempt. New action_kinds will be created frequently so this field
  // is a string; see https://google.aip.dev/126 for details.
  string kind = 3;

  // A swarming task ID is the ID of a single swarming task.
  // The swarming task of an action is the swarming task that invoked the
  // action.
  // For example, "4f6c0ba2ef3fc610" is a swarming task ID.
  string swarming_task_id = 4;

  // An asset tag is the tag of a given asset in UFS.
  // An asset tag may be a short number such as C444444 printed on a device,
  // or it may be a UUID in some circumstances.
  string asset_tag = 5;

  // The start time is the time that an action started.
  google.protobuf.Timestamp start_time = 6;

  // The stop time is the time that an action finished.
  google.protobuf.Timestamp stop_time = 7;

  // The create time is the time that an action was created by Karte.
  // This is the time that the event was first received, since events are
  // immutable outside of rare cases.
  // This field is managed by Karte itself.
  google.protobuf.Timestamp create_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The status of an action is whether the action succeeded or failed.
  // Next Tag: 3
  enum Status {
    STATUS_UNSPECIFIED = 0;
    SUCCESS = 1;
    FAIL = 2;
  }
  Status status = 9;

  // The fail reason of an event is a diagnostic message that is emitted when
  // the action in question has failed.
  string fail_reason = 10;
}
