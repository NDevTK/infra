// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.1
// source: infra/cros/karte/api/searchquery.proto

package kartepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A SearchQuery contains filters.
type SearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionFilter                 *ActionCategoricalFilter               `protobuf:"bytes,1,opt,name=action_filter,json=actionFilter,proto3" json:"action_filter,omitempty"`
	StopTimeActionFilter         *StopTimeOrderableActionFilter         `protobuf:"bytes,2,opt,name=stop_time_action_filter,json=stopTimeActionFilter,proto3" json:"stop_time_action_filter,omitempty"`
	ObservationFilter            *ObservationCategoricalFilter          `protobuf:"bytes,3,opt,name=observation_filter,json=observationFilter,proto3" json:"observation_filter,omitempty"`
	ValueNumberObservationFilter *ValueNumberOrderableObservationFilter `protobuf:"bytes,4,opt,name=value_number_observation_filter,json=valueNumberObservationFilter,proto3" json:"value_number_observation_filter,omitempty"`
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_infra_cros_karte_api_searchquery_proto_rawDescGZIP(), []int{0}
}

func (x *SearchQuery) GetActionFilter() *ActionCategoricalFilter {
	if x != nil {
		return x.ActionFilter
	}
	return nil
}

func (x *SearchQuery) GetStopTimeActionFilter() *StopTimeOrderableActionFilter {
	if x != nil {
		return x.StopTimeActionFilter
	}
	return nil
}

func (x *SearchQuery) GetObservationFilter() *ObservationCategoricalFilter {
	if x != nil {
		return x.ObservationFilter
	}
	return nil
}

func (x *SearchQuery) GetValueNumberObservationFilter() *ValueNumberOrderableObservationFilter {
	if x != nil {
		return x.ValueNumberObservationFilter
	}
	return nil
}

type ActionCategoricalFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	SwarmingTaskId      string `protobuf:"bytes,3,opt,name=swarming_task_id,json=swarmingTaskId,proto3" json:"swarming_task_id,omitempty"`
	FailComponent       string `protobuf:"bytes,4,opt,name=fail_component,json=failComponent,proto3" json:"fail_component,omitempty"`
	IsStatusUnspecified bool   `protobuf:"varint,5,opt,name=is_status_unspecified,json=isStatusUnspecified,proto3" json:"is_status_unspecified,omitempty"`
	IsSuccess           bool   `protobuf:"varint,6,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	IsFail              bool   `protobuf:"varint,7,opt,name=is_fail,json=isFail,proto3" json:"is_fail,omitempty"`
}

func (x *ActionCategoricalFilter) Reset() {
	*x = ActionCategoricalFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCategoricalFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCategoricalFilter) ProtoMessage() {}

func (x *ActionCategoricalFilter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCategoricalFilter.ProtoReflect.Descriptor instead.
func (*ActionCategoricalFilter) Descriptor() ([]byte, []int) {
	return file_infra_cros_karte_api_searchquery_proto_rawDescGZIP(), []int{1}
}

func (x *ActionCategoricalFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionCategoricalFilter) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ActionCategoricalFilter) GetSwarmingTaskId() string {
	if x != nil {
		return x.SwarmingTaskId
	}
	return ""
}

func (x *ActionCategoricalFilter) GetFailComponent() string {
	if x != nil {
		return x.FailComponent
	}
	return ""
}

func (x *ActionCategoricalFilter) GetIsStatusUnspecified() bool {
	if x != nil {
		return x.IsStatusUnspecified
	}
	return false
}

func (x *ActionCategoricalFilter) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ActionCategoricalFilter) GetIsFail() bool {
	if x != nil {
		return x.IsFail
	}
	return false
}

type StopTimeOrderableActionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopTimeLeX *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop_time_le_x,json=stopTimeLeX,proto3" json:"stop_time_le_x,omitempty"`
	StopTimeGeX *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop_time_ge_x,json=stopTimeGeX,proto3" json:"stop_time_ge_x,omitempty"`
}

func (x *StopTimeOrderableActionFilter) Reset() {
	*x = StopTimeOrderableActionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTimeOrderableActionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTimeOrderableActionFilter) ProtoMessage() {}

func (x *StopTimeOrderableActionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTimeOrderableActionFilter.ProtoReflect.Descriptor instead.
func (*StopTimeOrderableActionFilter) Descriptor() ([]byte, []int) {
	return file_infra_cros_karte_api_searchquery_proto_rawDescGZIP(), []int{2}
}

func (x *StopTimeOrderableActionFilter) GetStopTimeLeX() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTimeLeX
	}
	return nil
}

func (x *StopTimeOrderableActionFilter) GetStopTimeGeX() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTimeGeX
	}
	return nil
}

type ObservationCategoricalFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ActionName  string `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	MetricKind  string `protobuf:"bytes,3,opt,name=metric_kind,json=metricKind,proto3" json:"metric_kind,omitempty"`
	ValueString string `protobuf:"bytes,4,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ObservationCategoricalFilter) Reset() {
	*x = ObservationCategoricalFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationCategoricalFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationCategoricalFilter) ProtoMessage() {}

func (x *ObservationCategoricalFilter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationCategoricalFilter.ProtoReflect.Descriptor instead.
func (*ObservationCategoricalFilter) Descriptor() ([]byte, []int) {
	return file_infra_cros_karte_api_searchquery_proto_rawDescGZIP(), []int{3}
}

func (x *ObservationCategoricalFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObservationCategoricalFilter) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *ObservationCategoricalFilter) GetMetricKind() string {
	if x != nil {
		return x.MetricKind
	}
	return ""
}

func (x *ObservationCategoricalFilter) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

type ValueNumberOrderableObservationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueNumberLeX *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=value_number_le_x,json=valueNumberLeX,proto3" json:"value_number_le_x,omitempty"`
	ValueNumberGeX *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=value_number_ge_x,json=valueNumberGeX,proto3" json:"value_number_ge_x,omitempty"`
}

func (x *ValueNumberOrderableObservationFilter) Reset() {
	*x = ValueNumberOrderableObservationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueNumberOrderableObservationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueNumberOrderableObservationFilter) ProtoMessage() {}

func (x *ValueNumberOrderableObservationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_infra_cros_karte_api_searchquery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueNumberOrderableObservationFilter.ProtoReflect.Descriptor instead.
func (*ValueNumberOrderableObservationFilter) Descriptor() ([]byte, []int) {
	return file_infra_cros_karte_api_searchquery_proto_rawDescGZIP(), []int{4}
}

func (x *ValueNumberOrderableObservationFilter) GetValueNumberLeX() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueNumberLeX
	}
	return nil
}

func (x *ValueNumberOrderableObservationFilter) GetValueNumberGeX() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueNumberGeX
	}
	return nil
}

var File_infra_cros_karte_api_searchquery_proto protoreflect.FileDescriptor

var file_infra_cros_karte_api_searchquery_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6b, 0x61, 0x72,
	0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x6f, 0x73, 0x2e, 0x6b, 0x61, 0x72, 0x74, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x0b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6b, 0x61, 0x72, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x6f, 0x73, 0x2e, 0x6b, 0x61, 0x72, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6b, 0x61, 0x72, 0x74, 0x65, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x1f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x2e, 0x6b,
	0x61, 0x72, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x58, 0x12, 0x3f, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x5f, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x58, 0x22, 0x97, 0x01,
	0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xb5, 0x01, 0x0a, 0x25, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x58, 0x12, 0x45, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x5f, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x58, 0x42,
	0x1e, 0x5a, 0x1c, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x2f, 0x6b, 0x61,
	0x72, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x6b, 0x61, 0x72, 0x74, 0x65, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_cros_karte_api_searchquery_proto_rawDescOnce sync.Once
	file_infra_cros_karte_api_searchquery_proto_rawDescData = file_infra_cros_karte_api_searchquery_proto_rawDesc
)

func file_infra_cros_karte_api_searchquery_proto_rawDescGZIP() []byte {
	file_infra_cros_karte_api_searchquery_proto_rawDescOnce.Do(func() {
		file_infra_cros_karte_api_searchquery_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_cros_karte_api_searchquery_proto_rawDescData)
	})
	return file_infra_cros_karte_api_searchquery_proto_rawDescData
}

var file_infra_cros_karte_api_searchquery_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_infra_cros_karte_api_searchquery_proto_goTypes = []interface{}{
	(*SearchQuery)(nil),                           // 0: chromeos.karte.SearchQuery
	(*ActionCategoricalFilter)(nil),               // 1: chromeos.karte.ActionCategoricalFilter
	(*StopTimeOrderableActionFilter)(nil),         // 2: chromeos.karte.StopTimeOrderableActionFilter
	(*ObservationCategoricalFilter)(nil),          // 3: chromeos.karte.ObservationCategoricalFilter
	(*ValueNumberOrderableObservationFilter)(nil), // 4: chromeos.karte.ValueNumberOrderableObservationFilter
	(*timestamppb.Timestamp)(nil),                 // 5: google.protobuf.Timestamp
}
var file_infra_cros_karte_api_searchquery_proto_depIdxs = []int32{
	1, // 0: chromeos.karte.SearchQuery.action_filter:type_name -> chromeos.karte.ActionCategoricalFilter
	2, // 1: chromeos.karte.SearchQuery.stop_time_action_filter:type_name -> chromeos.karte.StopTimeOrderableActionFilter
	3, // 2: chromeos.karte.SearchQuery.observation_filter:type_name -> chromeos.karte.ObservationCategoricalFilter
	4, // 3: chromeos.karte.SearchQuery.value_number_observation_filter:type_name -> chromeos.karte.ValueNumberOrderableObservationFilter
	5, // 4: chromeos.karte.StopTimeOrderableActionFilter.stop_time_le_x:type_name -> google.protobuf.Timestamp
	5, // 5: chromeos.karte.StopTimeOrderableActionFilter.stop_time_ge_x:type_name -> google.protobuf.Timestamp
	5, // 6: chromeos.karte.ValueNumberOrderableObservationFilter.value_number_le_x:type_name -> google.protobuf.Timestamp
	5, // 7: chromeos.karte.ValueNumberOrderableObservationFilter.value_number_ge_x:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_infra_cros_karte_api_searchquery_proto_init() }
func file_infra_cros_karte_api_searchquery_proto_init() {
	if File_infra_cros_karte_api_searchquery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_cros_karte_api_searchquery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_karte_api_searchquery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCategoricalFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_karte_api_searchquery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTimeOrderableActionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_karte_api_searchquery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationCategoricalFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_cros_karte_api_searchquery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueNumberOrderableObservationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_cros_karte_api_searchquery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_cros_karte_api_searchquery_proto_goTypes,
		DependencyIndexes: file_infra_cros_karte_api_searchquery_proto_depIdxs,
		MessageInfos:      file_infra_cros_karte_api_searchquery_proto_msgTypes,
	}.Build()
	File_infra_cros_karte_api_searchquery_proto = out.File
	file_infra_cros_karte_api_searchquery_proto_rawDesc = nil
	file_infra_cros_karte_api_searchquery_proto_goTypes = nil
	file_infra_cros_karte_api_searchquery_proto_depIdxs = nil
}
