// Copyright 2021 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: infra/qscheduler/service/api/qscheduler/v1/admin.proto

package qscheduler

import (
	prpc "go.chromium.org/luci/grpc/prpc"

	context "context"

	grpc "google.golang.org/grpc"

	codes "google.golang.org/grpc/codes"

	status "google.golang.org/grpc/status"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"

	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	protos "infra/qscheduler/qslib/protos"

	reflect "reflect"

	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSchedulerPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PoolId is the unique id of this scheduler pool.
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Deprecated, calls will fail if this is specified. Instead, create a pool
	// and then modify its config with later calls.
	//
	// Deprecated: Do not use.
	Config *protos.SchedulerConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateSchedulerPoolRequest) Reset() {
	*x = CreateSchedulerPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerPoolRequest) ProtoMessage() {}

func (x *CreateSchedulerPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateSchedulerPoolRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSchedulerPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

// Deprecated: Do not use.
func (x *CreateSchedulerPoolRequest) GetConfig() *protos.SchedulerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateSchedulerPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSchedulerPoolResponse) Reset() {
	*x = CreateSchedulerPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerPoolResponse) ProtoMessage() {}

func (x *CreateSchedulerPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateSchedulerPoolResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{1}
}

type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PoolID is the id of the scheduler to create an account within.
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// AccountId is the unique id of the account (within the given pool).
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Config is the quota account config for the quota account to create.
	Config *protos.AccountConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAccountRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *CreateAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAccountRequest) GetConfig() *protos.AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAccountResponse) Reset() {
	*x = CreateAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountResponse) ProtoMessage() {}

func (x *CreateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{3}
}

type WipeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PoolID is the id of the scheduler to wipe.
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *WipeRequest) Reset() {
	*x = WipeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipeRequest) ProtoMessage() {}

func (x *WipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipeRequest.ProtoReflect.Descriptor instead.
func (*WipeRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{4}
}

func (x *WipeRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type WipeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WipeResponse) Reset() {
	*x = WipeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipeResponse) ProtoMessage() {}

func (x *WipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipeResponse.ProtoReflect.Descriptor instead.
func (*WipeResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{5}
}

type ModAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId           string                 `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	AccountId        string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ChargeRate       []float32              `protobuf:"fixed32,3,rep,packed,name=charge_rate,json=chargeRate,proto3" json:"charge_rate,omitempty"`
	MaxChargeSeconds *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=max_charge_seconds,json=maxChargeSeconds,proto3" json:"max_charge_seconds,omitempty"`
	MaxFanout        *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=max_fanout,json=maxFanout,proto3" json:"max_fanout,omitempty"`
	DisableFreeTasks *wrapperspb.BoolValue  `protobuf:"bytes,6,opt,name=disable_free_tasks,json=disableFreeTasks,proto3" json:"disable_free_tasks,omitempty"`
	// If true, reset this account's balance to 0.
	ResetBalance       bool                    `protobuf:"varint,7,opt,name=reset_balance,json=resetBalance,proto3" json:"reset_balance,omitempty"`
	Description        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	PerLabelTaskLimits map[string]int32        `protobuf:"bytes,9,rep,name=per_label_task_limits,json=perLabelTaskLimits,proto3" json:"per_label_task_limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ModAccountRequest) Reset() {
	*x = ModAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModAccountRequest) ProtoMessage() {}

func (x *ModAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModAccountRequest.ProtoReflect.Descriptor instead.
func (*ModAccountRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{6}
}

func (x *ModAccountRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ModAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ModAccountRequest) GetChargeRate() []float32 {
	if x != nil {
		return x.ChargeRate
	}
	return nil
}

func (x *ModAccountRequest) GetMaxChargeSeconds() *wrapperspb.FloatValue {
	if x != nil {
		return x.MaxChargeSeconds
	}
	return nil
}

func (x *ModAccountRequest) GetMaxFanout() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxFanout
	}
	return nil
}

func (x *ModAccountRequest) GetDisableFreeTasks() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableFreeTasks
	}
	return nil
}

func (x *ModAccountRequest) GetResetBalance() bool {
	if x != nil {
		return x.ResetBalance
	}
	return false
}

func (x *ModAccountRequest) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ModAccountRequest) GetPerLabelTaskLimits() map[string]int32 {
	if x != nil {
		return x.PerLabelTaskLimits
	}
	return nil
}

type ModAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModAccountResponse) Reset() {
	*x = ModAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModAccountResponse) ProtoMessage() {}

func (x *ModAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModAccountResponse.ProtoReflect.Descriptor instead.
func (*ModAccountResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{7}
}

type ModSchedulerPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId               string                 `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DisablePreemption    *wrapperspb.BoolValue  `protobuf:"bytes,2,opt,name=disable_preemption,json=disablePreemption,proto3" json:"disable_preemption,omitempty"`
	BotExpirationSeconds *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=bot_expiration_seconds,json=botExpirationSeconds,proto3" json:"bot_expiration_seconds,omitempty"`
}

func (x *ModSchedulerPoolRequest) Reset() {
	*x = ModSchedulerPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModSchedulerPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModSchedulerPoolRequest) ProtoMessage() {}

func (x *ModSchedulerPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModSchedulerPoolRequest.ProtoReflect.Descriptor instead.
func (*ModSchedulerPoolRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ModSchedulerPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ModSchedulerPoolRequest) GetDisablePreemption() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisablePreemption
	}
	return nil
}

func (x *ModSchedulerPoolRequest) GetBotExpirationSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.BotExpirationSeconds
	}
	return nil
}

type ModSchedulerPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModSchedulerPoolResponse) Reset() {
	*x = ModSchedulerPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModSchedulerPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModSchedulerPoolResponse) ProtoMessage() {}

func (x *ModSchedulerPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModSchedulerPoolResponse.ProtoReflect.Descriptor instead.
func (*ModSchedulerPoolResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{9}
}

type DeleteAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId    string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAccountRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *DeleteAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DeleteAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAccountResponse) Reset() {
	*x = DeleteAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountResponse) ProtoMessage() {}

func (x *DeleteAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{11}
}

type DeleteSchedulerPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *DeleteSchedulerPoolRequest) Reset() {
	*x = DeleteSchedulerPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedulerPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulerPoolRequest) ProtoMessage() {}

func (x *DeleteSchedulerPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulerPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteSchedulerPoolRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSchedulerPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type DeleteSchedulerPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSchedulerPoolResponse) Reset() {
	*x = DeleteSchedulerPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchedulerPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchedulerPoolResponse) ProtoMessage() {}

func (x *DeleteSchedulerPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchedulerPoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteSchedulerPoolResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{13}
}

type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PoolID is the id of the scheduler to list accounts from.
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{14}
}

func (x *ListAccountsRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts map[string]*protos.AccountConfig `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{15}
}

func (x *ListAccountsResponse) GetAccounts() map[string]*protos.AccountConfig {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type InspectPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *InspectPoolRequest) Reset() {
	*x = InspectPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoolRequest) ProtoMessage() {}

func (x *InspectPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoolRequest.ProtoReflect.Descriptor instead.
func (*InspectPoolRequest) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{16}
}

func (x *InspectPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

type InspectPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NumWaitingTasks is the number of waiting tasks.
	NumWaitingTasks int32 `protobuf:"varint,1,opt,name=num_waiting_tasks,json=numWaitingTasks,proto3" json:"num_waiting_tasks,omitempty"`
	// NumRunningTasks is the number of running tasks.
	NumRunningTasks int32 `protobuf:"varint,2,opt,name=num_running_tasks,json=numRunningTasks,proto3" json:"num_running_tasks,omitempty"`
	// IdleBots is the number of idle bots.
	NumIdleBots int32 `protobuf:"varint,3,opt,name=num_idle_bots,json=numIdleBots,proto3" json:"num_idle_bots,omitempty"`
	// AccountBalances is the set of balances for all accounts.
	AccountBalances map[string]*protos.SchedulerState_Balance `protobuf:"bytes,4,rep,name=account_balances,json=accountBalances,proto3" json:"account_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// RunningTasks is a description of the running tasks according to
	// quotascheduler.
	RunningTasks []*InspectPoolResponse_RunningTask `protobuf:"bytes,5,rep,name=running_tasks,json=runningTasks,proto3" json:"running_tasks,omitempty"`
	// WaitingTasks is a description of the tasks that are waiting
	// according to quotascheduler.
	WaitingTasks []*InspectPoolResponse_WaitingTask `protobuf:"bytes,6,rep,name=waiting_tasks,json=waitingTasks,proto3" json:"waiting_tasks,omitempty"`
	// IdleBots is a description of the idle bots according to quotascheduler.
	IdleBots []*InspectPoolResponse_IdleBot `protobuf:"bytes,7,rep,name=idle_bots,json=idleBots,proto3" json:"idle_bots,omitempty"`
	// AccountConfigs is a description of the account configs.
	AccountConfigs map[string]*protos.AccountConfig `protobuf:"bytes,9,rep,name=account_configs,json=accountConfigs,proto3" json:"account_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DisablePreemption indicates whether preemption is disabled.
	DisablePreemption bool `protobuf:"varint,10,opt,name=disable_preemption,json=disablePreemption,proto3" json:"disable_preemption,omitempty"`
}

func (x *InspectPoolResponse) Reset() {
	*x = InspectPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoolResponse) ProtoMessage() {}

func (x *InspectPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoolResponse.ProtoReflect.Descriptor instead.
func (*InspectPoolResponse) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{17}
}

func (x *InspectPoolResponse) GetNumWaitingTasks() int32 {
	if x != nil {
		return x.NumWaitingTasks
	}
	return 0
}

func (x *InspectPoolResponse) GetNumRunningTasks() int32 {
	if x != nil {
		return x.NumRunningTasks
	}
	return 0
}

func (x *InspectPoolResponse) GetNumIdleBots() int32 {
	if x != nil {
		return x.NumIdleBots
	}
	return 0
}

func (x *InspectPoolResponse) GetAccountBalances() map[string]*protos.SchedulerState_Balance {
	if x != nil {
		return x.AccountBalances
	}
	return nil
}

func (x *InspectPoolResponse) GetRunningTasks() []*InspectPoolResponse_RunningTask {
	if x != nil {
		return x.RunningTasks
	}
	return nil
}

func (x *InspectPoolResponse) GetWaitingTasks() []*InspectPoolResponse_WaitingTask {
	if x != nil {
		return x.WaitingTasks
	}
	return nil
}

func (x *InspectPoolResponse) GetIdleBots() []*InspectPoolResponse_IdleBot {
	if x != nil {
		return x.IdleBots
	}
	return nil
}

func (x *InspectPoolResponse) GetAccountConfigs() map[string]*protos.AccountConfig {
	if x != nil {
		return x.AccountConfigs
	}
	return nil
}

func (x *InspectPoolResponse) GetDisablePreemption() bool {
	if x != nil {
		return x.DisablePreemption
	}
	return false
}

type InspectPoolResponse_RunningTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the id of the request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// BotId is the id of the bot running the request.
	BotId string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Priority is the current quotascheduler priority that the task is
	// running at.
	Priority int32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// AccountID is the account id of the request.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Age in seconds of the task, measured from the last time at which
	// the running state was confirmed.
	AgeSeconds int32 `protobuf:"varint,5,opt,name=age_seconds,json=ageSeconds,proto3" json:"age_seconds,omitempty"`
}

func (x *InspectPoolResponse_RunningTask) Reset() {
	*x = InspectPoolResponse_RunningTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoolResponse_RunningTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoolResponse_RunningTask) ProtoMessage() {}

func (x *InspectPoolResponse_RunningTask) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoolResponse_RunningTask.ProtoReflect.Descriptor instead.
func (*InspectPoolResponse_RunningTask) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{17, 1}
}

func (x *InspectPoolResponse_RunningTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectPoolResponse_RunningTask) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *InspectPoolResponse_RunningTask) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *InspectPoolResponse_RunningTask) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InspectPoolResponse_RunningTask) GetAgeSeconds() int32 {
	if x != nil {
		return x.AgeSeconds
	}
	return 0
}

type InspectPoolResponse_WaitingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the id of the request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// AccountID is the account id of the request.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Age in seconds of waiting task, measured from the last time at
	// which the waiting state was confirmed.
	AgeSeconds int32 `protobuf:"varint,3,opt,name=age_seconds,json=ageSeconds,proto3" json:"age_seconds,omitempty"`
}

func (x *InspectPoolResponse_WaitingTask) Reset() {
	*x = InspectPoolResponse_WaitingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoolResponse_WaitingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoolResponse_WaitingTask) ProtoMessage() {}

func (x *InspectPoolResponse_WaitingTask) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoolResponse_WaitingTask.ProtoReflect.Descriptor instead.
func (*InspectPoolResponse_WaitingTask) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{17, 2}
}

func (x *InspectPoolResponse_WaitingTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectPoolResponse_WaitingTask) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *InspectPoolResponse_WaitingTask) GetAgeSeconds() int32 {
	if x != nil {
		return x.AgeSeconds
	}
	return 0
}

type InspectPoolResponse_IdleBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the id of the bot.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Dimensions are the dimensions of the bot.
	Dimensions []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Age in seconds of bot, measured from the last time at which the
	// idle state was confirmed.
	AgeSeconds int32 `protobuf:"varint,3,opt,name=age_seconds,json=ageSeconds,proto3" json:"age_seconds,omitempty"`
}

func (x *InspectPoolResponse_IdleBot) Reset() {
	*x = InspectPoolResponse_IdleBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPoolResponse_IdleBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPoolResponse_IdleBot) ProtoMessage() {}

func (x *InspectPoolResponse_IdleBot) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPoolResponse_IdleBot.ProtoReflect.Descriptor instead.
func (*InspectPoolResponse_IdleBot) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP(), []int{17, 3}
}

func (x *InspectPoolResponse_IdleBot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InspectPoolResponse_IdleBot) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *InspectPoolResponse_IdleBot) GetAgeSeconds() int32 {
	if x != nil {
		return x.AgeSeconds
	}
	return 0
}

var File_infra_qscheduler_service_api_qscheduler_v1_admin_proto protoreflect.FileDescriptor

var file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDesc = []byte{
	0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x71, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x71, 0x73, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x71, 0x73, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x0a, 0x0b, 0x57, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x57, 0x69, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x15, 0x70,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x71, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x12, 0x70, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12,
	0x4d, 0x6f, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x62, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x22, 0xb6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x71, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x12, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0xfb, 0x08, 0x0a, 0x13, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x6c, 0x65, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x50, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x42, 0x6f, 0x74, 0x52, 0x08, 0x69,
	0x64, 0x6c, 0x65, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x62, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x90, 0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x5d, 0x0a, 0x0b, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x07, 0x49, 0x64,
	0x6c, 0x65, 0x42, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x58, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x32, 0xf4, 0x04, 0x0a, 0x0f, 0x51, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x26, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x71, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x57, 0x69, 0x70, 0x65,
	0x12, 0x17, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x69,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x71, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x6f,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x71, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x2e, 0x71,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb3, 0x01,
	0x0a, 0x0e, 0x51, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x1f, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1e, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x71, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescOnce sync.Once
	file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescData = file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDesc
)

func file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescGZIP() []byte {
	file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescOnce.Do(func() {
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescData)
	})
	return file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDescData
}

var file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_goTypes = []interface{}{
	(*CreateSchedulerPoolRequest)(nil),      // 0: qscheduler.CreateSchedulerPoolRequest
	(*CreateSchedulerPoolResponse)(nil),     // 1: qscheduler.CreateSchedulerPoolResponse
	(*CreateAccountRequest)(nil),            // 2: qscheduler.CreateAccountRequest
	(*CreateAccountResponse)(nil),           // 3: qscheduler.CreateAccountResponse
	(*WipeRequest)(nil),                     // 4: qscheduler.WipeRequest
	(*WipeResponse)(nil),                    // 5: qscheduler.WipeResponse
	(*ModAccountRequest)(nil),               // 6: qscheduler.ModAccountRequest
	(*ModAccountResponse)(nil),              // 7: qscheduler.ModAccountResponse
	(*ModSchedulerPoolRequest)(nil),         // 8: qscheduler.ModSchedulerPoolRequest
	(*ModSchedulerPoolResponse)(nil),        // 9: qscheduler.ModSchedulerPoolResponse
	(*DeleteAccountRequest)(nil),            // 10: qscheduler.DeleteAccountRequest
	(*DeleteAccountResponse)(nil),           // 11: qscheduler.DeleteAccountResponse
	(*DeleteSchedulerPoolRequest)(nil),      // 12: qscheduler.DeleteSchedulerPoolRequest
	(*DeleteSchedulerPoolResponse)(nil),     // 13: qscheduler.DeleteSchedulerPoolResponse
	(*ListAccountsRequest)(nil),             // 14: qscheduler.ListAccountsRequest
	(*ListAccountsResponse)(nil),            // 15: qscheduler.ListAccountsResponse
	(*InspectPoolRequest)(nil),              // 16: qscheduler.InspectPoolRequest
	(*InspectPoolResponse)(nil),             // 17: qscheduler.InspectPoolResponse
	nil,                                     // 18: qscheduler.ModAccountRequest.PerLabelTaskLimitsEntry
	nil,                                     // 19: qscheduler.ListAccountsResponse.AccountsEntry
	nil,                                     // 20: qscheduler.InspectPoolResponse.AccountBalancesEntry
	(*InspectPoolResponse_RunningTask)(nil), // 21: qscheduler.InspectPoolResponse.RunningTask
	(*InspectPoolResponse_WaitingTask)(nil), // 22: qscheduler.InspectPoolResponse.WaitingTask
	(*InspectPoolResponse_IdleBot)(nil),     // 23: qscheduler.InspectPoolResponse.IdleBot
	nil,                                     // 24: qscheduler.InspectPoolResponse.AccountConfigsEntry
	(*protos.SchedulerConfig)(nil),          // 25: protos.SchedulerConfig
	(*protos.AccountConfig)(nil),            // 26: protos.AccountConfig
	(*wrapperspb.FloatValue)(nil),           // 27: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),           // 28: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),            // 29: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),          // 30: google.protobuf.StringValue
	(*protos.SchedulerState_Balance)(nil),   // 31: protos.SchedulerState.Balance
}
var file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_depIdxs = []int32{
	25, // 0: qscheduler.CreateSchedulerPoolRequest.config:type_name -> protos.SchedulerConfig
	26, // 1: qscheduler.CreateAccountRequest.config:type_name -> protos.AccountConfig
	27, // 2: qscheduler.ModAccountRequest.max_charge_seconds:type_name -> google.protobuf.FloatValue
	28, // 3: qscheduler.ModAccountRequest.max_fanout:type_name -> google.protobuf.Int32Value
	29, // 4: qscheduler.ModAccountRequest.disable_free_tasks:type_name -> google.protobuf.BoolValue
	30, // 5: qscheduler.ModAccountRequest.description:type_name -> google.protobuf.StringValue
	18, // 6: qscheduler.ModAccountRequest.per_label_task_limits:type_name -> qscheduler.ModAccountRequest.PerLabelTaskLimitsEntry
	29, // 7: qscheduler.ModSchedulerPoolRequest.disable_preemption:type_name -> google.protobuf.BoolValue
	28, // 8: qscheduler.ModSchedulerPoolRequest.bot_expiration_seconds:type_name -> google.protobuf.Int32Value
	19, // 9: qscheduler.ListAccountsResponse.accounts:type_name -> qscheduler.ListAccountsResponse.AccountsEntry
	20, // 10: qscheduler.InspectPoolResponse.account_balances:type_name -> qscheduler.InspectPoolResponse.AccountBalancesEntry
	21, // 11: qscheduler.InspectPoolResponse.running_tasks:type_name -> qscheduler.InspectPoolResponse.RunningTask
	22, // 12: qscheduler.InspectPoolResponse.waiting_tasks:type_name -> qscheduler.InspectPoolResponse.WaitingTask
	23, // 13: qscheduler.InspectPoolResponse.idle_bots:type_name -> qscheduler.InspectPoolResponse.IdleBot
	24, // 14: qscheduler.InspectPoolResponse.account_configs:type_name -> qscheduler.InspectPoolResponse.AccountConfigsEntry
	26, // 15: qscheduler.ListAccountsResponse.AccountsEntry.value:type_name -> protos.AccountConfig
	31, // 16: qscheduler.InspectPoolResponse.AccountBalancesEntry.value:type_name -> protos.SchedulerState.Balance
	26, // 17: qscheduler.InspectPoolResponse.AccountConfigsEntry.value:type_name -> protos.AccountConfig
	0,  // 18: qscheduler.QSchedulerAdmin.CreateSchedulerPool:input_type -> qscheduler.CreateSchedulerPoolRequest
	2,  // 19: qscheduler.QSchedulerAdmin.CreateAccount:input_type -> qscheduler.CreateAccountRequest
	4,  // 20: qscheduler.QSchedulerAdmin.Wipe:input_type -> qscheduler.WipeRequest
	6,  // 21: qscheduler.QSchedulerAdmin.ModAccount:input_type -> qscheduler.ModAccountRequest
	8,  // 22: qscheduler.QSchedulerAdmin.ModSchedulerPool:input_type -> qscheduler.ModSchedulerPoolRequest
	10, // 23: qscheduler.QSchedulerAdmin.DeleteAccount:input_type -> qscheduler.DeleteAccountRequest
	12, // 24: qscheduler.QSchedulerAdmin.DeleteSchedulerPool:input_type -> qscheduler.DeleteSchedulerPoolRequest
	14, // 25: qscheduler.QSchedulerView.ListAccounts:input_type -> qscheduler.ListAccountsRequest
	16, // 26: qscheduler.QSchedulerView.InspectPool:input_type -> qscheduler.InspectPoolRequest
	1,  // 27: qscheduler.QSchedulerAdmin.CreateSchedulerPool:output_type -> qscheduler.CreateSchedulerPoolResponse
	3,  // 28: qscheduler.QSchedulerAdmin.CreateAccount:output_type -> qscheduler.CreateAccountResponse
	5,  // 29: qscheduler.QSchedulerAdmin.Wipe:output_type -> qscheduler.WipeResponse
	7,  // 30: qscheduler.QSchedulerAdmin.ModAccount:output_type -> qscheduler.ModAccountResponse
	9,  // 31: qscheduler.QSchedulerAdmin.ModSchedulerPool:output_type -> qscheduler.ModSchedulerPoolResponse
	11, // 32: qscheduler.QSchedulerAdmin.DeleteAccount:output_type -> qscheduler.DeleteAccountResponse
	13, // 33: qscheduler.QSchedulerAdmin.DeleteSchedulerPool:output_type -> qscheduler.DeleteSchedulerPoolResponse
	15, // 34: qscheduler.QSchedulerView.ListAccounts:output_type -> qscheduler.ListAccountsResponse
	17, // 35: qscheduler.QSchedulerView.InspectPool:output_type -> qscheduler.InspectPoolResponse
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_init() }
func file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_init() {
	if File_infra_qscheduler_service_api_qscheduler_v1_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WipeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WipeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModSchedulerPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModSchedulerPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedulerPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSchedulerPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPoolResponse_RunningTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPoolResponse_WaitingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPoolResponse_IdleBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_goTypes,
		DependencyIndexes: file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_depIdxs,
		MessageInfos:      file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_msgTypes,
	}.Build()
	File_infra_qscheduler_service_api_qscheduler_v1_admin_proto = out.File
	file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_rawDesc = nil
	file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_goTypes = nil
	file_infra_qscheduler_service_api_qscheduler_v1_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QSchedulerAdminClient is the client API for QSchedulerAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QSchedulerAdminClient interface {
	// CreateSchedulerPool creates a scheduler, with the given configuration
	// options.
	CreateSchedulerPool(ctx context.Context, in *CreateSchedulerPoolRequest, opts ...grpc.CallOption) (*CreateSchedulerPoolResponse, error)
	// CreateAccount creates a quota account within a scheduler, with the
	// given configuration options.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Wipe wipes out the state of a scheduler.
	//
	// This endpoint is intended for debug purposes, and may go away at any
	// point. May have significant correctness or performance impact on
	// scheduler.
	Wipe(ctx context.Context, in *WipeRequest, opts ...grpc.CallOption) (*WipeResponse, error)
	// ModAccount modifies an account.
	ModAccount(ctx context.Context, in *ModAccountRequest, opts ...grpc.CallOption) (*ModAccountResponse, error)
	// ModSchedulerPool modifies a scheduler.
	ModSchedulerPool(ctx context.Context, in *ModSchedulerPoolRequest, opts ...grpc.CallOption) (*ModSchedulerPoolResponse, error)
	// DeleteAccount deletes an account.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// DeleteSchedulerPool deletes a scheduler.
	DeleteSchedulerPool(ctx context.Context, in *DeleteSchedulerPoolRequest, opts ...grpc.CallOption) (*DeleteSchedulerPoolResponse, error)
}
type qSchedulerAdminPRPCClient struct {
	client *prpc.Client
}

func NewQSchedulerAdminPRPCClient(client *prpc.Client) QSchedulerAdminClient {
	return &qSchedulerAdminPRPCClient{client}
}

func (c *qSchedulerAdminPRPCClient) CreateSchedulerPool(ctx context.Context, in *CreateSchedulerPoolRequest, opts ...grpc.CallOption) (*CreateSchedulerPoolResponse, error) {
	out := new(CreateSchedulerPoolResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "CreateSchedulerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminPRPCClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminPRPCClient) Wipe(ctx context.Context, in *WipeRequest, opts ...grpc.CallOption) (*WipeResponse, error) {
	out := new(WipeResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "Wipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminPRPCClient) ModAccount(ctx context.Context, in *ModAccountRequest, opts ...grpc.CallOption) (*ModAccountResponse, error) {
	out := new(ModAccountResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "ModAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminPRPCClient) ModSchedulerPool(ctx context.Context, in *ModSchedulerPoolRequest, opts ...grpc.CallOption) (*ModSchedulerPoolResponse, error) {
	out := new(ModSchedulerPoolResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "ModSchedulerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminPRPCClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminPRPCClient) DeleteSchedulerPool(ctx context.Context, in *DeleteSchedulerPoolRequest, opts ...grpc.CallOption) (*DeleteSchedulerPoolResponse, error) {
	out := new(DeleteSchedulerPoolResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerAdmin", "DeleteSchedulerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type qSchedulerAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewQSchedulerAdminClient(cc grpc.ClientConnInterface) QSchedulerAdminClient {
	return &qSchedulerAdminClient{cc}
}

func (c *qSchedulerAdminClient) CreateSchedulerPool(ctx context.Context, in *CreateSchedulerPoolRequest, opts ...grpc.CallOption) (*CreateSchedulerPoolResponse, error) {
	out := new(CreateSchedulerPoolResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/CreateSchedulerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminClient) Wipe(ctx context.Context, in *WipeRequest, opts ...grpc.CallOption) (*WipeResponse, error) {
	out := new(WipeResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/Wipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminClient) ModAccount(ctx context.Context, in *ModAccountRequest, opts ...grpc.CallOption) (*ModAccountResponse, error) {
	out := new(ModAccountResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/ModAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminClient) ModSchedulerPool(ctx context.Context, in *ModSchedulerPoolRequest, opts ...grpc.CallOption) (*ModSchedulerPoolResponse, error) {
	out := new(ModSchedulerPoolResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/ModSchedulerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerAdminClient) DeleteSchedulerPool(ctx context.Context, in *DeleteSchedulerPoolRequest, opts ...grpc.CallOption) (*DeleteSchedulerPoolResponse, error) {
	out := new(DeleteSchedulerPoolResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerAdmin/DeleteSchedulerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QSchedulerAdminServer is the server API for QSchedulerAdmin service.
type QSchedulerAdminServer interface {
	// CreateSchedulerPool creates a scheduler, with the given configuration
	// options.
	CreateSchedulerPool(context.Context, *CreateSchedulerPoolRequest) (*CreateSchedulerPoolResponse, error)
	// CreateAccount creates a quota account within a scheduler, with the
	// given configuration options.
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Wipe wipes out the state of a scheduler.
	//
	// This endpoint is intended for debug purposes, and may go away at any
	// point. May have significant correctness or performance impact on
	// scheduler.
	Wipe(context.Context, *WipeRequest) (*WipeResponse, error)
	// ModAccount modifies an account.
	ModAccount(context.Context, *ModAccountRequest) (*ModAccountResponse, error)
	// ModSchedulerPool modifies a scheduler.
	ModSchedulerPool(context.Context, *ModSchedulerPoolRequest) (*ModSchedulerPoolResponse, error)
	// DeleteAccount deletes an account.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// DeleteSchedulerPool deletes a scheduler.
	DeleteSchedulerPool(context.Context, *DeleteSchedulerPoolRequest) (*DeleteSchedulerPoolResponse, error)
}

// UnimplementedQSchedulerAdminServer can be embedded to have forward compatible implementations.
type UnimplementedQSchedulerAdminServer struct {
}

func (*UnimplementedQSchedulerAdminServer) CreateSchedulerPool(context.Context, *CreateSchedulerPoolRequest) (*CreateSchedulerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedulerPool not implemented")
}
func (*UnimplementedQSchedulerAdminServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedQSchedulerAdminServer) Wipe(context.Context, *WipeRequest) (*WipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wipe not implemented")
}
func (*UnimplementedQSchedulerAdminServer) ModAccount(context.Context, *ModAccountRequest) (*ModAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModAccount not implemented")
}
func (*UnimplementedQSchedulerAdminServer) ModSchedulerPool(context.Context, *ModSchedulerPoolRequest) (*ModSchedulerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModSchedulerPool not implemented")
}
func (*UnimplementedQSchedulerAdminServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedQSchedulerAdminServer) DeleteSchedulerPool(context.Context, *DeleteSchedulerPoolRequest) (*DeleteSchedulerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchedulerPool not implemented")
}

func RegisterQSchedulerAdminServer(s prpc.Registrar, srv QSchedulerAdminServer) {
	s.RegisterService(&_QSchedulerAdmin_serviceDesc, srv)
}

func _QSchedulerAdmin_CreateSchedulerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).CreateSchedulerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/CreateSchedulerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).CreateSchedulerPool(ctx, req.(*CreateSchedulerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerAdmin_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerAdmin_Wipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).Wipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/Wipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).Wipe(ctx, req.(*WipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerAdmin_ModAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).ModAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/ModAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).ModAccount(ctx, req.(*ModAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerAdmin_ModSchedulerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModSchedulerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).ModSchedulerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/ModSchedulerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).ModSchedulerPool(ctx, req.(*ModSchedulerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerAdmin_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerAdmin_DeleteSchedulerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchedulerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerAdminServer).DeleteSchedulerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerAdmin/DeleteSchedulerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerAdminServer).DeleteSchedulerPool(ctx, req.(*DeleteSchedulerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QSchedulerAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qscheduler.QSchedulerAdmin",
	HandlerType: (*QSchedulerAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedulerPool",
			Handler:    _QSchedulerAdmin_CreateSchedulerPool_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _QSchedulerAdmin_CreateAccount_Handler,
		},
		{
			MethodName: "Wipe",
			Handler:    _QSchedulerAdmin_Wipe_Handler,
		},
		{
			MethodName: "ModAccount",
			Handler:    _QSchedulerAdmin_ModAccount_Handler,
		},
		{
			MethodName: "ModSchedulerPool",
			Handler:    _QSchedulerAdmin_ModSchedulerPool_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _QSchedulerAdmin_DeleteAccount_Handler,
		},
		{
			MethodName: "DeleteSchedulerPool",
			Handler:    _QSchedulerAdmin_DeleteSchedulerPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/qscheduler/service/api/qscheduler/v1/admin.proto",
}

// QSchedulerViewClient is the client API for QSchedulerView service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QSchedulerViewClient interface {
	// ListAccounts returns the set of accounts for a given scheduler.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// InspectPool returns a description of the state of a scheduler, for debugging
	// or diagnostic purposes.
	InspectPool(ctx context.Context, in *InspectPoolRequest, opts ...grpc.CallOption) (*InspectPoolResponse, error)
}
type qSchedulerViewPRPCClient struct {
	client *prpc.Client
}

func NewQSchedulerViewPRPCClient(client *prpc.Client) QSchedulerViewClient {
	return &qSchedulerViewPRPCClient{client}
}

func (c *qSchedulerViewPRPCClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerView", "ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerViewPRPCClient) InspectPool(ctx context.Context, in *InspectPoolRequest, opts ...grpc.CallOption) (*InspectPoolResponse, error) {
	out := new(InspectPoolResponse)
	err := c.client.Call(ctx, "qscheduler.QSchedulerView", "InspectPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type qSchedulerViewClient struct {
	cc grpc.ClientConnInterface
}

func NewQSchedulerViewClient(cc grpc.ClientConnInterface) QSchedulerViewClient {
	return &qSchedulerViewClient{cc}
}

func (c *qSchedulerViewClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerView/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSchedulerViewClient) InspectPool(ctx context.Context, in *InspectPoolRequest, opts ...grpc.CallOption) (*InspectPoolResponse, error) {
	out := new(InspectPoolResponse)
	err := c.cc.Invoke(ctx, "/qscheduler.QSchedulerView/InspectPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QSchedulerViewServer is the server API for QSchedulerView service.
type QSchedulerViewServer interface {
	// ListAccounts returns the set of accounts for a given scheduler.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// InspectPool returns a description of the state of a scheduler, for debugging
	// or diagnostic purposes.
	InspectPool(context.Context, *InspectPoolRequest) (*InspectPoolResponse, error)
}

// UnimplementedQSchedulerViewServer can be embedded to have forward compatible implementations.
type UnimplementedQSchedulerViewServer struct {
}

func (*UnimplementedQSchedulerViewServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedQSchedulerViewServer) InspectPool(context.Context, *InspectPoolRequest) (*InspectPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectPool not implemented")
}

func RegisterQSchedulerViewServer(s prpc.Registrar, srv QSchedulerViewServer) {
	s.RegisterService(&_QSchedulerView_serviceDesc, srv)
}

func _QSchedulerView_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerViewServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerView/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerViewServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSchedulerView_InspectPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSchedulerViewServer).InspectPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qscheduler.QSchedulerView/InspectPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSchedulerViewServer).InspectPool(ctx, req.(*InspectPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QSchedulerView_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qscheduler.QSchedulerView",
	HandlerType: (*QSchedulerViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _QSchedulerView_ListAccounts_Handler,
		},
		{
			MethodName: "InspectPool",
			Handler:    _QSchedulerView_InspectPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/qscheduler/service/api/qscheduler/v1/admin.proto",
}
