// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package protos;

// SchedulerConfig represents configuration information about the behavior of
// accounts for this quota scheduler pool.
message SchedulerConfig {
  // Configuration for a given account, keyed by account id.
  map<string, AccountConfig> account_configs = 1;

  // If set, scheduler will never preempt running tasks.
  bool disable_preemption = 2;

  // Labels is a list of swarming dimensions in "key:value" form. This corresponds
  // to swarming.ExternalSchedulerConfig.dimensionsions; it is the minimal set
  // of dimensions for tasks or bots that will use this scheduler.
  repeated string labels = 3;
}

// AccountConfig represents per-quota-account configuration information, such
// as the recharge parameters. This does not represent anything about the
// current state of an account.
message AccountConfig {
  // ChargeRate is the rates (per second) at which per-priority accounts grow.
  //
  // Conceptually this is the time-averaged number of workers that this account
  // may use, at each priority level.
  repeated float charge_rate = 1;

  // MaxChargeSeconds is the maximum amount of time over which this account can
  // accumulate quota before hitting its cap.
  //
  // Conceptually this sets the time window over which the time averaged
  // utilization by this account is measured. Very bursty clients will need to
  // use a wider window, whereas very consistent clients will use a narrow one.
  float max_charge_seconds = 2;

  // MaxFanout is the maximum number of concurrent paid jobs that this account
  // will pay for (0 = no limit).
  //
  // Additional jobs beyond this may run if there is idle capacity, but they
  // will run in the FreeBucket priority level.
  int32 max_fanout = 3;
}
