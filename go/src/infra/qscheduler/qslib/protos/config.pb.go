// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: infra/qscheduler/qslib/protos/config.proto

package protos

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SchedulerConfig represents configuration information about the behavior of
// accounts for this quota scheduler pool.
type SchedulerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for a given account, keyed by account id.
	AccountConfigs map[string]*AccountConfig `protobuf:"bytes,1,rep,name=account_configs,json=accountConfigs,proto3" json:"account_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If set, scheduler will never preempt running tasks.
	DisablePreemption bool `protobuf:"varint,2,opt,name=disable_preemption,json=disablePreemption,proto3" json:"disable_preemption,omitempty"`
	// BotExpiration is the duration after which a bot will no longer be
	// considered idle, if the scheduler doesn't receive any assignment requests
	// for it.
	//
	// If unspecified, defaults to 300 seconds.
	BotExpiration *durationpb.Duration `protobuf:"bytes,4,opt,name=bot_expiration,json=botExpiration,proto3" json:"bot_expiration,omitempty"`
}

func (x *SchedulerConfig) Reset() {
	*x = SchedulerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_qslib_protos_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerConfig) ProtoMessage() {}

func (x *SchedulerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_qslib_protos_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerConfig.ProtoReflect.Descriptor instead.
func (*SchedulerConfig) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_qslib_protos_config_proto_rawDescGZIP(), []int{0}
}

func (x *SchedulerConfig) GetAccountConfigs() map[string]*AccountConfig {
	if x != nil {
		return x.AccountConfigs
	}
	return nil
}

func (x *SchedulerConfig) GetDisablePreemption() bool {
	if x != nil {
		return x.DisablePreemption
	}
	return false
}

func (x *SchedulerConfig) GetBotExpiration() *durationpb.Duration {
	if x != nil {
		return x.BotExpiration
	}
	return nil
}

// AccountConfig represents per-quota-account configuration information, such
// as the recharge parameters. This does not represent anything about the
// current state of an account.
type AccountConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChargeRate is the rates (per second) at which per-priority accounts grow.
	//
	// Conceptually this is the time-averaged number of workers that this account
	// may use, at each priority level.
	ChargeRate []float32 `protobuf:"fixed32,1,rep,packed,name=charge_rate,json=chargeRate,proto3" json:"charge_rate,omitempty"`
	// MaxChargeSeconds is the maximum amount of time over which this account can
	// accumulate quota before hitting its cap.
	//
	// Conceptually this sets the time window over which the time averaged
	// utilization by this account is measured. Very bursty clients will need to
	// use a wider window, whereas very consistent clients will use a narrow one.
	MaxChargeSeconds float32 `protobuf:"fixed32,2,opt,name=max_charge_seconds,json=maxChargeSeconds,proto3" json:"max_charge_seconds,omitempty"`
	// MaxFanout is the maximum number of concurrent paid jobs for a single
	// provisionable label that this account will pay for (0 = no limit).
	//
	// Additional jobs beyond this may run if there is idle capacity, but they
	// will run in the FreeBucket priority level (except if DisableFreeTasks
	// is true, in which case they will not run).
	MaxFanout int32 `protobuf:"varint,3,opt,name=max_fanout,json=maxFanout,proto3" json:"max_fanout,omitempty"`
	// If DisableFreeTasks is true, then jobs for this account will not start
	// running if they would be run at FreeBucket priority.
	DisableFreeTasks bool `protobuf:"varint,4,opt,name=disable_free_tasks,json=disableFreeTasks,proto3" json:"disable_free_tasks,omitempty"`
	// Human readable description of account's intended purpose.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// PerLabelTaskLimits allows for extra limits to be enforced for any given
	// label, e.g. setting label-model:2 ensures that a maximum of two concurrent
	// jobs per model can run under this account.
	PerLabelTaskLimits map[string]int32 `protobuf:"bytes,6,rep,name=per_label_task_limits,json=perLabelTaskLimits,proto3" json:"per_label_task_limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AccountConfig) Reset() {
	*x = AccountConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_qscheduler_qslib_protos_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountConfig) ProtoMessage() {}

func (x *AccountConfig) ProtoReflect() protoreflect.Message {
	mi := &file_infra_qscheduler_qslib_protos_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountConfig.ProtoReflect.Descriptor instead.
func (*AccountConfig) Descriptor() ([]byte, []int) {
	return file_infra_qscheduler_qslib_protos_config_proto_rawDescGZIP(), []int{1}
}

func (x *AccountConfig) GetChargeRate() []float32 {
	if x != nil {
		return x.ChargeRate
	}
	return nil
}

func (x *AccountConfig) GetMaxChargeSeconds() float32 {
	if x != nil {
		return x.MaxChargeSeconds
	}
	return 0
}

func (x *AccountConfig) GetMaxFanout() int32 {
	if x != nil {
		return x.MaxFanout
	}
	return 0
}

func (x *AccountConfig) GetDisableFreeTasks() bool {
	if x != nil {
		return x.DisableFreeTasks
	}
	return false
}

func (x *AccountConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountConfig) GetPerLabelTaskLimits() map[string]int32 {
	if x != nil {
		return x.PerLabelTaskLimits
	}
	return nil
}

var File_infra_qscheduler_qslib_protos_config_proto protoreflect.FileDescriptor

var file_infra_qscheduler_qslib_protos_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x71, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x71, 0x73, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x02, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x62, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x58, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0xf6, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x60, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_qscheduler_qslib_protos_config_proto_rawDescOnce sync.Once
	file_infra_qscheduler_qslib_protos_config_proto_rawDescData = file_infra_qscheduler_qslib_protos_config_proto_rawDesc
)

func file_infra_qscheduler_qslib_protos_config_proto_rawDescGZIP() []byte {
	file_infra_qscheduler_qslib_protos_config_proto_rawDescOnce.Do(func() {
		file_infra_qscheduler_qslib_protos_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_qscheduler_qslib_protos_config_proto_rawDescData)
	})
	return file_infra_qscheduler_qslib_protos_config_proto_rawDescData
}

var file_infra_qscheduler_qslib_protos_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_infra_qscheduler_qslib_protos_config_proto_goTypes = []interface{}{
	(*SchedulerConfig)(nil),     // 0: protos.SchedulerConfig
	(*AccountConfig)(nil),       // 1: protos.AccountConfig
	nil,                         // 2: protos.SchedulerConfig.AccountConfigsEntry
	nil,                         // 3: protos.AccountConfig.PerLabelTaskLimitsEntry
	(*durationpb.Duration)(nil), // 4: google.protobuf.Duration
}
var file_infra_qscheduler_qslib_protos_config_proto_depIdxs = []int32{
	2, // 0: protos.SchedulerConfig.account_configs:type_name -> protos.SchedulerConfig.AccountConfigsEntry
	4, // 1: protos.SchedulerConfig.bot_expiration:type_name -> google.protobuf.Duration
	3, // 2: protos.AccountConfig.per_label_task_limits:type_name -> protos.AccountConfig.PerLabelTaskLimitsEntry
	1, // 3: protos.SchedulerConfig.AccountConfigsEntry.value:type_name -> protos.AccountConfig
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_infra_qscheduler_qslib_protos_config_proto_init() }
func file_infra_qscheduler_qslib_protos_config_proto_init() {
	if File_infra_qscheduler_qslib_protos_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_qscheduler_qslib_protos_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_qscheduler_qslib_protos_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_qscheduler_qslib_protos_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_qscheduler_qslib_protos_config_proto_goTypes,
		DependencyIndexes: file_infra_qscheduler_qslib_protos_config_proto_depIdxs,
		MessageInfos:      file_infra_qscheduler_qslib_protos_config_proto_msgTypes,
	}.Build()
	File_infra_qscheduler_qslib_protos_config_proto = out.File
	file_infra_qscheduler_qslib_protos_config_proto_rawDesc = nil
	file_infra_qscheduler_qslib_protos_config_proto_goTypes = nil
	file_infra_qscheduler_qslib_protos_config_proto_depIdxs = nil
}
