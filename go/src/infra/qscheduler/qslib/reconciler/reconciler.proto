// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package reconciler;

import "google/protobuf/timestamp.proto";

// TaskUpdate represents a change in the state of an existing task, or the
// creation of a new task.
message TaskUpdate {

	enum Type {
		// Invalid update type.
		NULL = 0;

		// A new task has been enqueued.
		NEW = 1;

		// A task has been assigned to a worker.
		ASSIGNED = 2;

		// A task that was previously assigned to a worker has been interrupted and
		// reenqueued.
		INTERRUPTED = 3;

		// A task (whether previously running or enqueued) has been stopped and not
		// reenqueud.
		ABORTED = 4;
	}


	// Time is the time at which this Update occurred.
	google.protobuf.Timestamp time = 1;

	// Type describes which kind of update this represents.
	Type type = 2;

	// RequestId is the id of the request that is being created or updated.
        // This is supplied by the scheduler client -- for swarming this would
        // be the swarming task id.
	string request_id = 3;

	// WorkerId is the worker that the request is:
	// - case NEW:         <invalid> TODO(akeshet): error out if this is supplied
	// - case ASSIGNED:    starting to run on.
	// - case INTERRUPTED: previously running on.
	string worker_id = 4;

	// ProvisionableLabels is the label set for the new task.
	// This field is only relevant and should only be set for NEW type updates.
	repeated string provisionable_labels = 5;

	// AccountId is the id of the quota account that should be charged
	// for the new task. This field is only relevant and should only be set
	// for NEW type updates.
	string account_id = 6;

	// EnqueueTime is the time at which a request was first enqueued. This field
	// is only relevant for NEW type updates.
	google.protobuf.Timestamp enqueue_time = 7;
}

// WorkerQueue represents the queue of qscheduler operations that are pending
// for a given worker.
//
// At present, the queue of operations for a worker can be at most 2 elements
// in length, and consist of either:
// - An Abort Job operation followed by an Assign Job operation.
// - An Assign Job operation.
//
// Therefore, instead of representing this as a list of operations, it is
// convenient to flatten this queue into a single object.
message WorkerQueue {
	// EnqueueTime is the time at which these operations were enqueued.
	google.protobuf.Timestamp enqueue_time = 1;

	// TaskToAssign is the task request that should be assigned to this worker.
	string task_to_assign = 2;

	// TaskToAbort indicates the task request id that should be aborted on this worker.
	//
	// Empty string "" indicates that there is nothing to abort.
	string task_to_abort = 3;
}

// State represents a reconciler, which includes its configuration and the
// pending operations that are in-flight and have not been ACK'ed yet.
message State {
	map<string, WorkerQueue> worker_queues = 1;
}
