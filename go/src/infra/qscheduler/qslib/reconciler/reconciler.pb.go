// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/qscheduler/qslib/reconciler/reconciler.proto

package reconciler

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TaskInstant_State int32

const (
	// Invalid update type, do not use.
	TaskInstant_NULL TaskInstant_State = 0
	// The task is waiting for a worker.
	TaskInstant_WAITING TaskInstant_State = 1
	// The task is running on a worker.
	TaskInstant_RUNNING TaskInstant_State = 2
	// The task is neither waiting for a worker nor running on a worker.
	TaskInstant_ABSENT TaskInstant_State = 3
)

var TaskInstant_State_name = map[int32]string{
	0: "NULL",
	1: "WAITING",
	2: "RUNNING",
	3: "ABSENT",
}

var TaskInstant_State_value = map[string]int32{
	"NULL":    0,
	"WAITING": 1,
	"RUNNING": 2,
	"ABSENT":  3,
}

func (x TaskInstant_State) String() string {
	return proto.EnumName(TaskInstant_State_name, int32(x))
}

func (TaskInstant_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0, 0}
}

// TaskInstant represents the state of a task at a particular time.
type TaskInstant struct {
	// Time is the time at which the task is in the given state.
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// State is the state of the task.
	State TaskInstant_State `protobuf:"varint,2,opt,name=state,proto3,enum=reconciler.TaskInstant_State" json:"state,omitempty"`
	// RequestId is the id of the task. This is supplied by the scheduler client,
	// for swarming this would be the swarming task id.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// WorkerId is the worker that the request is that the task is running on.
	// This is relevant and valid only for RUNNING state.
	// TODO(akeshet): Error out if this is specified for non-RUNNING states.
	WorkerId string `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// ProvisionableLabels is the label set for the new task.
	// This field is only relevant and should only be set for WAITING state.
	ProvisionableLabels []string `protobuf:"bytes,5,rep,name=provisionable_labels,json=provisionableLabels,proto3" json:"provisionable_labels,omitempty"`
	// AccountId is the id of the quota account that should be charged
	// for the new task. This field is only relevant and should only be set
	// for WAITING state.
	AccountId string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// EnqueueTime is the time at which a request was first enqueued. This field
	// is only relevant for WAITING state.
	EnqueueTime          *timestamp.Timestamp `protobuf:"bytes,7,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TaskInstant) Reset()         { *m = TaskInstant{} }
func (m *TaskInstant) String() string { return proto.CompactTextString(m) }
func (*TaskInstant) ProtoMessage()    {}
func (*TaskInstant) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0}
}

func (m *TaskInstant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskInstant.Unmarshal(m, b)
}
func (m *TaskInstant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskInstant.Marshal(b, m, deterministic)
}
func (m *TaskInstant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInstant.Merge(m, src)
}
func (m *TaskInstant) XXX_Size() int {
	return xxx_messageInfo_TaskInstant.Size(m)
}
func (m *TaskInstant) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInstant.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInstant proto.InternalMessageInfo

func (m *TaskInstant) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TaskInstant) GetState() TaskInstant_State {
	if m != nil {
		return m.State
	}
	return TaskInstant_NULL
}

func (m *TaskInstant) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TaskInstant) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *TaskInstant) GetProvisionableLabels() []string {
	if m != nil {
		return m.ProvisionableLabels
	}
	return nil
}

func (m *TaskInstant) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *TaskInstant) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

// WorkerQueue represents the queue of qscheduler operations that are pending
// for a given worker.
//
// At present, the queue of operations for a worker can be at most 2 elements
// in length, and consist of either:
// - An Abort Job operation followed by an Assign Job operation.
// - An Assign Job operation.
//
// Therefore, instead of representing this as a list of operations, it is
// convenient to flatten this queue into a single object.
type WorkerQueue struct {
	// EnqueueTime is the time at which these operations were enqueued.
	EnqueueTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	// TaskToAssign is the task request that should be assigned to this worker.
	TaskToAssign string `protobuf:"bytes,2,opt,name=task_to_assign,json=taskToAssign,proto3" json:"task_to_assign,omitempty"`
	// TaskToAbort indicates the task request id that should be aborted on this worker.
	//
	// Empty string "" indicates that there is nothing to abort.
	TaskToAbort          string   `protobuf:"bytes,3,opt,name=task_to_abort,json=taskToAbort,proto3" json:"task_to_abort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerQueue) Reset()         { *m = WorkerQueue{} }
func (m *WorkerQueue) String() string { return proto.CompactTextString(m) }
func (*WorkerQueue) ProtoMessage()    {}
func (*WorkerQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{1}
}

func (m *WorkerQueue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerQueue.Unmarshal(m, b)
}
func (m *WorkerQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerQueue.Marshal(b, m, deterministic)
}
func (m *WorkerQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerQueue.Merge(m, src)
}
func (m *WorkerQueue) XXX_Size() int {
	return xxx_messageInfo_WorkerQueue.Size(m)
}
func (m *WorkerQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerQueue.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerQueue proto.InternalMessageInfo

func (m *WorkerQueue) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func (m *WorkerQueue) GetTaskToAssign() string {
	if m != nil {
		return m.TaskToAssign
	}
	return ""
}

func (m *WorkerQueue) GetTaskToAbort() string {
	if m != nil {
		return m.TaskToAbort
	}
	return ""
}

// State represents a reconciler, which includes its configuration and the
// pending operations that are in-flight and have not been ACK'ed yet.
type State struct {
	// WorkerQueues is a map from worker id to the pending operations for that worker.
	WorkerQueues map[string]*WorkerQueue `protobuf:"bytes,1,rep,name=worker_queues,json=workerQueues,proto3" json:"worker_queues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// TaskErrors is a map from task ids that had an error to the error description.
	// These tasks will be returned from GetCancellations, until they are ack'ed as
	// aborted.
	TaskErrors           map[string]string `protobuf:"bytes,2,rep,name=task_errors,json=taskErrors,proto3" json:"task_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{2}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetWorkerQueues() map[string]*WorkerQueue {
	if m != nil {
		return m.WorkerQueues
	}
	return nil
}

func (m *State) GetTaskErrors() map[string]string {
	if m != nil {
		return m.TaskErrors
	}
	return nil
}

func init() {
	proto.RegisterEnum("reconciler.TaskInstant_State", TaskInstant_State_name, TaskInstant_State_value)
	proto.RegisterType((*TaskInstant)(nil), "reconciler.TaskInstant")
	proto.RegisterType((*WorkerQueue)(nil), "reconciler.WorkerQueue")
	proto.RegisterType((*State)(nil), "reconciler.State")
	proto.RegisterMapType((map[string]string)(nil), "reconciler.State.TaskErrorsEntry")
	proto.RegisterMapType((map[string]*WorkerQueue)(nil), "reconciler.State.WorkerQueuesEntry")
}

func init() {
	proto.RegisterFile("infra/qscheduler/qslib/reconciler/reconciler.proto", fileDescriptor_320df42c60a35510)
}

var fileDescriptor_320df42c60a35510 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0xe9, 0xc7, 0x96, 0x9b, 0x6e, 0x14, 0x33, 0x89, 0xa8, 0x68, 0xa2, 0x04, 0x1e, 0xf2,
	0x42, 0x22, 0xb2, 0x07, 0x10, 0xd2, 0x1e, 0x3a, 0xa9, 0x82, 0x48, 0x55, 0x24, 0xb2, 0x4c, 0xe3,
	0x2d, 0x72, 0x12, 0xaf, 0x44, 0xcd, 0xe2, 0xd6, 0x76, 0x36, 0xed, 0x8f, 0xf0, 0x33, 0xf8, 0x7d,
	0x3c, 0x22, 0x3b, 0xe9, 0x16, 0x28, 0x12, 0xda, 0x9b, 0x7d, 0xee, 0xb9, 0xe7, 0xdc, 0xe3, 0x6b,
	0xf0, 0x8b, 0xea, 0x8a, 0x61, 0x6f, 0xc3, 0xb3, 0xef, 0x24, 0xaf, 0x4b, 0xc2, 0xbc, 0x0d, 0x2f,
	0x8b, 0xd4, 0x63, 0x24, 0xa3, 0x55, 0x56, 0x48, 0xe0, 0xe1, 0xe8, 0xae, 0x19, 0x15, 0x14, 0xc1,
	0x03, 0x32, 0x79, 0xb5, 0xa4, 0x74, 0x59, 0x12, 0x4f, 0x55, 0xd2, 0xfa, 0xca, 0x13, 0xc5, 0x35,
	0xe1, 0x02, 0x5f, 0xaf, 0x1b, 0xb2, 0xfd, 0x4b, 0x07, 0x33, 0xc6, 0x7c, 0x15, 0x54, 0x5c, 0xe0,
	0x4a, 0x20, 0x17, 0xfa, 0x92, 0x62, 0x69, 0x53, 0xcd, 0x31, 0xfd, 0x89, 0xdb, 0xf4, 0xbb, 0xdb,
	0x7e, 0x37, 0xde, 0xf6, 0x47, 0x8a, 0x87, 0x4e, 0x60, 0xc0, 0x05, 0x16, 0xc4, 0xd2, 0xa7, 0x9a,
	0x73, 0xe8, 0x1f, 0xbb, 0x9d, 0x71, 0x3a, 0xba, 0xee, 0xb9, 0x24, 0x45, 0x0d, 0x17, 0x1d, 0x03,
	0x30, 0xb2, 0xa9, 0x09, 0x17, 0x49, 0x91, 0x5b, 0xbd, 0xa9, 0xe6, 0x18, 0x91, 0xd1, 0x22, 0x41,
	0x8e, 0x5e, 0x82, 0x71, 0x4b, 0xd9, 0x8a, 0x30, 0x59, 0xed, 0xab, 0xea, 0x7e, 0x03, 0x04, 0x39,
	0x7a, 0x0f, 0x47, 0x6b, 0x46, 0x6f, 0x0a, 0x5e, 0xd0, 0x0a, 0xa7, 0x25, 0x49, 0x4a, 0x9c, 0x92,
	0x92, 0x5b, 0x83, 0x69, 0xcf, 0x31, 0xa2, 0xe7, 0x7f, 0xd4, 0x16, 0xaa, 0x24, 0xed, 0x70, 0x96,
	0xd1, 0xba, 0x52, 0x76, 0xc3, 0xc6, 0xae, 0x45, 0x82, 0x1c, 0x9d, 0xc2, 0x88, 0x54, 0x9b, 0x9a,
	0xd4, 0x24, 0x51, 0xd1, 0xf7, 0xfe, 0x1b, 0xdd, 0x6c, 0xf9, 0x12, 0xb1, 0x3f, 0xc0, 0x40, 0x85,
	0x43, 0xfb, 0xd0, 0x0f, 0x2f, 0x16, 0x8b, 0xf1, 0x13, 0x64, 0xc2, 0xde, 0xe5, 0x2c, 0x88, 0x83,
	0xf0, 0xf3, 0x58, 0x93, 0x97, 0xe8, 0x22, 0x0c, 0xe5, 0x45, 0x47, 0x00, 0xc3, 0xd9, 0xd9, 0xf9,
	0x3c, 0x8c, 0xc7, 0x3d, 0xfb, 0x87, 0x06, 0xe6, 0xa5, 0x8a, 0xf5, 0x55, 0x8a, 0xed, 0xcc, 0xa1,
	0x3d, 0x6a, 0x0e, 0xf4, 0x16, 0x0e, 0x05, 0xe6, 0xab, 0x44, 0xd0, 0x04, 0x73, 0x5e, 0x2c, 0x2b,
	0xb5, 0x12, 0x23, 0x1a, 0x49, 0x34, 0xa6, 0x33, 0x85, 0x21, 0x1b, 0x0e, 0xee, 0x59, 0x29, 0x65,
	0xa2, 0x7d, 0x7d, 0xb3, 0x25, 0x49, 0xc8, 0xfe, 0xa9, 0x6f, 0x23, 0x7d, 0x81, 0x83, 0x76, 0x13,
	0xca, 0x87, 0x5b, 0xda, 0xb4, 0xe7, 0x98, 0xfe, 0x9b, 0xee, 0x96, 0x15, 0xd3, 0xed, 0x04, 0xe1,
	0xf3, 0x4a, 0xb0, 0xbb, 0x68, 0x74, 0xdb, 0x81, 0xd0, 0x19, 0x28, 0x8b, 0x84, 0x30, 0x46, 0x19,
	0xb7, 0x74, 0xa5, 0xf3, 0x7a, 0x57, 0x47, 0xfe, 0x99, 0xb9, 0xe2, 0x34, 0x2a, 0x20, 0xee, 0x81,
	0xc9, 0x37, 0x78, 0xb6, 0x63, 0x83, 0xc6, 0xd0, 0x5b, 0x91, 0x3b, 0xf5, 0x58, 0x46, 0x24, 0x8f,
	0xe8, 0x1d, 0x0c, 0x6e, 0x70, 0x59, 0x37, 0x5f, 0xd2, 0xf4, 0x5f, 0x74, 0x4d, 0x3a, 0xfd, 0x51,
	0xc3, 0xfa, 0xa4, 0x7f, 0xd4, 0x26, 0xa7, 0xf0, 0xf4, 0x2f, 0xe3, 0x7f, 0xe8, 0x1e, 0x75, 0x75,
	0x8d, 0x4e, 0x7b, 0x3a, 0x54, 0xbb, 0x39, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x5d, 0x0a,
	0x35, 0xae, 0x03, 0x00, 0x00,
}
