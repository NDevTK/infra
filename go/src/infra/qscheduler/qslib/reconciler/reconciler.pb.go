// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/qscheduler/qslib/reconciler/reconciler.proto

package reconciler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskUpdate_Type int32

const (
	// Invalid update type.
	TaskUpdate_NULL TaskUpdate_Type = 0
	// A new task has been enqueued.
	TaskUpdate_NEW TaskUpdate_Type = 1
	// A task has been assigned to a worker.
	TaskUpdate_ASSIGNED TaskUpdate_Type = 2
	// A task that was previously assigned to a worker has been interrupted and
	// reenqueued.
	TaskUpdate_INTERRUPTED TaskUpdate_Type = 3
	// A task (whether previously running or enqueued) has been stopped and not
	// reenqueud.
	TaskUpdate_ABORTED TaskUpdate_Type = 4
)

var TaskUpdate_Type_name = map[int32]string{
	0: "NULL",
	1: "NEW",
	2: "ASSIGNED",
	3: "INTERRUPTED",
	4: "ABORTED",
}

var TaskUpdate_Type_value = map[string]int32{
	"NULL":        0,
	"NEW":         1,
	"ASSIGNED":    2,
	"INTERRUPTED": 3,
	"ABORTED":     4,
}

func (x TaskUpdate_Type) String() string {
	return proto.EnumName(TaskUpdate_Type_name, int32(x))
}

func (TaskUpdate_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0, 0}
}

// TaskUpdate represents a change in the state of an existing task, or the
// creation of a new task.
type TaskUpdate struct {
	// Time is the time at which this Update occurred.
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Type describes which kind of update this represents.
	Type TaskUpdate_Type `protobuf:"varint,2,opt,name=type,proto3,enum=reconciler.TaskUpdate_Type" json:"type,omitempty"`
	// RequestId is the id of the request that is being created or updated.
	// This is supplied by the scheduler client -- for swarming this would
	// be the swarming task id.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// WorkerId is the worker that the request is:
	// - case NEW:         <invalid> TODO(akeshet): error out if this is supplied
	// - case ASSIGNED:    starting to run on.
	// - case INTERRUPTED: previously running on.
	WorkerId string `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// ProvisionableLabels is the label set for the new task.
	// This field is only relevant and should only be set for NEW type updates.
	ProvisionableLabels []string `protobuf:"bytes,5,rep,name=provisionable_labels,json=provisionableLabels,proto3" json:"provisionable_labels,omitempty"`
	// AccountId is the id of the quota account that should be charged
	// for the new task. This field is only relevant and should only be set
	// for NEW type updates.
	AccountId string `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// EnqueueTime is the time at which a request was first enqueued. This field
	// is only relevant for NEW type updates.
	EnqueueTime          *timestamp.Timestamp `protobuf:"bytes,7,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TaskUpdate) Reset()         { *m = TaskUpdate{} }
func (m *TaskUpdate) String() string { return proto.CompactTextString(m) }
func (*TaskUpdate) ProtoMessage()    {}
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0}
}

func (m *TaskUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskUpdate.Unmarshal(m, b)
}
func (m *TaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskUpdate.Marshal(b, m, deterministic)
}
func (m *TaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskUpdate.Merge(m, src)
}
func (m *TaskUpdate) XXX_Size() int {
	return xxx_messageInfo_TaskUpdate.Size(m)
}
func (m *TaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TaskUpdate proto.InternalMessageInfo

func (m *TaskUpdate) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TaskUpdate) GetType() TaskUpdate_Type {
	if m != nil {
		return m.Type
	}
	return TaskUpdate_NULL
}

func (m *TaskUpdate) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *TaskUpdate) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *TaskUpdate) GetProvisionableLabels() []string {
	if m != nil {
		return m.ProvisionableLabels
	}
	return nil
}

func (m *TaskUpdate) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *TaskUpdate) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

// WorkerQueue represents the queue of qscheduler operations that are pending
// for a given worker.
//
// At present, the queue of operations for a worker can be at most 2 elements
// in length, and consist of either:
// - An Abort Job operation followed by an Assign Job operation.
// - An Assign Job operation.
//
// Therefore, instead of representing this as a list of operations, it is
// convenient to flatten this queue into a single object.
type WorkerQueue struct {
	// EnqueueTime is the time at which these operations were enqueued.
	EnqueueTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	// TaskToAssign is the task request that should be assigned to this worker.
	TaskToAssign string `protobuf:"bytes,2,opt,name=task_to_assign,json=taskToAssign,proto3" json:"task_to_assign,omitempty"`
	// TaskToAbort indicates the task request id that should be aborted on this worker.
	//
	// Empty string "" indicates that there is nothing to abort.
	TaskToAbort          string   `protobuf:"bytes,3,opt,name=task_to_abort,json=taskToAbort,proto3" json:"task_to_abort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerQueue) Reset()         { *m = WorkerQueue{} }
func (m *WorkerQueue) String() string { return proto.CompactTextString(m) }
func (*WorkerQueue) ProtoMessage()    {}
func (*WorkerQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{1}
}

func (m *WorkerQueue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerQueue.Unmarshal(m, b)
}
func (m *WorkerQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerQueue.Marshal(b, m, deterministic)
}
func (m *WorkerQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerQueue.Merge(m, src)
}
func (m *WorkerQueue) XXX_Size() int {
	return xxx_messageInfo_WorkerQueue.Size(m)
}
func (m *WorkerQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerQueue.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerQueue proto.InternalMessageInfo

func (m *WorkerQueue) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func (m *WorkerQueue) GetTaskToAssign() string {
	if m != nil {
		return m.TaskToAssign
	}
	return ""
}

func (m *WorkerQueue) GetTaskToAbort() string {
	if m != nil {
		return m.TaskToAbort
	}
	return ""
}

// State represents a reconciler, which includes its configuration and the
// pending operations that are in-flight and have not been ACK'ed yet.
type State struct {
	WorkerQueues         map[string]*WorkerQueue `protobuf:"bytes,1,rep,name=worker_queues,json=workerQueues,proto3" json:"worker_queues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{2}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetWorkerQueues() map[string]*WorkerQueue {
	if m != nil {
		return m.WorkerQueues
	}
	return nil
}

func init() {
	proto.RegisterEnum("reconciler.TaskUpdate_Type", TaskUpdate_Type_name, TaskUpdate_Type_value)
	proto.RegisterType((*TaskUpdate)(nil), "reconciler.TaskUpdate")
	proto.RegisterType((*WorkerQueue)(nil), "reconciler.WorkerQueue")
	proto.RegisterType((*State)(nil), "reconciler.State")
	proto.RegisterMapType((map[string]*WorkerQueue)(nil), "reconciler.State.WorkerQueuesEntry")
}

func init() {
	proto.RegisterFile("infra/qscheduler/qslib/reconciler/reconciler.proto", fileDescriptor_320df42c60a35510)
}

var fileDescriptor_320df42c60a35510 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0x93, 0xae, 0xcd, 0x4b, 0x37, 0x8a, 0x41, 0xa2, 0xea, 0x84, 0xa8, 0x0a, 0x87,
	0x5e, 0x48, 0x44, 0xb9, 0x20, 0x24, 0x0e, 0x45, 0x8b, 0xa0, 0x52, 0x55, 0xc0, 0x4d, 0x35, 0x6e,
	0x95, 0x93, 0x78, 0x25, 0x6a, 0x16, 0xa7, 0xb6, 0xb3, 0xa9, 0x47, 0xbe, 0x04, 0x5f, 0x82, 0x2f,
	0x89, 0xec, 0x64, 0x34, 0x68, 0x07, 0xc4, 0xcd, 0xf9, 0xbf, 0xdf, 0xf3, 0xff, 0xfd, 0xf3, 0x0c,
	0xd3, 0x34, 0xbf, 0x12, 0xd4, 0xdf, 0xcb, 0xf8, 0x3b, 0x4b, 0xca, 0x8c, 0x09, 0x7f, 0x2f, 0xb3,
	0x34, 0xf2, 0x05, 0x8b, 0x79, 0x1e, 0xa7, 0x5a, 0x38, 0x1e, 0xbd, 0x42, 0x70, 0xc5, 0x31, 0x1c,
	0x95, 0xe1, 0xf3, 0x2d, 0xe7, 0xdb, 0x8c, 0xf9, 0xa6, 0x12, 0x95, 0x57, 0xbe, 0x4a, 0xaf, 0x99,
	0x54, 0xf4, 0xba, 0xa8, 0xe0, 0xf1, 0x0f, 0x0b, 0x20, 0xa4, 0x72, 0xb7, 0x2e, 0x12, 0xaa, 0x18,
	0xf6, 0xc0, 0xd6, 0xc4, 0x00, 0x8d, 0xd0, 0xc4, 0x9d, 0x0e, 0xbd, 0xaa, 0xdd, 0xbb, 0x6b, 0xf7,
	0xc2, 0xbb, 0x76, 0x62, 0x38, 0xec, 0x83, 0xad, 0x0e, 0x05, 0x1b, 0xb4, 0x46, 0x68, 0x72, 0x36,
	0x3d, 0xf7, 0x1a, 0xc3, 0x1c, 0x6f, 0xf5, 0xc2, 0x43, 0xc1, 0x88, 0x01, 0xf1, 0x33, 0x00, 0xc1,
	0xf6, 0x25, 0x93, 0x6a, 0x93, 0x26, 0x03, 0x6b, 0x84, 0x26, 0x0e, 0x71, 0x6a, 0x65, 0x9e, 0xe0,
	0x73, 0x70, 0x6e, 0xb9, 0xd8, 0x31, 0xa1, 0xab, 0xb6, 0xa9, 0x76, 0x2b, 0x61, 0x9e, 0xe0, 0xd7,
	0xf0, 0xa4, 0x10, 0xfc, 0x26, 0x95, 0x29, 0xcf, 0x69, 0x94, 0xb1, 0x4d, 0x46, 0x23, 0x96, 0xc9,
	0x41, 0x7b, 0x64, 0x4d, 0x1c, 0xf2, 0xf8, 0xaf, 0xda, 0xc2, 0x94, 0xb4, 0x1d, 0x8d, 0x63, 0x5e,
	0xe6, 0xc6, 0xee, 0xa4, 0xb2, 0xab, 0x95, 0x79, 0x82, 0xdf, 0x43, 0x8f, 0xe5, 0xfb, 0x92, 0x95,
	0x6c, 0x63, 0x62, 0x77, 0xfe, 0x19, 0xdb, 0xad, 0x79, 0xad, 0x8c, 0x03, 0xb0, 0x75, 0x34, 0xdc,
	0x05, 0x7b, 0xb9, 0x5e, 0x2c, 0xfa, 0x0f, 0x70, 0x07, 0xac, 0x65, 0x70, 0xd9, 0x47, 0xb8, 0x07,
	0xdd, 0xd9, 0x6a, 0x35, 0xff, 0xb8, 0x0c, 0x2e, 0xfa, 0x2d, 0xfc, 0x10, 0xdc, 0xf9, 0x32, 0x0c,
	0x08, 0x59, 0x7f, 0x09, 0x83, 0x8b, 0xbe, 0x85, 0x5d, 0xe8, 0xcc, 0x3e, 0x7c, 0x26, 0xfa, 0xc3,
	0x1e, 0xff, 0x44, 0xe0, 0x5e, 0x9a, 0x90, 0x5f, 0xf5, 0xd5, 0xf7, 0xa6, 0x42, 0xff, 0x35, 0x15,
	0x7e, 0x09, 0x67, 0x8a, 0xca, 0xdd, 0x46, 0xf1, 0x0d, 0x95, 0x32, 0xdd, 0xe6, 0x66, 0x3b, 0x0e,
	0xe9, 0x69, 0x35, 0xe4, 0x33, 0xa3, 0xe1, 0x31, 0x9c, 0xfe, 0xa1, 0x22, 0x2e, 0x54, 0xbd, 0x0b,
	0xb7, 0x86, 0xb4, 0x34, 0xfe, 0x85, 0xa0, 0xbd, 0x52, 0xfa, 0x5d, 0x7c, 0x82, 0xd3, 0x7a, 0x2f,
	0xc6, 0x47, 0x0e, 0xd0, 0xc8, 0x9a, 0xb8, 0xd3, 0x17, 0xcd, 0x85, 0x1b, 0xd2, 0x6b, 0x04, 0x91,
	0x41, 0xae, 0xc4, 0x81, 0xf4, 0x6e, 0x1b, 0xd2, 0xf0, 0x1b, 0x3c, 0xba, 0x87, 0xe0, 0x3e, 0x58,
	0x3b, 0x76, 0x30, 0x41, 0x1d, 0xa2, 0x8f, 0xf8, 0x15, 0xb4, 0x6f, 0x68, 0x56, 0x56, 0x2f, 0xcb,
	0x9d, 0x3e, 0x6d, 0x1a, 0x35, 0xfa, 0x49, 0x45, 0xbd, 0x6b, 0xbd, 0x45, 0xd1, 0x89, 0xf9, 0x31,
	0x6f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x5b, 0x4a, 0x1b, 0x34, 0x03, 0x00, 0x00,
}
