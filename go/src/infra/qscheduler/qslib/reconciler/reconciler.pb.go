// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/qscheduler/qslib/reconciler/reconciler.proto

package reconciler

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WorkerQueue represents the queue of qscheduler operations that are pending
// for a given worker.
//
// At present, the queue of operations for a worker can be at most 2 elements
// in length, and consist of either:
// - An Abort Job operation followed by an Assign Job operation.
// - An Assign Job operation.
//
// Therefore, instead of representing this as a list of operations, it is
// convenient to flatten this queue into a single object.
type WorkerQueue struct {
	// EnqueueTime is the time at which these operations were enqueued.
	EnqueueTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=enqueue_time,json=enqueueTime,proto3" json:"enqueue_time,omitempty"`
	// TaskToAssign is the task request that should be assigned to this worker.
	TaskToAssign string `protobuf:"bytes,2,opt,name=task_to_assign,json=taskToAssign,proto3" json:"task_to_assign,omitempty"`
	// TaskToAbort indicates the task request id that should be aborted on this worker.
	//
	// Empty string "" indicates that there is nothing to abort.
	TaskToAbort          string   `protobuf:"bytes,3,opt,name=task_to_abort,json=taskToAbort,proto3" json:"task_to_abort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerQueue) Reset()         { *m = WorkerQueue{} }
func (m *WorkerQueue) String() string { return proto.CompactTextString(m) }
func (*WorkerQueue) ProtoMessage()    {}
func (*WorkerQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{0}
}

func (m *WorkerQueue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerQueue.Unmarshal(m, b)
}
func (m *WorkerQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerQueue.Marshal(b, m, deterministic)
}
func (m *WorkerQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerQueue.Merge(m, src)
}
func (m *WorkerQueue) XXX_Size() int {
	return xxx_messageInfo_WorkerQueue.Size(m)
}
func (m *WorkerQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerQueue.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerQueue proto.InternalMessageInfo

func (m *WorkerQueue) GetEnqueueTime() *timestamp.Timestamp {
	if m != nil {
		return m.EnqueueTime
	}
	return nil
}

func (m *WorkerQueue) GetTaskToAssign() string {
	if m != nil {
		return m.TaskToAssign
	}
	return ""
}

func (m *WorkerQueue) GetTaskToAbort() string {
	if m != nil {
		return m.TaskToAbort
	}
	return ""
}

// State represents a reconciler, which includes its configuration and the
// pending operations that are in-flight and have not been ACK'ed yet.
type State struct {
	// WorkerQueues is a map from worker id to the pending operations for that worker.
	WorkerQueues map[string]*WorkerQueue `protobuf:"bytes,1,rep,name=worker_queues,json=workerQueues,proto3" json:"worker_queues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// TaskErrors is a map from task ids that had an error to the error description.
	// These tasks will be returned from GetCancellations, until they are ack'ed as
	// aborted.
	TaskErrors           map[string]string `protobuf:"bytes,2,rep,name=task_errors,json=taskErrors,proto3" json:"task_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_320df42c60a35510, []int{1}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetWorkerQueues() map[string]*WorkerQueue {
	if m != nil {
		return m.WorkerQueues
	}
	return nil
}

func (m *State) GetTaskErrors() map[string]string {
	if m != nil {
		return m.TaskErrors
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkerQueue)(nil), "reconciler.WorkerQueue")
	proto.RegisterType((*State)(nil), "reconciler.State")
	proto.RegisterMapType((map[string]string)(nil), "reconciler.State.TaskErrorsEntry")
	proto.RegisterMapType((map[string]*WorkerQueue)(nil), "reconciler.State.WorkerQueuesEntry")
}

func init() {
	proto.RegisterFile("infra/qscheduler/qslib/reconciler/reconciler.proto", fileDescriptor_320df42c60a35510)
}

var fileDescriptor_320df42c60a35510 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x4a, 0x85, 0x4e, 0x5a, 0x3f, 0x16, 0xc1, 0x90, 0x8b, 0xb5, 0x7a, 0xe8, 0xc5,
	0x0d, 0xc4, 0x8b, 0x08, 0x3d, 0x28, 0x14, 0xbc, 0x1a, 0x0b, 0x7a, 0x0b, 0x9b, 0x3a, 0xad, 0x21,
	0x69, 0xb6, 0xd9, 0xdd, 0x58, 0xfa, 0x47, 0xfc, 0x19, 0xfe, 0x46, 0xd9, 0x4d, 0x3f, 0x16, 0xeb,
	0x6d, 0x78, 0xf3, 0xcc, 0xf3, 0x66, 0x12, 0x88, 0xb2, 0x72, 0x26, 0x58, 0x58, 0xc9, 0xe9, 0x27,
	0x7e, 0xd4, 0x05, 0x8a, 0xb0, 0x92, 0x45, 0x96, 0x86, 0x02, 0xa7, 0xbc, 0x9c, 0x66, 0x3a, 0xd8,
	0x8f, 0x74, 0x29, 0xb8, 0xe2, 0x04, 0xf6, 0x49, 0x70, 0x39, 0xe7, 0x7c, 0x5e, 0x60, 0x68, 0x9e,
	0xa4, 0xf5, 0x2c, 0x54, 0xd9, 0x02, 0xa5, 0x62, 0x8b, 0x65, 0x03, 0x0f, 0xbe, 0x1d, 0xf0, 0xde,
	0xb8, 0xc8, 0x51, 0xbc, 0xd4, 0x58, 0x23, 0x19, 0x41, 0x17, 0xcb, 0x4a, 0x8f, 0x89, 0x46, 0x7d,
	0xa7, 0xef, 0x0c, 0xbd, 0x28, 0xa0, 0x8d, 0x87, 0x6e, 0x3d, 0x74, 0xb2, 0xf5, 0xc4, 0xde, 0x86,
	0xd7, 0x09, 0xb9, 0x81, 0x63, 0xc5, 0x64, 0x9e, 0x28, 0x9e, 0x30, 0x29, 0xb3, 0x79, 0xe9, 0xbb,
	0x7d, 0x67, 0xd8, 0x89, 0xbb, 0x3a, 0x9d, 0xf0, 0x47, 0x93, 0x91, 0x01, 0xf4, 0x76, 0x54, 0xca,
	0x85, 0xf2, 0x5b, 0x06, 0xf2, 0x36, 0x90, 0x8e, 0x06, 0x3f, 0x2e, 0xb4, 0x5f, 0x15, 0x53, 0x48,
	0x9e, 0xa1, 0xb7, 0x32, 0x6f, 0x98, 0x98, 0x1e, 0xe9, 0x3b, 0xfd, 0xd6, 0xd0, 0x8b, 0xae, 0xa9,
	0x75, 0xb9, 0x21, 0xa9, 0x75, 0x88, 0x1c, 0x97, 0x4a, 0xac, 0xe3, 0xee, 0xca, 0x8a, 0xc8, 0x13,
	0x98, 0x8a, 0x04, 0x85, 0xe0, 0x42, 0xfa, 0xae, 0xf1, 0x5c, 0x1d, 0x7a, 0x26, 0x4c, 0xe6, 0x63,
	0xc3, 0x34, 0x16, 0x50, 0xbb, 0x20, 0x78, 0x87, 0xb3, 0x83, 0x1a, 0x72, 0x0a, 0xad, 0x1c, 0xd7,
	0xe6, 0x63, 0x75, 0x62, 0x3d, 0x92, 0x5b, 0x68, 0x7f, 0xb1, 0xa2, 0x46, 0x73, 0xbf, 0x17, 0x5d,
	0xd8, 0x25, 0xd6, 0x7e, 0xdc, 0x50, 0x0f, 0xee, 0xbd, 0x13, 0x8c, 0xe0, 0xe4, 0x4f, 0xf1, 0x3f,
	0xde, 0x73, 0xdb, 0xdb, 0xb1, 0xd6, 0xd3, 0x23, 0xf3, 0x6f, 0xee, 0x7e, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xbc, 0x25, 0x00, 0xe9, 0x33, 0x02, 0x00, 0x00,
}
