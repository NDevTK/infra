// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package metrics;

import "google/protobuf/timestamp.proto";

// TaskEvent represents a quotascheduler event that happened to a particular
// task, for metrics purposes.
//
// This proto is intended to be used as a schema for a BigQuery table, in which
// events are logged.
message TaskEvent {

  enum EventType {
    // Invalid or unspecified event type.
    UNSPECIFIED = 0;

    // Task was enqueued.
    ENQUEUED = 1;

    // Task was assigned to a bot.
    ASSIGNED = 2;

    // Task (which was previously assigned to a bot) was interrupted by another
    // task.
    PREEMPTED = 3;

    // Task (which was previously assigned to a bot) changed its running
    // priority.
    REPRIORITIZED = 4;

    // Task (which was previously assigned to a bot) completed on that bot,
    // because the bot reported itself as idle.
    COMPLETED = 5;
  }

  // EventType is the type of event that occurred.
  EventType event_type = 1;

  // TaskId is the task ID that the event happened to.
  string task_id = 2;

  // Time is the time at which the event happened.
  google.protobuf.Timestamp time = 3;

  // BaseLabels are the base labels of the task.
  repeated string base_labels = 4;

  // ProvisionableLabels are the provisionable labels of the task.
  repeated string provisionable_labels = 5;

  // AccountId is the quotascheduler account that the task will be charged to.
  string account_id = 6;

  // AccountValid indicates whether this task's quotascheduler account is valid
  // (exists) at this time.
  bool account_valid = 7;

  // AccountBalance is the task's quotascheduler account's balance at this time.
  repeated double account_balance = 8;

  // Cost is the total quota cost accumulated so far to the quotascheduler
  // account, when running this task.
  repeated double cost = 9;

  // BotId is the bot that the event occurred on (relevant for all event
  // types except for ENQUEUED).
  string bot_id = 10;

  // BotDimensions are the dimensions of the bot (if relevant).
  repeated string bot_dimensions = 11;

  // Reserved field values for additional non-details fields to be added.
  reserved 12 to 99;

  // EnqueuedDetails represents event details that are specific to the
  // ENQUEUED event type.
  message EnqueuedDetails { }

  // AssignedDetails represents event details that are specific to the
  // ASSIGNED event type.
  message AssignedDetails {
    // ProvisionRequired is whether provision is required to run this task
    // on the bot (i.e. if a slice other than the 0th slice was selected).
    bool provision_required = 1;

    // Priority is the qscheduler priority that the task is running at.
    int32 priority = 2;

    // Preempting is true if this task preempted another one that was already
    // running on the bot.
    bool preempting = 3;

    // PreemptionCost is the cost paid by this task's account in order to
    // preempt the previous task on this bot, if this was a preempting
    // assignment.
    repeated double preemption_cost = 4;
  }

  // PreemptedDetails represents event details that are specific to the
  // PREEMPTED event type.
  message PreemptedDetails {
    // PreemptingAccountId is the account id of the task that preempted this
    // task.
    string preempting_account_id = 1;

    // PreemptingTaskId is the task id of the task that preempted this task.
    string preempting_task_id = 2;

    // Priority is the priority that this task was running at prior to being
    // preempted.
    int32 priority = 3;

    // PreemptingPriority is the priority of the task that preempted this task.
    int32 preempting_priority = 4;
  }

  // ReprioritizedDetails represents event details that are specific to the
  // PREPRIORITIZED event type.
  message ReprioritizedDetails {
    // OldPriority is the previous priority the task was running at.
    int32 old_priority = 1;

    // NewPriority is the new priority the task is running at.
    int32 new_priority = 2;
  }

  // ReprioritizedDetails represents event details that are specific to the
  // COMPLETED event type.
  message CompletedDetails { }

  oneof details {
    EnqueuedDetails enqueued_details = 100;
    AssignedDetails assigned_details = 101;
    PreemptedDetails preempted_details = 102;
    ReprioritizedDetails reprioritized_details = 103;
    CompletedDetails completed_details = 104;
  }
}