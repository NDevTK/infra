// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/qscheduler/qslib/scheduler/assignment.proto

package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Assignment_Type int32

const (
	// Assign a task to an currently idle worker.
	Assignment_IDLE_WORKER Assignment_Type = 0
	// Preempt a running task on a worker with a new task.
	Assignment_PREEMPT_WORKER Assignment_Type = 1
)

var Assignment_Type_name = map[int32]string{
	0: "IDLE_WORKER",
	1: "PREEMPT_WORKER",
}
var Assignment_Type_value = map[string]int32{
	"IDLE_WORKER":    0,
	"PREEMPT_WORKER": 1,
}

func (x Assignment_Type) String() string {
	return proto.EnumName(Assignment_Type_name, int32(x))
}
func (Assignment_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_assignment_cab2e3439d9ddb31, []int{0, 0}
}

// An Assignment represents a scheduler decision to assign a task
// to a worker.
type Assignment struct {
	// Type describes which kind of assignment this represents.
	Type Assignment_Type `protobuf:"varint,1,opt,name=type,proto3,enum=scheduler.Assignment_Type" json:"type,omitempty"`
	// WorkerID of the worker to assign a new task to (and to preempt the previous
	// task of, if this is a PREEMPT_WORKER mutator).
	WorkerId string `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// RequestID of the task to assign to that worker.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Priority at which the task will run.
	Priority             int32    `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_assignment_cab2e3439d9ddb31, []int{0}
}
func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment.Unmarshal(m, b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
}
func (dst *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(dst, src)
}
func (m *Assignment) XXX_Size() int {
	return xxx_messageInfo_Assignment.Size(m)
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetType() Assignment_Type {
	if m != nil {
		return m.Type
	}
	return Assignment_IDLE_WORKER
}

func (m *Assignment) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *Assignment) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Assignment) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func init() {
	proto.RegisterType((*Assignment)(nil), "scheduler.Assignment")
	proto.RegisterEnum("scheduler.Assignment_Type", Assignment_Type_name, Assignment_Type_value)
}

func init() {
	proto.RegisterFile("infra/qscheduler/qslib/scheduler/assignment.proto", fileDescriptor_assignment_cab2e3439d9ddb31)
}

var fileDescriptor_assignment_cab2e3439d9ddb31 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xcc, 0xcc, 0x4b, 0x2b,
	0x4a, 0xd4, 0x2f, 0x2c, 0x4e, 0xce, 0x48, 0x4d, 0x29, 0xcd, 0x49, 0x2d, 0xd2, 0x2f, 0x2c, 0xce,
	0xc9, 0x4c, 0xd2, 0x47, 0xf0, 0x13, 0x8b, 0x8b, 0x33, 0xd3, 0xf3, 0x72, 0x53, 0xf3, 0x4a, 0xf4,
	0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0xe1, 0x72, 0x4a, 0x07, 0x19, 0xb9, 0xb8, 0x1c, 0xe1,
	0xf2, 0x42, 0x7a, 0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46,
	0x52, 0x7a, 0x70, 0x85, 0x7a, 0x08, 0x45, 0x7a, 0x21, 0x95, 0x05, 0xa9, 0x41, 0x60, 0x75, 0x42,
	0xd2, 0x5c, 0x9c, 0xe5, 0xf9, 0x45, 0xd9, 0xa9, 0x45, 0xf1, 0x99, 0x29, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x1c, 0x10, 0x01, 0xcf, 0x14, 0x21, 0x59, 0x2e, 0xae, 0xa2, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x90, 0x2c, 0x33, 0x58, 0x96, 0x13, 0x2a, 0xe2, 0x99, 0x22, 0x24, 0xc5, 0xc5,
	0x51, 0x50, 0x94, 0x99, 0x5f, 0x94, 0x59, 0x52, 0x29, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x1a, 0x04,
	0xe7, 0x2b, 0x69, 0x73, 0xb1, 0x80, 0x6c, 0x11, 0xe2, 0xe7, 0xe2, 0xf6, 0x74, 0xf1, 0x71, 0x8d,
	0x0f, 0xf7, 0x0f, 0xf2, 0x76, 0x0d, 0x12, 0x60, 0x10, 0x12, 0xe2, 0xe2, 0x0b, 0x08, 0x72, 0x75,
	0xf5, 0x0d, 0x08, 0x81, 0x89, 0x31, 0x26, 0xb1, 0x81, 0x7d, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x1b, 0xb4, 0x46, 0x90, 0x0a, 0x01, 0x00, 0x00,
}
