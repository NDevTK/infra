// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/api_proto/issues.proto

package monorail

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next available tag: 4
type CreateIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Issue       *Issue `protobuf:"bytes,3,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *CreateIssueRequest) Reset() {
	*x = CreateIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIssueRequest) ProtoMessage() {}

func (x *CreateIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIssueRequest.ProtoReflect.Descriptor instead.
func (*CreateIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIssueRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateIssueRequest) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

// Next available tag: 3
type GetIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
}

func (x *GetIssueRequest) Reset() {
	*x = GetIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIssueRequest) ProtoMessage() {}

func (x *GetIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIssueRequest.ProtoReflect.Descriptor instead.
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{1}
}

func (x *GetIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

// Next available tag: 3
type IssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue      *Issue    `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	MovedToRef *IssueRef `protobuf:"bytes,2,opt,name=moved_to_ref,json=movedToRef,proto3" json:"moved_to_ref,omitempty"`
}

func (x *IssueResponse) Reset() {
	*x = IssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueResponse) ProtoMessage() {}

func (x *IssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueResponse.ProtoReflect.Descriptor instead.
func (*IssueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{2}
}

func (x *IssueResponse) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *IssueResponse) GetMovedToRef() *IssueRef {
	if x != nil {
		return x.MovedToRef
	}
	return nil
}

// Next available tag: 8
type ListIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        string      `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	CannedQuery  uint32      `protobuf:"varint,3,opt,name=canned_query,json=cannedQuery,proto3" json:"canned_query,omitempty"`
	ProjectNames []string    `protobuf:"bytes,4,rep,name=project_names,json=projectNames,proto3" json:"project_names,omitempty"`
	Pagination   *Pagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
	GroupBySpec  string      `protobuf:"bytes,6,opt,name=group_by_spec,json=groupBySpec,proto3" json:"group_by_spec,omitempty"`
	SortSpec     string      `protobuf:"bytes,7,opt,name=sort_spec,json=sortSpec,proto3" json:"sort_spec,omitempty"`
}

func (x *ListIssuesRequest) Reset() {
	*x = ListIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIssuesRequest) ProtoMessage() {}

func (x *ListIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIssuesRequest.ProtoReflect.Descriptor instead.
func (*ListIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{3}
}

func (x *ListIssuesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListIssuesRequest) GetCannedQuery() uint32 {
	if x != nil {
		return x.CannedQuery
	}
	return 0
}

func (x *ListIssuesRequest) GetProjectNames() []string {
	if x != nil {
		return x.ProjectNames
	}
	return nil
}

func (x *ListIssuesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListIssuesRequest) GetGroupBySpec() string {
	if x != nil {
		return x.GroupBySpec
	}
	return ""
}

func (x *ListIssuesRequest) GetSortSpec() string {
	if x != nil {
		return x.SortSpec
	}
	return ""
}

// Next available tag: 3
type ListIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issues       []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	TotalResults uint32   `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
}

func (x *ListIssuesResponse) Reset() {
	*x = ListIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIssuesResponse) ProtoMessage() {}

func (x *ListIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIssuesResponse.ProtoReflect.Descriptor instead.
func (*ListIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{4}
}

func (x *ListIssuesResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ListIssuesResponse) GetTotalResults() uint32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

// Next available tag: 3
type ListReferencedIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRefs []*IssueRef `protobuf:"bytes,2,rep,name=issue_refs,json=issueRefs,proto3" json:"issue_refs,omitempty"`
}

func (x *ListReferencedIssuesRequest) Reset() {
	*x = ListReferencedIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReferencedIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReferencedIssuesRequest) ProtoMessage() {}

func (x *ListReferencedIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReferencedIssuesRequest.ProtoReflect.Descriptor instead.
func (*ListReferencedIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{5}
}

func (x *ListReferencedIssuesRequest) GetIssueRefs() []*IssueRef {
	if x != nil {
		return x.IssueRefs
	}
	return nil
}

// Next available tag: 2
type ListReferencedIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(ehmaldonado): monorail:4033 Rename these fields to issues rather than
	// refs.
	OpenRefs   []*Issue `protobuf:"bytes,1,rep,name=open_refs,json=openRefs,proto3" json:"open_refs,omitempty"`
	ClosedRefs []*Issue `protobuf:"bytes,2,rep,name=closed_refs,json=closedRefs,proto3" json:"closed_refs,omitempty"`
}

func (x *ListReferencedIssuesResponse) Reset() {
	*x = ListReferencedIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReferencedIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReferencedIssuesResponse) ProtoMessage() {}

func (x *ListReferencedIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReferencedIssuesResponse.ProtoReflect.Descriptor instead.
func (*ListReferencedIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{6}
}

func (x *ListReferencedIssuesResponse) GetOpenRefs() []*Issue {
	if x != nil {
		return x.OpenRefs
	}
	return nil
}

func (x *ListReferencedIssuesResponse) GetClosedRefs() []*Issue {
	if x != nil {
		return x.ClosedRefs
	}
	return nil
}

// Next available tag: 3
type ListApplicableFieldDefsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRefs []*IssueRef `protobuf:"bytes,2,rep,name=issue_refs,json=issueRefs,proto3" json:"issue_refs,omitempty"`
}

func (x *ListApplicableFieldDefsRequest) Reset() {
	*x = ListApplicableFieldDefsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicableFieldDefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicableFieldDefsRequest) ProtoMessage() {}

func (x *ListApplicableFieldDefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicableFieldDefsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicableFieldDefsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{7}
}

func (x *ListApplicableFieldDefsRequest) GetIssueRefs() []*IssueRef {
	if x != nil {
		return x.IssueRefs
	}
	return nil
}

// Next available tag: 2
type ListApplicableFieldDefsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldDefs []*FieldDef `protobuf:"bytes,1,rep,name=field_defs,json=fieldDefs,proto3" json:"field_defs,omitempty"`
}

func (x *ListApplicableFieldDefsResponse) Reset() {
	*x = ListApplicableFieldDefsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicableFieldDefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicableFieldDefsResponse) ProtoMessage() {}

func (x *ListApplicableFieldDefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicableFieldDefsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicableFieldDefsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{8}
}

func (x *ListApplicableFieldDefsResponse) GetFieldDefs() []*FieldDef {
	if x != nil {
		return x.FieldDefs
	}
	return nil
}

// Next available tag: 9
type UpdateIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef        *IssueRef           `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	SendEmail       bool                `protobuf:"varint,3,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
	Delta           *IssueDelta         `protobuf:"bytes,4,opt,name=delta,proto3" json:"delta,omitempty"`
	CommentContent  string              `protobuf:"bytes,5,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
	IsDescription   bool                `protobuf:"varint,6,opt,name=is_description,json=isDescription,proto3" json:"is_description,omitempty"`
	Uploads         []*AttachmentUpload `protobuf:"bytes,7,rep,name=uploads,proto3" json:"uploads,omitempty"`
	KeptAttachments []int64             `protobuf:"varint,8,rep,packed,name=kept_attachments,json=keptAttachments,proto3" json:"kept_attachments,omitempty"`
}

func (x *UpdateIssueRequest) Reset() {
	*x = UpdateIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssueRequest) ProtoMessage() {}

func (x *UpdateIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssueRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *UpdateIssueRequest) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

func (x *UpdateIssueRequest) GetDelta() *IssueDelta {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *UpdateIssueRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *UpdateIssueRequest) GetIsDescription() bool {
	if x != nil {
		return x.IsDescription
	}
	return false
}

func (x *UpdateIssueRequest) GetUploads() []*AttachmentUpload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

func (x *UpdateIssueRequest) GetKeptAttachments() []int64 {
	if x != nil {
		return x.KeptAttachments
	}
	return nil
}

// Next available tag: 4
type StarIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	Starred  bool      `protobuf:"varint,3,opt,name=starred,proto3" json:"starred,omitempty"` // True to add a star, False to remove one.
}

func (x *StarIssueRequest) Reset() {
	*x = StarIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarIssueRequest) ProtoMessage() {}

func (x *StarIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarIssueRequest.ProtoReflect.Descriptor instead.
func (*StarIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{10}
}

func (x *StarIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *StarIssueRequest) GetStarred() bool {
	if x != nil {
		return x.Starred
	}
	return false
}

// Next available tag: 2
type StarIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarCount uint32 `protobuf:"varint,1,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
}

func (x *StarIssueResponse) Reset() {
	*x = StarIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarIssueResponse) ProtoMessage() {}

func (x *StarIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarIssueResponse.ProtoReflect.Descriptor instead.
func (*StarIssueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{11}
}

func (x *StarIssueResponse) GetStarCount() uint32 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

// Next available tag: 3
type IsIssueStarredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
}

func (x *IsIssueStarredRequest) Reset() {
	*x = IsIssueStarredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsIssueStarredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsIssueStarredRequest) ProtoMessage() {}

func (x *IsIssueStarredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsIssueStarredRequest.ProtoReflect.Descriptor instead.
func (*IsIssueStarredRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{12}
}

func (x *IsIssueStarredRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

// Next available tag: 2
type IsIssueStarredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStarred bool `protobuf:"varint,1,opt,name=is_starred,json=isStarred,proto3" json:"is_starred,omitempty"`
}

func (x *IsIssueStarredResponse) Reset() {
	*x = IsIssueStarredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsIssueStarredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsIssueStarredResponse) ProtoMessage() {}

func (x *IsIssueStarredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsIssueStarredResponse.ProtoReflect.Descriptor instead.
func (*IsIssueStarredResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{13}
}

func (x *IsIssueStarredResponse) GetIsStarred() bool {
	if x != nil {
		return x.IsStarred
	}
	return false
}

// Next available tag: 1
type ListStarredIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStarredIssuesRequest) Reset() {
	*x = ListStarredIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStarredIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStarredIssuesRequest) ProtoMessage() {}

func (x *ListStarredIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStarredIssuesRequest.ProtoReflect.Descriptor instead.
func (*ListStarredIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{14}
}

// Next available tag: 2
type ListStarredIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarredIssueRefs []*IssueRef `protobuf:"bytes,1,rep,name=starred_issue_refs,json=starredIssueRefs,proto3" json:"starred_issue_refs,omitempty"`
}

func (x *ListStarredIssuesResponse) Reset() {
	*x = ListStarredIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStarredIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStarredIssuesResponse) ProtoMessage() {}

func (x *ListStarredIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStarredIssuesResponse.ProtoReflect.Descriptor instead.
func (*ListStarredIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{15}
}

func (x *ListStarredIssuesResponse) GetStarredIssueRefs() []*IssueRef {
	if x != nil {
		return x.StarredIssueRefs
	}
	return nil
}

// Next available tag: 3
type ListCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
}

func (x *ListCommentsRequest) Reset() {
	*x = ListCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsRequest) ProtoMessage() {}

func (x *ListCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{16}
}

func (x *ListCommentsRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

// Next available tag: 2
type ListCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comments are in chronological order.  The list of comments may
	// include deleted, spam, and description comments.  Spam and
	// deleted comments will only have content supplied if the user is
	// allowed to see it.
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *ListCommentsResponse) Reset() {
	*x = ListCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsResponse) ProtoMessage() {}

func (x *ListCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsResponse.ProtoReflect.Descriptor instead.
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{17}
}

func (x *ListCommentsResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Next available tag: 5
type ListActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(tyreej) description
	UserRef *UserRef `protobuf:"bytes,2,opt,name=user_ref,json=userRef,proto3" json:"user_ref,omitempty"`
	Before  uint32   `protobuf:"fixed32,3,opt,name=before,proto3" json:"before,omitempty"`
	After   uint32   `protobuf:"fixed32,4,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *ListActivitiesRequest) Reset() {
	*x = ListActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesRequest) ProtoMessage() {}

func (x *ListActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesRequest.ProtoReflect.Descriptor instead.
func (*ListActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{18}
}

func (x *ListActivitiesRequest) GetUserRef() *UserRef {
	if x != nil {
		return x.UserRef
	}
	return nil
}

func (x *ListActivitiesRequest) GetBefore() uint32 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *ListActivitiesRequest) GetAfter() uint32 {
	if x != nil {
		return x.After
	}
	return 0
}

// Next available tag: 3
type ListActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(tyreej) description
	Comments       []*Comment      `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	IssueSummaries []*IssueSummary `protobuf:"bytes,2,rep,name=issue_summaries,json=issueSummaries,proto3" json:"issue_summaries,omitempty"`
}

func (x *ListActivitiesResponse) Reset() {
	*x = ListActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesResponse) ProtoMessage() {}

func (x *ListActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesResponse.ProtoReflect.Descriptor instead.
func (*ListActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{19}
}

func (x *ListActivitiesResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ListActivitiesResponse) GetIssueSummaries() []*IssueSummary {
	if x != nil {
		return x.IssueSummaries
	}
	return nil
}

// Next available tag: 5
type DeleteCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef    *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	SequenceNum int64     `protobuf:"varint,3,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	Delete      bool      `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"` // True to delete, False to undelete.
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCommentRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *DeleteCommentRequest) GetSequenceNum() int64 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *DeleteCommentRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// TODO: Consider eventually replacing calls to UpdateApprovalRequest
// with BulkUpdateApprovalsRequest.
// TODO: For now, block bulk attaching uploads and survey editing.
// Next available tag: 7
type BulkUpdateApprovalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRefs      []*IssueRef    `protobuf:"bytes,2,rep,name=issue_refs,json=issueRefs,proto3" json:"issue_refs,omitempty"`
	FieldRef       *FieldRef      `protobuf:"bytes,3,opt,name=field_ref,json=fieldRef,proto3" json:"field_ref,omitempty"`
	ApprovalDelta  *ApprovalDelta `protobuf:"bytes,4,opt,name=approval_delta,json=approvalDelta,proto3" json:"approval_delta,omitempty"`
	CommentContent string         `protobuf:"bytes,5,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
	SendEmail      bool           `protobuf:"varint,6,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
}

func (x *BulkUpdateApprovalsRequest) Reset() {
	*x = BulkUpdateApprovalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateApprovalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateApprovalsRequest) ProtoMessage() {}

func (x *BulkUpdateApprovalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateApprovalsRequest.ProtoReflect.Descriptor instead.
func (*BulkUpdateApprovalsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{21}
}

func (x *BulkUpdateApprovalsRequest) GetIssueRefs() []*IssueRef {
	if x != nil {
		return x.IssueRefs
	}
	return nil
}

func (x *BulkUpdateApprovalsRequest) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *BulkUpdateApprovalsRequest) GetApprovalDelta() *ApprovalDelta {
	if x != nil {
		return x.ApprovalDelta
	}
	return nil
}

func (x *BulkUpdateApprovalsRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *BulkUpdateApprovalsRequest) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

// Next available tag: 2
type BulkUpdateApprovalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRefs []*IssueRef `protobuf:"bytes,1,rep,name=issue_refs,json=issueRefs,proto3" json:"issue_refs,omitempty"`
}

func (x *BulkUpdateApprovalsResponse) Reset() {
	*x = BulkUpdateApprovalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpdateApprovalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpdateApprovalsResponse) ProtoMessage() {}

func (x *BulkUpdateApprovalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpdateApprovalsResponse.ProtoReflect.Descriptor instead.
func (*BulkUpdateApprovalsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{22}
}

func (x *BulkUpdateApprovalsResponse) GetIssueRefs() []*IssueRef {
	if x != nil {
		return x.IssueRefs
	}
	return nil
}

// Next available tag: 10
type UpdateApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef        *IssueRef           `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	FieldRef        *FieldRef           `protobuf:"bytes,3,opt,name=field_ref,json=fieldRef,proto3" json:"field_ref,omitempty"`
	ApprovalDelta   *ApprovalDelta      `protobuf:"bytes,4,opt,name=approval_delta,json=approvalDelta,proto3" json:"approval_delta,omitempty"`
	CommentContent  string              `protobuf:"bytes,5,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
	SendEmail       bool                `protobuf:"varint,6,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
	IsDescription   bool                `protobuf:"varint,7,opt,name=is_description,json=isDescription,proto3" json:"is_description,omitempty"`
	Uploads         []*AttachmentUpload `protobuf:"bytes,8,rep,name=uploads,proto3" json:"uploads,omitempty"`
	KeptAttachments []int64             `protobuf:"varint,9,rep,packed,name=kept_attachments,json=keptAttachments,proto3" json:"kept_attachments,omitempty"`
}

func (x *UpdateApprovalRequest) Reset() {
	*x = UpdateApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApprovalRequest) ProtoMessage() {}

func (x *UpdateApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApprovalRequest.ProtoReflect.Descriptor instead.
func (*UpdateApprovalRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateApprovalRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *UpdateApprovalRequest) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *UpdateApprovalRequest) GetApprovalDelta() *ApprovalDelta {
	if x != nil {
		return x.ApprovalDelta
	}
	return nil
}

func (x *UpdateApprovalRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *UpdateApprovalRequest) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

func (x *UpdateApprovalRequest) GetIsDescription() bool {
	if x != nil {
		return x.IsDescription
	}
	return false
}

func (x *UpdateApprovalRequest) GetUploads() []*AttachmentUpload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

func (x *UpdateApprovalRequest) GetKeptAttachments() []int64 {
	if x != nil {
		return x.KeptAttachments
	}
	return nil
}

// Next available tag: 2
type UpdateApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approval *Approval `protobuf:"bytes,1,opt,name=approval,proto3" json:"approval,omitempty"` // TODO(jojwang): monorail:3895, add new_comment field.
}

func (x *UpdateApprovalResponse) Reset() {
	*x = UpdateApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApprovalResponse) ProtoMessage() {}

func (x *UpdateApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApprovalResponse.ProtoReflect.Descriptor instead.
func (*UpdateApprovalResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateApprovalResponse) GetApproval() *Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

// Next available tag: 6
type ConvertIssueApprovalsTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef       *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	TemplateName   string    `protobuf:"bytes,3,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`
	CommentContent string    `protobuf:"bytes,4,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
	SendEmail      bool      `protobuf:"varint,5,opt,name=send_email,json=sendEmail,proto3" json:"send_email,omitempty"`
}

func (x *ConvertIssueApprovalsTemplateRequest) Reset() {
	*x = ConvertIssueApprovalsTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertIssueApprovalsTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertIssueApprovalsTemplateRequest) ProtoMessage() {}

func (x *ConvertIssueApprovalsTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertIssueApprovalsTemplateRequest.ProtoReflect.Descriptor instead.
func (*ConvertIssueApprovalsTemplateRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{25}
}

func (x *ConvertIssueApprovalsTemplateRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *ConvertIssueApprovalsTemplateRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ConvertIssueApprovalsTemplateRequest) GetCommentContent() string {
	if x != nil {
		return x.CommentContent
	}
	return ""
}

func (x *ConvertIssueApprovalsTemplateRequest) GetSendEmail() bool {
	if x != nil {
		return x.SendEmail
	}
	return false
}

// Next available tag: 2
type ConvertIssueApprovalsTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue *Issue `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *ConvertIssueApprovalsTemplateResponse) Reset() {
	*x = ConvertIssueApprovalsTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertIssueApprovalsTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertIssueApprovalsTemplateResponse) ProtoMessage() {}

func (x *ConvertIssueApprovalsTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertIssueApprovalsTemplateResponse.ProtoReflect.Descriptor instead.
func (*ConvertIssueApprovalsTemplateResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{26}
}

func (x *ConvertIssueApprovalsTemplateResponse) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

// Next available tag: 9
type IssueSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Query       string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	CannedQuery int32  `protobuf:"varint,4,opt,name=canned_query,json=cannedQuery,proto3" json:"canned_query,omitempty"`
	GroupBy     string `protobuf:"bytes,5,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	LabelPrefix string `protobuf:"bytes,6,opt,name=label_prefix,json=labelPrefix,proto3" json:"label_prefix,omitempty"`
	ProjectName string `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	HotlistId   int32  `protobuf:"varint,8,opt,name=hotlist_id,json=hotlistId,proto3" json:"hotlist_id,omitempty"`
}

func (x *IssueSnapshotRequest) Reset() {
	*x = IssueSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSnapshotRequest) ProtoMessage() {}

func (x *IssueSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSnapshotRequest.ProtoReflect.Descriptor instead.
func (*IssueSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{27}
}

func (x *IssueSnapshotRequest) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IssueSnapshotRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *IssueSnapshotRequest) GetCannedQuery() int32 {
	if x != nil {
		return x.CannedQuery
	}
	return 0
}

func (x *IssueSnapshotRequest) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *IssueSnapshotRequest) GetLabelPrefix() string {
	if x != nil {
		return x.LabelPrefix
	}
	return ""
}

func (x *IssueSnapshotRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *IssueSnapshotRequest) GetHotlistId() int32 {
	if x != nil {
		return x.HotlistId
	}
	return 0
}

// Next available tag: 3
type IssueSnapshotCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension string `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *IssueSnapshotCount) Reset() {
	*x = IssueSnapshotCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSnapshotCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSnapshotCount) ProtoMessage() {}

func (x *IssueSnapshotCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSnapshotCount.ProtoReflect.Descriptor instead.
func (*IssueSnapshotCount) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{28}
}

func (x *IssueSnapshotCount) GetDimension() string {
	if x != nil {
		return x.Dimension
	}
	return ""
}

func (x *IssueSnapshotCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Next available tag: 3
type IssueSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotCount      []*IssueSnapshotCount `protobuf:"bytes,1,rep,name=snapshot_count,json=snapshotCount,proto3" json:"snapshot_count,omitempty"`
	UnsupportedField   []string              `protobuf:"bytes,2,rep,name=unsupported_field,json=unsupportedField,proto3" json:"unsupported_field,omitempty"`
	SearchLimitReached bool                  `protobuf:"varint,3,opt,name=search_limit_reached,json=searchLimitReached,proto3" json:"search_limit_reached,omitempty"`
}

func (x *IssueSnapshotResponse) Reset() {
	*x = IssueSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSnapshotResponse) ProtoMessage() {}

func (x *IssueSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSnapshotResponse.ProtoReflect.Descriptor instead.
func (*IssueSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{29}
}

func (x *IssueSnapshotResponse) GetSnapshotCount() []*IssueSnapshotCount {
	if x != nil {
		return x.SnapshotCount
	}
	return nil
}

func (x *IssueSnapshotResponse) GetUnsupportedField() []string {
	if x != nil {
		return x.UnsupportedField
	}
	return nil
}

func (x *IssueSnapshotResponse) GetSearchLimitReached() bool {
	if x != nil {
		return x.SearchLimitReached
	}
	return false
}

// Next available tag: 4
type PresubmitIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef   *IssueRef   `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	IssueDelta *IssueDelta `protobuf:"bytes,3,opt,name=issue_delta,json=issueDelta,proto3" json:"issue_delta,omitempty"`
}

func (x *PresubmitIssueRequest) Reset() {
	*x = PresubmitIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresubmitIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresubmitIssueRequest) ProtoMessage() {}

func (x *PresubmitIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresubmitIssueRequest.ProtoReflect.Descriptor instead.
func (*PresubmitIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{30}
}

func (x *PresubmitIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *PresubmitIssueRequest) GetIssueDelta() *IssueDelta {
	if x != nil {
		return x.IssueDelta
	}
	return nil
}

// Next available tag: 8
type PresubmitIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAvailability      string         `protobuf:"bytes,1,opt,name=owner_availability,json=ownerAvailability,proto3" json:"owner_availability,omitempty"`
	OwnerAvailabilityState string         `protobuf:"bytes,2,opt,name=owner_availability_state,json=ownerAvailabilityState,proto3" json:"owner_availability_state,omitempty"`
	DerivedLabels          []*ValueAndWhy `protobuf:"bytes,3,rep,name=derived_labels,json=derivedLabels,proto3" json:"derived_labels,omitempty"`
	DerivedOwners          []*ValueAndWhy `protobuf:"bytes,4,rep,name=derived_owners,json=derivedOwners,proto3" json:"derived_owners,omitempty"`
	DerivedCcs             []*ValueAndWhy `protobuf:"bytes,5,rep,name=derived_ccs,json=derivedCcs,proto3" json:"derived_ccs,omitempty"`
	Warnings               []*ValueAndWhy `protobuf:"bytes,6,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Errors                 []*ValueAndWhy `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PresubmitIssueResponse) Reset() {
	*x = PresubmitIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresubmitIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresubmitIssueResponse) ProtoMessage() {}

func (x *PresubmitIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresubmitIssueResponse.ProtoReflect.Descriptor instead.
func (*PresubmitIssueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{31}
}

func (x *PresubmitIssueResponse) GetOwnerAvailability() string {
	if x != nil {
		return x.OwnerAvailability
	}
	return ""
}

func (x *PresubmitIssueResponse) GetOwnerAvailabilityState() string {
	if x != nil {
		return x.OwnerAvailabilityState
	}
	return ""
}

func (x *PresubmitIssueResponse) GetDerivedLabels() []*ValueAndWhy {
	if x != nil {
		return x.DerivedLabels
	}
	return nil
}

func (x *PresubmitIssueResponse) GetDerivedOwners() []*ValueAndWhy {
	if x != nil {
		return x.DerivedOwners
	}
	return nil
}

func (x *PresubmitIssueResponse) GetDerivedCcs() []*ValueAndWhy {
	if x != nil {
		return x.DerivedCcs
	}
	return nil
}

func (x *PresubmitIssueResponse) GetWarnings() []*ValueAndWhy {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *PresubmitIssueResponse) GetErrors() []*ValueAndWhy {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Next available tag: 6
type RerankBlockedOnIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef   *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	MovedRef   *IssueRef `protobuf:"bytes,3,opt,name=moved_ref,json=movedRef,proto3" json:"moved_ref,omitempty"`
	TargetRef  *IssueRef `protobuf:"bytes,4,opt,name=target_ref,json=targetRef,proto3" json:"target_ref,omitempty"`
	SplitAbove bool      `protobuf:"varint,5,opt,name=split_above,json=splitAbove,proto3" json:"split_above,omitempty"`
}

func (x *RerankBlockedOnIssuesRequest) Reset() {
	*x = RerankBlockedOnIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankBlockedOnIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankBlockedOnIssuesRequest) ProtoMessage() {}

func (x *RerankBlockedOnIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankBlockedOnIssuesRequest.ProtoReflect.Descriptor instead.
func (*RerankBlockedOnIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{32}
}

func (x *RerankBlockedOnIssuesRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *RerankBlockedOnIssuesRequest) GetMovedRef() *IssueRef {
	if x != nil {
		return x.MovedRef
	}
	return nil
}

func (x *RerankBlockedOnIssuesRequest) GetTargetRef() *IssueRef {
	if x != nil {
		return x.TargetRef
	}
	return nil
}

func (x *RerankBlockedOnIssuesRequest) GetSplitAbove() bool {
	if x != nil {
		return x.SplitAbove
	}
	return false
}

// Next available tag: 2
type RerankBlockedOnIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedOnIssueRefs []*IssueRef `protobuf:"bytes,1,rep,name=blocked_on_issue_refs,json=blockedOnIssueRefs,proto3" json:"blocked_on_issue_refs,omitempty"`
}

func (x *RerankBlockedOnIssuesResponse) Reset() {
	*x = RerankBlockedOnIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankBlockedOnIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankBlockedOnIssuesResponse) ProtoMessage() {}

func (x *RerankBlockedOnIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankBlockedOnIssuesResponse.ProtoReflect.Descriptor instead.
func (*RerankBlockedOnIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{33}
}

func (x *RerankBlockedOnIssuesResponse) GetBlockedOnIssueRefs() []*IssueRef {
	if x != nil {
		return x.BlockedOnIssueRefs
	}
	return nil
}

// Next available tag: 4
type DeleteIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	Delete   bool      `protobuf:"varint,3,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *DeleteIssueRequest) Reset() {
	*x = DeleteIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueRequest) ProtoMessage() {}

func (x *DeleteIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueRequest.ProtoReflect.Descriptor instead.
func (*DeleteIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *DeleteIssueRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Next available tag: 1
type DeleteIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIssueResponse) Reset() {
	*x = DeleteIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueResponse) ProtoMessage() {}

func (x *DeleteIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueResponse.ProtoReflect.Descriptor instead.
func (*DeleteIssueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{35}
}

// Next available tag: 5
type DeleteIssueCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef    *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	SequenceNum uint32    `protobuf:"varint,3,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	Delete      bool      `protobuf:"varint,4,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *DeleteIssueCommentRequest) Reset() {
	*x = DeleteIssueCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueCommentRequest) ProtoMessage() {}

func (x *DeleteIssueCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteIssueCommentRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteIssueCommentRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *DeleteIssueCommentRequest) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *DeleteIssueCommentRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Next available tag: 1
type DeleteIssueCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteIssueCommentResponse) Reset() {
	*x = DeleteIssueCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIssueCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIssueCommentResponse) ProtoMessage() {}

func (x *DeleteIssueCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIssueCommentResponse.ProtoReflect.Descriptor instead.
func (*DeleteIssueCommentResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{37}
}

// Next available tag: 6
type DeleteAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef     *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	SequenceNum  uint32    `protobuf:"varint,3,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	AttachmentId uint32    `protobuf:"varint,4,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Delete       bool      `protobuf:"varint,5,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *DeleteAttachmentRequest) Reset() {
	*x = DeleteAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttachmentRequest) ProtoMessage() {}

func (x *DeleteAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttachmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteAttachmentRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *DeleteAttachmentRequest) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *DeleteAttachmentRequest) GetAttachmentId() uint32 {
	if x != nil {
		return x.AttachmentId
	}
	return 0
}

func (x *DeleteAttachmentRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// Next available tag: 1
type DeleteAttachmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAttachmentResponse) Reset() {
	*x = DeleteAttachmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttachmentResponse) ProtoMessage() {}

func (x *DeleteAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttachmentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{39}
}

// Next available tag: 4
type FlagIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRefs []*IssueRef `protobuf:"bytes,2,rep,name=issue_refs,json=issueRefs,proto3" json:"issue_refs,omitempty"`
	Flag      bool        `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *FlagIssuesRequest) Reset() {
	*x = FlagIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagIssuesRequest) ProtoMessage() {}

func (x *FlagIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagIssuesRequest.ProtoReflect.Descriptor instead.
func (*FlagIssuesRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{40}
}

func (x *FlagIssuesRequest) GetIssueRefs() []*IssueRef {
	if x != nil {
		return x.IssueRefs
	}
	return nil
}

func (x *FlagIssuesRequest) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

// Next available tag: 1
type FlagIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlagIssuesResponse) Reset() {
	*x = FlagIssuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagIssuesResponse) ProtoMessage() {}

func (x *FlagIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagIssuesResponse.ProtoReflect.Descriptor instead.
func (*FlagIssuesResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{41}
}

// Next available tag: 5
type FlagCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef    *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	SequenceNum uint32    `protobuf:"varint,3,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	Flag        bool      `protobuf:"varint,4,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *FlagCommentRequest) Reset() {
	*x = FlagCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagCommentRequest) ProtoMessage() {}

func (x *FlagCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagCommentRequest.ProtoReflect.Descriptor instead.
func (*FlagCommentRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{42}
}

func (x *FlagCommentRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *FlagCommentRequest) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *FlagCommentRequest) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

// Next available tag: 1
type FlagCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlagCommentResponse) Reset() {
	*x = FlagCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagCommentResponse) ProtoMessage() {}

func (x *FlagCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagCommentResponse.ProtoReflect.Descriptor instead.
func (*FlagCommentResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{43}
}

// Next available tag: 3
type ListIssuePermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
}

func (x *ListIssuePermissionsRequest) Reset() {
	*x = ListIssuePermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIssuePermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIssuePermissionsRequest) ProtoMessage() {}

func (x *ListIssuePermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIssuePermissionsRequest.ProtoReflect.Descriptor instead.
func (*ListIssuePermissionsRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{44}
}

func (x *ListIssuePermissionsRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

// Next available tag: 2
type ListIssuePermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *ListIssuePermissionsResponse) Reset() {
	*x = ListIssuePermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIssuePermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIssuePermissionsResponse) ProtoMessage() {}

func (x *ListIssuePermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIssuePermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListIssuePermissionsResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{45}
}

func (x *ListIssuePermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Next available tag: 4
type MoveIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef          *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	TargetProjectName string    `protobuf:"bytes,3,opt,name=target_project_name,json=targetProjectName,proto3" json:"target_project_name,omitempty"`
}

func (x *MoveIssueRequest) Reset() {
	*x = MoveIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveIssueRequest) ProtoMessage() {}

func (x *MoveIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveIssueRequest.ProtoReflect.Descriptor instead.
func (*MoveIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{46}
}

func (x *MoveIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *MoveIssueRequest) GetTargetProjectName() string {
	if x != nil {
		return x.TargetProjectName
	}
	return ""
}

// Next available tag: 2
type MoveIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewIssueRef *IssueRef `protobuf:"bytes,1,opt,name=new_issue_ref,json=newIssueRef,proto3" json:"new_issue_ref,omitempty"`
}

func (x *MoveIssueResponse) Reset() {
	*x = MoveIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveIssueResponse) ProtoMessage() {}

func (x *MoveIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveIssueResponse.ProtoReflect.Descriptor instead.
func (*MoveIssueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{47}
}

func (x *MoveIssueResponse) GetNewIssueRef() *IssueRef {
	if x != nil {
		return x.NewIssueRef
	}
	return nil
}

// Next available tag: 4
type CopyIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueRef          *IssueRef `protobuf:"bytes,2,opt,name=issue_ref,json=issueRef,proto3" json:"issue_ref,omitempty"`
	TargetProjectName string    `protobuf:"bytes,3,opt,name=target_project_name,json=targetProjectName,proto3" json:"target_project_name,omitempty"`
}

func (x *CopyIssueRequest) Reset() {
	*x = CopyIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyIssueRequest) ProtoMessage() {}

func (x *CopyIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyIssueRequest.ProtoReflect.Descriptor instead.
func (*CopyIssueRequest) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{48}
}

func (x *CopyIssueRequest) GetIssueRef() *IssueRef {
	if x != nil {
		return x.IssueRef
	}
	return nil
}

func (x *CopyIssueRequest) GetTargetProjectName() string {
	if x != nil {
		return x.TargetProjectName
	}
	return ""
}

// Next available tag: 2
type CopyIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewIssueRef *IssueRef `protobuf:"bytes,1,opt,name=new_issue_ref,json=newIssueRef,proto3" json:"new_issue_ref,omitempty"`
}

func (x *CopyIssueResponse) Reset() {
	*x = CopyIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issues_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyIssueResponse) ProtoMessage() {}

func (x *CopyIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issues_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyIssueResponse.ProtoReflect.Descriptor instead.
func (*CopyIssueResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issues_proto_rawDescGZIP(), []int{49}
}

func (x *CopyIssueResponse) GetNewIssueRef() *IssueRef {
	if x != nil {
		return x.NewIssueRef
	}
	return nil
}

var File_api_api_proto_issues_proto protoreflect.FileDescriptor

var file_api_api_proto_issues_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x22, 0x6c, 0x0a, 0x0d, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x62, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x22, 0x7e, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x22, 0x53, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x22,
	0x54, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x6b, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6b, 0x65, 0x70, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x15,
	0x49, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x22, 0x37, 0x0a, 0x16, 0x49, 0x73, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x22,
	0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65,
	0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x22, 0x46, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x66, 0x22, 0x45, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x88,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x88,
	0x02, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73,
	0x12, 0x2f, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x66, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x50, 0x0a, 0x1b, 0x42, 0x75, 0x6c,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6b, 0x65, 0x70, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x6b, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x22, 0xc4, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4e, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68,
	0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x22, 0x7f, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0x97, 0x03, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e,
	0x64, 0x57, 0x68, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x57,
	0x68, 0x79, 0x52, 0x0d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x57, 0x68, 0x79, 0x52, 0x0a, 0x64,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x43, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e, 0x64, 0x57,
	0x68, 0x79, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e, 0x64,
	0x57, 0x68, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a,
	0x09, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x66, 0x12, 0x31,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x62, 0x6f,
	0x76, 0x65, 0x22, 0x66, 0x0a, 0x1d, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f,
	0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x22, 0x5d, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5a, 0x0a, 0x11, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x14, 0x0a,
	0x12, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x12, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x22, 0x40, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a, 0x10, 0x4d, 0x6f,
	0x76, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x4b, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x22, 0x73, 0x0a, 0x10,
	0x43, 0x6f, 0x70, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x4b, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x32, 0xeb,
	0x11, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x19, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65,
	0x66, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1a,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x49, 0x73, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x50, 0x72, 0x65,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x4f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4f, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x46, 0x6c,
	0x61, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09,
	0x4d, 0x6f, 0x76, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_api_proto_issues_proto_rawDescOnce sync.Once
	file_api_api_proto_issues_proto_rawDescData = file_api_api_proto_issues_proto_rawDesc
)

func file_api_api_proto_issues_proto_rawDescGZIP() []byte {
	file_api_api_proto_issues_proto_rawDescOnce.Do(func() {
		file_api_api_proto_issues_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_issues_proto_rawDescData)
	})
	return file_api_api_proto_issues_proto_rawDescData
}

var file_api_api_proto_issues_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_api_api_proto_issues_proto_goTypes = []interface{}{
	(*CreateIssueRequest)(nil),                    // 0: monorail.CreateIssueRequest
	(*GetIssueRequest)(nil),                       // 1: monorail.GetIssueRequest
	(*IssueResponse)(nil),                         // 2: monorail.IssueResponse
	(*ListIssuesRequest)(nil),                     // 3: monorail.ListIssuesRequest
	(*ListIssuesResponse)(nil),                    // 4: monorail.ListIssuesResponse
	(*ListReferencedIssuesRequest)(nil),           // 5: monorail.ListReferencedIssuesRequest
	(*ListReferencedIssuesResponse)(nil),          // 6: monorail.ListReferencedIssuesResponse
	(*ListApplicableFieldDefsRequest)(nil),        // 7: monorail.ListApplicableFieldDefsRequest
	(*ListApplicableFieldDefsResponse)(nil),       // 8: monorail.ListApplicableFieldDefsResponse
	(*UpdateIssueRequest)(nil),                    // 9: monorail.UpdateIssueRequest
	(*StarIssueRequest)(nil),                      // 10: monorail.StarIssueRequest
	(*StarIssueResponse)(nil),                     // 11: monorail.StarIssueResponse
	(*IsIssueStarredRequest)(nil),                 // 12: monorail.IsIssueStarredRequest
	(*IsIssueStarredResponse)(nil),                // 13: monorail.IsIssueStarredResponse
	(*ListStarredIssuesRequest)(nil),              // 14: monorail.ListStarredIssuesRequest
	(*ListStarredIssuesResponse)(nil),             // 15: monorail.ListStarredIssuesResponse
	(*ListCommentsRequest)(nil),                   // 16: monorail.ListCommentsRequest
	(*ListCommentsResponse)(nil),                  // 17: monorail.ListCommentsResponse
	(*ListActivitiesRequest)(nil),                 // 18: monorail.ListActivitiesRequest
	(*ListActivitiesResponse)(nil),                // 19: monorail.ListActivitiesResponse
	(*DeleteCommentRequest)(nil),                  // 20: monorail.DeleteCommentRequest
	(*BulkUpdateApprovalsRequest)(nil),            // 21: monorail.BulkUpdateApprovalsRequest
	(*BulkUpdateApprovalsResponse)(nil),           // 22: monorail.BulkUpdateApprovalsResponse
	(*UpdateApprovalRequest)(nil),                 // 23: monorail.UpdateApprovalRequest
	(*UpdateApprovalResponse)(nil),                // 24: monorail.UpdateApprovalResponse
	(*ConvertIssueApprovalsTemplateRequest)(nil),  // 25: monorail.ConvertIssueApprovalsTemplateRequest
	(*ConvertIssueApprovalsTemplateResponse)(nil), // 26: monorail.ConvertIssueApprovalsTemplateResponse
	(*IssueSnapshotRequest)(nil),                  // 27: monorail.IssueSnapshotRequest
	(*IssueSnapshotCount)(nil),                    // 28: monorail.IssueSnapshotCount
	(*IssueSnapshotResponse)(nil),                 // 29: monorail.IssueSnapshotResponse
	(*PresubmitIssueRequest)(nil),                 // 30: monorail.PresubmitIssueRequest
	(*PresubmitIssueResponse)(nil),                // 31: monorail.PresubmitIssueResponse
	(*RerankBlockedOnIssuesRequest)(nil),          // 32: monorail.RerankBlockedOnIssuesRequest
	(*RerankBlockedOnIssuesResponse)(nil),         // 33: monorail.RerankBlockedOnIssuesResponse
	(*DeleteIssueRequest)(nil),                    // 34: monorail.DeleteIssueRequest
	(*DeleteIssueResponse)(nil),                   // 35: monorail.DeleteIssueResponse
	(*DeleteIssueCommentRequest)(nil),             // 36: monorail.DeleteIssueCommentRequest
	(*DeleteIssueCommentResponse)(nil),            // 37: monorail.DeleteIssueCommentResponse
	(*DeleteAttachmentRequest)(nil),               // 38: monorail.DeleteAttachmentRequest
	(*DeleteAttachmentResponse)(nil),              // 39: monorail.DeleteAttachmentResponse
	(*FlagIssuesRequest)(nil),                     // 40: monorail.FlagIssuesRequest
	(*FlagIssuesResponse)(nil),                    // 41: monorail.FlagIssuesResponse
	(*FlagCommentRequest)(nil),                    // 42: monorail.FlagCommentRequest
	(*FlagCommentResponse)(nil),                   // 43: monorail.FlagCommentResponse
	(*ListIssuePermissionsRequest)(nil),           // 44: monorail.ListIssuePermissionsRequest
	(*ListIssuePermissionsResponse)(nil),          // 45: monorail.ListIssuePermissionsResponse
	(*MoveIssueRequest)(nil),                      // 46: monorail.MoveIssueRequest
	(*MoveIssueResponse)(nil),                     // 47: monorail.MoveIssueResponse
	(*CopyIssueRequest)(nil),                      // 48: monorail.CopyIssueRequest
	(*CopyIssueResponse)(nil),                     // 49: monorail.CopyIssueResponse
	(*Issue)(nil),                                 // 50: monorail.Issue
	(*IssueRef)(nil),                              // 51: monorail.IssueRef
	(*Pagination)(nil),                            // 52: monorail.Pagination
	(*FieldDef)(nil),                              // 53: monorail.FieldDef
	(*IssueDelta)(nil),                            // 54: monorail.IssueDelta
	(*AttachmentUpload)(nil),                      // 55: monorail.AttachmentUpload
	(*Comment)(nil),                               // 56: monorail.Comment
	(*UserRef)(nil),                               // 57: monorail.UserRef
	(*IssueSummary)(nil),                          // 58: monorail.IssueSummary
	(*FieldRef)(nil),                              // 59: monorail.FieldRef
	(*ApprovalDelta)(nil),                         // 60: monorail.ApprovalDelta
	(*Approval)(nil),                              // 61: monorail.Approval
	(*ValueAndWhy)(nil),                           // 62: monorail.ValueAndWhy
	(*emptypb.Empty)(nil),                         // 63: google.protobuf.Empty
}
var file_api_api_proto_issues_proto_depIdxs = []int32{
	50, // 0: monorail.CreateIssueRequest.issue:type_name -> monorail.Issue
	51, // 1: monorail.GetIssueRequest.issue_ref:type_name -> monorail.IssueRef
	50, // 2: monorail.IssueResponse.issue:type_name -> monorail.Issue
	51, // 3: monorail.IssueResponse.moved_to_ref:type_name -> monorail.IssueRef
	52, // 4: monorail.ListIssuesRequest.pagination:type_name -> monorail.Pagination
	50, // 5: monorail.ListIssuesResponse.issues:type_name -> monorail.Issue
	51, // 6: monorail.ListReferencedIssuesRequest.issue_refs:type_name -> monorail.IssueRef
	50, // 7: monorail.ListReferencedIssuesResponse.open_refs:type_name -> monorail.Issue
	50, // 8: monorail.ListReferencedIssuesResponse.closed_refs:type_name -> monorail.Issue
	51, // 9: monorail.ListApplicableFieldDefsRequest.issue_refs:type_name -> monorail.IssueRef
	53, // 10: monorail.ListApplicableFieldDefsResponse.field_defs:type_name -> monorail.FieldDef
	51, // 11: monorail.UpdateIssueRequest.issue_ref:type_name -> monorail.IssueRef
	54, // 12: monorail.UpdateIssueRequest.delta:type_name -> monorail.IssueDelta
	55, // 13: monorail.UpdateIssueRequest.uploads:type_name -> monorail.AttachmentUpload
	51, // 14: monorail.StarIssueRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 15: monorail.IsIssueStarredRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 16: monorail.ListStarredIssuesResponse.starred_issue_refs:type_name -> monorail.IssueRef
	51, // 17: monorail.ListCommentsRequest.issue_ref:type_name -> monorail.IssueRef
	56, // 18: monorail.ListCommentsResponse.comments:type_name -> monorail.Comment
	57, // 19: monorail.ListActivitiesRequest.user_ref:type_name -> monorail.UserRef
	56, // 20: monorail.ListActivitiesResponse.comments:type_name -> monorail.Comment
	58, // 21: monorail.ListActivitiesResponse.issue_summaries:type_name -> monorail.IssueSummary
	51, // 22: monorail.DeleteCommentRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 23: monorail.BulkUpdateApprovalsRequest.issue_refs:type_name -> monorail.IssueRef
	59, // 24: monorail.BulkUpdateApprovalsRequest.field_ref:type_name -> monorail.FieldRef
	60, // 25: monorail.BulkUpdateApprovalsRequest.approval_delta:type_name -> monorail.ApprovalDelta
	51, // 26: monorail.BulkUpdateApprovalsResponse.issue_refs:type_name -> monorail.IssueRef
	51, // 27: monorail.UpdateApprovalRequest.issue_ref:type_name -> monorail.IssueRef
	59, // 28: monorail.UpdateApprovalRequest.field_ref:type_name -> monorail.FieldRef
	60, // 29: monorail.UpdateApprovalRequest.approval_delta:type_name -> monorail.ApprovalDelta
	55, // 30: monorail.UpdateApprovalRequest.uploads:type_name -> monorail.AttachmentUpload
	61, // 31: monorail.UpdateApprovalResponse.approval:type_name -> monorail.Approval
	51, // 32: monorail.ConvertIssueApprovalsTemplateRequest.issue_ref:type_name -> monorail.IssueRef
	50, // 33: monorail.ConvertIssueApprovalsTemplateResponse.issue:type_name -> monorail.Issue
	28, // 34: monorail.IssueSnapshotResponse.snapshot_count:type_name -> monorail.IssueSnapshotCount
	51, // 35: monorail.PresubmitIssueRequest.issue_ref:type_name -> monorail.IssueRef
	54, // 36: monorail.PresubmitIssueRequest.issue_delta:type_name -> monorail.IssueDelta
	62, // 37: monorail.PresubmitIssueResponse.derived_labels:type_name -> monorail.ValueAndWhy
	62, // 38: monorail.PresubmitIssueResponse.derived_owners:type_name -> monorail.ValueAndWhy
	62, // 39: monorail.PresubmitIssueResponse.derived_ccs:type_name -> monorail.ValueAndWhy
	62, // 40: monorail.PresubmitIssueResponse.warnings:type_name -> monorail.ValueAndWhy
	62, // 41: monorail.PresubmitIssueResponse.errors:type_name -> monorail.ValueAndWhy
	51, // 42: monorail.RerankBlockedOnIssuesRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 43: monorail.RerankBlockedOnIssuesRequest.moved_ref:type_name -> monorail.IssueRef
	51, // 44: monorail.RerankBlockedOnIssuesRequest.target_ref:type_name -> monorail.IssueRef
	51, // 45: monorail.RerankBlockedOnIssuesResponse.blocked_on_issue_refs:type_name -> monorail.IssueRef
	51, // 46: monorail.DeleteIssueRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 47: monorail.DeleteIssueCommentRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 48: monorail.DeleteAttachmentRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 49: monorail.FlagIssuesRequest.issue_refs:type_name -> monorail.IssueRef
	51, // 50: monorail.FlagCommentRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 51: monorail.ListIssuePermissionsRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 52: monorail.MoveIssueRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 53: monorail.MoveIssueResponse.new_issue_ref:type_name -> monorail.IssueRef
	51, // 54: monorail.CopyIssueRequest.issue_ref:type_name -> monorail.IssueRef
	51, // 55: monorail.CopyIssueResponse.new_issue_ref:type_name -> monorail.IssueRef
	0,  // 56: monorail.Issues.CreateIssue:input_type -> monorail.CreateIssueRequest
	1,  // 57: monorail.Issues.GetIssue:input_type -> monorail.GetIssueRequest
	3,  // 58: monorail.Issues.ListIssues:input_type -> monorail.ListIssuesRequest
	5,  // 59: monorail.Issues.ListReferencedIssues:input_type -> monorail.ListReferencedIssuesRequest
	7,  // 60: monorail.Issues.ListApplicableFieldDefs:input_type -> monorail.ListApplicableFieldDefsRequest
	9,  // 61: monorail.Issues.UpdateIssue:input_type -> monorail.UpdateIssueRequest
	10, // 62: monorail.Issues.StarIssue:input_type -> monorail.StarIssueRequest
	12, // 63: monorail.Issues.IsIssueStarred:input_type -> monorail.IsIssueStarredRequest
	14, // 64: monorail.Issues.ListStarredIssues:input_type -> monorail.ListStarredIssuesRequest
	16, // 65: monorail.Issues.ListComments:input_type -> monorail.ListCommentsRequest
	18, // 66: monorail.Issues.ListActivities:input_type -> monorail.ListActivitiesRequest
	20, // 67: monorail.Issues.DeleteComment:input_type -> monorail.DeleteCommentRequest
	21, // 68: monorail.Issues.BulkUpdateApprovals:input_type -> monorail.BulkUpdateApprovalsRequest
	23, // 69: monorail.Issues.UpdateApproval:input_type -> monorail.UpdateApprovalRequest
	25, // 70: monorail.Issues.ConvertIssueApprovalsTemplate:input_type -> monorail.ConvertIssueApprovalsTemplateRequest
	27, // 71: monorail.Issues.IssueSnapshot:input_type -> monorail.IssueSnapshotRequest
	30, // 72: monorail.Issues.PresubmitIssue:input_type -> monorail.PresubmitIssueRequest
	32, // 73: monorail.Issues.RerankBlockedOnIssues:input_type -> monorail.RerankBlockedOnIssuesRequest
	34, // 74: monorail.Issues.DeleteIssue:input_type -> monorail.DeleteIssueRequest
	36, // 75: monorail.Issues.DeleteIssueComment:input_type -> monorail.DeleteIssueCommentRequest
	38, // 76: monorail.Issues.DeleteAttachment:input_type -> monorail.DeleteAttachmentRequest
	40, // 77: monorail.Issues.FlagIssues:input_type -> monorail.FlagIssuesRequest
	42, // 78: monorail.Issues.FlagComment:input_type -> monorail.FlagCommentRequest
	44, // 79: monorail.Issues.ListIssuePermissions:input_type -> monorail.ListIssuePermissionsRequest
	46, // 80: monorail.Issues.MoveIssue:input_type -> monorail.MoveIssueRequest
	48, // 81: monorail.Issues.CopyIssue:input_type -> monorail.CopyIssueRequest
	2,  // 82: monorail.Issues.CreateIssue:output_type -> monorail.IssueResponse
	2,  // 83: monorail.Issues.GetIssue:output_type -> monorail.IssueResponse
	4,  // 84: monorail.Issues.ListIssues:output_type -> monorail.ListIssuesResponse
	6,  // 85: monorail.Issues.ListReferencedIssues:output_type -> monorail.ListReferencedIssuesResponse
	8,  // 86: monorail.Issues.ListApplicableFieldDefs:output_type -> monorail.ListApplicableFieldDefsResponse
	2,  // 87: monorail.Issues.UpdateIssue:output_type -> monorail.IssueResponse
	11, // 88: monorail.Issues.StarIssue:output_type -> monorail.StarIssueResponse
	13, // 89: monorail.Issues.IsIssueStarred:output_type -> monorail.IsIssueStarredResponse
	15, // 90: monorail.Issues.ListStarredIssues:output_type -> monorail.ListStarredIssuesResponse
	17, // 91: monorail.Issues.ListComments:output_type -> monorail.ListCommentsResponse
	19, // 92: monorail.Issues.ListActivities:output_type -> monorail.ListActivitiesResponse
	63, // 93: monorail.Issues.DeleteComment:output_type -> google.protobuf.Empty
	22, // 94: monorail.Issues.BulkUpdateApprovals:output_type -> monorail.BulkUpdateApprovalsResponse
	24, // 95: monorail.Issues.UpdateApproval:output_type -> monorail.UpdateApprovalResponse
	26, // 96: monorail.Issues.ConvertIssueApprovalsTemplate:output_type -> monorail.ConvertIssueApprovalsTemplateResponse
	29, // 97: monorail.Issues.IssueSnapshot:output_type -> monorail.IssueSnapshotResponse
	31, // 98: monorail.Issues.PresubmitIssue:output_type -> monorail.PresubmitIssueResponse
	33, // 99: monorail.Issues.RerankBlockedOnIssues:output_type -> monorail.RerankBlockedOnIssuesResponse
	35, // 100: monorail.Issues.DeleteIssue:output_type -> monorail.DeleteIssueResponse
	37, // 101: monorail.Issues.DeleteIssueComment:output_type -> monorail.DeleteIssueCommentResponse
	39, // 102: monorail.Issues.DeleteAttachment:output_type -> monorail.DeleteAttachmentResponse
	41, // 103: monorail.Issues.FlagIssues:output_type -> monorail.FlagIssuesResponse
	43, // 104: monorail.Issues.FlagComment:output_type -> monorail.FlagCommentResponse
	45, // 105: monorail.Issues.ListIssuePermissions:output_type -> monorail.ListIssuePermissionsResponse
	47, // 106: monorail.Issues.MoveIssue:output_type -> monorail.MoveIssueResponse
	49, // 107: monorail.Issues.CopyIssue:output_type -> monorail.CopyIssueResponse
	82, // [82:108] is the sub-list for method output_type
	56, // [56:82] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_api_api_proto_issues_proto_init() }
func file_api_api_proto_issues_proto_init() {
	if File_api_api_proto_issues_proto != nil {
		return
	}
	file_api_api_proto_common_proto_init()
	file_api_api_proto_issue_objects_proto_init()
	file_api_api_proto_project_objects_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_issues_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReferencedIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReferencedIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicableFieldDefsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicableFieldDefsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsIssueStarredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsIssueStarredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStarredIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStarredIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateApprovalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpdateApprovalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertIssueApprovalsTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertIssueApprovalsTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSnapshotCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresubmitIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresubmitIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerankBlockedOnIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerankBlockedOnIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIssueCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttachmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagIssuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIssuePermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIssuePermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issues_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_issues_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_api_proto_issues_proto_goTypes,
		DependencyIndexes: file_api_api_proto_issues_proto_depIdxs,
		MessageInfos:      file_api_api_proto_issues_proto_msgTypes,
	}.Build()
	File_api_api_proto_issues_proto = out.File
	file_api_api_proto_issues_proto_rawDesc = nil
	file_api_api_proto_issues_proto_goTypes = nil
	file_api_api_proto_issues_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssuesClient is the client API for Issues service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuesClient interface {
	CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error)
	ListReferencedIssues(ctx context.Context, in *ListReferencedIssuesRequest, opts ...grpc.CallOption) (*ListReferencedIssuesResponse, error)
	ListApplicableFieldDefs(ctx context.Context, in *ListApplicableFieldDefsRequest, opts ...grpc.CallOption) (*ListApplicableFieldDefsResponse, error)
	UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	StarIssue(ctx context.Context, in *StarIssueRequest, opts ...grpc.CallOption) (*StarIssueResponse, error)
	IsIssueStarred(ctx context.Context, in *IsIssueStarredRequest, opts ...grpc.CallOption) (*IsIssueStarredResponse, error)
	ListStarredIssues(ctx context.Context, in *ListStarredIssuesRequest, opts ...grpc.CallOption) (*ListStarredIssuesResponse, error)
	// There is no CreateComment method because comments are created by updates,
	// which may have just comment content and no delta.
	// There is no GetComment method, clients should use ListComments.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkUpdateApprovals(ctx context.Context, in *BulkUpdateApprovalsRequest, opts ...grpc.CallOption) (*BulkUpdateApprovalsResponse, error)
	UpdateApproval(ctx context.Context, in *UpdateApprovalRequest, opts ...grpc.CallOption) (*UpdateApprovalResponse, error)
	ConvertIssueApprovalsTemplate(ctx context.Context, in *ConvertIssueApprovalsTemplateRequest, opts ...grpc.CallOption) (*ConvertIssueApprovalsTemplateResponse, error)
	IssueSnapshot(ctx context.Context, in *IssueSnapshotRequest, opts ...grpc.CallOption) (*IssueSnapshotResponse, error)
	PresubmitIssue(ctx context.Context, in *PresubmitIssueRequest, opts ...grpc.CallOption) (*PresubmitIssueResponse, error)
	RerankBlockedOnIssues(ctx context.Context, in *RerankBlockedOnIssuesRequest, opts ...grpc.CallOption) (*RerankBlockedOnIssuesResponse, error)
	DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*DeleteIssueResponse, error)
	DeleteIssueComment(ctx context.Context, in *DeleteIssueCommentRequest, opts ...grpc.CallOption) (*DeleteIssueCommentResponse, error)
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error)
	FlagIssues(ctx context.Context, in *FlagIssuesRequest, opts ...grpc.CallOption) (*FlagIssuesResponse, error)
	FlagComment(ctx context.Context, in *FlagCommentRequest, opts ...grpc.CallOption) (*FlagCommentResponse, error)
	ListIssuePermissions(ctx context.Context, in *ListIssuePermissionsRequest, opts ...grpc.CallOption) (*ListIssuePermissionsResponse, error)
	MoveIssue(ctx context.Context, in *MoveIssueRequest, opts ...grpc.CallOption) (*MoveIssueResponse, error)
	CopyIssue(ctx context.Context, in *CopyIssueRequest, opts ...grpc.CallOption) (*CopyIssueResponse, error)
}
type issuesPRPCClient struct {
	client *prpc.Client
}

func NewIssuesPRPCClient(client *prpc.Client) IssuesClient {
	return &issuesPRPCClient{client}
}

func (c *issuesPRPCClient) CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error) {
	out := new(ListIssuesResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListReferencedIssues(ctx context.Context, in *ListReferencedIssuesRequest, opts ...grpc.CallOption) (*ListReferencedIssuesResponse, error) {
	out := new(ListReferencedIssuesResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListReferencedIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListApplicableFieldDefs(ctx context.Context, in *ListApplicableFieldDefsRequest, opts ...grpc.CallOption) (*ListApplicableFieldDefsResponse, error) {
	out := new(ListApplicableFieldDefsResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListApplicableFieldDefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) StarIssue(ctx context.Context, in *StarIssueRequest, opts ...grpc.CallOption) (*StarIssueResponse, error) {
	out := new(StarIssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "StarIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) IsIssueStarred(ctx context.Context, in *IsIssueStarredRequest, opts ...grpc.CallOption) (*IsIssueStarredResponse, error) {
	out := new(IsIssueStarredResponse)
	err := c.client.Call(ctx, "monorail.Issues", "IsIssueStarred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListStarredIssues(ctx context.Context, in *ListStarredIssuesRequest, opts ...grpc.CallOption) (*ListStarredIssuesResponse, error) {
	out := new(ListStarredIssuesResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListStarredIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error) {
	out := new(ListActivitiesResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "monorail.Issues", "DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) BulkUpdateApprovals(ctx context.Context, in *BulkUpdateApprovalsRequest, opts ...grpc.CallOption) (*BulkUpdateApprovalsResponse, error) {
	out := new(BulkUpdateApprovalsResponse)
	err := c.client.Call(ctx, "monorail.Issues", "BulkUpdateApprovals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) UpdateApproval(ctx context.Context, in *UpdateApprovalRequest, opts ...grpc.CallOption) (*UpdateApprovalResponse, error) {
	out := new(UpdateApprovalResponse)
	err := c.client.Call(ctx, "monorail.Issues", "UpdateApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ConvertIssueApprovalsTemplate(ctx context.Context, in *ConvertIssueApprovalsTemplateRequest, opts ...grpc.CallOption) (*ConvertIssueApprovalsTemplateResponse, error) {
	out := new(ConvertIssueApprovalsTemplateResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ConvertIssueApprovalsTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) IssueSnapshot(ctx context.Context, in *IssueSnapshotRequest, opts ...grpc.CallOption) (*IssueSnapshotResponse, error) {
	out := new(IssueSnapshotResponse)
	err := c.client.Call(ctx, "monorail.Issues", "IssueSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) PresubmitIssue(ctx context.Context, in *PresubmitIssueRequest, opts ...grpc.CallOption) (*PresubmitIssueResponse, error) {
	out := new(PresubmitIssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "PresubmitIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) RerankBlockedOnIssues(ctx context.Context, in *RerankBlockedOnIssuesRequest, opts ...grpc.CallOption) (*RerankBlockedOnIssuesResponse, error) {
	out := new(RerankBlockedOnIssuesResponse)
	err := c.client.Call(ctx, "monorail.Issues", "RerankBlockedOnIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*DeleteIssueResponse, error) {
	out := new(DeleteIssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "DeleteIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) DeleteIssueComment(ctx context.Context, in *DeleteIssueCommentRequest, opts ...grpc.CallOption) (*DeleteIssueCommentResponse, error) {
	out := new(DeleteIssueCommentResponse)
	err := c.client.Call(ctx, "monorail.Issues", "DeleteIssueComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error) {
	out := new(DeleteAttachmentResponse)
	err := c.client.Call(ctx, "monorail.Issues", "DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) FlagIssues(ctx context.Context, in *FlagIssuesRequest, opts ...grpc.CallOption) (*FlagIssuesResponse, error) {
	out := new(FlagIssuesResponse)
	err := c.client.Call(ctx, "monorail.Issues", "FlagIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) FlagComment(ctx context.Context, in *FlagCommentRequest, opts ...grpc.CallOption) (*FlagCommentResponse, error) {
	out := new(FlagCommentResponse)
	err := c.client.Call(ctx, "monorail.Issues", "FlagComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) ListIssuePermissions(ctx context.Context, in *ListIssuePermissionsRequest, opts ...grpc.CallOption) (*ListIssuePermissionsResponse, error) {
	out := new(ListIssuePermissionsResponse)
	err := c.client.Call(ctx, "monorail.Issues", "ListIssuePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) MoveIssue(ctx context.Context, in *MoveIssueRequest, opts ...grpc.CallOption) (*MoveIssueResponse, error) {
	out := new(MoveIssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "MoveIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesPRPCClient) CopyIssue(ctx context.Context, in *CopyIssueRequest, opts ...grpc.CallOption) (*CopyIssueResponse, error) {
	out := new(CopyIssueResponse)
	err := c.client.Call(ctx, "monorail.Issues", "CopyIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type issuesClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuesClient(cc grpc.ClientConnInterface) IssuesClient {
	return &issuesClient{cc}
}

func (c *issuesClient) CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error) {
	out := new(ListIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListReferencedIssues(ctx context.Context, in *ListReferencedIssuesRequest, opts ...grpc.CallOption) (*ListReferencedIssuesResponse, error) {
	out := new(ListReferencedIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListReferencedIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListApplicableFieldDefs(ctx context.Context, in *ListApplicableFieldDefsRequest, opts ...grpc.CallOption) (*ListApplicableFieldDefsResponse, error) {
	out := new(ListApplicableFieldDefsResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListApplicableFieldDefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) StarIssue(ctx context.Context, in *StarIssueRequest, opts ...grpc.CallOption) (*StarIssueResponse, error) {
	out := new(StarIssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/StarIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) IsIssueStarred(ctx context.Context, in *IsIssueStarredRequest, opts ...grpc.CallOption) (*IsIssueStarredResponse, error) {
	out := new(IsIssueStarredResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/IsIssueStarred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListStarredIssues(ctx context.Context, in *ListStarredIssuesRequest, opts ...grpc.CallOption) (*ListStarredIssuesResponse, error) {
	out := new(ListStarredIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListStarredIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error) {
	out := new(ListActivitiesResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/monorail.Issues/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) BulkUpdateApprovals(ctx context.Context, in *BulkUpdateApprovalsRequest, opts ...grpc.CallOption) (*BulkUpdateApprovalsResponse, error) {
	out := new(BulkUpdateApprovalsResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/BulkUpdateApprovals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) UpdateApproval(ctx context.Context, in *UpdateApprovalRequest, opts ...grpc.CallOption) (*UpdateApprovalResponse, error) {
	out := new(UpdateApprovalResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/UpdateApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ConvertIssueApprovalsTemplate(ctx context.Context, in *ConvertIssueApprovalsTemplateRequest, opts ...grpc.CallOption) (*ConvertIssueApprovalsTemplateResponse, error) {
	out := new(ConvertIssueApprovalsTemplateResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ConvertIssueApprovalsTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) IssueSnapshot(ctx context.Context, in *IssueSnapshotRequest, opts ...grpc.CallOption) (*IssueSnapshotResponse, error) {
	out := new(IssueSnapshotResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/IssueSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) PresubmitIssue(ctx context.Context, in *PresubmitIssueRequest, opts ...grpc.CallOption) (*PresubmitIssueResponse, error) {
	out := new(PresubmitIssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/PresubmitIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) RerankBlockedOnIssues(ctx context.Context, in *RerankBlockedOnIssuesRequest, opts ...grpc.CallOption) (*RerankBlockedOnIssuesResponse, error) {
	out := new(RerankBlockedOnIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/RerankBlockedOnIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*DeleteIssueResponse, error) {
	out := new(DeleteIssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/DeleteIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) DeleteIssueComment(ctx context.Context, in *DeleteIssueCommentRequest, opts ...grpc.CallOption) (*DeleteIssueCommentResponse, error) {
	out := new(DeleteIssueCommentResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/DeleteIssueComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error) {
	out := new(DeleteAttachmentResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) FlagIssues(ctx context.Context, in *FlagIssuesRequest, opts ...grpc.CallOption) (*FlagIssuesResponse, error) {
	out := new(FlagIssuesResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/FlagIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) FlagComment(ctx context.Context, in *FlagCommentRequest, opts ...grpc.CallOption) (*FlagCommentResponse, error) {
	out := new(FlagCommentResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/FlagComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) ListIssuePermissions(ctx context.Context, in *ListIssuePermissionsRequest, opts ...grpc.CallOption) (*ListIssuePermissionsResponse, error) {
	out := new(ListIssuePermissionsResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/ListIssuePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) MoveIssue(ctx context.Context, in *MoveIssueRequest, opts ...grpc.CallOption) (*MoveIssueResponse, error) {
	out := new(MoveIssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/MoveIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuesClient) CopyIssue(ctx context.Context, in *CopyIssueRequest, opts ...grpc.CallOption) (*CopyIssueResponse, error) {
	out := new(CopyIssueResponse)
	err := c.cc.Invoke(ctx, "/monorail.Issues/CopyIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuesServer is the server API for Issues service.
type IssuesServer interface {
	CreateIssue(context.Context, *CreateIssueRequest) (*IssueResponse, error)
	GetIssue(context.Context, *GetIssueRequest) (*IssueResponse, error)
	ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error)
	ListReferencedIssues(context.Context, *ListReferencedIssuesRequest) (*ListReferencedIssuesResponse, error)
	ListApplicableFieldDefs(context.Context, *ListApplicableFieldDefsRequest) (*ListApplicableFieldDefsResponse, error)
	UpdateIssue(context.Context, *UpdateIssueRequest) (*IssueResponse, error)
	StarIssue(context.Context, *StarIssueRequest) (*StarIssueResponse, error)
	IsIssueStarred(context.Context, *IsIssueStarredRequest) (*IsIssueStarredResponse, error)
	ListStarredIssues(context.Context, *ListStarredIssuesRequest) (*ListStarredIssuesResponse, error)
	// There is no CreateComment method because comments are created by updates,
	// which may have just comment content and no delta.
	// There is no GetComment method, clients should use ListComments.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error)
	BulkUpdateApprovals(context.Context, *BulkUpdateApprovalsRequest) (*BulkUpdateApprovalsResponse, error)
	UpdateApproval(context.Context, *UpdateApprovalRequest) (*UpdateApprovalResponse, error)
	ConvertIssueApprovalsTemplate(context.Context, *ConvertIssueApprovalsTemplateRequest) (*ConvertIssueApprovalsTemplateResponse, error)
	IssueSnapshot(context.Context, *IssueSnapshotRequest) (*IssueSnapshotResponse, error)
	PresubmitIssue(context.Context, *PresubmitIssueRequest) (*PresubmitIssueResponse, error)
	RerankBlockedOnIssues(context.Context, *RerankBlockedOnIssuesRequest) (*RerankBlockedOnIssuesResponse, error)
	DeleteIssue(context.Context, *DeleteIssueRequest) (*DeleteIssueResponse, error)
	DeleteIssueComment(context.Context, *DeleteIssueCommentRequest) (*DeleteIssueCommentResponse, error)
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error)
	FlagIssues(context.Context, *FlagIssuesRequest) (*FlagIssuesResponse, error)
	FlagComment(context.Context, *FlagCommentRequest) (*FlagCommentResponse, error)
	ListIssuePermissions(context.Context, *ListIssuePermissionsRequest) (*ListIssuePermissionsResponse, error)
	MoveIssue(context.Context, *MoveIssueRequest) (*MoveIssueResponse, error)
	CopyIssue(context.Context, *CopyIssueRequest) (*CopyIssueResponse, error)
}

// UnimplementedIssuesServer can be embedded to have forward compatible implementations.
type UnimplementedIssuesServer struct {
}

func (*UnimplementedIssuesServer) CreateIssue(context.Context, *CreateIssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (*UnimplementedIssuesServer) GetIssue(context.Context, *GetIssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (*UnimplementedIssuesServer) ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssues not implemented")
}
func (*UnimplementedIssuesServer) ListReferencedIssues(context.Context, *ListReferencedIssuesRequest) (*ListReferencedIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferencedIssues not implemented")
}
func (*UnimplementedIssuesServer) ListApplicableFieldDefs(context.Context, *ListApplicableFieldDefsRequest) (*ListApplicableFieldDefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicableFieldDefs not implemented")
}
func (*UnimplementedIssuesServer) UpdateIssue(context.Context, *UpdateIssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssue not implemented")
}
func (*UnimplementedIssuesServer) StarIssue(context.Context, *StarIssueRequest) (*StarIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarIssue not implemented")
}
func (*UnimplementedIssuesServer) IsIssueStarred(context.Context, *IsIssueStarredRequest) (*IsIssueStarredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsIssueStarred not implemented")
}
func (*UnimplementedIssuesServer) ListStarredIssues(context.Context, *ListStarredIssuesRequest) (*ListStarredIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStarredIssues not implemented")
}
func (*UnimplementedIssuesServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedIssuesServer) ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivities not implemented")
}
func (*UnimplementedIssuesServer) DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (*UnimplementedIssuesServer) BulkUpdateApprovals(context.Context, *BulkUpdateApprovalsRequest) (*BulkUpdateApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateApprovals not implemented")
}
func (*UnimplementedIssuesServer) UpdateApproval(context.Context, *UpdateApprovalRequest) (*UpdateApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApproval not implemented")
}
func (*UnimplementedIssuesServer) ConvertIssueApprovalsTemplate(context.Context, *ConvertIssueApprovalsTemplateRequest) (*ConvertIssueApprovalsTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertIssueApprovalsTemplate not implemented")
}
func (*UnimplementedIssuesServer) IssueSnapshot(context.Context, *IssueSnapshotRequest) (*IssueSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueSnapshot not implemented")
}
func (*UnimplementedIssuesServer) PresubmitIssue(context.Context, *PresubmitIssueRequest) (*PresubmitIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresubmitIssue not implemented")
}
func (*UnimplementedIssuesServer) RerankBlockedOnIssues(context.Context, *RerankBlockedOnIssuesRequest) (*RerankBlockedOnIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerankBlockedOnIssues not implemented")
}
func (*UnimplementedIssuesServer) DeleteIssue(context.Context, *DeleteIssueRequest) (*DeleteIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssue not implemented")
}
func (*UnimplementedIssuesServer) DeleteIssueComment(context.Context, *DeleteIssueCommentRequest) (*DeleteIssueCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssueComment not implemented")
}
func (*UnimplementedIssuesServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (*UnimplementedIssuesServer) FlagIssues(context.Context, *FlagIssuesRequest) (*FlagIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagIssues not implemented")
}
func (*UnimplementedIssuesServer) FlagComment(context.Context, *FlagCommentRequest) (*FlagCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagComment not implemented")
}
func (*UnimplementedIssuesServer) ListIssuePermissions(context.Context, *ListIssuePermissionsRequest) (*ListIssuePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssuePermissions not implemented")
}
func (*UnimplementedIssuesServer) MoveIssue(context.Context, *MoveIssueRequest) (*MoveIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveIssue not implemented")
}
func (*UnimplementedIssuesServer) CopyIssue(context.Context, *CopyIssueRequest) (*CopyIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyIssue not implemented")
}

func RegisterIssuesServer(s prpc.Registrar, srv IssuesServer) {
	s.RegisterService(&_Issues_serviceDesc, srv)
}

func _Issues_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/CreateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).CreateIssue(ctx, req.(*CreateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListIssues(ctx, req.(*ListIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListReferencedIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferencedIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListReferencedIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListReferencedIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListReferencedIssues(ctx, req.(*ListReferencedIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListApplicableFieldDefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicableFieldDefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListApplicableFieldDefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListApplicableFieldDefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListApplicableFieldDefs(ctx, req.(*ListApplicableFieldDefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_UpdateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).UpdateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/UpdateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).UpdateIssue(ctx, req.(*UpdateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_StarIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).StarIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/StarIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).StarIssue(ctx, req.(*StarIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_IsIssueStarred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsIssueStarredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).IsIssueStarred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/IsIssueStarred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).IsIssueStarred(ctx, req.(*IsIssueStarredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListStarredIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStarredIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListStarredIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListStarredIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListStarredIssues(ctx, req.(*ListStarredIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListActivities(ctx, req.(*ListActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_BulkUpdateApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).BulkUpdateApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/BulkUpdateApprovals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).BulkUpdateApprovals(ctx, req.(*BulkUpdateApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_UpdateApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).UpdateApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/UpdateApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).UpdateApproval(ctx, req.(*UpdateApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ConvertIssueApprovalsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertIssueApprovalsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ConvertIssueApprovalsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ConvertIssueApprovalsTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ConvertIssueApprovalsTemplate(ctx, req.(*ConvertIssueApprovalsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_IssueSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).IssueSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/IssueSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).IssueSnapshot(ctx, req.(*IssueSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_PresubmitIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresubmitIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).PresubmitIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/PresubmitIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).PresubmitIssue(ctx, req.(*PresubmitIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_RerankBlockedOnIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerankBlockedOnIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).RerankBlockedOnIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/RerankBlockedOnIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).RerankBlockedOnIssues(ctx, req.(*RerankBlockedOnIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_DeleteIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).DeleteIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/DeleteIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).DeleteIssue(ctx, req.(*DeleteIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_DeleteIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIssueCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).DeleteIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/DeleteIssueComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).DeleteIssueComment(ctx, req.(*DeleteIssueCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_FlagIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).FlagIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/FlagIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).FlagIssues(ctx, req.(*FlagIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_FlagComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).FlagComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/FlagComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).FlagComment(ctx, req.(*FlagCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_ListIssuePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).ListIssuePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/ListIssuePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).ListIssuePermissions(ctx, req.(*ListIssuePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_MoveIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).MoveIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/MoveIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).MoveIssue(ctx, req.(*MoveIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Issues_CopyIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).CopyIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monorail.Issues/CopyIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).CopyIssue(ctx, req.(*CopyIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issues_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monorail.Issues",
	HandlerType: (*IssuesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssue",
			Handler:    _Issues_CreateIssue_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _Issues_GetIssue_Handler,
		},
		{
			MethodName: "ListIssues",
			Handler:    _Issues_ListIssues_Handler,
		},
		{
			MethodName: "ListReferencedIssues",
			Handler:    _Issues_ListReferencedIssues_Handler,
		},
		{
			MethodName: "ListApplicableFieldDefs",
			Handler:    _Issues_ListApplicableFieldDefs_Handler,
		},
		{
			MethodName: "UpdateIssue",
			Handler:    _Issues_UpdateIssue_Handler,
		},
		{
			MethodName: "StarIssue",
			Handler:    _Issues_StarIssue_Handler,
		},
		{
			MethodName: "IsIssueStarred",
			Handler:    _Issues_IsIssueStarred_Handler,
		},
		{
			MethodName: "ListStarredIssues",
			Handler:    _Issues_ListStarredIssues_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _Issues_ListComments_Handler,
		},
		{
			MethodName: "ListActivities",
			Handler:    _Issues_ListActivities_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Issues_DeleteComment_Handler,
		},
		{
			MethodName: "BulkUpdateApprovals",
			Handler:    _Issues_BulkUpdateApprovals_Handler,
		},
		{
			MethodName: "UpdateApproval",
			Handler:    _Issues_UpdateApproval_Handler,
		},
		{
			MethodName: "ConvertIssueApprovalsTemplate",
			Handler:    _Issues_ConvertIssueApprovalsTemplate_Handler,
		},
		{
			MethodName: "IssueSnapshot",
			Handler:    _Issues_IssueSnapshot_Handler,
		},
		{
			MethodName: "PresubmitIssue",
			Handler:    _Issues_PresubmitIssue_Handler,
		},
		{
			MethodName: "RerankBlockedOnIssues",
			Handler:    _Issues_RerankBlockedOnIssues_Handler,
		},
		{
			MethodName: "DeleteIssue",
			Handler:    _Issues_DeleteIssue_Handler,
		},
		{
			MethodName: "DeleteIssueComment",
			Handler:    _Issues_DeleteIssueComment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _Issues_DeleteAttachment_Handler,
		},
		{
			MethodName: "FlagIssues",
			Handler:    _Issues_FlagIssues_Handler,
		},
		{
			MethodName: "FlagComment",
			Handler:    _Issues_FlagComment_Handler,
		},
		{
			MethodName: "ListIssuePermissions",
			Handler:    _Issues_ListIssuePermissions_Handler,
		},
		{
			MethodName: "MoveIssue",
			Handler:    _Issues_MoveIssue_Handler,
		},
		{
			MethodName: "CopyIssue",
			Handler:    _Issues_CopyIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api_proto/issues.proto",
}
