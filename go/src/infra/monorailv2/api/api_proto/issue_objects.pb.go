// Copyright 2018 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file defines protobufs for issues and related business
// objects, e.g., field values, comments, and attachments.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: api/api_proto/issue_objects.proto

package monorail

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next available tag: 8
type ApprovalStatus int32

const (
	ApprovalStatus_NOT_SET          ApprovalStatus = 0
	ApprovalStatus_NEEDS_REVIEW     ApprovalStatus = 1
	ApprovalStatus_NA               ApprovalStatus = 2
	ApprovalStatus_REVIEW_REQUESTED ApprovalStatus = 3
	ApprovalStatus_REVIEW_STARTED   ApprovalStatus = 4
	ApprovalStatus_NEED_INFO        ApprovalStatus = 5
	ApprovalStatus_APPROVED         ApprovalStatus = 6
	ApprovalStatus_NOT_APPROVED     ApprovalStatus = 7
)

// Enum value maps for ApprovalStatus.
var (
	ApprovalStatus_name = map[int32]string{
		0: "NOT_SET",
		1: "NEEDS_REVIEW",
		2: "NA",
		3: "REVIEW_REQUESTED",
		4: "REVIEW_STARTED",
		5: "NEED_INFO",
		6: "APPROVED",
		7: "NOT_APPROVED",
	}
	ApprovalStatus_value = map[string]int32{
		"NOT_SET":          0,
		"NEEDS_REVIEW":     1,
		"NA":               2,
		"REVIEW_REQUESTED": 3,
		"REVIEW_STARTED":   4,
		"NEED_INFO":        5,
		"APPROVED":         6,
		"NOT_APPROVED":     7,
	}
)

func (x ApprovalStatus) Enum() *ApprovalStatus {
	p := new(ApprovalStatus)
	*p = x
	return p
}

func (x ApprovalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_issue_objects_proto_enumTypes[0].Descriptor()
}

func (ApprovalStatus) Type() protoreflect.EnumType {
	return &file_api_api_proto_issue_objects_proto_enumTypes[0]
}

func (x ApprovalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalStatus.Descriptor instead.
func (ApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{0}
}

// Next available tag: 7
type SearchScope int32

const (
	SearchScope_ALL       SearchScope = 0
	SearchScope_NEW       SearchScope = 1
	SearchScope_OPEN      SearchScope = 2
	SearchScope_OWNED     SearchScope = 3
	SearchScope_REPORTED  SearchScope = 4
	SearchScope_STARRED   SearchScope = 5
	SearchScope_TO_VERIFY SearchScope = 6
)

// Enum value maps for SearchScope.
var (
	SearchScope_name = map[int32]string{
		0: "ALL",
		1: "NEW",
		2: "OPEN",
		3: "OWNED",
		4: "REPORTED",
		5: "STARRED",
		6: "TO_VERIFY",
	}
	SearchScope_value = map[string]int32{
		"ALL":       0,
		"NEW":       1,
		"OPEN":      2,
		"OWNED":     3,
		"REPORTED":  4,
		"STARRED":   5,
		"TO_VERIFY": 6,
	}
)

func (x SearchScope) Enum() *SearchScope {
	p := new(SearchScope)
	*p = x
	return p
}

func (x SearchScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchScope) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_issue_objects_proto_enumTypes[1].Descriptor()
}

func (SearchScope) Type() protoreflect.EnumType {
	return &file_api_api_proto_issue_objects_proto_enumTypes[1]
}

func (x SearchScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchScope.Descriptor instead.
func (SearchScope) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{1}
}

// Next available tag: 8
type Approval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldRef     *FieldRef      `protobuf:"bytes,1,opt,name=field_ref,json=fieldRef,proto3" json:"field_ref,omitempty"`
	ApproverRefs []*UserRef     `protobuf:"bytes,2,rep,name=approver_refs,json=approverRefs,proto3" json:"approver_refs,omitempty"`
	Status       ApprovalStatus `protobuf:"varint,3,opt,name=status,proto3,enum=monorail.ApprovalStatus" json:"status,omitempty"`
	SetOn        uint32         `protobuf:"fixed32,4,opt,name=set_on,json=setOn,proto3" json:"set_on,omitempty"`
	SetterRef    *UserRef       `protobuf:"bytes,5,opt,name=setter_ref,json=setterRef,proto3" json:"setter_ref,omitempty"`
	PhaseRef     *PhaseRef      `protobuf:"bytes,7,opt,name=phase_ref,json=phaseRef,proto3" json:"phase_ref,omitempty"`
}

func (x *Approval) Reset() {
	*x = Approval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Approval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approval) ProtoMessage() {}

func (x *Approval) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approval.ProtoReflect.Descriptor instead.
func (*Approval) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Approval) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *Approval) GetApproverRefs() []*UserRef {
	if x != nil {
		return x.ApproverRefs
	}
	return nil
}

func (x *Approval) GetStatus() ApprovalStatus {
	if x != nil {
		return x.Status
	}
	return ApprovalStatus_NOT_SET
}

func (x *Approval) GetSetOn() uint32 {
	if x != nil {
		return x.SetOn
	}
	return 0
}

func (x *Approval) GetSetterRef() *UserRef {
	if x != nil {
		return x.SetterRef
	}
	return nil
}

func (x *Approval) GetPhaseRef() *PhaseRef {
	if x != nil {
		return x.PhaseRef
	}
	return nil
}

// This message is only suitable for displaying the amendment to users.
// We don't currently offer structured amendments that client code can
// reason about, field names can be ambiguous, and we don't have
// old_value for most changes.
// Next available tag: 4
type Amendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This may be the name of a built-in or custom field, or relative to
	// an approval field name.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// This may be a new value that overwrote the old value, e.g., "Assigned",
	// or it may be a space-separated list of changes, e.g., "Size-L -Size-S".
	NewOrDeltaValue string `protobuf:"bytes,2,opt,name=new_or_delta_value,json=newOrDeltaValue,proto3" json:"new_or_delta_value,omitempty"`
	// old_value is only used when the user changes the summary.
	OldValue string `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
}

func (x *Amendment) Reset() {
	*x = Amendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amendment) ProtoMessage() {}

func (x *Amendment) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amendment.ProtoReflect.Descriptor instead.
func (*Amendment) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{1}
}

func (x *Amendment) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *Amendment) GetNewOrDeltaValue() string {
	if x != nil {
		return x.NewOrDeltaValue
	}
	return ""
}

func (x *Amendment) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

// Next available tag: 9
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentId uint64 `protobuf:"varint,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Filename     string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Size         uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"` // Size in bytes.
	ContentType  string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	IsDeleted    bool   `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,6,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	ViewUrl      string `protobuf:"bytes,7,opt,name=view_url,json=viewUrl,proto3" json:"view_url,omitempty"`
	DownloadUrl  string `protobuf:"bytes,8,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{2}
}

func (x *Attachment) GetAttachmentId() uint64 {
	if x != nil {
		return x.AttachmentId
	}
	return 0
}

func (x *Attachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Attachment) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Attachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Attachment) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Attachment) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Attachment) GetViewUrl() string {
	if x != nil {
		return x.ViewUrl
	}
	return ""
}

func (x *Attachment) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

// Next available tag: 16
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName    string        `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	LocalId        uint32        `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	SequenceNum    uint32        `protobuf:"varint,3,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	IsDeleted      bool          `protobuf:"varint,4,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Commenter      *UserRef      `protobuf:"bytes,5,opt,name=commenter,proto3" json:"commenter,omitempty"`
	Timestamp      uint32        `protobuf:"fixed32,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Content        string        `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	InboundMessage string        `protobuf:"bytes,8,opt,name=inbound_message,json=inboundMessage,proto3" json:"inbound_message,omitempty"`
	Amendments     []*Amendment  `protobuf:"bytes,9,rep,name=amendments,proto3" json:"amendments,omitempty"`
	Attachments    []*Attachment `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`
	ApprovalRef    *FieldRef     `protobuf:"bytes,11,opt,name=approval_ref,json=approvalRef,proto3" json:"approval_ref,omitempty"`
	// If set, this comment is an issue description.
	DescriptionNum uint32 `protobuf:"varint,12,opt,name=description_num,json=descriptionNum,proto3" json:"description_num,omitempty"`
	IsSpam         bool   `protobuf:"varint,13,opt,name=is_spam,json=isSpam,proto3" json:"is_spam,omitempty"`
	CanDelete      bool   `protobuf:"varint,14,opt,name=can_delete,json=canDelete,proto3" json:"can_delete,omitempty"`
	CanFlag        bool   `protobuf:"varint,15,opt,name=can_flag,json=canFlag,proto3" json:"can_flag,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{3}
}

func (x *Comment) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Comment) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *Comment) GetSequenceNum() uint32 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

func (x *Comment) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Comment) GetCommenter() *UserRef {
	if x != nil {
		return x.Commenter
	}
	return nil
}

func (x *Comment) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetInboundMessage() string {
	if x != nil {
		return x.InboundMessage
	}
	return ""
}

func (x *Comment) GetAmendments() []*Amendment {
	if x != nil {
		return x.Amendments
	}
	return nil
}

func (x *Comment) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Comment) GetApprovalRef() *FieldRef {
	if x != nil {
		return x.ApprovalRef
	}
	return nil
}

func (x *Comment) GetDescriptionNum() uint32 {
	if x != nil {
		return x.DescriptionNum
	}
	return 0
}

func (x *Comment) GetIsSpam() bool {
	if x != nil {
		return x.IsSpam
	}
	return false
}

func (x *Comment) GetCanDelete() bool {
	if x != nil {
		return x.CanDelete
	}
	return false
}

func (x *Comment) GetCanFlag() bool {
	if x != nil {
		return x.CanFlag
	}
	return false
}

// Next available tag: 5
type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldRef  *FieldRef `protobuf:"bytes,1,opt,name=field_ref,json=fieldRef,proto3" json:"field_ref,omitempty"`
	Value     string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsDerived bool      `protobuf:"varint,3,opt,name=is_derived,json=isDerived,proto3" json:"is_derived,omitempty"`
	PhaseRef  *PhaseRef `protobuf:"bytes,4,opt,name=phase_ref,json=phaseRef,proto3" json:"phase_ref,omitempty"`
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{4}
}

func (x *FieldValue) GetFieldRef() *FieldRef {
	if x != nil {
		return x.FieldRef
	}
	return nil
}

func (x *FieldValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FieldValue) GetIsDerived() bool {
	if x != nil {
		return x.IsDerived
	}
	return false
}

func (x *FieldValue) GetPhaseRef() *PhaseRef {
	if x != nil {
		return x.PhaseRef
	}
	return nil
}

// Next available tag: 29
type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName                string          `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	LocalId                    uint32          `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Summary                    string          `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	StatusRef                  *StatusRef      `protobuf:"bytes,4,opt,name=status_ref,json=statusRef,proto3" json:"status_ref,omitempty"`
	OwnerRef                   *UserRef        `protobuf:"bytes,5,opt,name=owner_ref,json=ownerRef,proto3" json:"owner_ref,omitempty"`
	CcRefs                     []*UserRef      `protobuf:"bytes,6,rep,name=cc_refs,json=ccRefs,proto3" json:"cc_refs,omitempty"`
	LabelRefs                  []*LabelRef     `protobuf:"bytes,7,rep,name=label_refs,json=labelRefs,proto3" json:"label_refs,omitempty"`
	ComponentRefs              []*ComponentRef `protobuf:"bytes,8,rep,name=component_refs,json=componentRefs,proto3" json:"component_refs,omitempty"`
	BlockedOnIssueRefs         []*IssueRef     `protobuf:"bytes,9,rep,name=blocked_on_issue_refs,json=blockedOnIssueRefs,proto3" json:"blocked_on_issue_refs,omitempty"`
	BlockingIssueRefs          []*IssueRef     `protobuf:"bytes,10,rep,name=blocking_issue_refs,json=blockingIssueRefs,proto3" json:"blocking_issue_refs,omitempty"`
	DanglingBlockedOnRefs      []*IssueRef     `protobuf:"bytes,23,rep,name=dangling_blocked_on_refs,json=danglingBlockedOnRefs,proto3" json:"dangling_blocked_on_refs,omitempty"`
	DanglingBlockingRefs       []*IssueRef     `protobuf:"bytes,24,rep,name=dangling_blocking_refs,json=danglingBlockingRefs,proto3" json:"dangling_blocking_refs,omitempty"`
	MergedIntoIssueRef         *IssueRef       `protobuf:"bytes,11,opt,name=merged_into_issue_ref,json=mergedIntoIssueRef,proto3" json:"merged_into_issue_ref,omitempty"`
	FieldValues                []*FieldValue   `protobuf:"bytes,12,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
	IsDeleted                  bool            `protobuf:"varint,13,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	ReporterRef                *UserRef        `protobuf:"bytes,14,opt,name=reporter_ref,json=reporterRef,proto3" json:"reporter_ref,omitempty"`
	OpenedTimestamp            uint32          `protobuf:"fixed32,15,opt,name=opened_timestamp,json=openedTimestamp,proto3" json:"opened_timestamp,omitempty"`
	ClosedTimestamp            uint32          `protobuf:"fixed32,16,opt,name=closed_timestamp,json=closedTimestamp,proto3" json:"closed_timestamp,omitempty"`
	ModifiedTimestamp          uint32          `protobuf:"fixed32,17,opt,name=modified_timestamp,json=modifiedTimestamp,proto3" json:"modified_timestamp,omitempty"`
	ComponentModifiedTimestamp uint32          `protobuf:"fixed32,25,opt,name=component_modified_timestamp,json=componentModifiedTimestamp,proto3" json:"component_modified_timestamp,omitempty"`
	StatusModifiedTimestamp    uint32          `protobuf:"fixed32,26,opt,name=status_modified_timestamp,json=statusModifiedTimestamp,proto3" json:"status_modified_timestamp,omitempty"`
	OwnerModifiedTimestamp     uint32          `protobuf:"fixed32,27,opt,name=owner_modified_timestamp,json=ownerModifiedTimestamp,proto3" json:"owner_modified_timestamp,omitempty"`
	StarCount                  uint32          `protobuf:"varint,18,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	IsSpam                     bool            `protobuf:"varint,19,opt,name=is_spam,json=isSpam,proto3" json:"is_spam,omitempty"`
	AttachmentCount            uint32          `protobuf:"varint,20,opt,name=attachment_count,json=attachmentCount,proto3" json:"attachment_count,omitempty"`
	ApprovalValues             []*Approval     `protobuf:"bytes,21,rep,name=approval_values,json=approvalValues,proto3" json:"approval_values,omitempty"`
	Phases                     []*PhaseDef     `protobuf:"bytes,22,rep,name=phases,proto3" json:"phases,omitempty"`
	MigratedId                 string          `protobuf:"bytes,28,opt,name=migrated_id,json=migratedId,proto3" json:"migrated_id,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{5}
}

func (x *Issue) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Issue) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *Issue) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Issue) GetStatusRef() *StatusRef {
	if x != nil {
		return x.StatusRef
	}
	return nil
}

func (x *Issue) GetOwnerRef() *UserRef {
	if x != nil {
		return x.OwnerRef
	}
	return nil
}

func (x *Issue) GetCcRefs() []*UserRef {
	if x != nil {
		return x.CcRefs
	}
	return nil
}

func (x *Issue) GetLabelRefs() []*LabelRef {
	if x != nil {
		return x.LabelRefs
	}
	return nil
}

func (x *Issue) GetComponentRefs() []*ComponentRef {
	if x != nil {
		return x.ComponentRefs
	}
	return nil
}

func (x *Issue) GetBlockedOnIssueRefs() []*IssueRef {
	if x != nil {
		return x.BlockedOnIssueRefs
	}
	return nil
}

func (x *Issue) GetBlockingIssueRefs() []*IssueRef {
	if x != nil {
		return x.BlockingIssueRefs
	}
	return nil
}

func (x *Issue) GetDanglingBlockedOnRefs() []*IssueRef {
	if x != nil {
		return x.DanglingBlockedOnRefs
	}
	return nil
}

func (x *Issue) GetDanglingBlockingRefs() []*IssueRef {
	if x != nil {
		return x.DanglingBlockingRefs
	}
	return nil
}

func (x *Issue) GetMergedIntoIssueRef() *IssueRef {
	if x != nil {
		return x.MergedIntoIssueRef
	}
	return nil
}

func (x *Issue) GetFieldValues() []*FieldValue {
	if x != nil {
		return x.FieldValues
	}
	return nil
}

func (x *Issue) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Issue) GetReporterRef() *UserRef {
	if x != nil {
		return x.ReporterRef
	}
	return nil
}

func (x *Issue) GetOpenedTimestamp() uint32 {
	if x != nil {
		return x.OpenedTimestamp
	}
	return 0
}

func (x *Issue) GetClosedTimestamp() uint32 {
	if x != nil {
		return x.ClosedTimestamp
	}
	return 0
}

func (x *Issue) GetModifiedTimestamp() uint32 {
	if x != nil {
		return x.ModifiedTimestamp
	}
	return 0
}

func (x *Issue) GetComponentModifiedTimestamp() uint32 {
	if x != nil {
		return x.ComponentModifiedTimestamp
	}
	return 0
}

func (x *Issue) GetStatusModifiedTimestamp() uint32 {
	if x != nil {
		return x.StatusModifiedTimestamp
	}
	return 0
}

func (x *Issue) GetOwnerModifiedTimestamp() uint32 {
	if x != nil {
		return x.OwnerModifiedTimestamp
	}
	return 0
}

func (x *Issue) GetStarCount() uint32 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

func (x *Issue) GetIsSpam() bool {
	if x != nil {
		return x.IsSpam
	}
	return false
}

func (x *Issue) GetAttachmentCount() uint32 {
	if x != nil {
		return x.AttachmentCount
	}
	return 0
}

func (x *Issue) GetApprovalValues() []*Approval {
	if x != nil {
		return x.ApprovalValues
	}
	return nil
}

func (x *Issue) GetPhases() []*PhaseDef {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *Issue) GetMigratedId() string {
	if x != nil {
		return x.MigratedId
	}
	return ""
}

// Next available tag: 18
type IssueDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: We use StringValue instead of string so that we can
	// check if delta.HasField('status').  Proto3 only allows that
	// for nested messages and provides "boxed" values for this purpose.
	// In JSON, a StringValue is represented as a simple string.
	Status              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OwnerRef            *UserRef                `protobuf:"bytes,2,opt,name=owner_ref,json=ownerRef,proto3" json:"owner_ref,omitempty"`
	CcRefsAdd           []*UserRef              `protobuf:"bytes,3,rep,name=cc_refs_add,json=ccRefsAdd,proto3" json:"cc_refs_add,omitempty"`
	CcRefsRemove        []*UserRef              `protobuf:"bytes,4,rep,name=cc_refs_remove,json=ccRefsRemove,proto3" json:"cc_refs_remove,omitempty"`
	CompRefsAdd         []*ComponentRef         `protobuf:"bytes,5,rep,name=comp_refs_add,json=compRefsAdd,proto3" json:"comp_refs_add,omitempty"`
	CompRefsRemove      []*ComponentRef         `protobuf:"bytes,6,rep,name=comp_refs_remove,json=compRefsRemove,proto3" json:"comp_refs_remove,omitempty"`
	LabelRefsAdd        []*LabelRef             `protobuf:"bytes,7,rep,name=label_refs_add,json=labelRefsAdd,proto3" json:"label_refs_add,omitempty"`
	LabelRefsRemove     []*LabelRef             `protobuf:"bytes,8,rep,name=label_refs_remove,json=labelRefsRemove,proto3" json:"label_refs_remove,omitempty"`
	FieldValsAdd        []*FieldValue           `protobuf:"bytes,9,rep,name=field_vals_add,json=fieldValsAdd,proto3" json:"field_vals_add,omitempty"`
	FieldValsRemove     []*FieldValue           `protobuf:"bytes,10,rep,name=field_vals_remove,json=fieldValsRemove,proto3" json:"field_vals_remove,omitempty"`
	FieldsClear         []*FieldRef             `protobuf:"bytes,11,rep,name=fields_clear,json=fieldsClear,proto3" json:"fields_clear,omitempty"`
	BlockedOnRefsAdd    []*IssueRef             `protobuf:"bytes,12,rep,name=blocked_on_refs_add,json=blockedOnRefsAdd,proto3" json:"blocked_on_refs_add,omitempty"`
	BlockedOnRefsRemove []*IssueRef             `protobuf:"bytes,13,rep,name=blocked_on_refs_remove,json=blockedOnRefsRemove,proto3" json:"blocked_on_refs_remove,omitempty"`
	BlockingRefsAdd     []*IssueRef             `protobuf:"bytes,14,rep,name=blocking_refs_add,json=blockingRefsAdd,proto3" json:"blocking_refs_add,omitempty"`
	BlockingRefsRemove  []*IssueRef             `protobuf:"bytes,15,rep,name=blocking_refs_remove,json=blockingRefsRemove,proto3" json:"blocking_refs_remove,omitempty"`
	MergedIntoRef       *IssueRef               `protobuf:"bytes,16,opt,name=merged_into_ref,json=mergedIntoRef,proto3" json:"merged_into_ref,omitempty"`
	Summary             *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *IssueDelta) Reset() {
	*x = IssueDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueDelta) ProtoMessage() {}

func (x *IssueDelta) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueDelta.ProtoReflect.Descriptor instead.
func (*IssueDelta) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{6}
}

func (x *IssueDelta) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IssueDelta) GetOwnerRef() *UserRef {
	if x != nil {
		return x.OwnerRef
	}
	return nil
}

func (x *IssueDelta) GetCcRefsAdd() []*UserRef {
	if x != nil {
		return x.CcRefsAdd
	}
	return nil
}

func (x *IssueDelta) GetCcRefsRemove() []*UserRef {
	if x != nil {
		return x.CcRefsRemove
	}
	return nil
}

func (x *IssueDelta) GetCompRefsAdd() []*ComponentRef {
	if x != nil {
		return x.CompRefsAdd
	}
	return nil
}

func (x *IssueDelta) GetCompRefsRemove() []*ComponentRef {
	if x != nil {
		return x.CompRefsRemove
	}
	return nil
}

func (x *IssueDelta) GetLabelRefsAdd() []*LabelRef {
	if x != nil {
		return x.LabelRefsAdd
	}
	return nil
}

func (x *IssueDelta) GetLabelRefsRemove() []*LabelRef {
	if x != nil {
		return x.LabelRefsRemove
	}
	return nil
}

func (x *IssueDelta) GetFieldValsAdd() []*FieldValue {
	if x != nil {
		return x.FieldValsAdd
	}
	return nil
}

func (x *IssueDelta) GetFieldValsRemove() []*FieldValue {
	if x != nil {
		return x.FieldValsRemove
	}
	return nil
}

func (x *IssueDelta) GetFieldsClear() []*FieldRef {
	if x != nil {
		return x.FieldsClear
	}
	return nil
}

func (x *IssueDelta) GetBlockedOnRefsAdd() []*IssueRef {
	if x != nil {
		return x.BlockedOnRefsAdd
	}
	return nil
}

func (x *IssueDelta) GetBlockedOnRefsRemove() []*IssueRef {
	if x != nil {
		return x.BlockedOnRefsRemove
	}
	return nil
}

func (x *IssueDelta) GetBlockingRefsAdd() []*IssueRef {
	if x != nil {
		return x.BlockingRefsAdd
	}
	return nil
}

func (x *IssueDelta) GetBlockingRefsRemove() []*IssueRef {
	if x != nil {
		return x.BlockingRefsRemove
	}
	return nil
}

func (x *IssueDelta) GetMergedIntoRef() *IssueRef {
	if x != nil {
		return x.MergedIntoRef
	}
	return nil
}

func (x *IssueDelta) GetSummary() *wrapperspb.StringValue {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Next available tag: 7
type ApprovalDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             ApprovalStatus `protobuf:"varint,1,opt,name=status,proto3,enum=monorail.ApprovalStatus" json:"status,omitempty"`
	ApproverRefsAdd    []*UserRef     `protobuf:"bytes,2,rep,name=approver_refs_add,json=approverRefsAdd,proto3" json:"approver_refs_add,omitempty"`
	ApproverRefsRemove []*UserRef     `protobuf:"bytes,3,rep,name=approver_refs_remove,json=approverRefsRemove,proto3" json:"approver_refs_remove,omitempty"`
	FieldValsAdd       []*FieldValue  `protobuf:"bytes,4,rep,name=field_vals_add,json=fieldValsAdd,proto3" json:"field_vals_add,omitempty"`
	FieldValsRemove    []*FieldValue  `protobuf:"bytes,5,rep,name=field_vals_remove,json=fieldValsRemove,proto3" json:"field_vals_remove,omitempty"`
	FieldsClear        []*FieldRef    `protobuf:"bytes,6,rep,name=fields_clear,json=fieldsClear,proto3" json:"fields_clear,omitempty"`
}

func (x *ApprovalDelta) Reset() {
	*x = ApprovalDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalDelta) ProtoMessage() {}

func (x *ApprovalDelta) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalDelta.ProtoReflect.Descriptor instead.
func (*ApprovalDelta) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{7}
}

func (x *ApprovalDelta) GetStatus() ApprovalStatus {
	if x != nil {
		return x.Status
	}
	return ApprovalStatus_NOT_SET
}

func (x *ApprovalDelta) GetApproverRefsAdd() []*UserRef {
	if x != nil {
		return x.ApproverRefsAdd
	}
	return nil
}

func (x *ApprovalDelta) GetApproverRefsRemove() []*UserRef {
	if x != nil {
		return x.ApproverRefsRemove
	}
	return nil
}

func (x *ApprovalDelta) GetFieldValsAdd() []*FieldValue {
	if x != nil {
		return x.FieldValsAdd
	}
	return nil
}

func (x *ApprovalDelta) GetFieldValsRemove() []*FieldValue {
	if x != nil {
		return x.FieldValsRemove
	}
	return nil
}

func (x *ApprovalDelta) GetFieldsClear() []*FieldRef {
	if x != nil {
		return x.FieldsClear
	}
	return nil
}

// Next available tag: 3
type AttachmentUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *AttachmentUpload) Reset() {
	*x = AttachmentUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentUpload) ProtoMessage() {}

func (x *AttachmentUpload) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentUpload.ProtoReflect.Descriptor instead.
func (*AttachmentUpload) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{8}
}

func (x *AttachmentUpload) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *AttachmentUpload) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// Next available tag: 4
type IssueSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	LocalId     uint32 `protobuf:"varint,2,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Summary     string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *IssueSummary) Reset() {
	*x = IssueSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSummary) ProtoMessage() {}

func (x *IssueSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSummary.ProtoReflect.Descriptor instead.
func (*IssueSummary) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{9}
}

func (x *IssueSummary) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *IssueSummary) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *IssueSummary) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// Next available tag: 3
type PhaseDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseRef *PhaseRef `protobuf:"bytes,1,opt,name=phase_ref,json=phaseRef,proto3" json:"phase_ref,omitempty"`
	Rank     uint32    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *PhaseDef) Reset() {
	*x = PhaseDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseDef) ProtoMessage() {}

func (x *PhaseDef) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseDef.ProtoReflect.Descriptor instead.
func (*PhaseDef) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{10}
}

func (x *PhaseDef) GetPhaseRef() *PhaseRef {
	if x != nil {
		return x.PhaseRef
	}
	return nil
}

func (x *PhaseDef) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// Next available tag: 2
type PhaseRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseName string `protobuf:"bytes,1,opt,name=phase_name,json=phaseName,proto3" json:"phase_name,omitempty"`
}

func (x *PhaseRef) Reset() {
	*x = PhaseRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_issue_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseRef) ProtoMessage() {}

func (x *PhaseRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_issue_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseRef.ProtoReflect.Descriptor instead.
func (*PhaseRef) Descriptor() ([]byte, []int) {
	return file_api_api_proto_issue_objects_proto_rawDescGZIP(), []int{11}
}

func (x *PhaseRef) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

var File_api_api_proto_issue_objects_proto protoreflect.FileDescriptor

var file_api_api_proto_issue_objects_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x05, 0x73, 0x65, 0x74, 0x4f, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52,
	0x09, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x22, 0x74, 0x0a, 0x09, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x86, 0x02, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xbb, 0x04, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x22, 0x82,
	0x0b, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x66, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x06, 0x63, 0x63, 0x52, 0x65, 0x66, 0x73,
	0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x73, 0x12, 0x45, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x42, 0x0a, 0x13, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4b, 0x0a,
	0x18, 0x64, 0x61, 0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x52, 0x15, 0x64, 0x61, 0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x48, 0x0a, 0x16, 0x64, 0x61,
	0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x14,
	0x64, 0x61, 0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x66, 0x73, 0x12, 0x45, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x6f, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x18,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x16,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x65, 0x66, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x22, 0x91, 0x08, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x63, 0x5f, 0x72,
	0x65, 0x66, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x52, 0x09, 0x63, 0x63, 0x52, 0x65, 0x66, 0x73, 0x41, 0x64, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x63,
	0x63, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x63, 0x63, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x66, 0x73, 0x41, 0x64, 0x64,
	0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x52, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x41, 0x64, 0x64, 0x12, 0x3e, 0x0a, 0x11,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x12, 0x41, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x66,
	0x73, 0x41, 0x64, 0x64, 0x12, 0x47, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x4f, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3e, 0x0a,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x41, 0x64, 0x64, 0x12, 0x44, 0x0a,
	0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xfa, 0x02, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x66, 0x73, 0x41, 0x64, 0x64, 0x12, 0x43, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x12, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x3a, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x35, 0x0a,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x22, 0x48, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x66,
	0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x4f, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x66, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x29, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x2a, 0x90, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x5e, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41,
	0x52, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x59, 0x10, 0x06, 0x42, 0x29, 0x5a, 0x27, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x6d,
	0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_api_proto_issue_objects_proto_rawDescOnce sync.Once
	file_api_api_proto_issue_objects_proto_rawDescData = file_api_api_proto_issue_objects_proto_rawDesc
)

func file_api_api_proto_issue_objects_proto_rawDescGZIP() []byte {
	file_api_api_proto_issue_objects_proto_rawDescOnce.Do(func() {
		file_api_api_proto_issue_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_issue_objects_proto_rawDescData)
	})
	return file_api_api_proto_issue_objects_proto_rawDescData
}

var file_api_api_proto_issue_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_api_proto_issue_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_api_proto_issue_objects_proto_goTypes = []interface{}{
	(ApprovalStatus)(0),            // 0: monorail.ApprovalStatus
	(SearchScope)(0),               // 1: monorail.SearchScope
	(*Approval)(nil),               // 2: monorail.Approval
	(*Amendment)(nil),              // 3: monorail.Amendment
	(*Attachment)(nil),             // 4: monorail.Attachment
	(*Comment)(nil),                // 5: monorail.Comment
	(*FieldValue)(nil),             // 6: monorail.FieldValue
	(*Issue)(nil),                  // 7: monorail.Issue
	(*IssueDelta)(nil),             // 8: monorail.IssueDelta
	(*ApprovalDelta)(nil),          // 9: monorail.ApprovalDelta
	(*AttachmentUpload)(nil),       // 10: monorail.AttachmentUpload
	(*IssueSummary)(nil),           // 11: monorail.IssueSummary
	(*PhaseDef)(nil),               // 12: monorail.PhaseDef
	(*PhaseRef)(nil),               // 13: monorail.PhaseRef
	(*FieldRef)(nil),               // 14: monorail.FieldRef
	(*UserRef)(nil),                // 15: monorail.UserRef
	(*StatusRef)(nil),              // 16: monorail.StatusRef
	(*LabelRef)(nil),               // 17: monorail.LabelRef
	(*ComponentRef)(nil),           // 18: monorail.ComponentRef
	(*IssueRef)(nil),               // 19: monorail.IssueRef
	(*wrapperspb.StringValue)(nil), // 20: google.protobuf.StringValue
}
var file_api_api_proto_issue_objects_proto_depIdxs = []int32{
	14, // 0: monorail.Approval.field_ref:type_name -> monorail.FieldRef
	15, // 1: monorail.Approval.approver_refs:type_name -> monorail.UserRef
	0,  // 2: monorail.Approval.status:type_name -> monorail.ApprovalStatus
	15, // 3: monorail.Approval.setter_ref:type_name -> monorail.UserRef
	13, // 4: monorail.Approval.phase_ref:type_name -> monorail.PhaseRef
	15, // 5: monorail.Comment.commenter:type_name -> monorail.UserRef
	3,  // 6: monorail.Comment.amendments:type_name -> monorail.Amendment
	4,  // 7: monorail.Comment.attachments:type_name -> monorail.Attachment
	14, // 8: monorail.Comment.approval_ref:type_name -> monorail.FieldRef
	14, // 9: monorail.FieldValue.field_ref:type_name -> monorail.FieldRef
	13, // 10: monorail.FieldValue.phase_ref:type_name -> monorail.PhaseRef
	16, // 11: monorail.Issue.status_ref:type_name -> monorail.StatusRef
	15, // 12: monorail.Issue.owner_ref:type_name -> monorail.UserRef
	15, // 13: monorail.Issue.cc_refs:type_name -> monorail.UserRef
	17, // 14: monorail.Issue.label_refs:type_name -> monorail.LabelRef
	18, // 15: monorail.Issue.component_refs:type_name -> monorail.ComponentRef
	19, // 16: monorail.Issue.blocked_on_issue_refs:type_name -> monorail.IssueRef
	19, // 17: monorail.Issue.blocking_issue_refs:type_name -> monorail.IssueRef
	19, // 18: monorail.Issue.dangling_blocked_on_refs:type_name -> monorail.IssueRef
	19, // 19: monorail.Issue.dangling_blocking_refs:type_name -> monorail.IssueRef
	19, // 20: monorail.Issue.merged_into_issue_ref:type_name -> monorail.IssueRef
	6,  // 21: monorail.Issue.field_values:type_name -> monorail.FieldValue
	15, // 22: monorail.Issue.reporter_ref:type_name -> monorail.UserRef
	2,  // 23: monorail.Issue.approval_values:type_name -> monorail.Approval
	12, // 24: monorail.Issue.phases:type_name -> monorail.PhaseDef
	20, // 25: monorail.IssueDelta.status:type_name -> google.protobuf.StringValue
	15, // 26: monorail.IssueDelta.owner_ref:type_name -> monorail.UserRef
	15, // 27: monorail.IssueDelta.cc_refs_add:type_name -> monorail.UserRef
	15, // 28: monorail.IssueDelta.cc_refs_remove:type_name -> monorail.UserRef
	18, // 29: monorail.IssueDelta.comp_refs_add:type_name -> monorail.ComponentRef
	18, // 30: monorail.IssueDelta.comp_refs_remove:type_name -> monorail.ComponentRef
	17, // 31: monorail.IssueDelta.label_refs_add:type_name -> monorail.LabelRef
	17, // 32: monorail.IssueDelta.label_refs_remove:type_name -> monorail.LabelRef
	6,  // 33: monorail.IssueDelta.field_vals_add:type_name -> monorail.FieldValue
	6,  // 34: monorail.IssueDelta.field_vals_remove:type_name -> monorail.FieldValue
	14, // 35: monorail.IssueDelta.fields_clear:type_name -> monorail.FieldRef
	19, // 36: monorail.IssueDelta.blocked_on_refs_add:type_name -> monorail.IssueRef
	19, // 37: monorail.IssueDelta.blocked_on_refs_remove:type_name -> monorail.IssueRef
	19, // 38: monorail.IssueDelta.blocking_refs_add:type_name -> monorail.IssueRef
	19, // 39: monorail.IssueDelta.blocking_refs_remove:type_name -> monorail.IssueRef
	19, // 40: monorail.IssueDelta.merged_into_ref:type_name -> monorail.IssueRef
	20, // 41: monorail.IssueDelta.summary:type_name -> google.protobuf.StringValue
	0,  // 42: monorail.ApprovalDelta.status:type_name -> monorail.ApprovalStatus
	15, // 43: monorail.ApprovalDelta.approver_refs_add:type_name -> monorail.UserRef
	15, // 44: monorail.ApprovalDelta.approver_refs_remove:type_name -> monorail.UserRef
	6,  // 45: monorail.ApprovalDelta.field_vals_add:type_name -> monorail.FieldValue
	6,  // 46: monorail.ApprovalDelta.field_vals_remove:type_name -> monorail.FieldValue
	14, // 47: monorail.ApprovalDelta.fields_clear:type_name -> monorail.FieldRef
	13, // 48: monorail.PhaseDef.phase_ref:type_name -> monorail.PhaseRef
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_api_api_proto_issue_objects_proto_init() }
func file_api_api_proto_issue_objects_proto_init() {
	if File_api_api_proto_issue_objects_proto != nil {
		return
	}
	file_api_api_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_issue_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Approval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_issue_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_issue_objects_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_api_proto_issue_objects_proto_goTypes,
		DependencyIndexes: file_api_api_proto_issue_objects_proto_depIdxs,
		EnumInfos:         file_api_api_proto_issue_objects_proto_enumTypes,
		MessageInfos:      file_api_api_proto_issue_objects_proto_msgTypes,
	}.Build()
	File_api_api_proto_issue_objects_proto = out.File
	file_api_api_proto_issue_objects_proto_rawDesc = nil
	file_api_api_proto_issue_objects_proto_goTypes = nil
	file_api_api_proto_issue_objects_proto_depIdxs = nil
}
