// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/v1/api_proto/issue_objects.proto

package monorail_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// States that an issue or its comments can be in (aip.dev/216).
// Next available tag: 4
type IssueContentState int32

const (
	// The default value. This value is used if the state is omitted.
	IssueContentState_STATE_UNSPECIFIED IssueContentState = 0
	// The Issue or Comment is available.
	IssueContentState_ACTIVE IssueContentState = 1
	// The Issue or Comment has been deleted.
	IssueContentState_DELETED IssueContentState = 2
	// The Issue or Comment has been flagged as spam.
	// Takes precedent over DELETED.
	IssueContentState_SPAM IssueContentState = 3
)

var IssueContentState_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "ACTIVE",
	2: "DELETED",
	3: "SPAM",
}

var IssueContentState_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"ACTIVE":            1,
	"DELETED":           2,
	"SPAM":              3,
}

func (x IssueContentState) String() string {
	return proto.EnumName(IssueContentState_name, int32(x))
}

func (IssueContentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{0}
}

// Potential states for an approval.
// TODO(monorail:7193): comments below along with user guide for approvals.
// Next available tag: 8
type Issue_ApprovalStatus int32

const (
	// The default approval status. This value is used if the status is omitted.
	Issue_APPROVAL_STATUS_UNSPECIFIED Issue_ApprovalStatus = 0
	Issue_NEEDS_REVIEW                Issue_ApprovalStatus = 1
	Issue_NA                          Issue_ApprovalStatus = 2
	Issue_REVIEW_REQUESTED            Issue_ApprovalStatus = 3
	Issue_REVIEW_STARTED              Issue_ApprovalStatus = 4
	Issue_NEED_INFO                   Issue_ApprovalStatus = 5
	Issue_APPROVED                    Issue_ApprovalStatus = 6
	Issue_NOT_APPROVED                Issue_ApprovalStatus = 7
)

var Issue_ApprovalStatus_name = map[int32]string{
	0: "APPROVAL_STATUS_UNSPECIFIED",
	1: "NEEDS_REVIEW",
	2: "NA",
	3: "REVIEW_REQUESTED",
	4: "REVIEW_STARTED",
	5: "NEED_INFO",
	6: "APPROVED",
	7: "NOT_APPROVED",
}

var Issue_ApprovalStatus_value = map[string]int32{
	"APPROVAL_STATUS_UNSPECIFIED": 0,
	"NEEDS_REVIEW":                1,
	"NA":                          2,
	"REVIEW_REQUESTED":            3,
	"REVIEW_STARTED":              4,
	"NEED_INFO":                   5,
	"APPROVED":                    6,
	"NOT_APPROVED":                7,
}

func (x Issue_ApprovalStatus) String() string {
	return proto.EnumName(Issue_ApprovalStatus_name, int32(x))
}

func (Issue_ApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 0}
}

// Many values on an issue can be set either explicitly or by a rule.
// Next available tag: 3
type Issue_Derivation int32

const (
	// The default derivation. This value is used if the derivation is omitted.
	Issue_DERIVATION_UNSPECIFIED Issue_Derivation = 0
	// The value was explicitly set on the issue.
	Issue_EXPLICIT Issue_Derivation = 1
	// Value was auto-applied to the issue based on a project's rule. See
	// monorail/doc/userguide/project-owners.md#how-to-configure-filter-rules
	Issue_RULE Issue_Derivation = 2
)

var Issue_Derivation_name = map[int32]string{
	0: "DERIVATION_UNSPECIFIED",
	1: "EXPLICIT",
	2: "RULE",
}

var Issue_Derivation_value = map[string]int32{
	"DERIVATION_UNSPECIFIED": 0,
	"EXPLICIT":               1,
	"RULE":                   2,
}

func (x Issue_Derivation) String() string {
	return proto.EnumName(Issue_Derivation_name, int32(x))
}

func (Issue_Derivation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 1}
}

// Represents a comment and any associated changes to an Issue.
//
// Comments cannot be Created or Updated through standard methods. The
// OUTPUT_ONLY annotations here indicate fields that would never be provided
// by the user even if these methods were made available.
// Next available tag: 8.
type Comment struct {
	// Resource name of the comment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the comment.
	State IssueContentState `protobuf:"varint,2,opt,name=state,proto3,enum=monorail.v1.IssueContentState" json:"state,omitempty"`
	// The text of the comment.
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// Resource name of the author of the comment.
	Commenter string `protobuf:"bytes,4,opt,name=commenter,proto3" json:"commenter,omitempty"`
	// The time this comment was added to the Issue.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional string full text of an email that caused this comment to be added.
	InboundMessage string `protobuf:"bytes,6,opt,name=inbound_message,json=inboundMessage,proto3" json:"inbound_message,omitempty"`
	// The approval this comment is associated with, if applicable.
	Approval             string   `protobuf:"bytes,7,opt,name=approval,proto3" json:"approval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{0}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Comment) GetState() IssueContentState {
	if m != nil {
		return m.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCommenter() string {
	if m != nil {
		return m.Commenter
	}
	return ""
}

func (m *Comment) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Comment) GetInboundMessage() string {
	if m != nil {
		return m.InboundMessage
	}
	return ""
}

func (m *Comment) GetApproval() string {
	if m != nil {
		return m.Approval
	}
	return ""
}

// Documents and tracks a bug, task, or feature request within a Project.
// Next available tag: 25
type Issue struct {
	// Resource name of the issue.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A brief summary of the issue. Generally displayed as a user-facing title.
	// TODO(monorail:6988): The UI limits summary length while the backend does
	// not. Resolve this discrepancy.
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// The state of the issue.
	State IssueContentState `protobuf:"varint,3,opt,name=state,proto3,enum=monorail.v1.IssueContentState" json:"state,omitempty"`
	// The current status of the issue.
	Status *Issue_StatusValue `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Longer text describing the issue.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The user who created the issue.
	Reporter string `protobuf:"bytes,6,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// The user currently responsible for the issue.
	Owner *Issue_UserValue `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	// Additional users receiving notifications on the issue.
	CcUsers []*Issue_UserValue `protobuf:"bytes,8,rep,name=cc_users,json=ccUsers,proto3" json:"cc_users,omitempty"`
	// Labels applied to the issue
	Labels []*Issue_LabelValue `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
	// Components the issue is associated with.
	Components []*Issue_ComponentValue `protobuf:"bytes,10,rep,name=components,proto3" json:"components,omitempty"`
	// Values for custom fields on the issue.
	FieldValues []*Issue_FieldValue `protobuf:"bytes,11,rep,name=field_values,json=fieldValues,proto3" json:"field_values,omitempty"`
	// An issue can be merged into another. If this value is set, the issue
	// to referred should be considered the primary source for further updates.
	MergedIntoIssueRef *IssueRef `protobuf:"bytes,12,opt,name=merged_into_issue_ref,json=mergedIntoIssueRef,proto3" json:"merged_into_issue_ref,omitempty"`
	// Issues preventing the completion of this issue.
	BlockedOnIssueRefs []*IssueRef `protobuf:"bytes,13,rep,name=blocked_on_issue_refs,json=blockedOnIssueRefs,proto3" json:"blocked_on_issue_refs,omitempty"`
	// Issues for which this issue is blocking completion.
	BlockingIssueRefs []*IssueRef `protobuf:"bytes,14,rep,name=blocking_issue_refs,json=blockingIssueRefs,proto3" json:"blocking_issue_refs,omitempty"`
	// The time the issue was reported.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The most recent time the issue was closed.
	CloseTime *timestamp.Timestamp `protobuf:"bytes,16,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	// The most recent time the issue was modified.
	ModifyTime *timestamp.Timestamp `protobuf:"bytes,17,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	// The most recent time a component value was modified.
	ComponentModifyTime *timestamp.Timestamp `protobuf:"bytes,18,opt,name=component_modify_time,json=componentModifyTime,proto3" json:"component_modify_time,omitempty"`
	// The most recent time the status value was modified.
	StatusModifyTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=status_modify_time,json=statusModifyTime,proto3" json:"status_modify_time,omitempty"`
	// The most recent time the owner made a modification to the issue.
	OwnerModifyTime *timestamp.Timestamp `protobuf:"bytes,20,opt,name=owner_modify_time,json=ownerModifyTime,proto3" json:"owner_modify_time,omitempty"`
	// The number of attachments associated with the issue.
	AttachmentCount uint32 `protobuf:"varint,21,opt,name=attachment_count,json=attachmentCount,proto3" json:"attachment_count,omitempty"`
	// The number of users who have starred the issue.
	StarCount uint32 `protobuf:"varint,22,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
	// Values set on approvals associated with the issue (if applicable).
	ApprovalValues []*Issue_ApprovalValue `protobuf:"bytes,23,rep,name=approval_values,json=approvalValues,proto3" json:"approval_values,omitempty"`
	// Phases the issue's approval can go through (if applicable).
	// Once created, these cannot be changed.
	// TODO(monorail:7193): add user guide for phases/approvals.
	Phases               []string `protobuf:"bytes,24,rep,name=phases,proto3" json:"phases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1}
}

func (m *Issue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue.Unmarshal(m, b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
}
func (m *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(m, src)
}
func (m *Issue) XXX_Size() int {
	return xxx_messageInfo_Issue.Size(m)
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issue) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Issue) GetState() IssueContentState {
	if m != nil {
		return m.State
	}
	return IssueContentState_STATE_UNSPECIFIED
}

func (m *Issue) GetStatus() *Issue_StatusValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Issue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issue) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *Issue) GetOwner() *Issue_UserValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Issue) GetCcUsers() []*Issue_UserValue {
	if m != nil {
		return m.CcUsers
	}
	return nil
}

func (m *Issue) GetLabels() []*Issue_LabelValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Issue) GetComponents() []*Issue_ComponentValue {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *Issue) GetFieldValues() []*Issue_FieldValue {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

func (m *Issue) GetMergedIntoIssueRef() *IssueRef {
	if m != nil {
		return m.MergedIntoIssueRef
	}
	return nil
}

func (m *Issue) GetBlockedOnIssueRefs() []*IssueRef {
	if m != nil {
		return m.BlockedOnIssueRefs
	}
	return nil
}

func (m *Issue) GetBlockingIssueRefs() []*IssueRef {
	if m != nil {
		return m.BlockingIssueRefs
	}
	return nil
}

func (m *Issue) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Issue) GetCloseTime() *timestamp.Timestamp {
	if m != nil {
		return m.CloseTime
	}
	return nil
}

func (m *Issue) GetModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifyTime
	}
	return nil
}

func (m *Issue) GetComponentModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.ComponentModifyTime
	}
	return nil
}

func (m *Issue) GetStatusModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusModifyTime
	}
	return nil
}

func (m *Issue) GetOwnerModifyTime() *timestamp.Timestamp {
	if m != nil {
		return m.OwnerModifyTime
	}
	return nil
}

func (m *Issue) GetAttachmentCount() uint32 {
	if m != nil {
		return m.AttachmentCount
	}
	return 0
}

func (m *Issue) GetStarCount() uint32 {
	if m != nil {
		return m.StarCount
	}
	return 0
}

func (m *Issue) GetApprovalValues() []*Issue_ApprovalValue {
	if m != nil {
		return m.ApprovalValues
	}
	return nil
}

func (m *Issue) GetPhases() []string {
	if m != nil {
		return m.Phases
	}
	return nil
}

// The value of an approval for an issue.
// Next available tag: 7
type Issue_ApprovalValue struct {
	// The resource name of the approval.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The users able to approve the issue.
	Approvers []string `protobuf:"bytes,2,rep,name=approvers,proto3" json:"approvers,omitempty"`
	// The current status of the approval.
	Status Issue_ApprovalStatus `protobuf:"varint,3,opt,name=status,proto3,enum=monorail.v1.Issue_ApprovalStatus" json:"status,omitempty"`
	// The time the approval value was last set.
	SetTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=set_time,json=setTime,proto3" json:"set_time,omitempty"`
	// The user who most recently set the issue
	Setter string `protobuf:"bytes,5,opt,name=setter,proto3" json:"setter,omitempty"`
	// The phase the approval is associated with (if applicable).
	Phase                string   `protobuf:"bytes,6,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Issue_ApprovalValue) Reset()         { *m = Issue_ApprovalValue{} }
func (m *Issue_ApprovalValue) String() string { return proto.CompactTextString(m) }
func (*Issue_ApprovalValue) ProtoMessage()    {}
func (*Issue_ApprovalValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 0}
}

func (m *Issue_ApprovalValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_ApprovalValue.Unmarshal(m, b)
}
func (m *Issue_ApprovalValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_ApprovalValue.Marshal(b, m, deterministic)
}
func (m *Issue_ApprovalValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_ApprovalValue.Merge(m, src)
}
func (m *Issue_ApprovalValue) XXX_Size() int {
	return xxx_messageInfo_Issue_ApprovalValue.Size(m)
}
func (m *Issue_ApprovalValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_ApprovalValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_ApprovalValue proto.InternalMessageInfo

func (m *Issue_ApprovalValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issue_ApprovalValue) GetApprovers() []string {
	if m != nil {
		return m.Approvers
	}
	return nil
}

func (m *Issue_ApprovalValue) GetStatus() Issue_ApprovalStatus {
	if m != nil {
		return m.Status
	}
	return Issue_APPROVAL_STATUS_UNSPECIFIED
}

func (m *Issue_ApprovalValue) GetSetTime() *timestamp.Timestamp {
	if m != nil {
		return m.SetTime
	}
	return nil
}

func (m *Issue_ApprovalValue) GetSetter() string {
	if m != nil {
		return m.Setter
	}
	return ""
}

func (m *Issue_ApprovalValue) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

// A possibly rule-derived component for the issue.
// Next available tag: 3
type Issue_ComponentValue struct {
	// The component.
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// How the component was derived.
	Derivation           Issue_Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v1.Issue_Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Issue_ComponentValue) Reset()         { *m = Issue_ComponentValue{} }
func (m *Issue_ComponentValue) String() string { return proto.CompactTextString(m) }
func (*Issue_ComponentValue) ProtoMessage()    {}
func (*Issue_ComponentValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 1}
}

func (m *Issue_ComponentValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_ComponentValue.Unmarshal(m, b)
}
func (m *Issue_ComponentValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_ComponentValue.Marshal(b, m, deterministic)
}
func (m *Issue_ComponentValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_ComponentValue.Merge(m, src)
}
func (m *Issue_ComponentValue) XXX_Size() int {
	return xxx_messageInfo_Issue_ComponentValue.Size(m)
}
func (m *Issue_ComponentValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_ComponentValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_ComponentValue proto.InternalMessageInfo

func (m *Issue_ComponentValue) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *Issue_ComponentValue) GetDerivation() Issue_Derivation {
	if m != nil {
		return m.Derivation
	}
	return Issue_DERIVATION_UNSPECIFIED
}

// A value of a custom field for an issue.
// Next available tag: 5
type Issue_FieldValue struct {
	// The project-defined field associated with this value
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// The value associated with the field.
	// Mapping of field types to string value:
	// ENUM_TYPE(int) => str(value)
	// INT_TYPE(int) => str(value)
	// STR_TYPE(str) => value
	// USER_TYPE(int) => the user's resource name
	// DATE_TYPE(int) => str(int) representing time in seconds since epoch
	// URL_TYPE(str) => value
	// APPROVAL_TYPE => Expressed in ApprovalValue messages
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// How the value was derived.
	Derivation Issue_Derivation `protobuf:"varint,3,opt,name=derivation,proto3,enum=monorail.v1.Issue_Derivation" json:"derivation,omitempty"`
	// Issues with phase-specific fields can have values for each phase.
	Phase                string   `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Issue_FieldValue) Reset()         { *m = Issue_FieldValue{} }
func (m *Issue_FieldValue) String() string { return proto.CompactTextString(m) }
func (*Issue_FieldValue) ProtoMessage()    {}
func (*Issue_FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 2}
}

func (m *Issue_FieldValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_FieldValue.Unmarshal(m, b)
}
func (m *Issue_FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_FieldValue.Marshal(b, m, deterministic)
}
func (m *Issue_FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_FieldValue.Merge(m, src)
}
func (m *Issue_FieldValue) XXX_Size() int {
	return xxx_messageInfo_Issue_FieldValue.Size(m)
}
func (m *Issue_FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_FieldValue proto.InternalMessageInfo

func (m *Issue_FieldValue) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Issue_FieldValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Issue_FieldValue) GetDerivation() Issue_Derivation {
	if m != nil {
		return m.Derivation
	}
	return Issue_DERIVATION_UNSPECIFIED
}

func (m *Issue_FieldValue) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

// A possibly rule-derived label for an issue.
// Next available tag: 3
type Issue_LabelValue struct {
	// The label.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// How the label was derived.
	Derivation           Issue_Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v1.Issue_Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Issue_LabelValue) Reset()         { *m = Issue_LabelValue{} }
func (m *Issue_LabelValue) String() string { return proto.CompactTextString(m) }
func (*Issue_LabelValue) ProtoMessage()    {}
func (*Issue_LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 3}
}

func (m *Issue_LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_LabelValue.Unmarshal(m, b)
}
func (m *Issue_LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_LabelValue.Marshal(b, m, deterministic)
}
func (m *Issue_LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_LabelValue.Merge(m, src)
}
func (m *Issue_LabelValue) XXX_Size() int {
	return xxx_messageInfo_Issue_LabelValue.Size(m)
}
func (m *Issue_LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_LabelValue proto.InternalMessageInfo

func (m *Issue_LabelValue) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Issue_LabelValue) GetDerivation() Issue_Derivation {
	if m != nil {
		return m.Derivation
	}
	return Issue_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived status for an issue.
// Next available tag: 3
type Issue_StatusValue struct {
	// The status of the issue. Note that in rare cases this can be a
	// value not defined in the project's StatusDefs (e.g. if the issue
	// was moved from another project)
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// How the status was derived.
	Derivation           Issue_Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v1.Issue_Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Issue_StatusValue) Reset()         { *m = Issue_StatusValue{} }
func (m *Issue_StatusValue) String() string { return proto.CompactTextString(m) }
func (*Issue_StatusValue) ProtoMessage()    {}
func (*Issue_StatusValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 4}
}

func (m *Issue_StatusValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_StatusValue.Unmarshal(m, b)
}
func (m *Issue_StatusValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_StatusValue.Marshal(b, m, deterministic)
}
func (m *Issue_StatusValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_StatusValue.Merge(m, src)
}
func (m *Issue_StatusValue) XXX_Size() int {
	return xxx_messageInfo_Issue_StatusValue.Size(m)
}
func (m *Issue_StatusValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_StatusValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_StatusValue proto.InternalMessageInfo

func (m *Issue_StatusValue) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Issue_StatusValue) GetDerivation() Issue_Derivation {
	if m != nil {
		return m.Derivation
	}
	return Issue_DERIVATION_UNSPECIFIED
}

// A possibly rule-derived user value on an issue.
// Next available tag: 3
type Issue_UserValue struct {
	// The user.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// How the user value was derived.
	Derivation           Issue_Derivation `protobuf:"varint,2,opt,name=derivation,proto3,enum=monorail.v1.Issue_Derivation" json:"derivation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Issue_UserValue) Reset()         { *m = Issue_UserValue{} }
func (m *Issue_UserValue) String() string { return proto.CompactTextString(m) }
func (*Issue_UserValue) ProtoMessage()    {}
func (*Issue_UserValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{1, 5}
}

func (m *Issue_UserValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Issue_UserValue.Unmarshal(m, b)
}
func (m *Issue_UserValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Issue_UserValue.Marshal(b, m, deterministic)
}
func (m *Issue_UserValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue_UserValue.Merge(m, src)
}
func (m *Issue_UserValue) XXX_Size() int {
	return xxx_messageInfo_Issue_UserValue.Size(m)
}
func (m *Issue_UserValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue_UserValue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue_UserValue proto.InternalMessageInfo

func (m *Issue_UserValue) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Issue_UserValue) GetDerivation() Issue_Derivation {
	if m != nil {
		return m.Derivation
	}
	return Issue_DERIVATION_UNSPECIFIED
}

// Specifies a column in an issues list view.
// Next available tag: 2
type IssuesListColumn struct {
	// Column name shown in the column header.
	Column               string   `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssuesListColumn) Reset()         { *m = IssuesListColumn{} }
func (m *IssuesListColumn) String() string { return proto.CompactTextString(m) }
func (*IssuesListColumn) ProtoMessage()    {}
func (*IssuesListColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{2}
}

func (m *IssuesListColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssuesListColumn.Unmarshal(m, b)
}
func (m *IssuesListColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssuesListColumn.Marshal(b, m, deterministic)
}
func (m *IssuesListColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuesListColumn.Merge(m, src)
}
func (m *IssuesListColumn) XXX_Size() int {
	return xxx_messageInfo_IssuesListColumn.Size(m)
}
func (m *IssuesListColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuesListColumn.DiscardUnknown(m)
}

var xxx_messageInfo_IssuesListColumn proto.InternalMessageInfo

func (m *IssuesListColumn) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

// Refers to an issue that may or may not be tracked in Monorail.
// Only one of `issue` and `ext_identifier` should be set.
// Next available tag: 3
type IssueRef struct {
	// Resource name of an issue tracked in Monorail
	Issue string `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	// For referencing external issues, e.g. b/1234, or a dangling reference
	// to an old 'codesite' issue.
	// TODO(monorail:7208): add more documentation on dangling references.
	ExtIdentifier        string   `protobuf:"bytes,2,opt,name=ext_identifier,json=extIdentifier,proto3" json:"ext_identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueRef) Reset()         { *m = IssueRef{} }
func (m *IssueRef) String() string { return proto.CompactTextString(m) }
func (*IssueRef) ProtoMessage()    {}
func (*IssueRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be6850bd655a92b, []int{3}
}

func (m *IssueRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueRef.Unmarshal(m, b)
}
func (m *IssueRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueRef.Marshal(b, m, deterministic)
}
func (m *IssueRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueRef.Merge(m, src)
}
func (m *IssueRef) XXX_Size() int {
	return xxx_messageInfo_IssueRef.Size(m)
}
func (m *IssueRef) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueRef.DiscardUnknown(m)
}

var xxx_messageInfo_IssueRef proto.InternalMessageInfo

func (m *IssueRef) GetIssue() string {
	if m != nil {
		return m.Issue
	}
	return ""
}

func (m *IssueRef) GetExtIdentifier() string {
	if m != nil {
		return m.ExtIdentifier
	}
	return ""
}

func init() {
	proto.RegisterEnum("monorail.v1.IssueContentState", IssueContentState_name, IssueContentState_value)
	proto.RegisterEnum("monorail.v1.Issue_ApprovalStatus", Issue_ApprovalStatus_name, Issue_ApprovalStatus_value)
	proto.RegisterEnum("monorail.v1.Issue_Derivation", Issue_Derivation_name, Issue_Derivation_value)
	proto.RegisterType((*Comment)(nil), "monorail.v1.Comment")
	proto.RegisterType((*Issue)(nil), "monorail.v1.Issue")
	proto.RegisterType((*Issue_ApprovalValue)(nil), "monorail.v1.Issue.ApprovalValue")
	proto.RegisterType((*Issue_ComponentValue)(nil), "monorail.v1.Issue.ComponentValue")
	proto.RegisterType((*Issue_FieldValue)(nil), "monorail.v1.Issue.FieldValue")
	proto.RegisterType((*Issue_LabelValue)(nil), "monorail.v1.Issue.LabelValue")
	proto.RegisterType((*Issue_StatusValue)(nil), "monorail.v1.Issue.StatusValue")
	proto.RegisterType((*Issue_UserValue)(nil), "monorail.v1.Issue.UserValue")
	proto.RegisterType((*IssuesListColumn)(nil), "monorail.v1.IssuesListColumn")
	proto.RegisterType((*IssueRef)(nil), "monorail.v1.IssueRef")
}

func init() {
	proto.RegisterFile("api/v1/api_proto/issue_objects.proto", fileDescriptor_3be6850bd655a92b)
}

var fileDescriptor_3be6850bd655a92b = []byte{
	// 1332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0xad, 0xde, 0xd2, 0x95, 0x2d, 0xd3, 0xe3, 0x47, 0x58, 0x25, 0x4d, 0x14, 0xa1, 0x2d, 0x8c,
	0x34, 0x90, 0x10, 0x37, 0x8f, 0xc6, 0x40, 0x0a, 0x33, 0x12, 0x83, 0x12, 0xf5, 0xab, 0x94, 0xec,
	0x76, 0x47, 0x50, 0xd4, 0xc8, 0x61, 0x2b, 0x72, 0x04, 0xce, 0xc8, 0x49, 0x10, 0xe4, 0x17, 0xfa,
	0x15, 0x5d, 0x75, 0xd3, 0x6d, 0x7f, 0xa2, 0xff, 0x90, 0x75, 0x3e, 0xc1, 0xab, 0x62, 0x1e, 0xa4,
	0x24, 0x47, 0x4a, 0x14, 0x64, 0x45, 0xce, 0x9d, 0x73, 0xce, 0xdc, 0xb9, 0x77, 0xe6, 0xde, 0x81,
	0xaf, 0xdd, 0x91, 0xdf, 0xbc, 0xb8, 0xd7, 0x74, 0x47, 0xbe, 0x33, 0x8a, 0x08, 0x23, 0x4d, 0x9f,
	0xd2, 0x31, 0x76, 0x48, 0xef, 0x77, 0xec, 0x31, 0xda, 0x10, 0x36, 0x54, 0x0e, 0x48, 0x48, 0x22,
	0xd7, 0x1f, 0x36, 0x2e, 0xee, 0x55, 0xef, 0x9e, 0x13, 0x72, 0x3e, 0xc4, 0x0a, 0x2e, 0x07, 0x9c,
	0xdf, 0x1c, 0xf8, 0x78, 0xd8, 0x77, 0x7a, 0xf8, 0xb9, 0x7b, 0xe1, 0x93, 0x48, 0x52, 0xab, 0xdf,
	0x2e, 0x42, 0x47, 0x98, 0x92, 0x71, 0xe4, 0x61, 0x85, 0xbb, 0xa5, 0xa6, 0xc4, 0xa8, 0x37, 0x1e,
	0x34, 0x99, 0x1f, 0x60, 0xca, 0xdc, 0x60, 0x24, 0x01, 0xf5, 0x7f, 0x32, 0x50, 0x68, 0x91, 0x20,
	0xc0, 0x21, 0x43, 0x08, 0xb2, 0xa1, 0x1b, 0x60, 0x3d, 0x55, 0x4b, 0xed, 0x94, 0x6c, 0xf1, 0x8f,
	0x1e, 0x43, 0x8e, 0x32, 0x97, 0x61, 0x3d, 0x5d, 0x4b, 0xed, 0x54, 0x76, 0x6f, 0x36, 0xa6, 0x7c,
	0x6e, 0x58, 0x7c, 0x53, 0x2d, 0x12, 0x32, 0x1c, 0xb2, 0x0e, 0x47, 0x3d, 0xcd, 0xbc, 0x35, 0x32,
	0xb6, 0x64, 0x20, 0x1d, 0x0a, 0x9e, 0x9c, 0xd3, 0x33, 0x42, 0x31, 0x1e, 0xa2, 0x1f, 0xa0, 0xe4,
	0xc9, 0x35, 0x71, 0xa4, 0x67, 0xf9, 0xdc, 0xd3, 0xea, 0x5b, 0x23, 0x73, 0x69, 0x6c, 0x02, 0x72,
	0x47, 0x7e, 0xc3, 0x8b, 0x7a, 0xe3, 0xf3, 0x86, 0x47, 0x82, 0xe6, 0x29, 0xc5, 0x91, 0x3d, 0x01,
	0xa3, 0x7d, 0x28, 0x7b, 0x11, 0x76, 0x19, 0x76, 0xf8, 0x46, 0xf4, 0x5c, 0x2d, 0xb5, 0x53, 0xde,
	0xad, 0x36, 0xe4, 0x2e, 0x1b, 0xf1, 0x2e, 0x1b, 0xdd, 0x78, 0x97, 0xd2, 0x21, 0x90, 0x1c, 0x6e,
	0x45, 0x77, 0x61, 0xcd, 0x0f, 0x7b, 0x64, 0x1c, 0xf6, 0x9d, 0x00, 0x53, 0xea, 0x9e, 0x63, 0x3d,
	0x2f, 0x3c, 0x10, 0xc8, 0x8a, 0x9a, 0x3b, 0x94, 0x53, 0x68, 0x0f, 0x8a, 0xee, 0x68, 0x14, 0x91,
	0x0b, 0x77, 0xa8, 0x17, 0x04, 0xec, 0xe6, 0xa5, 0x71, 0x1d, 0xbe, 0x9c, 0xf5, 0xd2, 0x50, 0x90,
	0x36, 0x1e, 0xd8, 0x09, 0x7e, 0xef, 0xf4, 0x9d, 0x61, 0x43, 0x75, 0x16, 0xa9, 0x22, 0x26, 0xe3,
	0x7d, 0x7f, 0x14, 0x11, 0x71, 0x1e, 0x9a, 0xaf, 0xd5, 0xdf, 0x1b, 0x79, 0x4e, 0x68, 0xf3, 0xb5,
	0xf8, 0xbe, 0x69, 0xaa, 0x9d, 0xd3, 0xe6, 0x6b, 0xf5, 0xf7, 0xa6, 0xfe, 0xdf, 0x26, 0xe4, 0x84,
	0xcc, 0xdc, 0x7c, 0xe9, 0x50, 0xa0, 0xe3, 0x20, 0x70, 0xa3, 0x57, 0x22, 0x63, 0x25, 0x3b, 0x1e,
	0xa2, 0xfb, 0x71, 0x26, 0x33, 0xcb, 0x64, 0x32, 0x4e, 0xe2, 0x43, 0xc8, 0xf3, 0x9f, 0x31, 0x15,
	0x79, 0x2a, 0xcf, 0xa3, 0x35, 0x3a, 0x02, 0x70, 0xe6, 0x0e, 0xc7, 0xd8, 0x56, 0x68, 0x54, 0x83,
	0x72, 0x1f, 0x53, 0x2f, 0xf2, 0x47, 0xcc, 0x27, 0xa1, 0x48, 0x54, 0xc9, 0x9e, 0x36, 0xa1, 0x87,
	0x50, 0x8c, 0xf0, 0x88, 0x44, 0xfc, 0x0c, 0xe4, 0x3f, 0x7a, 0x06, 0x12, 0x2c, 0xda, 0x85, 0x1c,
	0x79, 0x11, 0xe2, 0x48, 0xe4, 0xa3, 0xbc, 0x7b, 0x63, 0x8e, 0x43, 0x9c, 0x21, 0xdd, 0x91, 0x50,
	0xf4, 0x08, 0x8a, 0x9e, 0xe7, 0x8c, 0x29, 0x8e, 0xa8, 0x5e, 0xac, 0x65, 0x3e, 0x4a, 0x2b, 0x78,
	0x1e, 0x1f, 0x50, 0xf4, 0x00, 0xf2, 0x43, 0xb7, 0x87, 0x87, 0x54, 0x2f, 0x09, 0xda, 0x57, 0x73,
	0x68, 0x07, 0x1c, 0xa0, 0x76, 0x2f, 0xc1, 0xc8, 0x00, 0xf0, 0x48, 0x30, 0x22, 0x21, 0xcf, 0x9d,
	0x0e, 0x82, 0x7a, 0x7b, 0x0e, 0xb5, 0x15, 0x83, 0x24, 0x7d, 0x8a, 0x84, 0xf6, 0x61, 0x45, 0xde,
	0xfc, 0x0b, 0x3e, 0x45, 0xf5, 0xf2, 0xc2, 0xf5, 0x9f, 0x71, 0x98, 0x14, 0x28, 0x0f, 0x92, 0x7f,
	0x8a, 0x7e, 0x82, 0xad, 0x00, 0x47, 0xe7, 0xb8, 0xef, 0xf8, 0x21, 0x23, 0x8e, 0xac, 0x40, 0x11,
	0x1e, 0xe8, 0x2b, 0x22, 0x70, 0x5b, 0xef, 0x4b, 0xd9, 0x78, 0x60, 0x23, 0xc9, 0xb1, 0x42, 0x46,
	0x62, 0x1b, 0x57, 0xea, 0x0d, 0x89, 0xf7, 0x07, 0xee, 0x3b, 0x24, 0x9c, 0x08, 0x51, 0x7d, 0x55,
	0x38, 0xb5, 0x48, 0x49, 0x71, 0x8e, 0xc3, 0xd8, 0x44, 0x91, 0x09, 0x1b, 0xc2, 0xea, 0x87, 0xe7,
	0xd3, 0x3a, 0x95, 0x0f, 0xe9, 0xac, 0xc7, 0x8c, 0x89, 0xcc, 0x95, 0x32, 0xb0, 0xf6, 0xe9, 0x65,
	0xe0, 0x47, 0x00, 0x6f, 0x48, 0xa8, 0x12, 0xd0, 0x96, 0x13, 0x28, 0x09, 0x8a, 0xe0, 0xef, 0x43,
	0x39, 0x20, 0x7d, 0x7f, 0xf0, 0x4a, 0x0a, 0xac, 0x2f, 0xe9, 0x81, 0xe4, 0x08, 0x85, 0x0e, 0x6c,
	0x25, 0xe9, 0x76, 0xa6, 0xb5, 0xd0, 0x72, 0x5a, 0x1b, 0x09, 0xfb, 0x70, 0x22, 0x7a, 0x08, 0x48,
	0x5e, 0xc0, 0x19, 0xc5, 0x8d, 0xe5, 0x14, 0x35, 0x49, 0x9d, 0x92, 0xfb, 0x19, 0xd6, 0xc5, 0x05,
	0x9a, 0x51, 0xdb, 0x5c, 0x4e, 0x6d, 0x4d, 0x30, 0xa7, 0xc4, 0x1a, 0xa0, 0xb9, 0x8c, 0xb9, 0xde,
	0x73, 0x5e, 0xc7, 0x1c, 0x8f, 0x8c, 0x43, 0xa6, 0x6f, 0xd5, 0x52, 0x3b, 0xab, 0x0a, 0x3f, 0x99,
	0x6c, 0xf1, 0x39, 0x54, 0x07, 0xa0, 0xcc, 0x8d, 0x14, 0x72, 0x7b, 0x82, 0x2c, 0x71, 0xb3, 0xc4,
	0x58, 0xb0, 0x16, 0xd7, 0xdb, 0xf8, 0xa2, 0x5c, 0x13, 0x67, 0xa9, 0x36, 0xe7, 0xa2, 0xc4, 0x65,
	0x5a, 0xde, 0x95, 0x8a, 0x3b, 0x3d, 0xa4, 0x68, 0x1b, 0xf2, 0xa3, 0xe7, 0x2e, 0xc5, 0x54, 0xd7,
	0x6b, 0x99, 0x9d, 0x92, 0xad, 0x46, 0xd5, 0x7f, 0xd3, 0xb0, 0x3a, 0xc3, 0x44, 0xbb, 0xd3, 0x75,
	0xf7, 0xa3, 0x0d, 0x41, 0xd6, 0xe5, 0x07, 0x50, 0x92, 0xeb, 0xf1, 0x12, 0x94, 0xe6, 0x0b, 0x3c,
	0xbd, 0xb6, 0xb0, 0xdf, 0x25, 0x48, 0xf4, 0x38, 0x29, 0xbf, 0xb2, 0x6a, 0xdf, 0xfe, 0xc0, 0xb6,
	0x64, 0x19, 0x4e, 0x2a, 0xf0, 0x1e, 0x14, 0x29, 0x66, 0x32, 0x65, 0xd9, 0xe5, 0x52, 0x56, 0xa0,
	0x98, 0x89, 0x54, 0x35, 0x21, 0x4f, 0x31, 0xe3, 0x95, 0x59, 0x14, 0xee, 0xc5, 0xae, 0x2a, 0x18,
	0xda, 0x84, 0x9c, 0x08, 0x97, 0xac, 0xe4, 0xb6, 0x1c, 0x54, 0xff, 0x4c, 0x41, 0x65, 0xb6, 0xc4,
	0xa1, 0x27, 0xa2, 0xf5, 0x4b, 0x8b, 0x0a, 0xe0, 0xad, 0x4b, 0xe3, 0xc6, 0xd5, 0x3e, 0x99, 0xb0,
	0x78, 0x04, 0x27, 0x0c, 0xf4, 0x04, 0xa0, 0x8f, 0x23, 0xff, 0xc2, 0x15, 0x5d, 0x45, 0xbe, 0x49,
	0xe6, 0xd5, 0xc4, 0x76, 0x02, 0xb2, 0xa7, 0x08, 0xd5, 0xbf, 0x53, 0x00, 0x93, 0x72, 0x89, 0xee,
	0x41, 0x4e, 0x14, 0x4c, 0xe5, 0xc8, 0xf5, 0x4b, 0x43, 0x87, 0xed, 0x59, 0x47, 0x04, 0x9a, 0x3b,
	0x21, 0x91, 0x7c, 0xa3, 0xe2, 0x9c, 0xa9, 0xee, 0x2a, 0x07, 0x57, 0xdc, 0xca, 0x7c, 0xa2, 0x5b,
	0x93, 0xe8, 0x65, 0xa7, 0xa3, 0xe7, 0x02, 0x4c, 0x5a, 0x0b, 0xc7, 0x88, 0xe6, 0xa2, 0xba, 0xbd,
	0x1c, 0x7c, 0x6e, 0x3c, 0xfa, 0x50, 0x9e, 0x6a, 0xde, 0xfc, 0x0a, 0xa8, 0xd3, 0x26, 0x17, 0x89,
	0x8f, 0xd2, 0x67, 0xae, 0xf2, 0x02, 0x4a, 0x49, 0x6b, 0x45, 0xdf, 0x41, 0x96, 0xf7, 0x61, 0x15,
	0xf2, 0x85, 0x07, 0x4b, 0x80, 0x3e, 0x73, 0xe1, 0xfa, 0x5f, 0x29, 0xa8, 0xcc, 0xde, 0x0e, 0x74,
	0x0b, 0xae, 0x1b, 0x27, 0x27, 0xf6, 0xf1, 0x99, 0x71, 0xe0, 0x74, 0xba, 0x46, 0xf7, 0xb4, 0xe3,
	0x9c, 0x1e, 0x75, 0x4e, 0xcc, 0x96, 0xf5, 0xcc, 0x32, 0xdb, 0xda, 0x17, 0x48, 0x83, 0x95, 0x23,
	0xd3, 0x6c, 0x77, 0x1c, 0xdb, 0x3c, 0xb3, 0xcc, 0x5f, 0xb5, 0x14, 0xca, 0x43, 0xfa, 0xc8, 0xd0,
	0xd2, 0x68, 0x13, 0x34, 0x69, 0x73, 0x6c, 0xf3, 0x97, 0x53, 0xb3, 0xd3, 0x35, 0xdb, 0x5a, 0x06,
	0x21, 0xa8, 0x28, 0x6b, 0xa7, 0x6b, 0xd8, 0xdc, 0x96, 0x45, 0xab, 0x50, 0xe2, 0x1a, 0x8e, 0x75,
	0xf4, 0xec, 0x58, 0xcb, 0xa1, 0x15, 0x28, 0xca, 0x35, 0xcd, 0xb6, 0x96, 0x17, 0x0b, 0x1c, 0x77,
	0x9d, 0xc4, 0x52, 0xa8, 0xef, 0x03, 0x4c, 0x36, 0x80, 0xaa, 0xb0, 0xdd, 0x36, 0x6d, 0xeb, 0xcc,
	0xe8, 0x5a, 0xc7, 0x47, 0x57, 0x9c, 0x5b, 0x81, 0xa2, 0xf9, 0xdb, 0xc9, 0x81, 0xd5, 0xb2, 0xba,
	0x5a, 0x0a, 0x15, 0x21, 0x6b, 0x9f, 0x1e, 0x98, 0x5a, 0x7a, 0x6f, 0xef, 0x9d, 0xf1, 0x08, 0x36,
	0xe6, 0x3c, 0x35, 0x51, 0x4d, 0xbd, 0x2c, 0x17, 0x3e, 0x31, 0xeb, 0x77, 0x40, 0x13, 0x50, 0x7a,
	0xe0, 0x53, 0xd6, 0x22, 0xc3, 0x71, 0x10, 0xf2, 0x83, 0xe0, 0x89, 0xbf, 0xf8, 0x20, 0xc8, 0x51,
	0xdd, 0x85, 0x62, 0xf2, 0x28, 0x68, 0x40, 0x4e, 0x28, 0xa8, 0x4c, 0xea, 0x97, 0xc6, 0xd6, 0x5c,
	0x17, 0x6c, 0x09, 0x43, 0xdf, 0x40, 0x05, 0xbf, 0x64, 0x8e, 0xdf, 0xc7, 0x21, 0xf3, 0x07, 0x3e,
	0x8e, 0xd4, 0x15, 0x5a, 0xc5, 0x2f, 0x99, 0x95, 0x18, 0xef, 0x1c, 0xc2, 0xfa, 0x7b, 0x8f, 0x51,
	0xb4, 0x05, 0xeb, 0x3c, 0x59, 0xe6, 0x95, 0x70, 0x00, 0xe4, 0x8d, 0x56, 0xd7, 0x3a, 0x33, 0xb5,
	0x14, 0x2a, 0x43, 0xa1, 0x6d, 0x1e, 0x98, 0x3c, 0x01, 0x69, 0x1e, 0x99, 0xce, 0x89, 0x71, 0xa8,
	0x65, 0x7a, 0x79, 0x51, 0xeb, 0xbe, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x12, 0xf1, 0x7f, 0x25,
	0x92, 0x0d, 0x00, 0x00,
}
