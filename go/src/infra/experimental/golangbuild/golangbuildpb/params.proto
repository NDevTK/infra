// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package golangbuildpb;

option go_package = "infra/experimental/golangbuild/golangbuildpb";

message Inputs {
  // Name of the Gerrit project to be tested.
  string project = 1;

  // GoBranch specifies what Go toolchain branch to use.
  // It is set and applies only when project != "go".
  // Its value is a branch name like "master" or "release-branch.go1.20"
  // (the "refs/heads/" prefix is omitted).
  string go_branch = 2;

  // BootstrapVersion specifies the version of Go to use as the bootstrap
  // toolchain when needed.
  string bootstrap_version = 16;

  // LongTest controls whether the build runs in long test mode.
  bool long_test = 3;

  // RaceMode controls whether the build runs with the race detector enabled.
  bool race_mode = 4;

  // NoNetwork controls whether the build disables network access during test execution.
  //
  // It's meant to catch tests that accidentally need internet without realizing it,
  // or otherwise forget to skip themselves when testing.Short() is true.
  //
  // This mode is only supported on Linux systems with unshare and ip available.
  // The build fails if the check is on but its system requirements are unmet.
  bool no_network = 17;

  // CompileOnly controls whether tests are compiled, but not run.
  //
  // Ignored in MODE_BUILD and irrelevant in MODE_TEST.
  bool compile_only = 5;

  // Extra environment variables to set for building and testing.
  map<string, string> env = 6;

  // Named cache configured on the builder to use as a cipd tool root cache.
  //
  // Required.
  string tools_cache = 7;

  // Named cache configured on the builder to use as a git clone cache.
  //
  // Required.
  string git_cache = 8;

  // On Macs, the version of XCode to use. Because installing it is expensive,
  // it should be the same for all builders that run on a given host.
  string xcode_version = 9;

  // Which mode to run golangbuild in. See the Mode enum for details.
  Mode mode = 10;

  // Properties specific to MODE_ALL.
  AllMode all_mode = 11;

  // Properties specific to MODE_COORDINATOR.
  CoordinatorMode coord_mode = 12;

  // Properties specific to MODE_BUILD.
  BuildMode build_mode = 13;

  // Properties specific to MODE_TEST.
  TestMode test_mode = 14;

  // Test shard identity. This property is specific to MODE_TEST.
  //
  // Note: this property is mutable.
  //
  // N.B. This cannot be part of "TestMode" without making "test_mode"
  // mutable in the builder configuration, because property mutability
  // is only controllable at the top level.
  TestShard test_shard = 15;
}

// golangbuild runs in one of these modes.
enum Mode {
  // MODE_ALL builds and tests the project all within the same build.
  MODE_ALL = 0;

  // MODE_COORDINATOR launches and coordinates tasks that build Go and
  // test the provided project.
  MODE_COORDINATOR = 1;

  // MODE_BUILD indicates golangbuild should just run make.bash.
  MODE_BUILD = 2;

  // MODE_TEST indicates golangbuild should only run tests.
  //
  // A prebuilt toolchain must be available for the provided source.
  MODE_TEST = 3;
}

// AllMode contains properties specific to MODE_ALL.
message AllMode {
}

// CoordinatorMode contains properties specific to MODE_COORDINATOR.
message CoordinatorMode {
  // Name of the builder to create a build for for building Go.
  string build_builder = 1;

  // Name of the builder to create a build for to run tests.
  string test_builder = 2;

  // Number of separate builds to spawn to run tests in shards.
  uint32 num_test_shards = 3;

  // Names of other builders to trigger for testing when the
  // build_builder completes successfully.
  //
  // This must be empty if project != "go".
  repeated string builders_to_trigger_after_toolchain_build = 4;
}

// BuildMode contains properties specific to MODE_BUILD.
message BuildMode {
}

// TestMode contains properties specific to MODE_TEST.
message TestMode {
}

// TestShard is specific to MODE_TEST and represents the build's
// test shard identity.
//
// Note: this is mutable by ScheduleBuild, so add fields with care.
message TestShard {
  // ID of the test shard. This is always less than num_shards.
  uint32 shard_id = 1;

  // Number of test shards.
  uint32 num_shards = 2;
}
