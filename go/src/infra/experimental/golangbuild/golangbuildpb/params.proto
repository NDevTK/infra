// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package golangbuildpb;

option go_package = "infra/experimental/golangbuild/golangbuildpb";

import "go.chromium.org/luci/buildbucket/proto/common.proto";

// Input properties.
message Inputs {
  // Name of the Gerrit project to be tested.
  string project = 1;

  // GoBranch specifies what Go toolchain branch to use.
  // Its value is a branch name like "master" or "release-branch.go1.20"
  // (the "refs/heads/" prefix is omitted).
  string go_branch = 2;

  // Host is the port we're building on. In most cases this is the default
  // GOOS/GOARCH of the machine, but not in cases like linux-386.
  Port host = 24;
  // Target is the port we're testing. It can be wildly different than the
  // host port, e.g. when we're running a mobile emulator or a Wasm VM.
  Port target = 25;

  // GoCommit optionally specifies a commit on GoBranch branch to use.
  // If it isn't provided, it means to use the tip of the GoBranch branch (a moving target).
  // It can be set only when invoked in a project other than "go".
  // Its value is a commit ID like "4368e1cdfd37cbcdbc7a4fbcc78ad61139f7ba90".
  //
  // Note: this property is mutable in the builder configuration.
  string go_commit = 19;

  // VersionFile specifies the contents of the VERSION file to write when
  // building Go. If unset, a devel version will be generated.
  string version_file = 23;

  // BootstrapVersion specifies the version of Go to use as the bootstrap
  // toolchain when needed.
  string bootstrap_version = 16;

  // LongTest controls whether the build runs in long test mode.
  bool long_test = 3;

  // RaceMode controls whether the build runs with the race detector enabled.
  bool race_mode = 4;

  // NoNetwork controls whether the build disables network access during test execution.
  //
  // It's meant to catch tests that accidentally need internet without realizing it,
  // or otherwise forget to skip themselves when testing.Short() is true.
  //
  // This mode is only supported on Linux systems with unshare and ip available.
  // The build fails if the check is on but its system requirements are unmet.
  bool no_network = 17;

  // CompileOnly controls whether the build does as much as possible to check
  // for problems but stops short of process execution for the target OS/arch.
  // It will compile packages and tests (but not execute tests), run static
  // analysis (such as vet), and so on.
  //
  // This mode makes it possible for any highly available machine type to run
  // a quick smoke test for any port.
  bool compile_only = 5;

  // MiscPorts controls whether the build is run across miscellaneous ports
  // instead of the default single current port.
  //
  // It exists because misc-compile builders are inherently faster at testing
  // a single port in CompileOnly-mode, so they compensate for that by testing
  // multiple ports at once.
  //
  // MiscPorts is only supported when CompileOnly is also set.
  bool misc_ports = 18;

  // CompilerLinkerRaceMode controls whether the compiler and linker are built
  // in race mode to detect data races in their implementations.
  bool compiler_linker_race_mode = 28;

  // Extra environment variables to set for building and testing.
  map<string, string> env = 6;

  // Named cache configured on the builder to use as a cipd tool root cache.
  //
  // Required.
  string tools_cache = 7;

  // Optional extra build-only and test-only dependencies to install,
  // expressed as a CIPD ensure file fragment to be appended to the
  // end of the generated CIPD ensure file. For example:
  //
  //  `@Subdir bin
  //  golang/a-custom-dependency-for-a-specific-repo/${platform} latest`
  //
  // These properties try to provide flexible self-service to repository
  // owners that wish to have additional control over their dependencies.
  string tools_extra_build = 26;
  string tools_extra_test = 27;

  // Named cache configured on the builder to use as a git clone cache.
  //
  // Required.
  string git_cache = 8;

  // On Macs, the version of Xcode to use. Because installing it is expensive,
  // it should be the same for all builders that run on a given host.
  string xcode_version = 9;

  // A Node.js version to add to PATH, if any. Supported on Linux hosts only.
  string node_version = 20;
  // A WasmTime version to add to PATH, if any. Supported on Linux hosts only.
  string wasmtime_version = 21;
  // A wazero version to add to PATH, if any. Supported on Linux hosts only.
  string wazero_version = 22;

  // Which mode to run golangbuild in. See the Mode enum for details.
  Mode mode = 10;

  // Properties specific to MODE_ALL.
  AllMode all_mode = 11;

  // Properties specific to MODE_COORDINATOR.
  CoordinatorMode coord_mode = 12;

  // Properties specific to MODE_BUILD.
  BuildMode build_mode = 13;

  // Properties specific to MODE_TEST.
  TestMode test_mode = 14;

  // Test shard identity. This property is specific to MODE_TEST.
  //
  // Note: this property is mutable in the builder configuration.
  //
  // N.B. This cannot be part of "TestMode" without making "test_mode"
  // mutable too, because property mutability is only controllable at the top level.
  // See allowed_property_overrides in https://chromium.googlesource.com/infra/luci/luci-go/+/HEAD/lucicfg/doc/README.md#luci.builder-args.
  TestShard test_shard = 15;

  // Properties specific to MODE_PERF.
  PerfMode perf_mode = 29;
}

message Port {
  string goos = 1;
  string goarch = 2;
}

// golangbuild runs in one of these modes.
enum Mode {
  // MODE_ALL builds and tests the project all within the same build.
  MODE_ALL = 0;

  // MODE_COORDINATOR launches and coordinates tasks that build Go and
  // test the provided project.
  MODE_COORDINATOR = 1;

  // MODE_BUILD indicates golangbuild should just run make.bash.
  MODE_BUILD = 2;

  // MODE_TEST indicates golangbuild should only run tests.
  //
  // A prebuilt toolchain must be available for the provided source.
  MODE_TEST = 3;

  // MODE_PERF indicates that golangbuild should run benchmarks.
  // The benchmarks are always run against some baseline in the
  // same build.
  MODE_PERF = 4;
}

// AllMode contains properties specific to MODE_ALL.
message AllMode {
}

// CoordinatorMode contains properties specific to MODE_COORDINATOR.
message CoordinatorMode {
  // Name of the builder to create a build for for building Go.
  string build_builder = 1;

  // Name of the builder to create a build for to run tests.
  string test_builder = 2;

  // Number of separate builds to spawn to run tests in shards.
  uint32 num_test_shards = 3;

  // Names of other builders to trigger for testing when the
  // build_builder completes successfully.
  //
  // This must be empty if project != "go".
  repeated string builders_to_trigger_after_toolchain_build = 4;
}

// BuildMode contains properties specific to MODE_BUILD.
message BuildMode {
}

// TestMode contains properties specific to MODE_TEST.
message TestMode {
}

// TestShard is specific to MODE_TEST and represents the build's
// test shard identity.
//
// Note: this is mutable by ScheduleBuild, so add fields with care.
message TestShard {
  // ID of the test shard. This is always less than num_shards.
  uint32 shard_id = 1;

  // Number of test shards.
  uint32 num_shards = 2;
}

// PerfMode contains properties specific to MODE_PERF.
message PerfMode {
  // Baseline indicates the baseline source code that should be
  // used for the performance comparison.
  //
  // Baseline must be one of:
  // - A valid git branch for the project, with "refs/heads" prefix.
  //
  // Baseline is always defined relative to Inputs.Project and the
  // Gitiles host https://go.googlesource.com.
  //
  // Note: this property is mutable in the builder configuration.
  string baseline = 1;
}

// Output properties.
message Outputs {
  // Human-friendly failure description.
  FailureSummary failure = 1;

  // The source code inputs that were used for this build.
  repeated Source sources = 2;
}

// FailureSummary summarizes a failure without all the build step structure.
//
// It's intended to be easily rendered as something meant for humans.
message FailureSummary {
  // Human-friendly one-line plain text description of the failure.
  string description = 1;

  // Links (typically to logs) that would be helpful in diagnosing the failure.
  repeated Link links = 2;

  // Whether or not any tests failed. Used as a signal to link to test results in the UI.
  bool tests_failed = 3;
}

// Link is a URL with a human-friendly name.
message Link {
  // Name of the link.
  string name = 1;

  // The link's URL.
  string url = 2;
}

// Source is a remote source location. Only one of the following fields will
// be present at any given time.
message Source {
  // A git commit from a googlesource.com host.
  buildbucket.v2.GitilesCommit gitiles_commit = 1;

  // A change from a Gerrit host.
  buildbucket.v2.GerritChange gerrit_change = 2;
}
