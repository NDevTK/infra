// Copyright 2023 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: infra/experimental/crderiveinputs/inputpb/inputs.proto

package inputpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GCSArchive_Format int32

const (
	GCSArchive_UNKNOWN GCSArchive_Format = 0
	GCSArchive_TAR_GZ  GCSArchive_Format = 1
	GCSArchive_TAR_BZ2 GCSArchive_Format = 2
	GCSArchive_TAR_XZ  GCSArchive_Format = 3
)

// Enum value maps for GCSArchive_Format.
var (
	GCSArchive_Format_name = map[int32]string{
		0: "UNKNOWN",
		1: "TAR_GZ",
		2: "TAR_BZ2",
		3: "TAR_XZ",
	}
	GCSArchive_Format_value = map[string]int32{
		"UNKNOWN": 0,
		"TAR_GZ":  1,
		"TAR_BZ2": 2,
		"TAR_XZ":  3,
	}
)

func (x GCSArchive_Format) Enum() *GCSArchive_Format {
	p := new(GCSArchive_Format)
	*p = x
	return p
}

func (x GCSArchive_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCSArchive_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_enumTypes[0].Descriptor()
}

func (GCSArchive_Format) Type() protoreflect.EnumType {
	return &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_enumTypes[0]
}

func (x GCSArchive_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCSArchive_Format.Descriptor instead.
func (GCSArchive_Format) EnumDescriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{7, 0}
}

type ResolvableString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requested        string `protobuf:"bytes,1,opt,name=requested,proto3" json:"requested,omitempty"`
	Resolved         string `protobuf:"bytes,2,opt,name=resolved,proto3" json:"resolved,omitempty"`
	ResolutionSource string `protobuf:"bytes,3,opt,name=resolution_source,json=resolutionSource,proto3" json:"resolution_source,omitempty"` // NOTE: This probably needs to be structured
}

func (x *ResolvableString) Reset() {
	*x = ResolvableString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvableString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvableString) ProtoMessage() {}

func (x *ResolvableString) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvableString.ProtoReflect.Descriptor instead.
func (*ResolvableString) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{0}
}

func (x *ResolvableString) GetRequested() string {
	if x != nil {
		return x.Requested
	}
	return ""
}

func (x *ResolvableString) GetResolved() string {
	if x != nil {
		return x.Resolved
	}
	return ""
}

func (x *ResolvableString) GetResolutionSource() string {
	if x != nil {
		return x.ResolutionSource
	}
	return ""
}

type GitCheckout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo    string            `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Version *ResolvableString `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GitCheckout) Reset() {
	*x = GitCheckout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCheckout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCheckout) ProtoMessage() {}

func (x *GitCheckout) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCheckout.ProtoReflect.Descriptor instead.
func (*GitCheckout) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{1}
}

func (x *GitCheckout) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GitCheckout) GetVersion() *ResolvableString {
	if x != nil {
		return x.Version
	}
	return nil
}

type CIPDPackages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packges []*CIPDPackage `protobuf:"bytes,1,rep,name=packges,proto3" json:"packges,omitempty"`
}

func (x *CIPDPackages) Reset() {
	*x = CIPDPackages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIPDPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDPackages) ProtoMessage() {}

func (x *CIPDPackages) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDPackages.ProtoReflect.Descriptor instead.
func (*CIPDPackages) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{2}
}

func (x *CIPDPackages) GetPackges() []*CIPDPackage {
	if x != nil {
		return x.Packges
	}
	return nil
}

type CIPDPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkg     *ResolvableString `protobuf:"bytes,1,opt,name=pkg,proto3" json:"pkg,omitempty"`
	Version *ResolvableString `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CIPDPackage) Reset() {
	*x = CIPDPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CIPDPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDPackage) ProtoMessage() {}

func (x *CIPDPackage) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDPackage.ProtoReflect.Descriptor instead.
func (*CIPDPackage) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{3}
}

func (x *CIPDPackage) GetPkg() *ResolvableString {
	if x != nil {
		return x.Pkg
	}
	return nil
}

func (x *CIPDPackage) GetVersion() *ResolvableString {
	if x != nil {
		return x.Version
	}
	return nil
}

type VpythonEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestSha2      string         `protobuf:"bytes,1,opt,name=manifest_sha2,json=manifestSha2,proto3" json:"manifest_sha2,omitempty"`
	PythonInterpreter *CIPDPackage   `protobuf:"bytes,2,opt,name=python_interpreter,json=pythonInterpreter,proto3" json:"python_interpreter,omitempty"`
	Wheel             []*CIPDPackage `protobuf:"bytes,3,rep,name=wheel,proto3" json:"wheel,omitempty"`
}

func (x *VpythonEnv) Reset() {
	*x = VpythonEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpythonEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpythonEnv) ProtoMessage() {}

func (x *VpythonEnv) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpythonEnv.ProtoReflect.Descriptor instead.
func (*VpythonEnv) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{4}
}

func (x *VpythonEnv) GetManifestSha2() string {
	if x != nil {
		return x.ManifestSha2
	}
	return ""
}

func (x *VpythonEnv) GetPythonInterpreter() *CIPDPackage {
	if x != nil {
		return x.PythonInterpreter
	}
	return nil
}

func (x *VpythonEnv) GetWheel() []*CIPDPackage {
	if x != nil {
		return x.Wheel
	}
	return nil
}

type GCSBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string        `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Object string        `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Hash   *GCSBlob_Hash `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GCSBlob) Reset() {
	*x = GCSBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSBlob) ProtoMessage() {}

func (x *GCSBlob) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSBlob.ProtoReflect.Descriptor instead.
func (*GCSBlob) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{5}
}

func (x *GCSBlob) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GCSBlob) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *GCSBlob) GetHash() *GCSBlob_Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GCSArchives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unfortunately, download_nacl_toolchains.py unpacks multiple archives on top
	// of each other...
	//
	// For the purpose of this manifest, they are unpacked in order... if there
	// are conflicts, ideally the unpacker should yell about that.
	Archives []*GCSArchive `protobuf:"bytes,1,rep,name=archives,proto3" json:"archives,omitempty"`
}

func (x *GCSArchives) Reset() {
	*x = GCSArchives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSArchives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSArchives) ProtoMessage() {}

func (x *GCSArchives) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSArchives.ProtoReflect.Descriptor instead.
func (*GCSArchives) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{6}
}

func (x *GCSArchives) GetArchives() []*GCSArchive {
	if x != nil {
		return x.Archives
	}
	return nil
}

type GCSArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archive *GCSBlob `protobuf:"bytes,1,opt,name=archive,proto3" json:"archive,omitempty"`
	// Extract only this subdirectory from the archive.
	//
	// Example, in a tarfile like:
	//
	//	a/stuff
	//	b/deep/something
	//	b/other/blah
	//
	// if this is 'b/deep', then 'something' would be extracted to the Source.path
	// that this GCSArchive belongs to.
	//
	// This was added due to download_nacl_toolchains.py support. Hopefully this
	// can be removed.
	ExtractSubdir string            `protobuf:"bytes,2,opt,name=extract_subdir,json=extractSubdir,proto3" json:"extract_subdir,omitempty"`
	Format        GCSArchive_Format `protobuf:"varint,3,opt,name=format,proto3,enum=GCSArchive_Format" json:"format,omitempty"`
}

func (x *GCSArchive) Reset() {
	*x = GCSArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSArchive) ProtoMessage() {}

func (x *GCSArchive) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSArchive.ProtoReflect.Descriptor instead.
func (*GCSArchive) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{7}
}

func (x *GCSArchive) GetArchive() *GCSBlob {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *GCSArchive) GetExtractSubdir() string {
	if x != nil {
		return x.ExtractSubdir
	}
	return ""
}

func (x *GCSArchive) GetFormat() GCSArchive_Format {
	if x != nil {
		return x.Format
	}
	return GCSArchive_UNKNOWN
}

type RawFileContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawContent string `protobuf:"bytes,1,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
	Source     string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"` // NOTE: This probably needs to be structured.
}

func (x *RawFileContent) Reset() {
	*x = RawFileContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawFileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawFileContent) ProtoMessage() {}

func (x *RawFileContent) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawFileContent.ProtoReflect.Descriptor instead.
func (*RawFileContent) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{8}
}

func (x *RawFileContent) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *RawFileContent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Types that are assignable to Content:
	//
	//	*Source_RawFile
	//	*Source_GcsFile
	//	*Source_Git
	//	*Source_Cipd
	//	*Source_GcsArchives
	Content isSource_Content `protobuf_oneof:"content"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{9}
}

func (x *Source) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (m *Source) GetContent() isSource_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Source) GetRawFile() *RawFileContent {
	if x, ok := x.GetContent().(*Source_RawFile); ok {
		return x.RawFile
	}
	return nil
}

func (x *Source) GetGcsFile() *GCSBlob {
	if x, ok := x.GetContent().(*Source_GcsFile); ok {
		return x.GcsFile
	}
	return nil
}

func (x *Source) GetGit() *GitCheckout {
	if x, ok := x.GetContent().(*Source_Git); ok {
		return x.Git
	}
	return nil
}

func (x *Source) GetCipd() *CIPDPackages {
	if x, ok := x.GetContent().(*Source_Cipd); ok {
		return x.Cipd
	}
	return nil
}

func (x *Source) GetGcsArchives() *GCSArchives {
	if x, ok := x.GetContent().(*Source_GcsArchives); ok {
		return x.GcsArchives
	}
	return nil
}

type isSource_Content interface {
	isSource_Content()
}

type Source_RawFile struct {
	// This Source is a singluar file.
	RawFile *RawFileContent `protobuf:"bytes,4,opt,name=raw_file,json=rawFile,proto3,oneof"`
}

type Source_GcsFile struct {
	GcsFile *GCSBlob `protobuf:"bytes,5,opt,name=gcs_file,json=gcsFile,proto3,oneof"`
}

type Source_Git struct {
	// This Source is the root of some archive/directory.
	Git *GitCheckout `protobuf:"bytes,6,opt,name=git,proto3,oneof"`
}

type Source_Cipd struct {
	Cipd *CIPDPackages `protobuf:"bytes,7,opt,name=cipd,proto3,oneof"`
}

type Source_GcsArchives struct {
	GcsArchives *GCSArchives `protobuf:"bytes,8,opt,name=gcs_archives,json=gcsArchives,proto3,oneof"`
}

func (*Source_RawFile) isSource_Content() {}

func (*Source_GcsFile) isSource_Content() {}

func (*Source_Git) isSource_Content() {}

func (*Source_Cipd) isSource_Content() {}

func (*Source_GcsArchives) isSource_Content() {}

type AptDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of conditions to evaluate - all must be True for this Dependency to
	// be active.
	//
	// An empty conditions set is True.
	Conditions []*AptDependency_Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// If conditions is met, then install all of these packages.
	// If conditions is not met, and orelse is empty, fail.
	// If conditions is not met, and orelse is not empty, recurse.
	Packages []string       `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
	Orelse   *AptDependency `protobuf:"bytes,3,opt,name=orelse,proto3" json:"orelse,omitempty"`
}

func (x *AptDependency) Reset() {
	*x = AptDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptDependency) ProtoMessage() {}

func (x *AptDependency) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptDependency.ProtoReflect.Descriptor instead.
func (*AptDependency) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{10}
}

func (x *AptDependency) GetConditions() []*AptDependency_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *AptDependency) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *AptDependency) GetOrelse() *AptDependency {
	if x != nil {
		return x.Orelse
	}
	return nil
}

type LinuxSystemDeps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is actually unconstrained in chromium - install-build-deps will check
	// that the base os is one of 4 unpinned distributions:
	//
	// * "Ubuntu 18.04 LTS (bionic with EoL April 2028)"
	// * "Ubuntu 20.04 LTS (focal with EoL April 2030)"
	// * "Ubuntu 22.04 LTS (jammy with EoL April 2032)"
	// * "Debian 10 (buster) or later"
	BaseImage string           `protobuf:"bytes,1,opt,name=base_image,json=baseImage,proto3" json:"base_image,omitempty"`
	AptDep    []*AptDependency `protobuf:"bytes,2,rep,name=apt_dep,json=aptDep,proto3" json:"apt_dep,omitempty"`
}

func (x *LinuxSystemDeps) Reset() {
	*x = LinuxSystemDeps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxSystemDeps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSystemDeps) ProtoMessage() {}

func (x *LinuxSystemDeps) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSystemDeps.ProtoReflect.Descriptor instead.
func (*LinuxSystemDeps) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{11}
}

func (x *LinuxSystemDeps) GetBaseImage() string {
	if x != nil {
		return x.BaseImage
	}
	return ""
}

func (x *LinuxSystemDeps) GetAptDep() []*AptDependency {
	if x != nil {
		return x.AptDep
	}
	return nil
}

type Manifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to System:
	//
	//	*Manifest_LinuxDeps
	System        isManifest_System               `protobuf_oneof:"system"`
	GclientInputs map[string]*Manifest_GclientVal `protobuf:"bytes,2,rep,name=gclient_inputs,json=gclientInputs,proto3" json:"gclient_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sources       map[string]*Source              `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of spec sha2 => VpythonEnv.
	Virtualenvs map[string]*VpythonEnv `protobuf:"bytes,4,rep,name=virtualenvs,proto3" json:"virtualenvs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Manifest) Reset() {
	*x = Manifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest) ProtoMessage() {}

func (x *Manifest) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest.ProtoReflect.Descriptor instead.
func (*Manifest) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{12}
}

func (m *Manifest) GetSystem() isManifest_System {
	if m != nil {
		return m.System
	}
	return nil
}

func (x *Manifest) GetLinuxDeps() *LinuxSystemDeps {
	if x, ok := x.GetSystem().(*Manifest_LinuxDeps); ok {
		return x.LinuxDeps
	}
	return nil
}

func (x *Manifest) GetGclientInputs() map[string]*Manifest_GclientVal {
	if x != nil {
		return x.GclientInputs
	}
	return nil
}

func (x *Manifest) GetSources() map[string]*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Manifest) GetVirtualenvs() map[string]*VpythonEnv {
	if x != nil {
		return x.Virtualenvs
	}
	return nil
}

type isManifest_System interface {
	isManifest_System()
}

type Manifest_LinuxDeps struct {
	// LinuxSystemDeps is derived from build/install-build-deps.py.
	LinuxDeps *LinuxSystemDeps `protobuf:"bytes,1,opt,name=linux_deps,json=linuxDeps,proto3,oneof"` // TODO: Mac, Windows, ???? dependencies.
}

func (*Manifest_LinuxDeps) isManifest_System() {}

// Hash, when resolved, always has size/sha2.
//
// There are other unresolved inputs which can be supplied here, but Oracle will
// always resolve them to size/sha2.
type GCSBlob_Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size   *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	Sha256 []byte                 `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// If we had to resolve this Hash against GCS, this records the generation
	// number we consumed. Resolution only occurs if size and sha256 are not both
	// supplied by the originating pin file.
	Generation *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=generation,proto3" json:"generation,omitempty"`
	// These hash values may be present in the source, but will all be resolved
	// to sha2 by crderiveinputs.
	Sha1 []byte `protobuf:"bytes,4,opt,name=sha1,proto3" json:"sha1,omitempty"`
}

func (x *GCSBlob_Hash) Reset() {
	*x = GCSBlob_Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSBlob_Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSBlob_Hash) ProtoMessage() {}

func (x *GCSBlob_Hash) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSBlob_Hash.ProtoReflect.Descriptor instead.
func (*GCSBlob_Hash) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GCSBlob_Hash) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *GCSBlob_Hash) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *GCSBlob_Hash) GetGeneration() *wrapperspb.Int64Value {
	if x != nil {
		return x.Generation
	}
	return nil
}

func (x *GCSBlob_Hash) GetSha1() []byte {
	if x != nil {
		return x.Sha1
	}
	return nil
}

type AptDependency_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If package_available is set, check the apt repo for this package being
	// available. If it is, then this condition clause is True.
	PackageAvailable string `protobuf:"bytes,1,opt,name=package_available,json=packageAvailable,proto3" json:"package_available,omitempty"`
}

func (x *AptDependency_Condition) Reset() {
	*x = AptDependency_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptDependency_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptDependency_Condition) ProtoMessage() {}

func (x *AptDependency_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptDependency_Condition.ProtoReflect.Descriptor instead.
func (*AptDependency_Condition) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{10, 0}
}

func (x *AptDependency_Condition) GetPackageAvailable() string {
	if x != nil {
		return x.PackageAvailable
	}
	return ""
}

type Manifest_GclientVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Manifest_GclientVal_StrVal
	//	*Manifest_GclientVal_BoolVal
	Value isManifest_GclientVal_Value `protobuf_oneof:"value"`
}

func (x *Manifest_GclientVal) Reset() {
	*x = Manifest_GclientVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manifest_GclientVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest_GclientVal) ProtoMessage() {}

func (x *Manifest_GclientVal) ProtoReflect() protoreflect.Message {
	mi := &file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest_GclientVal.ProtoReflect.Descriptor instead.
func (*Manifest_GclientVal) Descriptor() ([]byte, []int) {
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP(), []int{12, 0}
}

func (m *Manifest_GclientVal) GetValue() isManifest_GclientVal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Manifest_GclientVal) GetStrVal() string {
	if x, ok := x.GetValue().(*Manifest_GclientVal_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (x *Manifest_GclientVal) GetBoolVal() bool {
	if x, ok := x.GetValue().(*Manifest_GclientVal_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

type isManifest_GclientVal_Value interface {
	isManifest_GclientVal_Value()
}

type Manifest_GclientVal_StrVal struct {
	StrVal string `protobuf:"bytes,1,opt,name=strVal,proto3,oneof"`
}

type Manifest_GclientVal_BoolVal struct {
	BoolVal bool `protobuf:"varint,2,opt,name=boolVal,proto3,oneof"`
}

func (*Manifest_GclientVal_StrVal) isManifest_GclientVal_Value() {}

func (*Manifest_GclientVal_BoolVal) isManifest_GclientVal_Value() {}

var File_infra_experimental_crderiveinputs_inputpb_inputs_proto protoreflect.FileDescriptor

var file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDesc = []byte{
	0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x63, 0x72, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0c, 0x43, 0x49, 0x50, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x49, 0x50, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x67, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0b, 0x43,
	0x49, 0x50, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x6b,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x70, 0x6b, 0x67, 0x12,
	0x2b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a,
	0x0a, 0x56, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x53, 0x68, 0x61, 0x32,
	0x12, 0x3b, 0x0a, 0x12, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x49, 0x50, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x11, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x05, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43,
	0x49, 0x50, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x05, 0x77, 0x68, 0x65, 0x65,
	0x6c, 0x22, 0xff, 0x01, 0x0a, 0x07, 0x47, 0x43, 0x53, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x43,
	0x53, 0x42, 0x6c, 0x6f, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x1a, 0xa0, 0x01, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73,
	0x68, 0x61, 0x31, 0x22, 0x36, 0x0a, 0x0b, 0x47, 0x43, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x43, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0a,
	0x47, 0x43, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x47, 0x43,
	0x53, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x47, 0x43, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x3a, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x5f,
	0x47, 0x5a, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x41, 0x52, 0x5f, 0x42, 0x5a, 0x32, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x5f, 0x58, 0x5a, 0x10, 0x03, 0x22, 0x49, 0x0a,
	0x0e, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x61, 0x77, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61,
	0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x67, 0x63, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x47, 0x43, 0x53, 0x42, 0x6c, 0x6f,
	0x62, 0x48, 0x00, 0x52, 0x07, 0x67, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x03,
	0x67, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x69, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x63, 0x69, 0x70, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x49, 0x50, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x69, 0x70, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x63, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x43, 0x53, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x63, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x70, 0x74, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x72, 0x65,
	0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41, 0x70, 0x74, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x6f, 0x72, 0x65, 0x6c, 0x73,
	0x65, 0x1a, 0x38, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x0f, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x61, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x41, 0x70, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06,
	0x61, 0x70, 0x74, 0x44, 0x65, 0x70, 0x22, 0xb3, 0x04, 0x0a, 0x08, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x64, 0x65, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x44, 0x65, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x67, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x65, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x65, 0x6e, 0x76, 0x73, 0x1a, 0x4b, 0x0a, 0x0a, 0x47,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x56, 0x0a, 0x12, 0x47, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x65, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x2b, 0x5a, 0x29,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2f, 0x63, 0x72, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescOnce sync.Once
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescData = file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDesc
)

func file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescGZIP() []byte {
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescOnce.Do(func() {
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescData)
	})
	return file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDescData
}

var file_infra_experimental_crderiveinputs_inputpb_inputs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_infra_experimental_crderiveinputs_inputpb_inputs_proto_goTypes = []interface{}{
	(GCSArchive_Format)(0),          // 0: GCSArchive.Format
	(*ResolvableString)(nil),        // 1: ResolvableString
	(*GitCheckout)(nil),             // 2: GitCheckout
	(*CIPDPackages)(nil),            // 3: CIPDPackages
	(*CIPDPackage)(nil),             // 4: CIPDPackage
	(*VpythonEnv)(nil),              // 5: VpythonEnv
	(*GCSBlob)(nil),                 // 6: GCSBlob
	(*GCSArchives)(nil),             // 7: GCSArchives
	(*GCSArchive)(nil),              // 8: GCSArchive
	(*RawFileContent)(nil),          // 9: RawFileContent
	(*Source)(nil),                  // 10: Source
	(*AptDependency)(nil),           // 11: AptDependency
	(*LinuxSystemDeps)(nil),         // 12: LinuxSystemDeps
	(*Manifest)(nil),                // 13: Manifest
	(*GCSBlob_Hash)(nil),            // 14: GCSBlob.Hash
	(*AptDependency_Condition)(nil), // 15: AptDependency.Condition
	(*Manifest_GclientVal)(nil),     // 16: Manifest.GclientVal
	nil,                             // 17: Manifest.GclientInputsEntry
	nil,                             // 18: Manifest.SourcesEntry
	nil,                             // 19: Manifest.VirtualenvsEntry
	(*wrapperspb.Int64Value)(nil),   // 20: google.protobuf.Int64Value
}
var file_infra_experimental_crderiveinputs_inputpb_inputs_proto_depIdxs = []int32{
	1,  // 0: GitCheckout.version:type_name -> ResolvableString
	4,  // 1: CIPDPackages.packges:type_name -> CIPDPackage
	1,  // 2: CIPDPackage.pkg:type_name -> ResolvableString
	1,  // 3: CIPDPackage.version:type_name -> ResolvableString
	4,  // 4: VpythonEnv.python_interpreter:type_name -> CIPDPackage
	4,  // 5: VpythonEnv.wheel:type_name -> CIPDPackage
	14, // 6: GCSBlob.hash:type_name -> GCSBlob.Hash
	8,  // 7: GCSArchives.archives:type_name -> GCSArchive
	6,  // 8: GCSArchive.archive:type_name -> GCSBlob
	0,  // 9: GCSArchive.format:type_name -> GCSArchive.Format
	9,  // 10: Source.raw_file:type_name -> RawFileContent
	6,  // 11: Source.gcs_file:type_name -> GCSBlob
	2,  // 12: Source.git:type_name -> GitCheckout
	3,  // 13: Source.cipd:type_name -> CIPDPackages
	7,  // 14: Source.gcs_archives:type_name -> GCSArchives
	15, // 15: AptDependency.conditions:type_name -> AptDependency.Condition
	11, // 16: AptDependency.orelse:type_name -> AptDependency
	11, // 17: LinuxSystemDeps.apt_dep:type_name -> AptDependency
	12, // 18: Manifest.linux_deps:type_name -> LinuxSystemDeps
	17, // 19: Manifest.gclient_inputs:type_name -> Manifest.GclientInputsEntry
	18, // 20: Manifest.sources:type_name -> Manifest.SourcesEntry
	19, // 21: Manifest.virtualenvs:type_name -> Manifest.VirtualenvsEntry
	20, // 22: GCSBlob.Hash.size:type_name -> google.protobuf.Int64Value
	20, // 23: GCSBlob.Hash.generation:type_name -> google.protobuf.Int64Value
	16, // 24: Manifest.GclientInputsEntry.value:type_name -> Manifest.GclientVal
	10, // 25: Manifest.SourcesEntry.value:type_name -> Source
	5,  // 26: Manifest.VirtualenvsEntry.value:type_name -> VpythonEnv
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_infra_experimental_crderiveinputs_inputpb_inputs_proto_init() }
func file_infra_experimental_crderiveinputs_inputpb_inputs_proto_init() {
	if File_infra_experimental_crderiveinputs_inputpb_inputs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvableString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCheckout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIPDPackages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CIPDPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpythonEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSArchives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawFileContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxSystemDeps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSBlob_Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptDependency_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manifest_GclientVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Source_RawFile)(nil),
		(*Source_GcsFile)(nil),
		(*Source_Git)(nil),
		(*Source_Cipd)(nil),
		(*Source_GcsArchives)(nil),
	}
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Manifest_LinuxDeps)(nil),
	}
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Manifest_GclientVal_StrVal)(nil),
		(*Manifest_GclientVal_BoolVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_experimental_crderiveinputs_inputpb_inputs_proto_goTypes,
		DependencyIndexes: file_infra_experimental_crderiveinputs_inputpb_inputs_proto_depIdxs,
		EnumInfos:         file_infra_experimental_crderiveinputs_inputpb_inputs_proto_enumTypes,
		MessageInfos:      file_infra_experimental_crderiveinputs_inputpb_inputs_proto_msgTypes,
	}.Build()
	File_infra_experimental_crderiveinputs_inputpb_inputs_proto = out.File
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_rawDesc = nil
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_goTypes = nil
	file_infra_experimental_crderiveinputs_inputpb_inputs_proto_depIdxs = nil
}
