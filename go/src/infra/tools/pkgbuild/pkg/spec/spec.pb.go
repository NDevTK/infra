// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: recipe_modules/support_3pp/spec.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator int32

const (
	Operator_UNKNOWN Operator = 0
	Operator_LT      Operator = 1 // less-than
	Operator_LE      Operator = 2 // less-than-or-equal-to
	Operator_GT      Operator = 3 // greater-than
	Operator_GE      Operator = 4 // greater-than-or-equal-to
	Operator_EQ      Operator = 5 // equal-to
	Operator_NE      Operator = 6 // not-equal-to
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0: "UNKNOWN",
		1: "LT",
		2: "LE",
		3: "GT",
		4: "GE",
		5: "EQ",
		6: "NE",
	}
	Operator_value = map[string]int32{
		"UNKNOWN": 0,
		"LT":      1,
		"LE":      2,
		"GT":      3,
		"GE":      4,
		"EQ":      5,
		"NE":      6,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_recipe_modules_support_3pp_spec_proto_enumTypes[0].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_recipe_modules_support_3pp_spec_proto_enumTypes[0]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0}
}

type Spec_Create_Package_InstallMode int32

const (
	Spec_Create_Package_copy    Spec_Create_Package_InstallMode = 0
	Spec_Create_Package_symlink Spec_Create_Package_InstallMode = 1
)

// Enum value maps for Spec_Create_Package_InstallMode.
var (
	Spec_Create_Package_InstallMode_name = map[int32]string{
		0: "copy",
		1: "symlink",
	}
	Spec_Create_Package_InstallMode_value = map[string]int32{
		"copy":    0,
		"symlink": 1,
	}
)

func (x Spec_Create_Package_InstallMode) Enum() *Spec_Create_Package_InstallMode {
	p := new(Spec_Create_Package_InstallMode)
	*p = x
	return p
}

func (x Spec_Create_Package_InstallMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Spec_Create_Package_InstallMode) Descriptor() protoreflect.EnumDescriptor {
	return file_recipe_modules_support_3pp_spec_proto_enumTypes[1].Descriptor()
}

func (Spec_Create_Package_InstallMode) Type() protoreflect.EnumType {
	return &file_recipe_modules_support_3pp_spec_proto_enumTypes[1]
}

func (x Spec_Create_Package_InstallMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Spec_Create_Package_InstallMode.Descriptor instead.
func (Spec_Create_Package_InstallMode) EnumDescriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

// The Spec for a third-party package fully describes how to:
//   - Fetch the package sources
//   - Build the sources
//   - Package the built product
//   - Verify the packaged product
//   - Upload the packaged product to CIPD
type Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) How the package should be created.
	//
	// Multiple create messages can be specified, and they'll be combined together
	// into a single Create message via the rules described in Create.platform_re.
	// Required fields are checked on this combined Create message, so you can
	// have multiple partial messages which combine into a complete message.
	Create []*Spec_Create `protobuf:"bytes,1,rep,name=create,proto3" json:"create,omitempty"`
	// (required) Upload describes how the built package should be uploaded to
	// CIPD.
	Upload *Spec_Upload `protobuf:"bytes,2,opt,name=upload,proto3" json:"upload,omitempty"`
}

func (x *Spec) Reset() {
	*x = Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0}
}

func (x *Spec) GetCreate() []*Spec_Create {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *Spec) GetUpload() *Spec_Upload {
	if x != nil {
		return x.Upload
	}
	return nil
}

// SemverRestriction expresses a restriction on a semver.
//
// When SemverRestriction is used to restrict some `$version`, it works like
// `$version $op $val`. So, if this was `{op: LT val: "1.0"}`, then:
//   - 1.1   would be excluded
//   - 0.9   would be included
//   - 0.9.9 would be included
//
// NOTE: Release candidates sort LOWER than their symver prefix. For example,
// "1.0rc1" < "1.0". This makes sense if you think about it a bit, but it
// implies that if you want to exclude "1.x", you need a rule
// `{op: LT val: "1.0rc0"}`.
type SemverRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The comparison operator to use with this restriction.
	Op Operator `protobuf:"varint,1,opt,name=op,proto3,enum=recipe_modules.infra.support_3pp.Operator" json:"op,omitempty"`
	// The value to compare the version to.
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *SemverRestriction) Reset() {
	*x = SemverRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemverRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemverRestriction) ProtoMessage() {}

func (x *SemverRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemverRestriction.ProtoReflect.Descriptor instead.
func (*SemverRestriction) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SemverRestriction) GetOp() Operator {
	if x != nil {
		return x.Op
	}
	return Operator_UNKNOWN
}

func (x *SemverRestriction) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

// Pulls package sources from a git repo.
type GitSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) The URL to the repo, e.g.
	//
	//	https://some.host.example.com/path/to/repo.git
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// (optional) A substitution pattern where "%s" represents the location of the
	// symver in a tag name.
	//
	// This is used for filter git repo tags for symantic version numbers. Some
	// repos e.g. prefix their versions with `v`, or use other formats (e.g.
	// "release/1.2.3").
	//
	// If omitted, this defaults to `%s` which would work for repos whose tags
	// look like `refs/tags/1.2.3`.
	//
	// For example, if this was `v%s`, then this would look for the version 1.2.3
	// as `refs/tags/v1.2.3`
	TagPattern string `protobuf:"bytes,2,opt,name=tag_pattern,json=tagPattern,proto3" json:"tag_pattern,omitempty"`
	// (optional) A list of SemverRestriction's to restrict the semvars from
	// matched tags. You can use this to restrict which tags to consider when
	// calculated the 'latest' version available.
	//
	// Note that if you over-constrain this, 3pp will simply see no available tags
	// at all.
	VersionRestriction []*SemverRestriction `protobuf:"bytes,4,rep,name=version_restriction,json=versionRestriction,proto3" json:"version_restriction,omitempty"`
	// (optional) version_join is a string used to join the portions of a version
	// number together for repos which don't use "." as the joiner.
	//
	// If omitted, this defaults to ".", which would work for repos whose tags
	// look like `refs/tags/1.2.3`.
	//
	// For example, if this is "-", then the recipe would transform the symantic
	// version `1.2.3` into `1-2-3` before expanding it into tag_pattern to find
	// the matching git tag.
	VersionJoin string `protobuf:"bytes,3,opt,name=version_join,json=versionJoin,proto3" json:"version_join,omitempty"`
	// (optional) only consider tags that fully match this regular expression.
	TagFilterRe string `protobuf:"bytes,5,opt,name=tag_filter_re,json=tagFilterRe,proto3" json:"tag_filter_re,omitempty"`
}

func (x *GitSource) Reset() {
	*x = GitSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSource) ProtoMessage() {}

func (x *GitSource) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSource.ProtoReflect.Descriptor instead.
func (*GitSource) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{2}
}

func (x *GitSource) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GitSource) GetTagPattern() string {
	if x != nil {
		return x.TagPattern
	}
	return ""
}

func (x *GitSource) GetVersionRestriction() []*SemverRestriction {
	if x != nil {
		return x.VersionRestriction
	}
	return nil
}

func (x *GitSource) GetVersionJoin() string {
	if x != nil {
		return x.VersionJoin
	}
	return ""
}

func (x *GitSource) GetTagFilterRe() string {
	if x != nil {
		return x.TagFilterRe
	}
	return ""
}

// Pulls sources from a CIPD package.
type CipdSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) The full CIPD package name of the source.
	Pkg string `protobuf:"bytes,1,opt,name=pkg,proto3" json:"pkg,omitempty"`
	// (required) A symver to use when this package is built without specifying
	// a version (e.g. as a dep for some other package). This will translate
	// to the CIPD tag of `version:$default_version`.
	//
	// Note if the value is "latest", we will get value from the tag "version"
	// of the cipd package with the ref "latest".
	DefaultVersion string `protobuf:"bytes,2,opt,name=default_version,json=defaultVersion,proto3" json:"default_version,omitempty"`
	// (required) The URL to the download page where we obtained this source. This
	// is required, but is not used as part of the build, it's purely for
	// documentation.
	OriginalDownloadUrl string `protobuf:"bytes,3,opt,name=original_download_url,json=originalDownloadUrl,proto3" json:"original_download_url,omitempty"`
}

func (x *CipdSource) Reset() {
	*x = CipdSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CipdSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipdSource) ProtoMessage() {}

func (x *CipdSource) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipdSource.ProtoReflect.Descriptor instead.
func (*CipdSource) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{3}
}

func (x *CipdSource) GetPkg() string {
	if x != nil {
		return x.Pkg
	}
	return ""
}

func (x *CipdSource) GetDefaultVersion() string {
	if x != nil {
		return x.DefaultVersion
	}
	return ""
}

func (x *CipdSource) GetOriginalDownloadUrl() string {
	if x != nil {
		return x.OriginalDownloadUrl
	}
	return ""
}

// This is a custom catch-all script to probe for the latest version and
// obtain the latest sources.
//
// This will be invoked as `script latest` and is expected to
// print to stdout the latest symver available (e.g. `1.2.3`). The
// $_3PP_VERSION environment variable is not present.
//
// If this version needs to be fetched, the script will be invoked as
// `script get_url` and is expected to print to stdout a json string of
// the download manifest. For example:
//
//	{
//	  "url": ["https://some_url/foo_1.2.3.zip"],
//	  "ext": ".zip", # optional when the extension is ".tar.gz",
//	                 # ignored when "name" is present
//	  "name": ["foo.zip"]
//	}
type ScriptSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) Name (and args) of a script adjacent to 3pp.pb.
	//
	// For example if this is `["fetch.py", "foo"]`, then the recipe will
	// do:
	//
	//	$ cd /nowhere/in/particular
	//	$ vpython3 /path/to/repo/subdir/package_name/fetch.py foo latest
	//	1.2.3
	//	$ _3PP_VERSION=1.2.3 vpython3 \
	//	  /path/to/repo/subdir/package_name/fetch.py foo get_url \
	//	  /path/to/checkout
	//	{"url": ["https://some_url/foo_1.2.3.zip"], "ext": ".zip"}'
	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	// TODO(crbug.com/1185395): Implement a permanent solution for this flow.
	// (optional) Boolean to use fetch scripts to download artifacts.
	//
	// If present, the recipe will use fetch scripts to download artifacts via
	// calling the "checkout" option.
	//
	// By reusing the same example above, the recipe will do:
	//
	//	$ cd /nowhere/in/particular
	//	$ vpython3 /path/to/repo/subdir/package_name/fetch.py foo latest
	//	1.2.3
	//	$ _3PP_VERSION=1.2.3 vpython3 \
	//	  /path/to/repo/subdir/package_name/fetch.py foo checkout \
	//	  /path/to/checkout
	UseFetchCheckoutWorkflow bool `protobuf:"varint,1002,opt,name=use_fetch_checkout_workflow,json=useFetchCheckoutWorkflow,proto3" json:"use_fetch_checkout_workflow,omitempty"`
}

func (x *ScriptSource) Reset() {
	*x = ScriptSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptSource) ProtoMessage() {}

func (x *ScriptSource) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptSource.ProtoReflect.Descriptor instead.
func (*ScriptSource) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{4}
}

func (x *ScriptSource) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ScriptSource) GetUseFetchCheckoutWorkflow() bool {
	if x != nil {
		return x.UseFetchCheckoutWorkflow
	}
	return false
}

// This will provide a original download url to fetch sources from third party.
//
// This will be used for replacement of CipdSource where packages are manually
// uploaded to cipd.
type UrlSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) The URL to the download page where we obtained this source. This
	// is required and used to fetch source.
	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	// (required) The version of the package source fetched from `download_url`.
	// Please make sure those two are in sync.
	// TODO(akashmukherjee): Implement a presubmit check to make sure of the sync.
	//
	// For example:
	//
	//	source {
	//	  url {
	//	    download_url: "https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz"
	//	    version: "2.69"
	//	  }
	//	}
	//
	// This version may also be used when this package is built without version
	// specified (e.g. as a dep of other packages). This matches the current
	// CIPDSource behavior.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Most of the side loaded sources use `.tar.gz` file extension, however
	// some source artifacts use other. In order to prevent alteration of the
	// source artifact when we cache sources, we need extension field passed
	// via the spec.
	// If not passed, 3pp will use default .tar.gz extension.
	Extension string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UrlSource) Reset() {
	*x = UrlSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlSource) ProtoMessage() {}

func (x *UrlSource) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlSource.ProtoReflect.Descriptor instead.
func (*UrlSource) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{5}
}

func (x *UrlSource) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *UrlSource) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UrlSource) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

// Describes how to fetch+build+test the pkg.
//
// All scripts are invoked with the following environment variables (unless
// noted otherwise):
//
//   - $_3PP_CIPD_PACKAGE_NAME - the CIPD package name, excluding the
//     package_prefix and platform suffix.
//     (if any patch version was set).
//   - $_3PP_PATCH_VERSION - the `patch_version` set for this create block
//   - $_3PP_PLATFORM - the platform we're targeting
//   - $_3PP_TOOL_PLATFORM - the platform that we're building on (will be different
//     than _3PP_PLATFORM if we're cross-compiling)
//   - $_3PP_VERSION - the version we're building, e.g. 1.2.3
//   - $GOOS - The golang OS name we're targeting
//   - $GOARCH - The golang architecture we're targeting
//   - $MACOSX_DEPLOYMENT_TARGET - On OS X, set to 10.10, for your
//     semi-up-to-date OS X building needs. This needs to be consistently
//     set for all packages or it will cause linker warnings/errors when
//     linking in static libs that were targeting a newer version (e.g.
//     if it was left unset). Binaries built with this set to 10.10 will not
//     run on 10.9 or older systems.
//
// Additionally, on cross-compile environments, the $CROSS_TRIPLE environment
// variable is set to a GCC cross compile target triplet of cpu-vendor-os.
type Spec_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) The platform_re field in each Create message is applied as
	// a regex to ${platform}. Each matching Create message is applied in order
	// using dict.update for each member message (i.e. ['source'].update,
	// ['build'].update, etc.) to build a singular Create message for the
	// current platform.
	PlatformRe string `protobuf:"bytes,1,opt,name=platform_re,json=platformRe,proto3" json:"platform_re,omitempty"`
	// (optional) If true, then the recipe will treat this package/platform as
	// experimental. That is, it will prepend 'experimental/' to it's CIPD
	// package name. This is the same effect as running the entire recipe in
	// experimental mode, except on a per-package basis. The two experimental
	// prefixes do not stack :).
	Experimental bool `protobuf:"varint,2,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// (optional) If true, all other fields are ignored and the recipe will
	// return an error indicating that this package isn't configured for the
	// current ${platform}.
	Unsupported bool `protobuf:"varint,3,opt,name=unsupported,proto3" json:"unsupported,omitempty"`
	// (required) How to obtain the source for this pkg.
	Source *Spec_Create_Source `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// (optional) How to transform the source into the output pkg.
	//
	// If this message is entirely omitted, then the output of the source stage
	// will be used as the built result (useful for source packages, or python
	// packages which don't need massaging).
	//
	// If this message is present, the package will be built according to the
	// Build message.
	Build *Spec_Create_Build `protobuf:"bytes,5,opt,name=build,proto3" json:"build,omitempty"`
	// (optional) Options for creating a CIPD package from the built source.
	Package *Spec_Create_Package `protobuf:"bytes,6,opt,name=package,proto3" json:"package,omitempty"`
	// (optional) How to verify that the output pkg is useful.
	Verify *Spec_Create_Verify `protobuf:"bytes,7,opt,name=verify,proto3" json:"verify,omitempty"`
}

func (x *Spec_Create) Reset() {
	*x = Spec_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec_Create) ProtoMessage() {}

func (x *Spec_Create) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec_Create.ProtoReflect.Descriptor instead.
func (*Spec_Create) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Spec_Create) GetPlatformRe() string {
	if x != nil {
		return x.PlatformRe
	}
	return ""
}

func (x *Spec_Create) GetExperimental() bool {
	if x != nil {
		return x.Experimental
	}
	return false
}

func (x *Spec_Create) GetUnsupported() bool {
	if x != nil {
		return x.Unsupported
	}
	return false
}

func (x *Spec_Create) GetSource() *Spec_Create_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Spec_Create) GetBuild() *Spec_Create_Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *Spec_Create) GetPackage() *Spec_Create_Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *Spec_Create) GetVerify() *Spec_Create_Verify {
	if x != nil {
		return x.Verify
	}
	return nil
}

type Spec_Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) The CIPD package name prefix to use when uploading.
	//
	// This is used as:
	//
	//	<pkg_prefix>/<pkg_name>/${platform}
	//
	// e.g. with the prefix `pkg/prefix` for the package `cool_thing`, you'd
	// get:
	//
	//	pkg/prefix/cool_thing/${platform}
	PkgPrefix string `protobuf:"bytes,1,opt,name=pkg_prefix,json=pkgPrefix,proto3" json:"pkg_prefix,omitempty"`
	// (optional) If set, then the output of the build is intended to be used by
	// all platforms, and so the package we upload to will exclude the normal
	// `${platform}` suffix. This will also cause the build for this package to
	// ALWAYS run under the `linux-amd64` docker container (for consistency).
	Universal bool `protobuf:"varint,2,opt,name=universal,proto3" json:"universal,omitempty"`
	// Ordinarily the package name is automatically computed using the spec
	// file path. pkg_name_override can be set to force a specific package name
	// in CIPD.
	//
	// The override is used only at upload time, so when specifying
	// dependencies or the packages passed to ensure_upload(), use the standard
	// package name.
	PkgNameOverride string `protobuf:"bytes,3,opt,name=pkg_name_override,json=pkgNameOverride,proto3" json:"pkg_name_override,omitempty"`
}

func (x *Spec_Upload) Reset() {
	*x = Spec_Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec_Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec_Upload) ProtoMessage() {}

func (x *Spec_Upload) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec_Upload.ProtoReflect.Descriptor instead.
func (*Spec_Upload) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Spec_Upload) GetPkgPrefix() string {
	if x != nil {
		return x.PkgPrefix
	}
	return ""
}

func (x *Spec_Upload) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *Spec_Upload) GetPkgNameOverride() string {
	if x != nil {
		return x.PkgNameOverride
	}
	return ""
}

type Spec_Create_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) Source messages must have one of these methods.
	// In case multiple approaches are possible, prefer using one of the
	// approaches in the following order: git, url, script, cipd.
	//
	// Types that are assignable to Method:
	//
	//	*Spec_Create_Source_Git
	//	*Spec_Create_Source_Cipd
	//	*Spec_Create_Source_Script
	//	*Spec_Create_Source_Url
	Method isSpec_Create_Source_Method `protobuf_oneof:"method"`
	// (optional) Run checkout in this subdirectory of the install script's
	// $CWD.
	//
	// Useful for e.g. Go packages, where you want the install script to run
	// in a parent directory of the go checkout.
	//
	// For example if this is `go/src/repo.com`, and you're using a `git`
	// source method then the files in the git repo will be checked out to
	// `/path/to/checkout/go/src/repo.com`, but the install script will still
	// run in `/path/to/checkout`.
	Subdir string `protobuf:"bytes,5,opt,name=subdir,proto3" json:"subdir,omitempty"`
	// (optional) If set to true, the recipe will find and unpack it all
	// archives fetched.
	//   - Archives must be .zip or a well-known tarball extension (supporting
	//     either none, gzip, bzip2, lzma/xz, or zstandard compression).
	//   - The recipe will delete any other files in this directory prior to
	//     unpacking the archives.
	//   - If there's only a single archive, and it has all files in a single
	//     directory, this directory will be pruned (and this applies
	//     recursively). Many source tallballs are released like
	//     `foo-1.2.tar.gz`, containing a folder `foo-1.2` with all source files
	//     inside that. Pruning these archives makes the installation scripts
	//     easier. If you run into a case where this behavior is undesired, set
	//     `no_archive_prune` to true. If more than one archive is produced,
	//     this setting has no effect.
	UnpackArchive  bool `protobuf:"varint,6,opt,name=unpack_archive,json=unpackArchive,proto3" json:"unpack_archive,omitempty"`
	NoArchivePrune bool `protobuf:"varint,7,opt,name=no_archive_prune,json=noArchivePrune,proto3" json:"no_archive_prune,omitempty"`
	// (optional) Directories relative to the project folder holding patches
	// to apply with "git apply".
	//
	// All patches in the directories will be applied, in alphanumeric order,
	// after unpacking the archive (if any).
	//
	// This is provided as a list option so that different sets of patches can
	// be applied for different values of ${platform}, possibly with some
	// overlapping base patches.
	PatchDir []string `protobuf:"bytes,8,rep,name=patch_dir,json=patchDir,proto3" json:"patch_dir,omitempty"`
	// (optional) Used to differentiate from the stock symver during
	// compilation and in the generated CIPD package tags.
	//
	// For example, if this is `my_org1`, and we were building `1.2.3` of the
	// source, then this would upload with the CIPD tag of
	// `version:1.2.3.my_org1`
	PatchVersion string `protobuf:"bytes,9,opt,name=patch_version,json=patchVersion,proto3" json:"patch_version,omitempty"`
	// (required) Base address for constructing a Common Platform Enumeration
	// ( https://csrc.nist.gov/projects/security-content-automation-protocol/specifications/cpe )
	// specification for this package.
	CpeBaseAddress string `protobuf:"bytes,10,opt,name=cpe_base_address,json=cpeBaseAddress,proto3" json:"cpe_base_address,omitempty"`
}

func (x *Spec_Create_Source) Reset() {
	*x = Spec_Create_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec_Create_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec_Create_Source) ProtoMessage() {}

func (x *Spec_Create_Source) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec_Create_Source.ProtoReflect.Descriptor instead.
func (*Spec_Create_Source) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Spec_Create_Source) GetMethod() isSpec_Create_Source_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *Spec_Create_Source) GetGit() *GitSource {
	if x, ok := x.GetMethod().(*Spec_Create_Source_Git); ok {
		return x.Git
	}
	return nil
}

func (x *Spec_Create_Source) GetCipd() *CipdSource {
	if x, ok := x.GetMethod().(*Spec_Create_Source_Cipd); ok {
		return x.Cipd
	}
	return nil
}

func (x *Spec_Create_Source) GetScript() *ScriptSource {
	if x, ok := x.GetMethod().(*Spec_Create_Source_Script); ok {
		return x.Script
	}
	return nil
}

func (x *Spec_Create_Source) GetUrl() *UrlSource {
	if x, ok := x.GetMethod().(*Spec_Create_Source_Url); ok {
		return x.Url
	}
	return nil
}

func (x *Spec_Create_Source) GetSubdir() string {
	if x != nil {
		return x.Subdir
	}
	return ""
}

func (x *Spec_Create_Source) GetUnpackArchive() bool {
	if x != nil {
		return x.UnpackArchive
	}
	return false
}

func (x *Spec_Create_Source) GetNoArchivePrune() bool {
	if x != nil {
		return x.NoArchivePrune
	}
	return false
}

func (x *Spec_Create_Source) GetPatchDir() []string {
	if x != nil {
		return x.PatchDir
	}
	return nil
}

func (x *Spec_Create_Source) GetPatchVersion() string {
	if x != nil {
		return x.PatchVersion
	}
	return ""
}

func (x *Spec_Create_Source) GetCpeBaseAddress() string {
	if x != nil {
		return x.CpeBaseAddress
	}
	return ""
}

type isSpec_Create_Source_Method interface {
	isSpec_Create_Source_Method()
}

type Spec_Create_Source_Git struct {
	Git *GitSource `protobuf:"bytes,1,opt,name=git,proto3,oneof"`
}

type Spec_Create_Source_Cipd struct {
	Cipd *CipdSource `protobuf:"bytes,2,opt,name=cipd,proto3,oneof"`
}

type Spec_Create_Source_Script struct {
	Script *ScriptSource `protobuf:"bytes,3,opt,name=script,proto3,oneof"`
}

type Spec_Create_Source_Url struct {
	Url *UrlSource `protobuf:"bytes,4,opt,name=url,proto3,oneof"`
}

func (*Spec_Create_Source_Git) isSpec_Create_Source_Method() {}

func (*Spec_Create_Source_Cipd) isSpec_Create_Source_Method() {}

func (*Spec_Create_Source_Script) isSpec_Create_Source_Method() {}

func (*Spec_Create_Source_Url) isSpec_Create_Source_Method() {}

type Spec_Create_Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) Name (and args) of a script adjacent to 3pp.pb which knows
	// how to transform the source into the built product.
	//
	// If omitted, this defaults to `["install.sh"]`.
	//
	// Subsequent install args are passed to the script verbatim, followed by
	// a target `prefix` path to install the compiled package to, followed by
	// a path to a prefix containing all deps. The current directory is set to
	// the base directory of the source checkout (excluding subdir). Any
	// specified tools will be in $PATH (both '$tools' and '$tools/bin' are
	// added to $PATH, because many packages are set up with their binaries at
	// the base of the package, and some are set up with them in a /bin
	// folder).
	//
	// Scripts ending with .py will be invoked with vpython3 (on all
	// platforms).
	// Scripts ending with .sh will be invoked with bash (on all platforms).
	//
	//	For Windows this uses the git-for-windows copy of bash, which is
	//	mingw bash (in case you run into path issues, but since everything is
	//	relative paths it should be pretty transparent).
	//
	// Other script suffixes are currently not supported.
	//
	// For example, if this is `["do_build.sh", "quickly"]`, then the recipe
	// will do:
	//
	//	$ cd /path/to/checkout
	//	$ export PATH=/path/to/tools_prefix:/path/to/tools_prefix/bin:$PATH
	//	$ /path/to/checkout/.3pp/package_name/do_build.sh quickly \
	//	   /path/to/output_prefix
	//	   /path/to/deps_prefix
	Install []string `protobuf:"bytes,1,rep,name=install,proto3" json:"install,omitempty"`
	// (optional) List of other 3pp packages built for the host and put in
	// $PATH.
	//
	// You may specify specific versions with the notation (useful if the
	// current tool you're building is self-bootstrapping, like cmake):
	//
	//	<pkg_prefix>/<package_name>@version
	//
	// e.g. `tools/ninja@1.8.2`
	//
	// Tools are always used with the host's ${platform} value (e.g. if cross
	// compiling on linux, the tools will likely be for linux-amd64,
	// regardless of whatever cross compile target you're aiming for).
	//
	// If no cipd_version is specified, the recipe will use the cipd version
	// "latest".
	//
	// If tools have a specified version other than "latest", they are
	// required to be already built and present in CIPD. If they're "latest"
	// or unspecified, they may be built if they're not already in CIPD.
	Tool []string `protobuf:"bytes,2,rep,name=tool,proto3" json:"tool,omitempty"`
	// (optional) List of non-3pp packages to be installed as tools.
	//
	// These may reference an arbitrary CIPD package, including a 3pp package
	// from a different repo. A version tag is required, using the following
	// format:
	//
	//	cipd/pkg/path@version
	//
	//	e.g. `infra/tools/foo@1.3.1`
	//
	// The package path may contain ${platform} which will be expanded for the
	// host platform.
	ExternalTool []string `protobuf:"bytes,6,rep,name=external_tool,json=externalTool,proto3" json:"external_tool,omitempty"`
	// (optional) List of other 3pp packages built for the target and passed
	// to the install command.
	//
	// Unlike `tools`, these may not specify versions.  The reason for this is
	// that the dependency graph gets too complicated for this simple 3pp
	// recipe to resolve. Instead, the versions used will be the version of
	// the `source` of the indicated deps. If you want to update the deps,
	// update their source entry to pull a different version.
	Dep []string `protobuf:"bytes,3,rep,name=dep,proto3" json:"dep,omitempty"`
	// (optional) List of non-3pp packages to be installed as deps.
	//
	// These may reference an arbitrary CIPD package, including a 3pp package
	// from a different repo. A version tag is required, using the following
	// format:
	//
	//	cipd/pkg/path@version
	//
	//	e.g. `infra/tools/foo@1.3.1`
	//
	// The package path may contain ${platform} which will be expanded for the
	// target platform.
	ExternalDep []string `protobuf:"bytes,7,rep,name=external_dep,json=externalDep,proto3" json:"external_dep,omitempty"`
	// The docker environments for linux-amd64 is very old (in order to
	// conform to PEP 513). As such, sometimes it's a hindrance for building
	// universal packages (such as those using nodejs), as they're so old that
	// node cannot run on them (!!).
	//
	// This option should be used VERY sparingly. A better solution would be
	// to:
	//   - Separate the docker image creation from the `dockerbuild` tool
	//     (maybe as a 3pp package?) and allow an explicit dependency on
	//     a dockcross-derived image here.
	//   - OR, switch away from dockerbuild images and use dockcross directly,
	//     using the normal linux-x64 by default, and optionally being able to
	//     explicitly choose the manylinux-x64 for packages that need it.
	NoDockerEnv bool `protobuf:"varint,4,opt,name=no_docker_env,json=noDockerEnv,proto3" json:"no_docker_env,omitempty"`
	// If set, 3pp will not try to set up a compiler toolchain for this
	// package. You can use this if your package is repackaging a prebuilt
	// upstream package.
	NoToolchain bool `protobuf:"varint,5,opt,name=no_toolchain,json=noToolchain,proto3" json:"no_toolchain,omitempty"`
}

func (x *Spec_Create_Build) Reset() {
	*x = Spec_Create_Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec_Create_Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec_Create_Build) ProtoMessage() {}

func (x *Spec_Create_Build) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec_Create_Build.ProtoReflect.Descriptor instead.
func (*Spec_Create_Build) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Spec_Create_Build) GetInstall() []string {
	if x != nil {
		return x.Install
	}
	return nil
}

func (x *Spec_Create_Build) GetTool() []string {
	if x != nil {
		return x.Tool
	}
	return nil
}

func (x *Spec_Create_Build) GetExternalTool() []string {
	if x != nil {
		return x.ExternalTool
	}
	return nil
}

func (x *Spec_Create_Build) GetDep() []string {
	if x != nil {
		return x.Dep
	}
	return nil
}

func (x *Spec_Create_Build) GetExternalDep() []string {
	if x != nil {
		return x.ExternalDep
	}
	return nil
}

func (x *Spec_Create_Build) GetNoDockerEnv() bool {
	if x != nil {
		return x.NoDockerEnv
	}
	return false
}

func (x *Spec_Create_Build) GetNoToolchain() bool {
	if x != nil {
		return x.NoToolchain
	}
	return false
}

// See CIPD documentation for specifics about these options.
type Spec_Create_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (optional) How the CIPD package should be installed on client machines.
	//
	// If omitted, this defaults to `copy`.
	InstallMode Spec_Create_Package_InstallMode `protobuf:"varint,1,opt,name=install_mode,json=installMode,proto3,enum=recipe_modules.infra.support_3pp.Spec_Create_Package_InstallMode" json:"install_mode,omitempty"`
	// (optional) The CIPD-installation-relative path to a version file.
	//
	// If omitted, no version file will be added to the package.
	VersionFile string `protobuf:"bytes,2,opt,name=version_file,json=versionFile,proto3" json:"version_file,omitempty"`
	// (optional) The alter_version fields are used to change the version
	// number we tag in CIPD as `version`. This is useful for when the
	// upstream source versions vary across platforms (for example).
	//
	// This is applied like:
	//
	//	re.sub(
	//	  alter_version_re,
	//	  alter_version_replace,
	//	  full_symver_without_patch_version)
	//
	// If these are specified, the uploaded package will also be tagged with
	// an additional tag `real_version`. This will be the original value of
	// `version` before transformation.
	AlterVersionRe      string `protobuf:"bytes,3,opt,name=alter_version_re,json=alterVersionRe,proto3" json:"alter_version_re,omitempty"`
	AlterVersionReplace string `protobuf:"bytes,4,opt,name=alter_version_replace,json=alterVersionReplace,proto3" json:"alter_version_replace,omitempty"`
	// If set, skip updating the 'latest' ref to point to newly-built
	// packages using this spec. This may be useful if a spec is maintained
	// to continue building an older release track for a package.
	DisableLatestRef bool `protobuf:"varint,5,opt,name=disable_latest_ref,json=disableLatestRef,proto3" json:"disable_latest_ref,omitempty"`
}

func (x *Spec_Create_Package) Reset() {
	*x = Spec_Create_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec_Create_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec_Create_Package) ProtoMessage() {}

func (x *Spec_Create_Package) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec_Create_Package.ProtoReflect.Descriptor instead.
func (*Spec_Create_Package) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Spec_Create_Package) GetInstallMode() Spec_Create_Package_InstallMode {
	if x != nil {
		return x.InstallMode
	}
	return Spec_Create_Package_copy
}

func (x *Spec_Create_Package) GetVersionFile() string {
	if x != nil {
		return x.VersionFile
	}
	return ""
}

func (x *Spec_Create_Package) GetAlterVersionRe() string {
	if x != nil {
		return x.AlterVersionRe
	}
	return ""
}

func (x *Spec_Create_Package) GetAlterVersionReplace() string {
	if x != nil {
		return x.AlterVersionReplace
	}
	return ""
}

func (x *Spec_Create_Package) GetDisableLatestRef() bool {
	if x != nil {
		return x.DisableLatestRef
	}
	return false
}

type Spec_Create_Verify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (required) Name (and args) of a script adjacent to 3pp.pb.
	//
	// Invoked after package with the built cipd package file as the first
	// additional arg. $CWD is set to an empty folder that the test can use
	// for scratch space, if it likes.
	//
	// For example if this is `["test.py", "extra_arg"]`, then the recipe will
	// do:
	//
	//	$ cd /path/to/verify
	//	$ vpython3 /path/to/repo/subdir/package_name/test.py extra_arg \
	//	   /path/to/built/cipd/package
	Test []string `protobuf:"bytes,1,rep,name=test,proto3" json:"test,omitempty"`
}

func (x *Spec_Create_Verify) Reset() {
	*x = Spec_Create_Verify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spec_Create_Verify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec_Create_Verify) ProtoMessage() {}

func (x *Spec_Create_Verify) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_modules_support_3pp_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec_Create_Verify.ProtoReflect.Descriptor instead.
func (*Spec_Create_Verify) Descriptor() ([]byte, []int) {
	return file_recipe_modules_support_3pp_spec_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Spec_Create_Verify) GetTest() []string {
	if x != nil {
		return x.Test
	}
	return nil
}

var File_recipe_modules_support_3pp_spec_proto protoreflect.FileDescriptor

var file_recipe_modules_support_3pp_spec_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x22, 0xe9, 0x0d, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0xdf, 0x0b, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33,
	0x70, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x06,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x1a, 0xf7, 0x03, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x69, 0x70, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x43, 0x69, 0x70, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x69, 0x70, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x3f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x33, 0x70, 0x70, 0x2e, 0x55, 0x72, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6e, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x70, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x70, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x1a, 0xd6, 0x01, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x65, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x6f, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6e, 0x6f, 0x54, 0x6f, 0x6f, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0xc4, 0x02,
	0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33,
	0x70, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x22, 0x24,
	0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x63, 0x6f, 0x70, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69,
	0x6e, 0x6b, 0x10, 0x01, 0x1a, 0x1c, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x1a, 0x71, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6b, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6b, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x11, 0x53, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xed, 0x01, 0x0a, 0x09, 0x47, 0x69, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61,
	0x67, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x67, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x64, 0x0a, 0x13, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x33, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x6d, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x22, 0x7b, 0x0a, 0x0a, 0x43, 0x69, 0x70, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6b, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x06, 0x08, 0xe9, 0x07, 0x10, 0xea,
	0x07, 0x22, 0x66, 0x0a, 0x09, 0x55, 0x72, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x47, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45,
	0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45,
	0x10, 0x06, 0x42, 0x1f, 0x5a, 0x1d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x70, 0x6b, 0x67, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recipe_modules_support_3pp_spec_proto_rawDescOnce sync.Once
	file_recipe_modules_support_3pp_spec_proto_rawDescData = file_recipe_modules_support_3pp_spec_proto_rawDesc
)

func file_recipe_modules_support_3pp_spec_proto_rawDescGZIP() []byte {
	file_recipe_modules_support_3pp_spec_proto_rawDescOnce.Do(func() {
		file_recipe_modules_support_3pp_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_recipe_modules_support_3pp_spec_proto_rawDescData)
	})
	return file_recipe_modules_support_3pp_spec_proto_rawDescData
}

var file_recipe_modules_support_3pp_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_recipe_modules_support_3pp_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_recipe_modules_support_3pp_spec_proto_goTypes = []interface{}{
	(Operator)(0),                        // 0: recipe_modules.infra.support_3pp.Operator
	(Spec_Create_Package_InstallMode)(0), // 1: recipe_modules.infra.support_3pp.Spec.Create.Package.InstallMode
	(*Spec)(nil),                         // 2: recipe_modules.infra.support_3pp.Spec
	(*SemverRestriction)(nil),            // 3: recipe_modules.infra.support_3pp.SemverRestriction
	(*GitSource)(nil),                    // 4: recipe_modules.infra.support_3pp.GitSource
	(*CipdSource)(nil),                   // 5: recipe_modules.infra.support_3pp.CipdSource
	(*ScriptSource)(nil),                 // 6: recipe_modules.infra.support_3pp.ScriptSource
	(*UrlSource)(nil),                    // 7: recipe_modules.infra.support_3pp.UrlSource
	(*Spec_Create)(nil),                  // 8: recipe_modules.infra.support_3pp.Spec.Create
	(*Spec_Upload)(nil),                  // 9: recipe_modules.infra.support_3pp.Spec.Upload
	(*Spec_Create_Source)(nil),           // 10: recipe_modules.infra.support_3pp.Spec.Create.Source
	(*Spec_Create_Build)(nil),            // 11: recipe_modules.infra.support_3pp.Spec.Create.Build
	(*Spec_Create_Package)(nil),          // 12: recipe_modules.infra.support_3pp.Spec.Create.Package
	(*Spec_Create_Verify)(nil),           // 13: recipe_modules.infra.support_3pp.Spec.Create.Verify
}
var file_recipe_modules_support_3pp_spec_proto_depIdxs = []int32{
	8,  // 0: recipe_modules.infra.support_3pp.Spec.create:type_name -> recipe_modules.infra.support_3pp.Spec.Create
	9,  // 1: recipe_modules.infra.support_3pp.Spec.upload:type_name -> recipe_modules.infra.support_3pp.Spec.Upload
	0,  // 2: recipe_modules.infra.support_3pp.SemverRestriction.op:type_name -> recipe_modules.infra.support_3pp.Operator
	3,  // 3: recipe_modules.infra.support_3pp.GitSource.version_restriction:type_name -> recipe_modules.infra.support_3pp.SemverRestriction
	10, // 4: recipe_modules.infra.support_3pp.Spec.Create.source:type_name -> recipe_modules.infra.support_3pp.Spec.Create.Source
	11, // 5: recipe_modules.infra.support_3pp.Spec.Create.build:type_name -> recipe_modules.infra.support_3pp.Spec.Create.Build
	12, // 6: recipe_modules.infra.support_3pp.Spec.Create.package:type_name -> recipe_modules.infra.support_3pp.Spec.Create.Package
	13, // 7: recipe_modules.infra.support_3pp.Spec.Create.verify:type_name -> recipe_modules.infra.support_3pp.Spec.Create.Verify
	4,  // 8: recipe_modules.infra.support_3pp.Spec.Create.Source.git:type_name -> recipe_modules.infra.support_3pp.GitSource
	5,  // 9: recipe_modules.infra.support_3pp.Spec.Create.Source.cipd:type_name -> recipe_modules.infra.support_3pp.CipdSource
	6,  // 10: recipe_modules.infra.support_3pp.Spec.Create.Source.script:type_name -> recipe_modules.infra.support_3pp.ScriptSource
	7,  // 11: recipe_modules.infra.support_3pp.Spec.Create.Source.url:type_name -> recipe_modules.infra.support_3pp.UrlSource
	1,  // 12: recipe_modules.infra.support_3pp.Spec.Create.Package.install_mode:type_name -> recipe_modules.infra.support_3pp.Spec.Create.Package.InstallMode
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_recipe_modules_support_3pp_spec_proto_init() }
func file_recipe_modules_support_3pp_spec_proto_init() {
	if File_recipe_modules_support_3pp_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recipe_modules_support_3pp_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemverRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CipdSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec_Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec_Create_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec_Create_Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec_Create_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recipe_modules_support_3pp_spec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spec_Create_Verify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_recipe_modules_support_3pp_spec_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Spec_Create_Source_Git)(nil),
		(*Spec_Create_Source_Cipd)(nil),
		(*Spec_Create_Source_Script)(nil),
		(*Spec_Create_Source_Url)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recipe_modules_support_3pp_spec_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_recipe_modules_support_3pp_spec_proto_goTypes,
		DependencyIndexes: file_recipe_modules_support_3pp_spec_proto_depIdxs,
		EnumInfos:         file_recipe_modules_support_3pp_spec_proto_enumTypes,
		MessageInfos:      file_recipe_modules_support_3pp_spec_proto_msgTypes,
	}.Build()
	File_recipe_modules_support_3pp_spec_proto = out.File
	file_recipe_modules_support_3pp_spec_proto_rawDesc = nil
	file_recipe_modules_support_3pp_spec_proto_goTypes = nil
	file_recipe_modules_support_3pp_spec_proto_depIdxs = nil
}
