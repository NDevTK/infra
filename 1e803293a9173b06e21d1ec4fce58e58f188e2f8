{
  "comments": [
    {
      "key": {
        "uuid": "209a8f34_42c6fe41",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-10-31T00:44:10Z",
      "side": 1,
      "message": "Why does this need to be a pipeline? Seems like we could do this synchronously with a service.",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "915870f1_1f30a239",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "If the requested commit position doesn\u0027t map to a build, a try job is needed, hence doing this in a pipeline",
      "parentUuid": "209a8f34_42c6fe41",
      "range": {
        "startLine": 19,
        "startChar": 6,
        "endLine": 19,
        "endChar": 37
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86097d8d_20362404",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-10-31T00:44:10Z",
      "side": 1,
      "message": "IMHO the assumptions in this pipeline are a bit troubling. Doesn\u0027t seem like this pipeline should care about the context in which it\u0027s being called. It should just take a commit position, and return the sha for the nearest build number. All the other logic should happen in the calling layers.",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 13
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be74b83d_3b5db8e4",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86097d8d_20362404",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 13
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54b03703_f074948b",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1002882
      },
      "writtenOn": "2017-10-27T20:51:42Z",
      "side": 1,
      "message": "How we arrive at this assumption? Are there cases that defeat this assumption?",
      "range": {
        "startLine": 27,
        "startChar": 52,
        "endLine": 29,
        "endChar": 39
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b1fe616_01363a4f",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "Per new design this will be handled outside this pipeline. This pipeline will be kept as simple as possible.",
      "parentUuid": "54b03703_f074948b",
      "range": {
        "startLine": 27,
        "startChar": 52,
        "endLine": 29,
        "endChar": 39
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2fbdeac5_91912ce6",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1002882
      },
      "writtenOn": "2017-10-27T20:51:42Z",
      "side": 1,
      "message": "Do we plan to get rid of this assumption or not? If so, a TODO is helpful.\n\nDoes this pipeline only work after a regression range is identified, or it also works from the every beginning of an analysis?",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 75
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f898347_bf13a460",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "No longer applicable per new design.",
      "parentUuid": "2fbdeac5_91912ce6",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 75
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5893409_977171ff",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-10-31T00:44:10Z",
      "side": 1,
      "message": "master_name",
      "range": {
        "startLine": 37,
        "startChar": 27,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3378acef_70334c0b",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5893409_977171ff",
      "range": {
        "startLine": 37,
        "startChar": 27,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fe223f0_ed56c0d0",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-10-31T00:44:10Z",
      "side": 1,
      "message": "builder_name\n\nthese \u0027original\u0027 fields aren\u0027t used afaik.",
      "range": {
        "startLine": 38,
        "startChar": 28,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c30c666b_d44322a0",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fe223f0_ed56c0d0",
      "range": {
        "startLine": 38,
        "startChar": 28,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae33b4fc_ba37ef6b",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1002882
      },
      "writtenOn": "2017-10-27T20:51:42Z",
      "side": 1,
      "message": "What if the build includes commits [100, 200], last tested commit is 190, and the current commit to be tested is 150?",
      "range": {
        "startLine": 53,
        "startChar": 35,
        "endLine": 55,
        "endChar": 18
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d400d15d_f31fa6b9",
        "filename": "appengine/findit/pipelines/flake_failure/get_sha_for_commit_position_pipeline.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "With the new approach this is no longer applicable.",
      "parentUuid": "ae33b4fc_ba37ef6b",
      "range": {
        "startLine": 53,
        "startChar": 35,
        "endLine": 55,
        "endChar": 18
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99b3490e_68a299b2",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1002882
      },
      "writtenOn": "2017-10-27T20:51:42Z",
      "side": 1,
      "message": "You could use \"git reparent-branch\" to set this CL depend on the other so that such change won\u0027t show up as a diff in this CL. That would help code-review a lot.\n\nYou may check the \"git reparent-branch -h\" on how-to.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 25
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "220b6b88_bf901ed1",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-10-31T17:07:47Z",
      "side": 1,
      "message": "you can also set the upstream w git branch --set-upstream-to \u003csome local branch\u003e which is what I had to do. git reparent-branch didn\u0027t work.",
      "parentUuid": "99b3490e_68a299b2",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 25
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3accdf33_b219136c",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1119424
      },
      "writtenOn": "2017-11-30T20:34:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "220b6b88_bf901ed1",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 25
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d5f9589_80a23889",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-11-02T16:49:42Z",
      "side": 1,
      "message": "GetEarliestBuildWithCommitPosition",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 101,
        "endChar": 30
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b375a395_d9f2ecb0",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-11-02T16:49:42Z",
      "side": 1,
      "message": "Create a structured object BuildNumberRange? This will prevent cases where the caller accidentally flips the inputs, and it allows someone to express [x, infinity] etc. This function would look cleaner if you created a BuildNumberRange (or just Range) Structured object and the function header would be\n\ndef ...(master_name, builder_name, commit_position, build_range\u003dNone):\n  if not build_range:\n    build_range \u003d BuildRange(0, GetLatestBuildNumber(master_name, builder_name))\n\n  lower \u003d build_range.lo\n  higher \u003d build_range.hi\n  Bisect()",
      "range": {
        "startLine": 102,
        "startChar": 31,
        "endLine": 103,
        "endChar": 29
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3c153fe_01b28ade",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-11-02T16:49:42Z",
      "side": 1,
      "message": "This is a good spot to return None and handle it in the calling code.",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 32
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c2ce49_eaeee627",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-11-02T16:49:42Z",
      "side": 1,
      "message": "Same as above, I think this is a good spot to return None. I think it\u0027s fair for this function to assume given range of build numbers is within bounds. I think this is likely to hide some bugs.",
      "range": {
        "startLine": 145,
        "startChar": 5,
        "endLine": 145,
        "endChar": 30
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cc346cf_cc4bf322",
        "filename": "appengine/findit/waterfall/build_util.py",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1178184
      },
      "writtenOn": "2017-11-02T16:49:42Z",
      "side": 1,
      "message": "nit: I think binary search looks better in recursive form, but up to you.",
      "range": {
        "startLine": 149,
        "startChar": 0,
        "endLine": 165,
        "endChar": 42
      },
      "revId": "1e803293a9173b06e21d1ec4fce58e58f188e2f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}