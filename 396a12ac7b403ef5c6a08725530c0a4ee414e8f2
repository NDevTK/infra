{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b7023ca2_f6871c45",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 365,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "expanding this a little could make it more clear, eg\n\nStores combined results of all runs of a single test variant in a single invocation.",
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16abbcb7_1ab0fd3d",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 371,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "rather than see also, \"this has the same value as\"?",
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be178c88_a6bd14fa",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 374,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "Mention the sort order?",
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70ab7b31_63c908f1",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 374,
      "author": {
        "id": 1386944
      },
      "writtenOn": "2022-04-05T01:19:02Z",
      "side": 1,
      "message": "Also the truncation, this only stores 8 bytes of hash whereas sha256 returns 32 bytes (256 bits).",
      "parentUuid": "be178c88_a6bd14fa",
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b719c50_cab4da76",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 380,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "of",
      "range": {
        "startLine": 380,
        "startChar": 53,
        "endLine": 380,
        "endChar": 55
      },
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fc16c2d_21f079f4",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 405,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "Can you add the explanation of why you don\u0027t need to separate expected and unexpected skips here?",
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fecd7952_b7da061d",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 416,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "Can you please order the columns in the table definition above in the same order as the primary key here?",
      "range": {
        "startLine": 416,
        "startChar": 31,
        "endLine": 416,
        "endChar": 44
      },
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9d55a1a_3e5311a1",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 451,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "Do we know the answer to this now from using this in ResultDB?",
      "range": {
        "startLine": 449,
        "startChar": 33,
        "endLine": 451,
        "endChar": 27
      },
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a251798_3a3144f6",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 451,
      "author": {
        "id": 1386944
      },
      "writtenOn": "2022-04-05T01:19:02Z",
      "side": 1,
      "message": "I think listing tests alphabetically will be no problem, but doing a regexp search could be a problem if it needs to scan the whole (or a significant fraction of) the table. I recall full-table scan on UniqueTestVariants in ResultDB was \u003e30 seconds.",
      "parentUuid": "c9d55a1a_3e5311a1",
      "range": {
        "startLine": 449,
        "startChar": 33,
        "endLine": 451,
        "endChar": 27
      },
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ad3dd50_d534aa71",
        "filename": "go/src/infra/appengine/weetbix/internal/span/init_db.sql",
        "patchSetId": 6
      },
      "lineNbr": 462,
      "author": {
        "id": 1370239
      },
      "writtenOn": "2022-04-04T13:30:26Z",
      "side": 1,
      "message": "Please repeat the comments for the fields",
      "revId": "396a12ac7b403ef5c6a08725530c0a4ee414e8f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}