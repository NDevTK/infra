{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "97a08063_6d22c6d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003190
      },
      "writtenOn": "2020-12-04T22:07:31Z",
      "side": 1,
      "message": "Now changed the recipe to take a inputs proto message.\n\nIn order to specify analyzers in such a message, I think we have to specify them by listing names, which means I\u0027d like to add a mapping from names to analyzers. (Uploaded a separate CL to do that). WDYT?",
      "revId": "c48a283d547ba2b21cbce8a24a11c26999193b7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faa68a94_06c38b62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1114919
      },
      "writtenOn": "2020-12-05T02:11:00Z",
      "side": 1,
      "message": "SGTM, though TBH my ideal solution would be:\n * proto enum declared in tricium recipe module\n * legacy analyzers referencing the proto enum values as name in tricium recipe module\n * and downstream recipes like this one provide list(proto enums), and can obviously accept typed list of enums as its own proto input.\nThe thing to check before going this route is whether recipe engine proto interop supports unmarshaling of *string* enum values. It\u0027s be horrible if downstream recipe input has to be [1,7,13]; we want [\"ANALYZER_SPELL_CHECK\", \"ANALYZER_FOO\", \"ANALYZER_BAR\"].\n\nYiwei, do you have thoughts?",
      "parentUuid": "97a08063_6d22c6d9",
      "revId": "c48a283d547ba2b21cbce8a24a11c26999193b7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "842e320f_1d67de75",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1114919
      },
      "writtenOn": "2020-12-05T02:11:00Z",
      "side": 1,
      "message": "I think it\u0027s worth trying this out, but consider suggestion for improvement.",
      "revId": "c48a283d547ba2b21cbce8a24a11c26999193b7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e04d84c1_ca495487",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003190
      },
      "writtenOn": "2020-12-05T22:13:45Z",
      "side": 1,
      "message": "I see how using protos to define the analyzers, so that we don\u0027t have to use this string mapping, although I\u0027m not convinced it\u0027s worth it.\n\nReasons:\n - In general, I think that most projects that use analyzers in the future will have their own dedicated recipe to run analyzers; using a proto input like this will be the exception rather than the usual case.\n - One disadvantage of specifying analyzers by string name is that it\u0027s possible to accidentally make a typo; but in this case I think this should be caught fairly easily by verifying that a build runs as expected.",
      "parentUuid": "faa68a94_06c38b62",
      "revId": "c48a283d547ba2b21cbce8a24a11c26999193b7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "464b79ce_78c67b96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003190
      },
      "writtenOn": "2020-12-05T22:13:45Z",
      "side": 1,
      "message": "LED example run specifying just Spellchecker:\nhttps://ci.chromium.org/swarming/task/504cc30b44e5c810?server\u003dchromium-swarm.appspot.com",
      "revId": "c48a283d547ba2b21cbce8a24a11c26999193b7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}