{
  "comments": [
    {
      "key": {
        "uuid": "66081be6_4fb36d52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2020-08-05T07:00:15Z",
      "side": 1,
      "message": "Comment removed by: Joanna Wang",
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdb57006_db19fce0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2020-08-05T07:14:17Z",
      "side": 1,
      "message": "per comment:\nhttps://chromium-review.googlesource.com/c/infra/infra/+/2335658/2/appengine/monorail/businesslogic/test/work_env_test.py#2799\n\n\npossible weird situations:\n1) an IssueDelta conflicts with itself:\n\n  IssueDelta(blocking_add\u003d1, blocking_remove\u003d1)\n  this is somewhat already handled in ApplyAllIssueChanges.\n  if issue has blocking \u003d 1, we remove it\n  if issue does not, we add it\n  No change in this behavior\n2) a_delta \u003d IssueDelta(blocking_add \u003d issue_b) b_delta \u003d IssueDelta(blocking_add \u003d issue_a)\n  this is weird but allowed, it doesn\u0027t break anything\n3) a_delta \u003d IssueDelta(merged_into \u003d issue_b) b_delta \u003d IssueDelta(merged_into \u003d issue_a)\n  weird but allowed, it doesn\u0027t break anything.\n4) a_delta \u003d IssueDelta(blocking_add \u003d issue_b) b_delta \u003d IssueDelta(blocked_on_remove \u003d issue_a)\n  What this CL prevents.\n(2), (3), and (4) don\u0027t break anything. I originally wanted to let them all happen, because I thought as long as it doesn\u0027t break monorail, users should be responsible for request issue updates that make sense. \nBefore this CL, (4) would have resulted in \n`issue_a.blocking \u003d []` and `issue_b.blocked_on \u003d [issue_a]` because impacted changes from another\u0027s delta are applied after its own delta FOR RAM ONLY.\nDuring the UpdateIssues, `_UpdateIsssuesRelation()` would have recorded the `issue_b.blocked_on \u003d [issue_a]` relationship, which effectively means issue_a.blocking\u003d[issue_b].\n\nI was fine with this, but with https://chromium-review.googlesource.com/c/infra/infra/+/2335658/2\n\nthis also would have resulted in two comments (main, and impacted), with impacted_comment being the latest comment. The latest comment(impacted comment) would describe issue_a.blocking: \u0027-issue_b\u0027 which would not reflect the actual latest issue state.\n\n(2) (3) are still fine afaict.",
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cab0373_65ec4b23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374960
      },
      "writtenOn": "2020-08-05T17:02:10Z",
      "side": 1,
      "message": "Thank you for clarifying what happens with each of these\n\nfor 3) I didn\u0027t realize we allowed merge-cycles, but I now see that\u0027s possible even through the UI. I guess 2) is the same idea",
      "parentUuid": "cdb57006_db19fce0",
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9549883_940d8c03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374960
      },
      "writtenOn": "2020-08-05T17:02:10Z",
      "side": 1,
      "message": "Thank you for the thorough testing!",
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12049a49_6652d198",
        "filename": "appengine/monorail/tracker/test/tracker_helpers_test.py",
        "patchSetId": 2
      },
      "lineNbr": 2021,
      "author": {
        "id": 1374960
      },
      "writtenOn": "2020-08-05T17:02:10Z",
      "side": 1,
      "message": "one fewer newlines here?",
      "range": {
        "startLine": 2021,
        "startChar": 0,
        "endLine": 2021,
        "endChar": 0
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5133f5e2_1e16e8ec",
        "filename": "appengine/monorail/tracker/test/tracker_helpers_test.py",
        "patchSetId": 2
      },
      "lineNbr": 2021,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2020-08-05T17:26:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12049a49_6652d198",
      "range": {
        "startLine": 2021,
        "startChar": 0,
        "endLine": 2021,
        "endChar": 0
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bee5714a_1b182ad1",
        "filename": "appengine/monorail/tracker/tracker_helpers.py",
        "patchSetId": 2
      },
      "lineNbr": 1383,
      "author": {
        "id": 1374960
      },
      "writtenOn": "2020-08-05T17:02:10Z",
      "side": 1,
      "message": "nit/optional: I think if we operate on conflict_iids and save the ref conversion until the final if statement, then we could avoid defining this variable until when it is used for the error message creation.\n\nHowever the way you have it written means that changes coming from blocking_remove will all be printed before changes coming from blocked_on_remove, which might be nice.",
      "range": {
        "startLine": 1383,
        "startChar": 0,
        "endLine": 1383,
        "endChar": 22
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1df68988_54053301",
        "filename": "appengine/monorail/tracker/tracker_helpers.py",
        "patchSetId": 2
      },
      "lineNbr": 1383,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2020-08-05T17:26:50Z",
      "side": 1,
      "message": "done",
      "parentUuid": "bee5714a_1b182ad1",
      "range": {
        "startLine": 1383,
        "startChar": 0,
        "endLine": 1383,
        "endChar": 22
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1eca3d8_9aff7bbb",
        "filename": "appengine/monorail/tracker/tracker_helpers.py",
        "patchSetId": 2
      },
      "lineNbr": 1391,
      "author": {
        "id": 1374960
      },
      "writtenOn": "2020-08-05T17:02:10Z",
      "side": 1,
      "message": "If I understand the code correctly, not all of these iids are necessarily conflicting. \n\nIf that is correct, then I think a different name would be good for this variable.",
      "range": {
        "startLine": 1391,
        "startChar": 8,
        "endLine": 1391,
        "endChar": 20
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee3294d6_15bc5d5f",
        "filename": "appengine/monorail/tracker/tracker_helpers.py",
        "patchSetId": 2
      },
      "lineNbr": 1391,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2020-08-05T17:26:50Z",
      "side": 1,
      "message": "-\u003e `possible_conflict_iids`",
      "parentUuid": "d1eca3d8_9aff7bbb",
      "range": {
        "startLine": 1391,
        "startChar": 8,
        "endLine": 1391,
        "endChar": 20
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d1bb3d_c0997795",
        "filename": "appengine/monorail/tracker/tracker_helpers.py",
        "patchSetId": 2
      },
      "lineNbr": 1413,
      "author": {
        "id": 1374960
      },
      "writtenOn": "2020-08-05T17:02:10Z",
      "side": 1,
      "message": "Consider defining an IssueStr helper in this class that we can use instead of having to generate these refs here and in the tests.",
      "range": {
        "startLine": 1413,
        "startChar": 2,
        "endLine": 1413,
        "endChar": 15
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7335f9d0_470fc0e3",
        "filename": "appengine/monorail/tracker/tracker_helpers.py",
        "patchSetId": 2
      },
      "lineNbr": 1413,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2020-08-05T17:26:50Z",
      "side": 1,
      "message": "Assuming something like\n```\nIssueStr(issue):\n  return \u0027%s:%d\u0027 % (issue.project_name, issue.local_id)\n```\n\nWe won\u0027t always have the full issue object readily available to us.\nE.g. for _AssertNoConflictingDeltas, a lot of times, we only have the iid when we want a ref for it and getting iid\u0027s full issue object would require creating another dict before hand as well.\n\nWith the current state/needs, I don\u0027t see IssueStr helping much.",
      "parentUuid": "74d1bb3d_c0997795",
      "range": {
        "startLine": 1413,
        "startChar": 2,
        "endLine": 1413,
        "endChar": 15
      },
      "revId": "e9be0d6b424681321dd682aacd56cbe1e8a441d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}